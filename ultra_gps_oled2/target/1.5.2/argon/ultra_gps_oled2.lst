
c:/Users/Benja/Documents/IOT/BikeSafety/ultra_gps_oled2/target/1.5.2/argon/ultra_gps_oled2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006150  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000da170  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000494  2003d884  000da174  0001d884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000ad8  2003dd18  2003dd18  0002dd18  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000da608  000da608  0002a608  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da630  000da630  0002a630  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001a0ee2  00000000  00000000  0002a634  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001ff96  00000000  00000000  001cb516  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002acc5  00000000  00000000  001eb4ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002ec8  00000000  00000000  00216171  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000057a8  00000000  00000000  00219039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004f89c  00000000  00000000  0021e7e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005653f  00000000  00000000  0026e07d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00112359  00000000  00000000  002c45bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000eaf4  00000000  00000000  003d6918  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f8ce 	bl	d91d2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f8d3 	bl	d91e8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d884 	.word	0x2003d884
   d404c:	000da174 	.word	0x000da174
   d4050:	2003dd18 	.word	0x2003dd18
   d4054:	2003dd18 	.word	0x2003dd18
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 fe85 	bl	d7d6c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000da168 	.word	0x000da168
   d4084:	000da0e0 	.word	0x000da0e0

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bc50 	b.w	d492c <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fbd3 	bl	d4838 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 be2b 	b.w	d7cf0 <_post_loop>

000d409a <_ZdlPv>:
   d409a:	f003 bb7b 	b.w	d7794 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f003 bb79 	b.w	d7794 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 fad6 	bl	d765c <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d740d 	.word	0x000d740d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d40c8:	4770      	bx	lr

000d40ca <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40ca:	4770      	bx	lr

000d40cc <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d40cc:	3008      	adds	r0, #8
   d40ce:	f001 bfd3 	b.w	d6078 <_ZN7FatFile5writeEPKvj>
	...

000d40d4 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40d6:	4602      	mov	r2, r0
   d40d8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40da:	7913      	ldrb	r3, [r2, #4]
   d40dc:	6895      	ldr	r5, [r2, #8]
   d40de:	b133      	cbz	r3, d40ee <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40e0:	b93d      	cbnz	r5, d40f2 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40e2:	490c      	ldr	r1, [pc, #48]	; (d4114 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40e4:	b004      	add	sp, #16
   d40e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40ea:	f003 bd3b 	b.w	d7b64 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d40ee:	4b0a      	ldr	r3, [pc, #40]	; (d4118 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d40f0:	e000      	b.n	d40f4 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d40f2:	4b0a      	ldr	r3, [pc, #40]	; (d411c <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d40f4:	7b16      	ldrb	r6, [r2, #12]
   d40f6:	4c0a      	ldr	r4, [pc, #40]	; (d4120 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d40f8:	490a      	ldr	r1, [pc, #40]	; (d4124 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40fa:	7b52      	ldrb	r2, [r2, #13]
   d40fc:	9202      	str	r2, [sp, #8]
   d40fe:	2e01      	cmp	r6, #1
   d4100:	bf08      	it	eq
   d4102:	4621      	moveq	r1, r4
   d4104:	9101      	str	r1, [sp, #4]
   d4106:	9500      	str	r5, [sp, #0]
   d4108:	4a07      	ldr	r2, [pc, #28]	; (d4128 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d410a:	2100      	movs	r1, #0
   d410c:	f003 fd6d 	bl	d7bea <_ZN5Print11printf_implEbPKcz>
  }
   d4110:	b004      	add	sp, #16
   d4112:	bd70      	pop	{r4, r5, r6, pc}
   d4114:	000d9481 	.word	0x000d9481
   d4118:	000d9ddf 	.word	0x000d9ddf
   d411c:	000d9470 	.word	0x000d9470
   d4120:	000d9479 	.word	0x000d9479
   d4124:	000d947d 	.word	0x000d947d
   d4128:	000d9497 	.word	0x000d9497

000d412c <_ZN6SdFileD0Ev>:
   d412c:	b510      	push	{r4, lr}
   d412e:	212c      	movs	r1, #44	; 0x2c
   d4130:	4604      	mov	r4, r0
   d4132:	f004 fab7 	bl	d86a4 <_ZdlPvj>
   d4136:	4620      	mov	r0, r4
   d4138:	bd10      	pop	{r4, pc}

000d413a <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d413a:	b507      	push	{r0, r1, r2, lr}
   d413c:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d413e:	2201      	movs	r2, #1
   d4140:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4144:	3008      	adds	r0, #8
   d4146:	4619      	mov	r1, r3
   d4148:	f001 ff96 	bl	d6078 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d414c:	b003      	add	sp, #12
   d414e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4154 <_Z10helloWorldv>:
			}
		}
	}
}

void helloWorld() {
   d4154:	b510      	push	{r4, lr}
	display.clearDisplay();
   d4156:	4c0d      	ldr	r4, [pc, #52]	; (d418c <_Z10helloWorldv+0x38>)
   d4158:	4620      	mov	r0, r4
   d415a:	f000 fe67 	bl	d4e2c <_ZN16Adafruit_SSD130612clearDisplayEv>
	display.setTextSize(1);
   d415e:	4620      	mov	r0, r4
   d4160:	2101      	movs	r1, #1
   d4162:	f001 f9d5 	bl	d5510 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d4166:	4620      	mov	r0, r4
   d4168:	2101      	movs	r1, #1
   d416a:	f001 f9d6 	bl	d551a <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(20,5);
   d416e:	4620      	mov	r0, r4
   d4170:	2205      	movs	r2, #5
   d4172:	2114      	movs	r1, #20
   d4174:	f001 f9c9 	bl	d550a <_ZN12Adafruit_GFX9setCursorEss>
  display.println("GPS Initializing");
   d4178:	4620      	mov	r0, r4
   d417a:	4905      	ldr	r1, [pc, #20]	; (d4190 <_Z10helloWorldv+0x3c>)
   d417c:	f003 fd09 	bl	d7b92 <_ZN5Print7printlnEPKc>
	display.display();
   d4180:	4620      	mov	r0, r4
}
   d4182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	display.clearDisplay();
	display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(20,5);
  display.println("GPS Initializing");
	display.display();
   d4186:	f000 bf8b 	b.w	d50a0 <_ZN16Adafruit_SSD13067displayEv>
   d418a:	bf00      	nop
   d418c:	2003e358 	.word	0x2003e358
   d4190:	000d94b5 	.word	0x000d94b5

000d4194 <_Z11waitForEchoiil>:
  cm = duration / 58.0; //the speed of sound?//
    // Serial.printf("Duration = %0.2f, Distance in CM: %0.2f \n",duration,cm);
    delay(100);
}

void waitForEcho(int pin, int value, long timeout){
   d4194:	b570      	push	{r4, r5, r6, lr}
   d4196:	4605      	mov	r5, r0
   d4198:	4614      	mov	r4, r2
   d419a:	460e      	mov	r6, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d419c:	f003 f946 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
  //-----this listens for the pulse to return---//
    long giveupTime = millis() + timeout;
    while (digitalRead(pin) != value && millis() < giveupTime) {}
   d41a0:	b2ad      	uxth	r5, r5
    delay(100);
}

void waitForEcho(int pin, int value, long timeout){
  //-----this listens for the pulse to return---//
    long giveupTime = millis() + timeout;
   d41a2:	4404      	add	r4, r0
    while (digitalRead(pin) != value && millis() < giveupTime) {}
   d41a4:	4628      	mov	r0, r5
   d41a6:	f004 f9f9 	bl	d859c <digitalRead>
   d41aa:	42b0      	cmp	r0, r6
   d41ac:	d003      	beq.n	d41b6 <_Z11waitForEchoiil+0x22>
   d41ae:	f003 f93d 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
   d41b2:	42a0      	cmp	r0, r4
   d41b4:	d3f6      	bcc.n	d41a4 <_Z11waitForEchoiil+0x10>
   d41b6:	bd70      	pop	{r4, r5, r6, pc}

000d41b8 <_Z16sendTriggerPulsei>:
}

void sendTriggerPulse(int pin){
   d41b8:	b510      	push	{r4, lr}
  //------this sends the pulse----//
    digitalWrite(pin, HIGH);
   d41ba:	b284      	uxth	r4, r0
   d41bc:	2101      	movs	r1, #1
   d41be:	4620      	mov	r0, r4
   d41c0:	f004 f9d3 	bl	d856a <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d41c4:	200a      	movs	r0, #10
   d41c6:	f003 f921 	bl	d740c <HAL_Delay_Microseconds>
    delayMicroseconds(10);
    digitalWrite(pin, LOW);
   d41ca:	4620      	mov	r0, r4
   d41cc:	2100      	movs	r1, #0
}
   d41ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void sendTriggerPulse(int pin){
  //------this sends the pulse----//
    digitalWrite(pin, HIGH);
    delayMicroseconds(10);
    digitalWrite(pin, LOW);
   d41d2:	f004 b9ca 	b.w	d856a <digitalWrite>
	...

000d41d8 <_Z18UltraSonicFunctionv>:
  display.setTextColor(WHITE);
  display.setCursor(20,5);
  display.println("GPS Initializing");
	display.display();
}
void UltraSonicFunction(){
   d41d8:	b538      	push	{r3, r4, r5, lr}
  //----- this calculates the disance every 3 to 4 seconds -----//
  sendTriggerPulse(trigPin);
   d41da:	4b12      	ldr	r3, [pc, #72]	; (d4224 <_Z18UltraSonicFunctionv+0x4c>)
  waitForEcho(echoPin, HIGH, 100);
   d41dc:	4d12      	ldr	r5, [pc, #72]	; (d4228 <_Z18UltraSonicFunctionv+0x50>)
  display.println("GPS Initializing");
	display.display();
}
void UltraSonicFunction(){
  //----- this calculates the disance every 3 to 4 seconds -----//
  sendTriggerPulse(trigPin);
   d41de:	6818      	ldr	r0, [r3, #0]
   d41e0:	f7ff ffea 	bl	d41b8 <_Z16sendTriggerPulsei>
  waitForEcho(echoPin, HIGH, 100);
   d41e4:	2264      	movs	r2, #100	; 0x64
   d41e6:	2101      	movs	r1, #1
   d41e8:	6828      	ldr	r0, [r5, #0]
   d41ea:	f7ff ffd3 	bl	d4194 <_Z11waitForEchoiil>
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d41ee:	f003 f915 	bl	d741c <HAL_Timer_Get_Micro_Seconds>
  long startTime = micros();
  waitForEcho(echoPin, LOW, 100);
   d41f2:	2264      	movs	r2, #100	; 0x64
   d41f4:	4604      	mov	r4, r0
   d41f6:	2100      	movs	r1, #0
   d41f8:	6828      	ldr	r0, [r5, #0]
   d41fa:	f7ff ffcb 	bl	d4194 <_Z11waitForEchoiil>
   d41fe:	f003 f90d 	bl	d741c <HAL_Timer_Get_Micro_Seconds>
  long endTime = micros();
  float duration = endTime - startTime;
  cm = duration / 58.0; //the speed of sound?//
   d4202:	1b00      	subs	r0, r0, r4
   d4204:	ee07 0a90 	vmov	s15, r0
   d4208:	eddf 6a08 	vldr	s13, [pc, #32]	; d422c <_Z18UltraSonicFunctionv+0x54>
   d420c:	4b08      	ldr	r3, [pc, #32]	; (d4230 <_Z18UltraSonicFunctionv+0x58>)
   d420e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    // Serial.printf("Duration = %0.2f, Distance in CM: %0.2f \n",duration,cm);
    delay(100);
   d4212:	2064      	movs	r0, #100	; 0x64
  waitForEcho(echoPin, HIGH, 100);
  long startTime = micros();
  waitForEcho(echoPin, LOW, 100);
  long endTime = micros();
  float duration = endTime - startTime;
  cm = duration / 58.0; //the speed of sound?//
   d4214:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d4218:	ed83 7a00 	vstr	s14, [r3]
    // Serial.printf("Duration = %0.2f, Distance in CM: %0.2f \n",duration,cm);
    delay(100);
}
   d421c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  waitForEcho(echoPin, LOW, 100);
  long endTime = micros();
  float duration = endTime - startTime;
  cm = duration / 58.0; //the speed of sound?//
    // Serial.printf("Duration = %0.2f, Distance in CM: %0.2f \n",duration,cm);
    delay(100);
   d4220:	f003 bd30 	b.w	d7c84 <delay>
   d4224:	2003d884 	.word	0x2003d884
   d4228:	2003d888 	.word	0x2003d888
   d422c:	42680000 	.word	0x42680000
   d4230:	2003e1b4 	.word	0x2003e1b4

000d4234 <_Z25doSomethingWhenDistanceIsi>:
    digitalWrite(pin, HIGH);
    delayMicroseconds(10);
    digitalWrite(pin, LOW);
}

void doSomethingWhenDistanceIs(int distanceIs){
   d4234:	b510      	push	{r4, lr}
  //-----this is the alarm set to go off at 1 meter----//
  // UltraSonicFunction();
    if (cm<distanceIs){
   d4236:	ee07 0a90 	vmov	s15, r0
   d423a:	4b13      	ldr	r3, [pc, #76]	; (d4288 <_Z25doSomethingWhenDistanceIsi+0x54>)
   d423c:	4c13      	ldr	r4, [pc, #76]	; (d428c <_Z25doSomethingWhenDistanceIsi+0x58>)
   d423e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d4242:	edd3 7a00 	vldr	s15, [r3]
        if (beam_status==false){
   d4246:	7823      	ldrb	r3, [r4, #0]
}

void doSomethingWhenDistanceIs(int distanceIs){
  //-----this is the alarm set to go off at 1 meter----//
  // UltraSonicFunction();
    if (cm<distanceIs){
   d4248:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4250:	dd0c      	ble.n	d426c <_Z25doSomethingWhenDistanceIsi+0x38>
        if (beam_status==false){
   d4252:	b99b      	cbnz	r3, d427c <_Z25doSomethingWhenDistanceIsi+0x48>
            
            Serial.println("less than 125cm");
   d4254:	f003 fe8a 	bl	d7f6c <_Z16_fetch_usbserialv>
   d4258:	490d      	ldr	r1, [pc, #52]	; (d4290 <_Z25doSomethingWhenDistanceIsi+0x5c>)
   d425a:	f003 fc9a 	bl	d7b92 <_ZN5Print7printlnEPKc>
            logStart = !logStart;
   d425e:	4a0d      	ldr	r2, [pc, #52]	; (d4294 <_Z25doSomethingWhenDistanceIsi+0x60>)
   d4260:	7813      	ldrb	r3, [r2, #0]
   d4262:	f083 0301 	eor.w	r3, r3, #1
   d4266:	7013      	strb	r3, [r2, #0]
            beam_status = true;   
   d4268:	2301      	movs	r3, #1
   d426a:	e006      	b.n	d427a <_Z25doSomethingWhenDistanceIsi+0x46>
        }
    } else {
        if (beam_status==false){
   d426c:	b133      	cbz	r3, d427c <_Z25doSomethingWhenDistanceIsi+0x48>
            
        } else {
            Serial.print("clear");
   d426e:	f003 fe7d 	bl	d7f6c <_Z16_fetch_usbserialv>
   d4272:	4909      	ldr	r1, [pc, #36]	; (d4298 <_Z25doSomethingWhenDistanceIsi+0x64>)
   d4274:	f003 fc76 	bl	d7b64 <_ZN5Print5printEPKc>
            beam_status = false;
   d4278:	2300      	movs	r3, #0
   d427a:	7023      	strb	r3, [r4, #0]
        }
    }
    delay(1000);
   d427c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   d4280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        } else {
            Serial.print("clear");
            beam_status = false;
        }
    }
    delay(1000);
   d4284:	f003 bcfe 	b.w	d7c84 <delay>
   d4288:	2003e1b4 	.word	0x2003e1b4
   d428c:	2003dd29 	.word	0x2003dd29
   d4290:	000d94c6 	.word	0x000d94c6
   d4294:	2003e3c4 	.word	0x2003e3c4
   d4298:	000d94d6 	.word	0x000d94d6

000d429c <_ZN5Print6printfIIfEEEjPKcDpT_>:
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d429c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d429e:	4604      	mov	r4, r0
    {
        return this->printf_impl(false, format, args...);
   d42a0:	ee10 0a10 	vmov	r0, s0
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d42a4:	460d      	mov	r5, r1
    {
        return this->printf_impl(false, format, args...);
   d42a6:	f004 fcbd 	bl	d8c24 <__aeabi_f2d>
   d42aa:	462a      	mov	r2, r5
   d42ac:	e9cd 0100 	strd	r0, r1, [sp]
   d42b0:	2100      	movs	r1, #0
   d42b2:	4620      	mov	r0, r4
   d42b4:	f003 fc99 	bl	d7bea <_ZN5Print11printf_implEbPKcz>
    }
   d42b8:	b003      	add	sp, #12
   d42ba:	bd30      	pop	{r4, r5, pc}

000d42bc <_ZN5Print6printfIIfffEEEjPKcDpT_>:
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d42bc:	b530      	push	{r4, r5, lr}
   d42be:	4604      	mov	r4, r0
   d42c0:	b089      	sub	sp, #36	; 0x24
    {
        return this->printf_impl(false, format, args...);
   d42c2:	ee11 0a10 	vmov	r0, s2
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d42c6:	ed8d 0a07 	vstr	s0, [sp, #28]
   d42ca:	460d      	mov	r5, r1
   d42cc:	edcd 0a06 	vstr	s1, [sp, #24]
    {
        return this->printf_impl(false, format, args...);
   d42d0:	f004 fca8 	bl	d8c24 <__aeabi_f2d>
   d42d4:	eddd 0a06 	vldr	s1, [sp, #24]
   d42d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d42dc:	ee10 0a90 	vmov	r0, s1
   d42e0:	f004 fca0 	bl	d8c24 <__aeabi_f2d>
   d42e4:	ed9d 0a07 	vldr	s0, [sp, #28]
   d42e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d42ec:	ee10 0a10 	vmov	r0, s0
   d42f0:	f004 fc98 	bl	d8c24 <__aeabi_f2d>
   d42f4:	462a      	mov	r2, r5
   d42f6:	e9cd 0100 	strd	r0, r1, [sp]
   d42fa:	2100      	movs	r1, #0
   d42fc:	4620      	mov	r0, r4
   d42fe:	f003 fc74 	bl	d7bea <_ZN5Print11printf_implEbPKcz>
    }
   d4302:	b009      	add	sp, #36	; 0x24
   d4304:	bd30      	pop	{r4, r5, pc}
	...

000d4308 <_Z8logData2v>:
      delay(2000);
      Serial.printf("Ready for next data log \n");
    }
  }
}
void logData2() {
   d4308:	b513      	push	{r0, r1, r4, lr}
 
  Serial.print("Writing data to SDcard \n");
   d430a:	f003 fe2f 	bl	d7f6c <_Z16_fetch_usbserialv>
   d430e:	491f      	ldr	r1, [pc, #124]	; (d438c <_Z8logData2v+0x84>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4310:	4c1f      	ldr	r4, [pc, #124]	; (d4390 <_Z8logData2v+0x88>)
   d4312:	f003 fc27 	bl	d7b64 <_ZN5Print5printEPKc>
  file.printf("Day: %i, Month %i, Year %i \n", dy, mth, yr);
   d4316:	4a1f      	ldr	r2, [pc, #124]	; (d4394 <_Z8logData2v+0x8c>)
   d4318:	4b1f      	ldr	r3, [pc, #124]	; (d4398 <_Z8logData2v+0x90>)
   d431a:	7812      	ldrb	r2, [r2, #0]
   d431c:	781b      	ldrb	r3, [r3, #0]
   d431e:	9201      	str	r2, [sp, #4]
   d4320:	4a1e      	ldr	r2, [pc, #120]	; (d439c <_Z8logData2v+0x94>)
   d4322:	7812      	ldrb	r2, [r2, #0]
   d4324:	9200      	str	r2, [sp, #0]
   d4326:	2100      	movs	r1, #0
   d4328:	4a1d      	ldr	r2, [pc, #116]	; (d43a0 <_Z8logData2v+0x98>)
   d432a:	4620      	mov	r0, r4
   d432c:	f003 fc5d 	bl	d7bea <_ZN5Print11printf_implEbPKcz>
  file.printf("Time: %02i:%02i:%02i \n",hr,mn,se);
   d4330:	4a1c      	ldr	r2, [pc, #112]	; (d43a4 <_Z8logData2v+0x9c>)
   d4332:	4b1d      	ldr	r3, [pc, #116]	; (d43a8 <_Z8logData2v+0xa0>)
   d4334:	7812      	ldrb	r2, [r2, #0]
   d4336:	781b      	ldrb	r3, [r3, #0]
   d4338:	9201      	str	r2, [sp, #4]
   d433a:	4a1c      	ldr	r2, [pc, #112]	; (d43ac <_Z8logData2v+0xa4>)
   d433c:	7812      	ldrb	r2, [r2, #0]
   d433e:	9200      	str	r2, [sp, #0]
   d4340:	2100      	movs	r1, #0
   d4342:	4a1b      	ldr	r2, [pc, #108]	; (d43b0 <_Z8logData2v+0xa8>)
   d4344:	4620      	mov	r0, r4
   d4346:	f003 fc50 	bl	d7bea <_ZN5Print11printf_implEbPKcz>
	file.printf("lat  %f \nlong %f \nalt %f\n", lat,lon,alt);
   d434a:	4b1a      	ldr	r3, [pc, #104]	; (d43b4 <_Z8logData2v+0xac>)
   d434c:	491a      	ldr	r1, [pc, #104]	; (d43b8 <_Z8logData2v+0xb0>)
   d434e:	ed93 1a00 	vldr	s2, [r3]
   d4352:	4b1a      	ldr	r3, [pc, #104]	; (d43bc <_Z8logData2v+0xb4>)
   d4354:	edd3 0a00 	vldr	s1, [r3]
   d4358:	4b19      	ldr	r3, [pc, #100]	; (d43c0 <_Z8logData2v+0xb8>)
   d435a:	4620      	mov	r0, r4
   d435c:	ed93 0a00 	vldr	s0, [r3]
   d4360:	f7ff ffac 	bl	d42bc <_ZN5Print6printfIIfffEEEjPKcDpT_>
   d4364:	4b17      	ldr	r3, [pc, #92]	; (d43c4 <_Z8logData2v+0xbc>)
   d4366:	4a18      	ldr	r2, [pc, #96]	; (d43c8 <_Z8logData2v+0xc0>)
   d4368:	781b      	ldrb	r3, [r3, #0]
   d436a:	2100      	movs	r1, #0
   d436c:	4620      	mov	r0, r4
   d436e:	f003 fc3c 	bl	d7bea <_ZN5Print11printf_implEbPKcz>
	file.printf("Satellites in view: %i \n",sat);
	file.println("");
   d4372:	4916      	ldr	r1, [pc, #88]	; (d43cc <_Z8logData2v+0xc4>)
   d4374:	4620      	mov	r0, r4
   d4376:	f003 fc0c 	bl	d7b92 <_ZN5Print7printlnEPKc>
	file.printf("Distance in CM: %0.2f \n",cm);
   d437a:	4b15      	ldr	r3, [pc, #84]	; (d43d0 <_Z8logData2v+0xc8>)
   d437c:	4915      	ldr	r1, [pc, #84]	; (d43d4 <_Z8logData2v+0xcc>)
   d437e:	ed93 0a00 	vldr	s0, [r3]
   d4382:	4620      	mov	r0, r4
   d4384:	f7ff ff8a 	bl	d429c <_ZN5Print6printfIIfEEEjPKcDpT_>
   d4388:	b002      	add	sp, #8
   d438a:	bd10      	pop	{r4, pc}
   d438c:	000d94dc 	.word	0x000d94dc
   d4390:	2003e38c 	.word	0x2003e38c
   d4394:	2003e3b9 	.word	0x2003e3b9
   d4398:	2003e3ba 	.word	0x2003e3ba
   d439c:	2003e388 	.word	0x2003e388
   d43a0:	000d94f5 	.word	0x000d94f5
   d43a4:	2003e3b8 	.word	0x2003e3b8
   d43a8:	2003dd28 	.word	0x2003dd28
   d43ac:	2003e380 	.word	0x2003e380
   d43b0:	000d9512 	.word	0x000d9512
   d43b4:	2003e37c 	.word	0x2003e37c
   d43b8:	000d9529 	.word	0x000d9529
   d43bc:	2003dd2c 	.word	0x2003dd2c
   d43c0:	2003e3bc 	.word	0x2003e3bc
   d43c4:	2003dd2a 	.word	0x2003dd2a
   d43c8:	000d9543 	.word	0x000d9543
   d43cc:	000d9ddf 	.word	0x000d9ddf
   d43d0:	2003e1b4 	.word	0x2003e1b4
   d43d4:	000d955c 	.word	0x000d955c

000d43d8 <_Z11displayInfov>:
	}

SDwriteFunction();
}

void displayInfo() {
   d43d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// float lat,lon,alt;
	// uint8_t hr,mn,se,sat;
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d43dc:	4c88      	ldr	r4, [pc, #544]	; (d4600 <_Z11displayInfov+0x228>)
	}

SDwriteFunction();
}

void displayInfo() {
   d43de:	b0a5      	sub	sp, #148	; 0x94

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d43e0:	f003 f824 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
	// float lat,lon,alt;
	// uint8_t hr,mn,se,sat;
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d43e4:	6823      	ldr	r3, [r4, #0]
   d43e6:	1ac0      	subs	r0, r0, r3
   d43e8:	f241 3387 	movw	r3, #4999	; 0x1387
   d43ec:	4298      	cmp	r0, r3
   d43ee:	f240 8103 	bls.w	d45f8 <_Z11displayInfov+0x220>
   d43f2:	f003 f81b 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
		lastSerial = millis();
   d43f6:	6020      	str	r0, [r4, #0]

		char buf[128];
		Serial.println(gps.location.isValid());
   d43f8:	f003 fdb8 	bl	d7f6c <_Z16_fetch_usbserialv>
   d43fc:	4c81      	ldr	r4, [pc, #516]	; (d4604 <_Z11displayInfov+0x22c>)
   d43fe:	4605      	mov	r5, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4400:	220a      	movs	r2, #10
   d4402:	7821      	ldrb	r1, [r4, #0]
   d4404:	f003 fbd1 	bl	d7baa <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4408:	4628      	mov	r0, r5
   d440a:	f003 fbb6 	bl	d7b7a <_ZN5Print7printlnEv>
	    Serial.println(gps.location.age());
   d440e:	f003 fdad 	bl	d7f6c <_Z16_fetch_usbserialv>
	 * If the value is not valid, then ULONG_MAX is returned.
	 *
	 * You might check to see if age is < 10000 to make sure the value has been retrieved in the
	 * last 10 seconds, for example.
	 */
	uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   d4412:	7823      	ldrb	r3, [r4, #0]
   d4414:	4606      	mov	r6, r0
   d4416:	4625      	mov	r5, r4
   d4418:	b123      	cbz	r3, d4424 <_Z11displayInfov+0x4c>
   d441a:	f003 f807 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
   d441e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d4420:	1a41      	subs	r1, r0, r1
   d4422:	e001      	b.n	d4428 <_Z11displayInfov+0x50>
   d4424:	f04f 31ff 	mov.w	r1, #4294967295
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4428:	220a      	movs	r2, #10
   d442a:	4630      	mov	r0, r6
   d442c:	f003 fbbd 	bl	d7baa <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4430:	4630      	mov	r0, r6
   d4432:	f003 fba2 	bl	d7b7a <_ZN5Print7printlnEv>
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
   d4436:	782b      	ldrb	r3, [r5, #0]
   d4438:	4c72      	ldr	r4, [pc, #456]	; (d4604 <_Z11displayInfov+0x22c>)
   d443a:	b13b      	cbz	r3, d444c <_Z11displayInfov+0x74>
   d443c:	f002 fff6 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
   d4440:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d4442:	1ac0      	subs	r0, r0, r3
   d4444:	f242 730f 	movw	r3, #9999	; 0x270f
   d4448:	4298      	cmp	r0, r3
   d444a:	d910      	bls.n	d446e <_Z11displayInfov+0x96>
			display.println("");
			display.printf("Distance in CM: %0.2f \n",cm);
			display.display();
		}
		else {
			strcpy(buf, "no location");
   d444c:	496e      	ldr	r1, [pc, #440]	; (d4608 <_Z11displayInfov+0x230>)
   d444e:	a804      	add	r0, sp, #16
   d4450:	f004 ff3e 	bl	d92d0 <strcpy>
			if (!gettingFix) {
   d4454:	4b6d      	ldr	r3, [pc, #436]	; (d460c <_Z11displayInfov+0x234>)
   d4456:	781b      	ldrb	r3, [r3, #0]
   d4458:	2b00      	cmp	r3, #0
   d445a:	f040 80cd 	bne.w	d45f8 <_Z11displayInfov+0x220>
				gettingFix = true;
   d445e:	4b6b      	ldr	r3, [pc, #428]	; (d460c <_Z11displayInfov+0x234>)
   d4460:	2201      	movs	r2, #1
   d4462:	701a      	strb	r2, [r3, #0]
   d4464:	f002 ffe2 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
				startFix = millis();
   d4468:	4b69      	ldr	r3, [pc, #420]	; (d4610 <_Z11displayInfov+0x238>)
   d446a:	6018      	str	r0, [r3, #0]
			}
		}
	}
}
   d446c:	e0c4      	b.n	d45f8 <_Z11displayInfov+0x220>

		char buf[128];
		Serial.println(gps.location.isValid());
	    Serial.println(gps.location.age());
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
			lat = gps.location.lat();
   d446e:	4620      	mov	r0, r4
   d4470:	f002 fc7a 	bl	d6d68 <_ZN15TinyGPSLocation3latEv>
   d4474:	ec51 0b10 	vmov	r0, r1, d0
   d4478:	f004 fe3a 	bl	d90f0 <__aeabi_d2f>
   d447c:	f8df a1d4 	ldr.w	sl, [pc, #468]	; d4654 <_Z11displayInfov+0x27c>
			lon = gps.location.lng(); 
   d4480:	f8df 91d4 	ldr.w	r9, [pc, #468]	; d4658 <_Z11displayInfov+0x280>

		char buf[128];
		Serial.println(gps.location.isValid());
	    Serial.println(gps.location.age());
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
			lat = gps.location.lat();
   d4484:	f8ca 0000 	str.w	r0, [sl]
			lon = gps.location.lng(); 
   d4488:	4620      	mov	r0, r4
   d448a:	f002 fc95 	bl	d6db8 <_ZN15TinyGPSLocation3lngEv>
   d448e:	ec51 0b10 	vmov	r0, r1, d0
   d4492:	f004 fe2d 	bl	d90f0 <__aeabi_d2f>
	uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }

	/**
	 * @brief Returns the current value and clears the updated flag
	 */
	int32_t value()         { updated = false; return val; }
   d4496:	2500      	movs	r5, #0
   d4498:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
   d449c:	f8c9 0000 	str.w	r0, [r9]
			alt = gps.altitude.meters();
   d44a0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   d44a4:	f8df 81b4 	ldr.w	r8, [pc, #436]	; d465c <_Z11displayInfov+0x284>
			hr = gps.time.hour();
   d44a8:	f8df b1b4 	ldr.w	fp, [pc, #436]	; d4660 <_Z11displayInfov+0x288>
			mn = gps.time.minute();
   d44ac:	4f59      	ldr	r7, [pc, #356]	; (d4614 <_Z11displayInfov+0x23c>)
			se = gps.time.second();
   d44ae:	4e5a      	ldr	r6, [pc, #360]	; (d4618 <_Z11displayInfov+0x240>)
		Serial.println(gps.location.isValid());
	    Serial.println(gps.location.age());
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
			lat = gps.location.lat();
			lon = gps.location.lng(); 
			alt = gps.altitude.meters();
   d44b0:	f004 fba6 	bl	d8c00 <__aeabi_i2d>
   d44b4:	2200      	movs	r2, #0
   d44b6:	4b59      	ldr	r3, [pc, #356]	; (d461c <_Z11displayInfov+0x244>)
   d44b8:	f004 fd32 	bl	d8f20 <__aeabi_ddiv>
   d44bc:	f004 fe18 	bl	d90f0 <__aeabi_d2f>
   d44c0:	f8c8 0000 	str.w	r0, [r8]
			hr = gps.time.hour();
   d44c4:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d44c8:	f002 fce4 	bl	d6e94 <_ZN11TinyGPSTime4hourEv>
   d44cc:	f88b 0000 	strb.w	r0, [fp]
			mn = gps.time.minute();
   d44d0:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d44d4:	f002 fce8 	bl	d6ea8 <_ZN11TinyGPSTime6minuteEv>
   d44d8:	7038      	strb	r0, [r7, #0]
			se = gps.time.second();
   d44da:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d44de:	f002 fcf1 	bl	d6ec4 <_ZN11TinyGPSTime6secondEv>
	uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }

	/**
	 * @brief Returns the current value and clears the updated flag
	 */
	uint32_t value()        { updated = false; return val; }
   d44e2:	f884 5099 	strb.w	r5, [r4, #153]	; 0x99
			sat = gps.satellites.value();
   d44e6:	4d4e      	ldr	r5, [pc, #312]	; (d4620 <_Z11displayInfov+0x248>)
   d44e8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
			lat = gps.location.lat();
			lon = gps.location.lng(); 
			alt = gps.altitude.meters();
			hr = gps.time.hour();
			mn = gps.time.minute();
			se = gps.time.second();
   d44ec:	7030      	strb	r0, [r6, #0]
			sat = gps.satellites.value();
      dy - gps.date.day();
   d44ee:	f104 0038 	add.w	r0, r4, #56	; 0x38
			lon = gps.location.lng(); 
			alt = gps.altitude.meters();
			hr = gps.time.hour();
			mn = gps.time.minute();
			se = gps.time.second();
			sat = gps.satellites.value();
   d44f2:	702b      	strb	r3, [r5, #0]
      dy - gps.date.day();
   d44f4:	f002 fcc4 	bl	d6e80 <_ZN11TinyGPSDate3dayEv>
      mth = gps.date.month();
   d44f8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d44fc:	f002 fcb4 	bl	d6e68 <_ZN11TinyGPSDate5monthEv>
   d4500:	4b48      	ldr	r3, [pc, #288]	; (d4624 <_Z11displayInfov+0x24c>)
   d4502:	7018      	strb	r0, [r3, #0]
      yr = gps.date.year();
   d4504:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4508:	f002 fca2 	bl	d6e50 <_ZN11TinyGPSDate4yearEv>
   d450c:	4b46      	ldr	r3, [pc, #280]	; (d4628 <_Z11displayInfov+0x250>)
   d450e:	7018      	strb	r0, [r3, #0]
			if(hr > 7) {
   d4510:	f89b 3000 	ldrb.w	r3, [fp]
   d4514:	2b07      	cmp	r3, #7
   d4516:	465c      	mov	r4, fp
   d4518:	d901      	bls.n	d451e <_Z11displayInfov+0x146>
				hr = hr + UTC_offset;
   d451a:	3b06      	subs	r3, #6
   d451c:	e000      	b.n	d4520 <_Z11displayInfov+0x148>
			}
			else {
				hr = hr + 24 + UTC_offset;
   d451e:	3312      	adds	r3, #18
			}
			Serial.printf("Distance in CM: %0.2f \n",cm);
   d4520:	f8df b140 	ldr.w	fp, [pc, #320]	; d4664 <_Z11displayInfov+0x28c>
      yr = gps.date.year();
			if(hr > 7) {
				hr = hr + UTC_offset;
			}
			else {
				hr = hr + 24 + UTC_offset;
   d4524:	7023      	strb	r3, [r4, #0]
			}
			Serial.printf("Distance in CM: %0.2f \n",cm);
   d4526:	f003 fd21 	bl	d7f6c <_Z16_fetch_usbserialv>
   d452a:	ed9b 0a00 	vldr	s0, [fp]
   d452e:	493f      	ldr	r1, [pc, #252]	; (d462c <_Z11displayInfov+0x254>)
   d4530:	f7ff feb4 	bl	d429c <_ZN5Print6printfIIfEEEjPKcDpT_>
			Serial.printf("%i satellites in view --- ",sat);
   d4534:	f003 fd1a 	bl	d7f6c <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4538:	782b      	ldrb	r3, [r5, #0]
   d453a:	4a3d      	ldr	r2, [pc, #244]	; (d4630 <_Z11displayInfov+0x258>)
   d453c:	2100      	movs	r1, #0
   d453e:	f003 fb54 	bl	d7bea <_ZN5Print11printf_implEbPKcz>
			Serial.printf("Time: %02i:%02i:%02i --- ",hr,mn,se);
   d4542:	f003 fd13 	bl	d7f6c <_Z16_fetch_usbserialv>
   d4546:	7832      	ldrb	r2, [r6, #0]
   d4548:	7823      	ldrb	r3, [r4, #0]
   d454a:	9201      	str	r2, [sp, #4]
   d454c:	783a      	ldrb	r2, [r7, #0]
   d454e:	9200      	str	r2, [sp, #0]
   d4550:	2100      	movs	r1, #0
   d4552:	4a38      	ldr	r2, [pc, #224]	; (d4634 <_Z11displayInfov+0x25c>)
   d4554:	f003 fb49 	bl	d7bea <_ZN5Print11printf_implEbPKcz>
			Serial.printf("lat: %f, long: %f, alt: %f \n", lat,lon,alt);
   d4558:	f003 fd08 	bl	d7f6c <_Z16_fetch_usbserialv>
   d455c:	ed98 1a00 	vldr	s2, [r8]
   d4560:	edd9 0a00 	vldr	s1, [r9]
   d4564:	ed9a 0a00 	vldr	s0, [sl]
   d4568:	4933      	ldr	r1, [pc, #204]	; (d4638 <_Z11displayInfov+0x260>)
   d456a:	f7ff fea7 	bl	d42bc <_ZN5Print6printfIIfffEEEjPKcDpT_>
			if (gettingFix) {
   d456e:	4b27      	ldr	r3, [pc, #156]	; (d460c <_Z11displayInfov+0x234>)
   d4570:	781b      	ldrb	r3, [r3, #0]
   d4572:	b17b      	cbz	r3, d4594 <_Z11displayInfov+0x1bc>
				gettingFix = false;
   d4574:	4b25      	ldr	r3, [pc, #148]	; (d460c <_Z11displayInfov+0x234>)
   d4576:	2200      	movs	r2, #0
   d4578:	701a      	strb	r2, [r3, #0]
   d457a:	f002 ff57 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
				unsigned long elapsed = millis() - startFix;
   d457e:	4b24      	ldr	r3, [pc, #144]	; (d4610 <_Z11displayInfov+0x238>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	1ac3      	subs	r3, r0, r3
   d4584:	9303      	str	r3, [sp, #12]
				Serial.printlnf("%lu milliseconds to get GPS fix", elapsed);
   d4586:	f003 fcf1 	bl	d7f6c <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d458a:	9b03      	ldr	r3, [sp, #12]
   d458c:	4a2b      	ldr	r2, [pc, #172]	; (d463c <_Z11displayInfov+0x264>)
   d458e:	2101      	movs	r1, #1
   d4590:	f003 fb2b 	bl	d7bea <_ZN5Print11printf_implEbPKcz>
			}
			display.clearDisplay();
   d4594:	482a      	ldr	r0, [pc, #168]	; (d4640 <_Z11displayInfov+0x268>)
   d4596:	f000 fc49 	bl	d4e2c <_ZN16Adafruit_SSD130612clearDisplayEv>
			display.setCursor(0,0);
   d459a:	2200      	movs	r2, #0
   d459c:	4611      	mov	r1, r2
   d459e:	4828      	ldr	r0, [pc, #160]	; (d4640 <_Z11displayInfov+0x268>)
   d45a0:	f000 ffb3 	bl	d550a <_ZN12Adafruit_GFX9setCursorEss>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d45a4:	7832      	ldrb	r2, [r6, #0]
   d45a6:	7823      	ldrb	r3, [r4, #0]
   d45a8:	9201      	str	r2, [sp, #4]
   d45aa:	783a      	ldrb	r2, [r7, #0]
   d45ac:	9200      	str	r2, [sp, #0]
   d45ae:	2100      	movs	r1, #0
   d45b0:	4a24      	ldr	r2, [pc, #144]	; (d4644 <_Z11displayInfov+0x26c>)
   d45b2:	4823      	ldr	r0, [pc, #140]	; (d4640 <_Z11displayInfov+0x268>)
   d45b4:	f003 fb19 	bl	d7bea <_ZN5Print11printf_implEbPKcz>
			display.printf("Time: %02i:%02i:%02i \n",hr,mn,se);
			display.printf("lat  %f \nlong %f \nalt %f\n", lat,lon,alt);
   d45b8:	ed98 1a00 	vldr	s2, [r8]
   d45bc:	edd9 0a00 	vldr	s1, [r9]
   d45c0:	ed9a 0a00 	vldr	s0, [sl]
   d45c4:	4920      	ldr	r1, [pc, #128]	; (d4648 <_Z11displayInfov+0x270>)
   d45c6:	481e      	ldr	r0, [pc, #120]	; (d4640 <_Z11displayInfov+0x268>)
   d45c8:	f7ff fe78 	bl	d42bc <_ZN5Print6printfIIfffEEEjPKcDpT_>
   d45cc:	782b      	ldrb	r3, [r5, #0]
   d45ce:	4a1f      	ldr	r2, [pc, #124]	; (d464c <_Z11displayInfov+0x274>)
   d45d0:	481b      	ldr	r0, [pc, #108]	; (d4640 <_Z11displayInfov+0x268>)
   d45d2:	2100      	movs	r1, #0
   d45d4:	f003 fb09 	bl	d7bea <_ZN5Print11printf_implEbPKcz>
			display.printf("Satellites in view: %i \n",sat);
			display.println("");
   d45d8:	491d      	ldr	r1, [pc, #116]	; (d4650 <_Z11displayInfov+0x278>)
   d45da:	4819      	ldr	r0, [pc, #100]	; (d4640 <_Z11displayInfov+0x268>)
   d45dc:	f003 fad9 	bl	d7b92 <_ZN5Print7printlnEPKc>
			display.printf("Distance in CM: %0.2f \n",cm);
   d45e0:	ed9b 0a00 	vldr	s0, [fp]
   d45e4:	4911      	ldr	r1, [pc, #68]	; (d462c <_Z11displayInfov+0x254>)
   d45e6:	4816      	ldr	r0, [pc, #88]	; (d4640 <_Z11displayInfov+0x268>)
   d45e8:	f7ff fe58 	bl	d429c <_ZN5Print6printfIIfEEEjPKcDpT_>
			display.display();
   d45ec:	4814      	ldr	r0, [pc, #80]	; (d4640 <_Z11displayInfov+0x268>)
				gettingFix = true;
				startFix = millis();
			}
		}
	}
}
   d45ee:	b025      	add	sp, #148	; 0x94
   d45f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			display.printf("Time: %02i:%02i:%02i \n",hr,mn,se);
			display.printf("lat  %f \nlong %f \nalt %f\n", lat,lon,alt);
			display.printf("Satellites in view: %i \n",sat);
			display.println("");
			display.printf("Distance in CM: %0.2f \n",cm);
			display.display();
   d45f4:	f000 bd54 	b.w	d50a0 <_ZN16Adafruit_SSD13067displayEv>
				gettingFix = true;
				startFix = millis();
			}
		}
	}
}
   d45f8:	b025      	add	sp, #148	; 0x94
   d45fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d45fe:	bf00      	nop
   d4600:	2003e3c0 	.word	0x2003e3c0
   d4604:	2003e1b8 	.word	0x2003e1b8
   d4608:	000d95e6 	.word	0x000d95e6
   d460c:	2003e381 	.word	0x2003e381
   d4610:	2003e384 	.word	0x2003e384
   d4614:	2003e380 	.word	0x2003e380
   d4618:	2003e3b8 	.word	0x2003e3b8
   d461c:	40590000 	.word	0x40590000
   d4620:	2003dd2a 	.word	0x2003dd2a
   d4624:	2003e388 	.word	0x2003e388
   d4628:	2003e3b9 	.word	0x2003e3b9
   d462c:	000d955c 	.word	0x000d955c
   d4630:	000d9574 	.word	0x000d9574
   d4634:	000d958f 	.word	0x000d958f
   d4638:	000d95a9 	.word	0x000d95a9
   d463c:	000d95c6 	.word	0x000d95c6
   d4640:	2003e358 	.word	0x2003e358
   d4644:	000d9512 	.word	0x000d9512
   d4648:	000d9529 	.word	0x000d9529
   d464c:	000d9543 	.word	0x000d9543
   d4650:	000d9ddf 	.word	0x000d9ddf
   d4654:	2003e3bc 	.word	0x2003e3bc
   d4658:	2003dd2c 	.word	0x2003dd2c
   d465c:	2003e37c 	.word	0x2003e37c
   d4660:	2003dd28 	.word	0x2003dd28
   d4664:	2003e1b4 	.word	0x2003e1b4

000d4668 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv>:
    pr->print(F("error: "));
    pr->println(msg);
    errorPrint(pr);
  }
  /** %Print any SD error code and halt. */
  void initErrorHalt() {
   d4668:	b508      	push	{r3, lr}
   d466a:	4604      	mov	r4, r0
    initErrorHalt(&Serial);
   d466c:	f003 fc7e 	bl	d7f6c <_Z16_fetch_usbserialv>
  /** Print error details after begin() fails.
   *
   * \param[in] pr Print destination.
   */
  void initErrorPrint(Print* pr) {
    if (cardErrorCode()) {
   d4670:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
    pr->println(msg);
    errorPrint(pr);
  }
  /** %Print any SD error code and halt. */
  void initErrorHalt() {
    initErrorHalt(&Serial);
   d4674:	4605      	mov	r5, r0
  /** Print error details after begin() fails.
   *
   * \param[in] pr Print destination.
   */
  void initErrorPrint(Print* pr) {
    if (cardErrorCode()) {
   d4676:	b32b      	cbz	r3, d46c4 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x5c>
      pr->println(F("Can't access SD card. Do not reformat."));
   d4678:	491a      	ldr	r1, [pc, #104]	; (d46e4 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x7c>)
   d467a:	f003 fa94 	bl	d7ba6 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
   d467e:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
   d4682:	2b20      	cmp	r3, #32
   d4684:	d103      	bne.n	d468e <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x26>
        pr->println(F("No card, wrong chip select pin, or SPI problem?"));
   d4686:	4918      	ldr	r1, [pc, #96]	; (d46e8 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x80>)
   d4688:	4628      	mov	r0, r5
   d468a:	f003 fa8c 	bl	d7ba6 <_ZN5Print7printlnEPK19__FlashStringHelper>
  }
  /** %Print any SD error code.
   * \param[in] pr Print device.
   */
  void errorPrint(Print* pr) {
    if (!cardErrorCode()) {
   d468e:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
   d4692:	b31b      	cbz	r3, d46dc <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x74>
      return;
    }
    pr->print(F("SD errorCode: 0X"));
   d4694:	4915      	ldr	r1, [pc, #84]	; (d46ec <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x84>)
   d4696:	4628      	mov	r0, r5
   d4698:	f003 fa6b 	bl	d7b72 <_ZN5Print5printEPK19__FlashStringHelper>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d469c:	2210      	movs	r2, #16
   d469e:	f894 1460 	ldrb.w	r1, [r4, #1120]	; 0x460
   d46a2:	4628      	mov	r0, r5
   d46a4:	f003 fa81 	bl	d7baa <_ZN5Print11printNumberEmh>
    pr->print(cardErrorCode(), HEX);
    pr->print(F(",0X"));
   d46a8:	4911      	ldr	r1, [pc, #68]	; (d46f0 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x88>)
   d46aa:	4628      	mov	r0, r5
   d46ac:	f003 fa61 	bl	d7b72 <_ZN5Print5printEPK19__FlashStringHelper>
   d46b0:	2210      	movs	r2, #16
   d46b2:	f894 1469 	ldrb.w	r1, [r4, #1129]	; 0x469
   d46b6:	4628      	mov	r0, r5
   d46b8:	f003 fa77 	bl	d7baa <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d46bc:	4628      	mov	r0, r5
   d46be:	f003 fa5c 	bl	d7b7a <_ZN5Print7printlnEv>
   d46c2:	e00b      	b.n	d46dc <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x74>
      pr->println(F("Can't access SD card. Do not reformat."));
      if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
        pr->println(F("No card, wrong chip select pin, or SPI problem?"));
      }
      errorPrint(pr);
    } else if (vol()->fatType() == 0) {
   d46c4:	79e3      	ldrb	r3, [r4, #7]
   d46c6:	b90b      	cbnz	r3, d46cc <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x64>
      pr->println(F("Invalid format, reformat SD."));
   d46c8:	490a      	ldr	r1, [pc, #40]	; (d46f4 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x8c>)
   d46ca:	e005      	b.n	d46d8 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x70>
    } else if (!vwd()->isOpen()) {
   d46cc:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d46d0:	b90b      	cbnz	r3, d46d6 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x6e>
      pr->println(F("Can't open root directory."));
   d46d2:	4909      	ldr	r1, [pc, #36]	; (d46f8 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x90>)
   d46d4:	e000      	b.n	d46d8 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x70>
    } else {
      pr->println(F("No error found."));
   d46d6:	4909      	ldr	r1, [pc, #36]	; (d46fc <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x94>)
   d46d8:	f003 fa65 	bl	d7ba6 <_ZN5Print7printlnEPK19__FlashStringHelper>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   d46dc:	f002 feb6 	bl	d744c <os_thread_yield>
   d46e0:	e7fc      	b.n	d46dc <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x74>
   d46e2:	bf00      	nop
   d46e4:	000d95f2 	.word	0x000d95f2
   d46e8:	000d9619 	.word	0x000d9619
   d46ec:	000d9649 	.word	0x000d9649
   d46f0:	000d965a 	.word	0x000d965a
   d46f4:	000d965e 	.word	0x000d965e
   d46f8:	000d967b 	.word	0x000d967b
   d46fc:	000d9696 	.word	0x000d9696

000d4700 <_ZN5Print6printfIIEEEjPKcDpT_>:
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4700:	460a      	mov	r2, r1
   d4702:	2100      	movs	r1, #0
   d4704:	f003 ba71 	b.w	d7bea <_ZN5Print11printf_implEbPKcz>

000d4708 <_Z15SDwriteFunctionv>:
  }
  // Write data header.
  file.printf("TimeStamp, Random Data %i \n");
  // Start on a multiple of the sample interval.
}
void SDwriteFunction(){
   d4708:	b570      	push	{r4, r5, r6, lr}
  // logStart=true; // use a button nomrally
if (logStart==true) {
   d470a:	4c3c      	ldr	r4, [pc, #240]	; (d47fc <_Z15SDwriteFunctionv+0xf4>)
   d470c:	7823      	ldrb	r3, [r4, #0]
  }
  // Write data header.
  file.printf("TimeStamp, Random Data %i \n");
  // Start on a multiple of the sample interval.
}
void SDwriteFunction(){
   d470e:	b08a      	sub	sp, #40	; 0x28
  // logStart=true; // use a button nomrally
if (logStart==true) {
   d4710:	2b00      	cmp	r3, #0
   d4712:	d070      	beq.n	d47f6 <_Z15SDwriteFunctionv+0xee>
  Serial.printf("Starting Data Logging \n");
   d4714:	f003 fc2a 	bl	d7f6c <_Z16_fetch_usbserialv>
   d4718:	4939      	ldr	r1, [pc, #228]	; (d4800 <_Z15SDwriteFunctionv+0xf8>)
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d471a:	4d3a      	ldr	r5, [pc, #232]	; (d4804 <_Z15SDwriteFunctionv+0xfc>)
   d471c:	f7ff fff0 	bl	d4700 <_ZN5Print6printfIIEEEjPKcDpT_>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4720:	2600      	movs	r6, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d4722:	2300      	movs	r3, #0
   d4724:	4a37      	ldr	r2, [pc, #220]	; (d4804 <_Z15SDwriteFunctionv+0xfc>)
   d4726:	4938      	ldr	r1, [pc, #224]	; (d4808 <_Z15SDwriteFunctionv+0x100>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4728:	f88d 6004 	strb.w	r6, [sp, #4]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d472c:	a801      	add	r0, sp, #4
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d472e:	f88d 6005 	strb.w	r6, [sp, #5]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d4732:	f001 fc52 	bl	d5fda <_ZN7FatFile4openEPS_PKci>
  while (sd.exists(fileName)) {
   d4736:	b198      	cbz	r0, d4760 <_Z15SDwriteFunctionv+0x58>
    if (fileName[BASE_NAME_SIZE + 1] != '9') {
   d4738:	796b      	ldrb	r3, [r5, #5]
   d473a:	2b39      	cmp	r3, #57	; 0x39
   d473c:	d002      	beq.n	d4744 <_Z15SDwriteFunctionv+0x3c>
      fileName[BASE_NAME_SIZE + 1]++;
   d473e:	3301      	adds	r3, #1
   d4740:	716b      	strb	r3, [r5, #5]
   d4742:	e7ee      	b.n	d4722 <_Z15SDwriteFunctionv+0x1a>
    } else if (fileName[BASE_NAME_SIZE] != '9') {
   d4744:	792b      	ldrb	r3, [r5, #4]
   d4746:	2b39      	cmp	r3, #57	; 0x39
   d4748:	d004      	beq.n	d4754 <_Z15SDwriteFunctionv+0x4c>
      fileName[BASE_NAME_SIZE + 1] = '0';
   d474a:	2230      	movs	r2, #48	; 0x30
      fileName[BASE_NAME_SIZE]++;
   d474c:	3301      	adds	r3, #1
  Serial.printf("Starting Data Logging \n");
  while (sd.exists(fileName)) {
    if (fileName[BASE_NAME_SIZE + 1] != '9') {
      fileName[BASE_NAME_SIZE + 1]++;
    } else if (fileName[BASE_NAME_SIZE] != '9') {
      fileName[BASE_NAME_SIZE + 1] = '0';
   d474e:	716a      	strb	r2, [r5, #5]
      fileName[BASE_NAME_SIZE]++;
   d4750:	712b      	strb	r3, [r5, #4]
   d4752:	e7e6      	b.n	d4722 <_Z15SDwriteFunctionv+0x1a>
    } else {
      Serial.println("Can't create file name");
   d4754:	f003 fc0a 	bl	d7f6c <_Z16_fetch_usbserialv>
   d4758:	492c      	ldr	r1, [pc, #176]	; (d480c <_Z15SDwriteFunctionv+0x104>)
   d475a:	f003 fa1a 	bl	d7b92 <_ZN5Print7printlnEPKc>
   d475e:	e7fe      	b.n	d475e <_Z15SDwriteFunctionv+0x56>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d4760:	492b      	ldr	r1, [pc, #172]	; (d4810 <_Z15SDwriteFunctionv+0x108>)
   d4762:	4a28      	ldr	r2, [pc, #160]	; (d4804 <_Z15SDwriteFunctionv+0xfc>)
   d4764:	6809      	ldr	r1, [r1, #0]
   d4766:	482b      	ldr	r0, [pc, #172]	; (d4814 <_Z15SDwriteFunctionv+0x10c>)
   d4768:	f640 2301 	movw	r3, #2561	; 0xa01
   d476c:	f001 fc35 	bl	d5fda <_ZN7FatFile4openEPS_PKci>
      while(1);
    }
  }
  if (!file.open(fileName, O_WRONLY | O_CREAT | O_EXCL)) {
   d4770:	b920      	cbnz	r0, d477c <_Z15SDwriteFunctionv+0x74>
    Serial.println("file.open");
   d4772:	f003 fbfb 	bl	d7f6c <_Z16_fetch_usbserialv>
   d4776:	4928      	ldr	r1, [pc, #160]	; (d4818 <_Z15SDwriteFunctionv+0x110>)
   d4778:	f003 fa0b 	bl	d7b92 <_ZN5Print7printlnEPKc>
  }
  Serial.printf("Logging to: %s \n",fileName);
   d477c:	f003 fbf6 	bl	d7f6c <_Z16_fetch_usbserialv>
   d4780:	4b20      	ldr	r3, [pc, #128]	; (d4804 <_Z15SDwriteFunctionv+0xfc>)
   d4782:	4a26      	ldr	r2, [pc, #152]	; (d481c <_Z15SDwriteFunctionv+0x114>)
      Serial.print(".");
      
      logData2();

      // Force data to SD and update the directory entry to avoid data loss.
      if (!file.sync() || file.getWriteError()) {
   d4784:	4d26      	ldr	r5, [pc, #152]	; (d4820 <_Z15SDwriteFunctionv+0x118>)
   d4786:	2100      	movs	r1, #0
   d4788:	f003 fa2f 	bl	d7bea <_ZN5Print11printf_implEbPKcz>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d478c:	f002 fe46 	bl	d741c <HAL_Timer_Get_Micro_Seconds>
  }
  if (!file.open(fileName, O_WRONLY | O_CREAT | O_EXCL)) {
    Serial.println("file.open");
  }
  Serial.printf("Logging to: %s \n",fileName);
  startTime = micros();
   d4790:	4b24      	ldr	r3, [pc, #144]	; (d4824 <_Z15SDwriteFunctionv+0x11c>)
   d4792:	6018      	str	r0, [r3, #0]
}
  while(logStart==true) {
   d4794:	7823      	ldrb	r3, [r4, #0]
   d4796:	b373      	cbz	r3, d47f6 <_Z15SDwriteFunctionv+0xee>
    // for (i=0;i<100;i++) {

      // logTime = micros() - startTime;
      Serial.print(".");
   d4798:	f003 fbe8 	bl	d7f6c <_Z16_fetch_usbserialv>
   d479c:	4922      	ldr	r1, [pc, #136]	; (d4828 <_Z15SDwriteFunctionv+0x120>)
   d479e:	f003 f9e1 	bl	d7b64 <_ZN5Print5printEPKc>
      
      logData2();
   d47a2:	f7ff fdb1 	bl	d4308 <_Z8logData2v>

      // Force data to SD and update the directory entry to avoid data loss.
      if (!file.sync() || file.getWriteError()) {
   d47a6:	481b      	ldr	r0, [pc, #108]	; (d4814 <_Z15SDwriteFunctionv+0x10c>)
   d47a8:	f001 fbda 	bl	d5f60 <_ZN7FatFile4syncEv>
   d47ac:	b1e8      	cbz	r0, d47ea <_Z15SDwriteFunctionv+0xe2>
   d47ae:	7a6b      	ldrb	r3, [r5, #9]
   d47b0:	07db      	lsls	r3, r3, #31
   d47b2:	d41a      	bmi.n	d47ea <_Z15SDwriteFunctionv+0xe2>
      Serial.printf("write error \n");
      }
      delay(random(100,500));
   d47b4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   d47b8:	2064      	movs	r0, #100	; 0x64
   d47ba:	f003 fce6 	bl	d818a <_Z6randomii>
   d47be:	f003 fa61 	bl	d7c84 <delay>
    // }
    logStart = false;   // button release
   d47c2:	2300      	movs	r3, #0
    if (logStart==false) {
      file.close();
   d47c4:	4813      	ldr	r0, [pc, #76]	; (d4814 <_Z15SDwriteFunctionv+0x10c>)
      if (!file.sync() || file.getWriteError()) {
      Serial.printf("write error \n");
      }
      delay(random(100,500));
    // }
    logStart = false;   // button release
   d47c6:	7023      	strb	r3, [r4, #0]
    if (logStart==false) {
      file.close();
   d47c8:	f001 fc00 	bl	d5fcc <_ZN7FatFile5closeEv>
      Serial.printf("Done \n");
   d47cc:	f003 fbce 	bl	d7f6c <_Z16_fetch_usbserialv>
   d47d0:	4916      	ldr	r1, [pc, #88]	; (d482c <_Z15SDwriteFunctionv+0x124>)
   d47d2:	f7ff ff95 	bl	d4700 <_ZN5Print6printfIIEEEjPKcDpT_>
      delay(2000);
   d47d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d47da:	f003 fa53 	bl	d7c84 <delay>
      Serial.printf("Ready for next data log \n");
   d47de:	f003 fbc5 	bl	d7f6c <_Z16_fetch_usbserialv>
   d47e2:	4913      	ldr	r1, [pc, #76]	; (d4830 <_Z15SDwriteFunctionv+0x128>)
   d47e4:	f7ff ff8c 	bl	d4700 <_ZN5Print6printfIIEEEjPKcDpT_>
   d47e8:	e7d4      	b.n	d4794 <_Z15SDwriteFunctionv+0x8c>
      
      logData2();

      // Force data to SD and update the directory entry to avoid data loss.
      if (!file.sync() || file.getWriteError()) {
      Serial.printf("write error \n");
   d47ea:	f003 fbbf 	bl	d7f6c <_Z16_fetch_usbserialv>
   d47ee:	4911      	ldr	r1, [pc, #68]	; (d4834 <_Z15SDwriteFunctionv+0x12c>)
   d47f0:	f7ff ff86 	bl	d4700 <_ZN5Print6printfIIEEEjPKcDpT_>
   d47f4:	e7de      	b.n	d47b4 <_Z15SDwriteFunctionv+0xac>
      Serial.printf("Done \n");
      delay(2000);
      Serial.printf("Ready for next data log \n");
    }
  }
}
   d47f6:	b00a      	add	sp, #40	; 0x28
   d47f8:	bd70      	pop	{r4, r5, r6, pc}
   d47fa:	bf00      	nop
   d47fc:	2003e3c4 	.word	0x2003e3c4
   d4800:	000d96a6 	.word	0x000d96a6
   d4804:	2003d88c 	.word	0x2003d88c
   d4808:	2003e16c 	.word	0x2003e16c
   d480c:	000d96be 	.word	0x000d96be
   d4810:	2003e3cc 	.word	0x2003e3cc
   d4814:	2003e394 	.word	0x2003e394
   d4818:	000d96d5 	.word	0x000d96d5
   d481c:	000d96df 	.word	0x000d96df
   d4820:	2003e38c 	.word	0x2003e38c
   d4824:	2003e3c8 	.word	0x2003e3c8
   d4828:	000d9679 	.word	0x000d9679
   d482c:	000d96f0 	.word	0x000d96f0
   d4830:	000d96f7 	.word	0x000d96f7
   d4834:	000d9711 	.word	0x000d9711

000d4838 <loop>:
	delay(500);

}

void loop()
{
   d4838:	b508      	push	{r3, lr}
	UltraSonicFunction();
   d483a:	f7ff fccd 	bl	d41d8 <_Z18UltraSonicFunctionv>
	while (Serial1.available() > 0) {
   d483e:	f003 fc1d 	bl	d807c <_Z22__fetch_global_Serial1v>
   d4842:	6803      	ldr	r3, [r0, #0]
   d4844:	691b      	ldr	r3, [r3, #16]
   d4846:	4798      	blx	r3
   d4848:	2800      	cmp	r0, #0
   d484a:	dd15      	ble.n	d4878 <loop+0x40>
		if (gps.encode(Serial1.read())) {
   d484c:	f003 fc16 	bl	d807c <_Z22__fetch_global_Serial1v>
   d4850:	6803      	ldr	r3, [r0, #0]
   d4852:	695b      	ldr	r3, [r3, #20]
   d4854:	4798      	blx	r3
   d4856:	b2c1      	uxtb	r1, r0
   d4858:	4809      	ldr	r0, [pc, #36]	; (d4880 <loop+0x48>)
   d485a:	f002 fcd5 	bl	d7208 <_ZN11TinyGPSPlus6encodeEc>
   d485e:	2800      	cmp	r0, #0
   d4860:	d0ed      	beq.n	d483e <loop+0x6>
      	Serial.println("Made it here, attempt 1");
   d4862:	f003 fb83 	bl	d7f6c <_Z16_fetch_usbserialv>
   d4866:	4907      	ldr	r1, [pc, #28]	; (d4884 <loop+0x4c>)
   d4868:	f003 f993 	bl	d7b92 <_ZN5Print7printlnEPKc>
			displayInfo();
   d486c:	f7ff fdb4 	bl	d43d8 <_Z11displayInfov>
      doSomethingWhenDistanceIs(100);
   d4870:	2064      	movs	r0, #100	; 0x64
   d4872:	f7ff fcdf 	bl	d4234 <_Z25doSomethingWhenDistanceIsi>
   d4876:	e7e2      	b.n	d483e <loop+0x6>
		}
	}

SDwriteFunction();
}
   d4878:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			displayInfo();
      doSomethingWhenDistanceIs(100);
		}
	}

SDwriteFunction();
   d487c:	f7ff bf44 	b.w	d4708 <_Z15SDwriteFunctionv>
   d4880:	2003e1b8 	.word	0x2003e1b8
   d4884:	000d971f 	.word	0x000d971f

000d4888 <_Z11SDcardSetupv>:
//   while ((currentTime - lastSecond) < timer){
//          //do nothing//
//   }
//   lastSecond = millis();
// }
void SDcardSetup(){
   d4888:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	logStart = false;
   d488a:	4a21      	ldr	r2, [pc, #132]	; (d4910 <_Z11SDcardSetupv+0x88>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d488c:	4c21      	ldr	r4, [pc, #132]	; (d4914 <_Z11SDcardSetupv+0x8c>)
   d488e:	2300      	movs	r3, #0
   d4890:	7013      	strb	r3, [r2, #0]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d4892:	4a21      	ldr	r2, [pc, #132]	; (d4918 <_Z11SDcardSetupv+0x90>)
   d4894:	9200      	str	r2, [sp, #0]
   d4896:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d489a:	4a20      	ldr	r2, [pc, #128]	; (d491c <_Z11SDcardSetupv+0x94>)
   d489c:	f88d 3004 	strb.w	r3, [sp, #4]
   d48a0:	9202      	str	r2, [sp, #8]
   d48a2:	2501      	movs	r5, #1
   d48a4:	f88d 300d 	strb.w	r3, [sp, #13]
   d48a8:	220e      	movs	r2, #14
   d48aa:	466b      	mov	r3, sp
   d48ac:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d48b0:	4630      	mov	r0, r6
   d48b2:	f88d 500c 	strb.w	r5, [sp, #12]
   d48b6:	f001 ff27 	bl	d6708 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d48ba:	b330      	cbz	r0, d490a <_Z11SDcardSetupv+0x82>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d48bc:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d48c0:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d48c2:	f001 fb83 	bl	d5fcc <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d48c6:	4629      	mov	r1, r5
   d48c8:	4620      	mov	r0, r4
   d48ca:	f001 fdc6 	bl	d645a <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d48ce:	4601      	mov	r1, r0
   d48d0:	b140      	cbz	r0, d48e4 <_Z11SDcardSetupv+0x5c>
   d48d2:	4c10      	ldr	r4, [pc, #64]	; (d4914 <_Z11SDcardSetupv+0x8c>)
   d48d4:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   d48d8:	4621      	mov	r1, r4
   d48da:	4628      	mov	r0, r5
   d48dc:	f001 f9a1 	bl	d5c22 <_ZN7FatFile8openRootEP9FatVolume>
   d48e0:	b198      	cbz	r0, d490a <_Z11SDcardSetupv+0x82>
   d48e2:	e005      	b.n	d48f0 <_Z11SDcardSetupv+0x68>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d48e4:	4620      	mov	r0, r4
   d48e6:	f001 fdb8 	bl	d645a <_ZN9FatVolume4initEh>
   d48ea:	2800      	cmp	r0, #0
   d48ec:	d1f1      	bne.n	d48d2 <_Z11SDcardSetupv+0x4a>
   d48ee:	e00c      	b.n	d490a <_Z11SDcardSetupv+0x82>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d48f0:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d48f4:	f013 0f70 	tst.w	r3, #112	; 0x70
   d48f8:	d007      	beq.n	d490a <_Z11SDcardSetupv+0x82>
      return false;
    }
    m_cwd = dir;
   d48fa:	4b09      	ldr	r3, [pc, #36]	; (d4920 <_Z11SDcardSetupv+0x98>)
  if (BASE_NAME_SIZE > 6) {
    Serial.println("FILE_BASE_NAME too long");
    while(1);
  }
  // Write data header.
  file.printf("TimeStamp, Random Data %i \n");
   d48fc:	4909      	ldr	r1, [pc, #36]	; (d4924 <_Z11SDcardSetupv+0x9c>)
   d48fe:	480a      	ldr	r0, [pc, #40]	; (d4928 <_Z11SDcardSetupv+0xa0>)
   d4900:	601d      	str	r5, [r3, #0]
   d4902:	f7ff fefd 	bl	d4700 <_ZN5Print6printfIIEEEjPKcDpT_>
  // Start on a multiple of the sample interval.
}
   d4906:	b004      	add	sp, #16
   d4908:	bd70      	pop	{r4, r5, r6, pc}
void SDcardSetup(){
	logStart = false;
  // Initialize at the highest speed supported by the board that is
  // not over 50 MHz. Try a lower speed if SPI errors occur.cc
  if (!sd.begin(chipSelect, SD_SCK_MHZ(50))) {
    sd.initErrorHalt();  
   d490a:	4802      	ldr	r0, [pc, #8]	; (d4914 <_Z11SDcardSetupv+0x8c>)
   d490c:	f7ff feac 	bl	d4668 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv>
   d4910:	2003e3c4 	.word	0x2003e3c4
   d4914:	2003dd30 	.word	0x2003dd30
   d4918:	000d9454 	.word	0x000d9454
   d491c:	02faf080 	.word	0x02faf080
   d4920:	2003e3cc 	.word	0x2003e3cc
   d4924:	000d9737 	.word	0x000d9737
   d4928:	2003e38c 	.word	0x2003e38c

000d492c <setup>:
// Error messages stored in flash.
#define error(msg) sd.errorHalt(msg)
//------------------------------------------------------------------------------

void setup()
{
   d492c:	b508      	push	{r3, lr}
	Serial.begin(9600);
   d492e:	f003 fb1d 	bl	d7f6c <_Z16_fetch_usbserialv>
   d4932:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4936:	f003 fb0d 	bl	d7f54 <_ZN9USBSerial5beginEl>

	delay(500);
   d493a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d493e:	f003 f9a1 	bl	d7c84 <delay>
   pinMode(trigPin, OUTPUT);
   d4942:	4b15      	ldr	r3, [pc, #84]	; (d4998 <setup+0x6c>)
   d4944:	2101      	movs	r1, #1
   d4946:	8818      	ldrh	r0, [r3, #0]
   d4948:	f003 fdfe 	bl	d8548 <pinMode>
   pinMode(echoPin, INPUT);
   d494c:	4b13      	ldr	r3, [pc, #76]	; (d499c <setup+0x70>)
   d494e:	2100      	movs	r1, #0
   d4950:	8818      	ldrh	r0, [r3, #0]
   d4952:	f003 fdf9 	bl	d8548 <pinMode>

	Serial1.begin(9600);
   d4956:	f003 fb91 	bl	d807c <_Z22__fetch_global_Serial1v>
   d495a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d495e:	f003 fb87 	bl	d8070 <_ZN11USARTSerial5beginEm>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4962:	f002 fd63 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
    startFix = millis();
   d4966:	4b0e      	ldr	r3, [pc, #56]	; (d49a0 <setup+0x74>)
   d4968:	6018      	str	r0, [r3, #0]
    gettingFix = true;
   d496a:	4b0e      	ldr	r3, [pc, #56]	; (d49a4 <setup+0x78>)
	
	// OLED Display initialization
	display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d496c:	480e      	ldr	r0, [pc, #56]	; (d49a8 <setup+0x7c>)
   pinMode(trigPin, OUTPUT);
   pinMode(echoPin, INPUT);

	Serial1.begin(9600);
    startFix = millis();
    gettingFix = true;
   d496e:	2201      	movs	r2, #1
   d4970:	701a      	strb	r2, [r3, #0]
	
	// OLED Display initialization
	display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4972:	2102      	movs	r1, #2
   d4974:	223c      	movs	r2, #60	; 0x3c
   d4976:	f000 fac1 	bl	d4efc <_ZN16Adafruit_SSD13065beginEhh>
	helloWorld();
   d497a:	f7ff fbeb 	bl	d4154 <_Z10helloWorldv>
  
  SDcardSetup();
   d497e:	f7ff ff83 	bl	d4888 <_Z11SDcardSetupv>

	delay(500);
   d4982:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4986:	f003 f97d 	bl	d7c84 <delay>

	delay(500);
   d498a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4

}
   d498e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  SDcardSetup();

	delay(500);

	delay(500);
   d4992:	f003 b977 	b.w	d7c84 <delay>
   d4996:	bf00      	nop
   d4998:	2003d884 	.word	0x2003d884
   d499c:	2003d888 	.word	0x2003d888
   d49a0:	2003e384 	.word	0x2003e384
   d49a4:	2003e381 	.word	0x2003e381
   d49a8:	2003e358 	.word	0x2003e358

000d49ac <_ZN16Adafruit_SSD1306D0Ev>:
   d49ac:	b510      	push	{r4, lr}
   d49ae:	2124      	movs	r1, #36	; 0x24
   d49b0:	4604      	mov	r4, r0
   d49b2:	f003 fe77 	bl	d86a4 <_ZdlPvj>
   d49b6:	4620      	mov	r0, r4
   d49b8:	bd10      	pop	{r4, pc}
	...

000d49bc <_GLOBAL__sub_I_display>:
  file.printf("Time: %02i:%02i:%02i \n",hr,mn,se);
	file.printf("lat  %f \nlong %f \nalt %f\n", lat,lon,alt);
	file.printf("Satellites in view: %i \n",sat);
	file.println("");
	file.printf("Distance in CM: %0.2f \n",cm);
   d49bc:	b570      	push	{r4, r5, r6, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d49be:	f002 fc8d 	bl	d72dc <HAL_Pin_Map>
#include "Adafruit_GFX.h"
#include "Adafruit_SSD1306.h"

//---oled code---//
#define OLED_RESET D4
Adafruit_SSD1306 display(OLED_RESET);
   d49c2:	2104      	movs	r1, #4
   d49c4:	4823      	ldr	r0, [pc, #140]	; (d4a54 <_GLOBAL__sub_I_display+0x98>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d49c6:	4e24      	ldr	r6, [pc, #144]	; (d4a58 <_GLOBAL__sub_I_display+0x9c>)
   d49c8:	f000 fa1a 	bl	d4e00 <_ZN16Adafruit_SSD1306C1Ea>
   d49cc:	4a23      	ldr	r2, [pc, #140]	; (d4a5c <_GLOBAL__sub_I_display+0xa0>)
   d49ce:	4924      	ldr	r1, [pc, #144]	; (d4a60 <_GLOBAL__sub_I_display+0xa4>)
   d49d0:	4820      	ldr	r0, [pc, #128]	; (d4a54 <_GLOBAL__sub_I_display+0x98>)
   d49d2:	f003 fe59 	bl	d8688 <__aeabi_atexit>

//---gps constants ---//
SYSTEM_THREAD(ENABLED);
   d49d6:	2100      	movs	r1, #0
   d49d8:	2001      	movs	r0, #1
   d49da:	f002 fe57 	bl	d768c <system_thread_set_state>
const unsigned long PUBLISH_PERIOD = 120000;
const unsigned long SERIAL_PERIOD = 5000;
const unsigned long MAX_GPS_AGE_MS = 10000; // GPS location must be newer than this to be considered valid

// The TinyGPS++ object
TinyGPSPlus gps;
   d49de:	4821      	ldr	r0, [pc, #132]	; (d4a64 <_GLOBAL__sub_I_display+0xa8>)
   d49e0:	f002 f91e 	bl	d6c20 <_ZN11TinyGPSPlusC1Ev>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d49e4:	4b20      	ldr	r3, [pc, #128]	; (d4a68 <_GLOBAL__sub_I_display+0xac>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d49e6:	2164      	movs	r1, #100	; 0x64
   d49e8:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d49ec:	491f      	ldr	r1, [pc, #124]	; (d4a6c <_GLOBAL__sub_I_display+0xb0>)
   d49ee:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d49f2:	2101      	movs	r1, #1
   d49f4:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d49f8:	6831      	ldr	r1, [r6, #0]
   d49fa:	2200      	movs	r2, #0
   d49fc:	f011 0501 	ands.w	r5, r1, #1
   d4a00:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4a02:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d4a06:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d4a0a:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d4a0e:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d4a12:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d4a16:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d4a1a:	461c      	mov	r4, r3
   d4a1c:	d10a      	bne.n	d4a34 <_GLOBAL__sub_I_display+0x78>
   d4a1e:	4630      	mov	r0, r6
   d4a20:	f7ff fb4a 	bl	d40b8 <__cxa_guard_acquire>
   d4a24:	b130      	cbz	r0, d4a34 <_GLOBAL__sub_I_display+0x78>
   d4a26:	4629      	mov	r1, r5
   d4a28:	4811      	ldr	r0, [pc, #68]	; (d4a70 <_GLOBAL__sub_I_display+0xb4>)
   d4a2a:	f002 ff07 	bl	d783c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4a2e:	4630      	mov	r0, r6
   d4a30:	f7ff fb47 	bl	d40c2 <__cxa_guard_release>
   d4a34:	480f      	ldr	r0, [pc, #60]	; (d4a74 <_GLOBAL__sub_I_display+0xb8>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4a36:	4b0e      	ldr	r3, [pc, #56]	; (d4a70 <_GLOBAL__sub_I_display+0xb4>)
   d4a38:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d4a3c:	2300      	movs	r3, #0
   d4a3e:	7203      	strb	r3, [r0, #8]
   d4a40:	7243      	strb	r3, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4a42:	6043      	str	r3, [r0, #4]
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
   d4a44:	4b0c      	ldr	r3, [pc, #48]	; (d4a78 <_GLOBAL__sub_I_display+0xbc>)
   d4a46:	6003      	str	r3, [r0, #0]

#define FILE_BASE_NAME "Data"

// Create file system object.
SdFat sd;
SdFile file;
   d4a48:	4a04      	ldr	r2, [pc, #16]	; (d4a5c <_GLOBAL__sub_I_display+0xa0>)
   d4a4a:	490c      	ldr	r1, [pc, #48]	; (d4a7c <_GLOBAL__sub_I_display+0xc0>)
  file.printf("Time: %02i:%02i:%02i \n",hr,mn,se);
	file.printf("lat  %f \nlong %f \nalt %f\n", lat,lon,alt);
	file.printf("Satellites in view: %i \n",sat);
	file.println("");
	file.printf("Distance in CM: %0.2f \n",cm);
   d4a4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

#define FILE_BASE_NAME "Data"

// Create file system object.
SdFat sd;
SdFile file;
   d4a50:	f003 be1a 	b.w	d8688 <__aeabi_atexit>
   d4a54:	2003e358 	.word	0x2003e358
   d4a58:	2003dd1c 	.word	0x2003dd1c
   d4a5c:	2003dd18 	.word	0x2003dd18
   d4a60:	000d40cb 	.word	0x000d40cb
   d4a64:	2003e1b8 	.word	0x2003e1b8
   d4a68:	2003dd30 	.word	0x2003dd30
   d4a6c:	000d9454 	.word	0x000d9454
   d4a70:	2003dd20 	.word	0x2003dd20
   d4a74:	2003e38c 	.word	0x2003e38c
   d4a78:	000d9460 	.word	0x000d9460
   d4a7c:	000d40c9 	.word	0x000d40c9

000d4a80 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4a80:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4a82:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4a84:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4a88:	2c02      	cmp	r4, #2
   d4a8a:	d008      	beq.n	d4a9e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d4a8c:	2c03      	cmp	r4, #3
   d4a8e:	d00f      	beq.n	d4ab0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d4a90:	2c01      	cmp	r4, #1
   d4a92:	d170      	bne.n	d4b76 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4a94:	8904      	ldrh	r4, [r0, #8]
   d4a96:	3c01      	subs	r4, #1
   d4a98:	1aa2      	subs	r2, r4, r2
   d4a9a:	b212      	sxth	r2, r2
      break;
   d4a9c:	e00c      	b.n	d4ab8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4a9e:	8944      	ldrh	r4, [r0, #10]
   d4aa0:	3c01      	subs	r4, #1
   d4aa2:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4aa4:	8904      	ldrh	r4, [r0, #8]
   d4aa6:	1ae4      	subs	r4, r4, r3
   d4aa8:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4aaa:	b212      	sxth	r2, r2
      x -= (w-1);
   d4aac:	b209      	sxth	r1, r1
      break;
   d4aae:	e062      	b.n	d4b76 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d4ab0:	8944      	ldrh	r4, [r0, #10]
   d4ab2:	1ae4      	subs	r4, r4, r3
   d4ab4:	1a61      	subs	r1, r4, r1
   d4ab6:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4ab8:	2a00      	cmp	r2, #0
   d4aba:	db5b      	blt.n	d4b74 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d4abc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4ac0:	4294      	cmp	r4, r2
   d4ac2:	f340 8090 	ble.w	d4be6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4ac6:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4ac8:	bfbe      	ittt	lt
   d4aca:	185b      	addlt	r3, r3, r1
   d4acc:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4ace:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4ad0:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4ad4:	18cc      	adds	r4, r1, r3
   d4ad6:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4ad8:	bfc4      	itt	gt
   d4ada:	1a43      	subgt	r3, r0, r1
   d4adc:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4ade:	2b00      	cmp	r3, #0
   d4ae0:	f340 8081 	ble.w	d4be6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4ae4:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4ae6:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4ae8:	4f3f      	ldr	r7, [pc, #252]	; (d4be8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4aea:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4aee:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4af2:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4af4:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4af8:	d017      	beq.n	d4b2a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4afa:	f1c1 0108 	rsb	r1, r1, #8
   d4afe:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4b00:	493a      	ldr	r1, [pc, #232]	; (d4bec <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4b02:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4b04:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4b06:	bf3f      	itttt	cc
   d4b08:	ebc3 0e00 	rsbcc	lr, r3, r0
   d4b0c:	21ff      	movcc	r1, #255	; 0xff
   d4b0e:	fa41 f10e 	asrcc.w	r1, r1, lr
   d4b12:	400e      	andcc	r6, r1
   d4b14:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d4b16:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4b18:	bf0c      	ite	eq
   d4b1a:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d4b1c:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4b1e:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4b20:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4b22:	d360      	bcc.n	d4be6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d4b24:	1a18      	subs	r0, r3, r0
   d4b26:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d4b28:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4b2a:	2b07      	cmp	r3, #7
   d4b2c:	d917      	bls.n	d4b5e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4b2e:	2d01      	cmp	r5, #1
   d4b30:	bf0c      	ite	eq
   d4b32:	20ff      	moveq	r0, #255	; 0xff
   d4b34:	2000      	movne	r0, #0
   d4b36:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d4b3a:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4b3c:	3a08      	subs	r2, #8
   d4b3e:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4b40:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4b42:	f801 0c80 	strb.w	r0, [r1, #-128]
   d4b46:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4b4a:	d8f7      	bhi.n	d4b3c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d4b4c:	f1a3 0208 	sub.w	r2, r3, #8
   d4b50:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4b54:	3201      	adds	r2, #1
   d4b56:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d4b5a:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4b5e:	2b00      	cmp	r3, #0
   d4b60:	d041      	beq.n	d4be6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4b62:	4a23      	ldr	r2, [pc, #140]	; (d4bf0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d4b64:	5cd2      	ldrb	r2, [r2, r3]
   d4b66:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d4b68:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4b6a:	bf0c      	ite	eq
   d4b6c:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d4b6e:	4393      	bicne	r3, r2
   d4b70:	7023      	strb	r3, [r4, #0]
   d4b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4b76:	2a00      	cmp	r2, #0
   d4b78:	db35      	blt.n	d4be6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4b7a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4b7e:	4294      	cmp	r4, r2
   d4b80:	dd31      	ble.n	d4be6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4b82:	2900      	cmp	r1, #0
    w += x;
   d4b84:	bfbc      	itt	lt
   d4b86:	18c9      	addlt	r1, r1, r3
   d4b88:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4b8a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4b8e:	bfb8      	it	lt
   d4b90:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4b92:	18ce      	adds	r6, r1, r3
   d4b94:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4b96:	bfc4      	itt	gt
   d4b98:	1a63      	subgt	r3, r4, r1
   d4b9a:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4b9c:	2b00      	cmp	r3, #0
   d4b9e:	dd22      	ble.n	d4be6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4ba0:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d4ba2:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d4ba6:	4810      	ldr	r0, [pc, #64]	; (d4be8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d4ba8:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4bac:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d4bae:	2001      	movs	r0, #1
   d4bb0:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d4bb4:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4bb6:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d4bb8:	d109      	bne.n	d4bce <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d4bba:	3b01      	subs	r3, #1
   d4bbc:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d4bbe:	1c5c      	adds	r4, r3, #1
   d4bc0:	d011      	beq.n	d4be6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4bc2:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4bc6:	4310      	orrs	r0, r2
   d4bc8:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4bcc:	e7f5      	b.n	d4bba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d4bce:	43d2      	mvns	r2, r2
   d4bd0:	b2d2      	uxtb	r2, r2
   d4bd2:	3b01      	subs	r3, #1
   d4bd4:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d4bd6:	1c58      	adds	r0, r3, #1
   d4bd8:	d005      	beq.n	d4be6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4bda:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4bde:	4010      	ands	r0, r2
   d4be0:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4be4:	e7f5      	b.n	d4bd2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d4be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4be8:	2003d8a9 	.word	0x2003d8a9
   d4bec:	2003d8a1 	.word	0x2003d8a1
   d4bf0:	2003d899 	.word	0x2003d899

000d4bf4 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d4bf6:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4bf8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d4bfc:	2c02      	cmp	r4, #2
   d4bfe:	d008      	beq.n	d4c12 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d4c00:	2c03      	cmp	r4, #3
   d4c02:	d00f      	beq.n	d4c24 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d4c04:	2c01      	cmp	r4, #1
   d4c06:	d112      	bne.n	d4c2e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d4c08:	8904      	ldrh	r4, [r0, #8]
   d4c0a:	1ae4      	subs	r4, r4, r3
   d4c0c:	1aa2      	subs	r2, r4, r2
   d4c0e:	b212      	sxth	r2, r2
      break;
   d4c10:	e06d      	b.n	d4cee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4c12:	8904      	ldrh	r4, [r0, #8]
   d4c14:	3c01      	subs	r4, #1
   d4c16:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4c18:	8944      	ldrh	r4, [r0, #10]
   d4c1a:	1ae4      	subs	r4, r4, r3
   d4c1c:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4c1e:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4c20:	b212      	sxth	r2, r2
      break;
   d4c22:	e004      	b.n	d4c2e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d4c24:	8944      	ldrh	r4, [r0, #10]
   d4c26:	3c01      	subs	r4, #1
   d4c28:	1a61      	subs	r1, r4, r1
   d4c2a:	b209      	sxth	r1, r1
      break;
   d4c2c:	e05f      	b.n	d4cee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4c2e:	2900      	cmp	r1, #0
   d4c30:	db5c      	blt.n	d4cec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d4c32:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4c36:	428c      	cmp	r4, r1
   d4c38:	f340 8091 	ble.w	d4d5e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4c3c:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4c3e:	bfbc      	itt	lt
   d4c40:	18d2      	addlt	r2, r2, r3
   d4c42:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4c44:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d4c48:	bfb8      	it	lt
   d4c4a:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4c4c:	18d4      	adds	r4, r2, r3
   d4c4e:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4c50:	bfc4      	itt	gt
   d4c52:	1a83      	subgt	r3, r0, r2
   d4c54:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4c56:	2b00      	cmp	r3, #0
   d4c58:	f340 8081 	ble.w	d4d5e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4c5c:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4c5e:	4e40      	ldr	r6, [pc, #256]	; (d4d60 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4c60:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4c62:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d4c64:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4c68:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4c6c:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4c70:	d017      	beq.n	d4ca2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4c72:	f1c4 0408 	rsb	r4, r4, #8
   d4c76:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4c78:	4c3a      	ldr	r4, [pc, #232]	; (d4d64 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4c7a:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4c7c:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4c7e:	bf3f      	itttt	cc
   d4c80:	ebc2 0e00 	rsbcc	lr, r2, r0
   d4c84:	24ff      	movcc	r4, #255	; 0xff
   d4c86:	fa44 f40e 	asrcc.w	r4, r4, lr
   d4c8a:	4027      	andcc	r7, r4
   d4c8c:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d4c8e:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4c90:	bf0c      	ite	eq
   d4c92:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d4c94:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4c96:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4c98:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4c9a:	d360      	bcc.n	d4d5e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d4c9c:	1a10      	subs	r0, r2, r0
   d4c9e:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d4ca0:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4ca2:	2a07      	cmp	r2, #7
   d4ca4:	d917      	bls.n	d4cd6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4ca6:	2d01      	cmp	r5, #1
   d4ca8:	bf0c      	ite	eq
   d4caa:	24ff      	moveq	r4, #255	; 0xff
   d4cac:	2400      	movne	r4, #0
   d4cae:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d4cb2:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4cb4:	3908      	subs	r1, #8
   d4cb6:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d4cb8:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4cba:	f800 4c80 	strb.w	r4, [r0, #-128]
   d4cbe:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4cc2:	d8f7      	bhi.n	d4cb4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d4cc4:	f1a2 0108 	sub.w	r1, r2, #8
   d4cc8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d4ccc:	3101      	adds	r1, #1
   d4cce:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d4cd2:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4cd6:	2a00      	cmp	r2, #0
   d4cd8:	d041      	beq.n	d4d5e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4cda:	4923      	ldr	r1, [pc, #140]	; (d4d68 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d4cdc:	5c89      	ldrb	r1, [r1, r2]
   d4cde:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d4ce0:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4ce2:	bf0c      	ite	eq
   d4ce4:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d4ce6:	438a      	bicne	r2, r1
   d4ce8:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d4cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4cee:	2900      	cmp	r1, #0
   d4cf0:	db35      	blt.n	d4d5e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4cf2:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4cf6:	428c      	cmp	r4, r1
   d4cf8:	dd31      	ble.n	d4d5e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4cfa:	2a00      	cmp	r2, #0
    w += x;
   d4cfc:	bfbc      	itt	lt
   d4cfe:	18d2      	addlt	r2, r2, r3
   d4d00:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4d02:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4d06:	bfb8      	it	lt
   d4d08:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4d0a:	18d6      	adds	r6, r2, r3
   d4d0c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4d0e:	bfc4      	itt	gt
   d4d10:	1aa3      	subgt	r3, r4, r2
   d4d12:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4d14:	2b00      	cmp	r3, #0
   d4d16:	dd22      	ble.n	d4d5e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4d18:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4d1a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d4d1e:	4810      	ldr	r0, [pc, #64]	; (d4d60 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d4d20:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4d24:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d4d26:	2201      	movs	r2, #1
   d4d28:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d4d2c:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4d2e:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d4d30:	d109      	bne.n	d4d46 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d4d32:	1e5a      	subs	r2, r3, #1
   d4d34:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d4d36:	1c5c      	adds	r4, r3, #1
   d4d38:	d011      	beq.n	d4d5e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4d3a:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4d3e:	430a      	orrs	r2, r1
   d4d40:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4d44:	e7f5      	b.n	d4d32 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d4d46:	43c9      	mvns	r1, r1
   d4d48:	b2c9      	uxtb	r1, r1
   d4d4a:	1e5a      	subs	r2, r3, #1
   d4d4c:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d4d4e:	1c5a      	adds	r2, r3, #1
   d4d50:	d005      	beq.n	d4d5e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4d52:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4d56:	400a      	ands	r2, r1
   d4d58:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4d5c:	e7f5      	b.n	d4d4a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d4d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d60:	2003d8a9 	.word	0x2003d8a9
   d4d64:	2003d8a1 	.word	0x2003d8a1
   d4d68:	2003d899 	.word	0x2003d899

000d4d6c <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4d6e:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4d70:	4606      	mov	r6, r0
   d4d72:	4614      	mov	r4, r2
   d4d74:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4d76:	db3f      	blt.n	d4df8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4d78:	f000 fbd4 	bl	d5524 <_ZN12Adafruit_GFX5widthEv>
   d4d7c:	4285      	cmp	r5, r0
   d4d7e:	da3b      	bge.n	d4df8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4d80:	2c00      	cmp	r4, #0
   d4d82:	db39      	blt.n	d4df8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4d84:	4630      	mov	r0, r6
   d4d86:	f000 fbd0 	bl	d552a <_ZN12Adafruit_GFX6heightEv>
   d4d8a:	4284      	cmp	r4, r0
   d4d8c:	da34      	bge.n	d4df8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4d8e:	4630      	mov	r0, r6
   d4d90:	f000 fbc6 	bl	d5520 <_ZN12Adafruit_GFX11getRotationEv>
   d4d94:	2802      	cmp	r0, #2
   d4d96:	d127      	bne.n	d4de8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4d98:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d4d9a:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4d9c:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d4d9e:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4da0:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d4da2:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4da4:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d4da6:	b204      	sxth	r4, r0
   d4da8:	e006      	b.n	d4db8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4daa:	2801      	cmp	r0, #1
   d4dac:	d104      	bne.n	d4db8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d4dae:	8933      	ldrh	r3, [r6, #8]
   d4db0:	3b01      	subs	r3, #1
   d4db2:	1b1b      	subs	r3, r3, r4
   d4db4:	462c      	mov	r4, r5
   d4db6:	b21d      	sxth	r5, r3
   d4db8:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d4dba:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4dbc:	fb94 f0f0 	sdiv	r0, r4, r0
   d4dc0:	b200      	sxth	r0, r0
   d4dc2:	4b0e      	ldr	r3, [pc, #56]	; (d4dfc <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d4dc4:	f004 0207 	and.w	r2, r4, #7
   d4dc8:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d4dcc:	d104      	bne.n	d4dd8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4dce:	4097      	lsls	r7, r2
   d4dd0:	5c5a      	ldrb	r2, [r3, r1]
   d4dd2:	4317      	orrs	r7, r2
   d4dd4:	545f      	strb	r7, [r3, r1]
   d4dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d4dd8:	5c58      	ldrb	r0, [r3, r1]
   d4dda:	2701      	movs	r7, #1
   d4ddc:	fa07 f202 	lsl.w	r2, r7, r2
   d4de0:	ea20 0202 	bic.w	r2, r0, r2
   d4de4:	545a      	strb	r2, [r3, r1]
   d4de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4de8:	2803      	cmp	r0, #3
   d4dea:	d1de      	bne.n	d4daa <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d4dec:	8973      	ldrh	r3, [r6, #10]
   d4dee:	3b01      	subs	r3, #1
   d4df0:	1b5b      	subs	r3, r3, r5
   d4df2:	4625      	mov	r5, r4
   d4df4:	b21c      	sxth	r4, r3
   d4df6:	e7df      	b.n	d4db8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d4df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4dfa:	bf00      	nop
   d4dfc:	2003d8a9 	.word	0x2003d8a9

000d4e00 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4e00:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4e02:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4e04:	4604      	mov	r4, r0
   d4e06:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4e08:	2180      	movs	r1, #128	; 0x80
   d4e0a:	f000 fa9f 	bl	d534c <_ZN12Adafruit_GFXC1Ess>
   d4e0e:	4b06      	ldr	r3, [pc, #24]	; (d4e28 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d4e10:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d4e12:	23ff      	movs	r3, #255	; 0xff
   d4e14:	7763      	strb	r3, [r4, #29]
   d4e16:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d4e1a:	77e3      	strb	r3, [r4, #31]
   d4e1c:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d4e1e:	f884 5020 	strb.w	r5, [r4, #32]
}
   d4e22:	4620      	mov	r0, r4
   d4e24:	bd38      	pop	{r3, r4, r5, pc}
   d4e26:	bf00      	nop
   d4e28:	000d975c 	.word	0x000d975c

000d4e2c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d4e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4e30:	2100      	movs	r1, #0
   d4e32:	4801      	ldr	r0, [pc, #4]	; (d4e38 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d4e34:	f004 b9d8 	b.w	d91e8 <memset>
   d4e38:	2003d8a9 	.word	0x2003d8a9

000d4e3c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4e3c:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d4e3e:	4d09      	ldr	r5, [pc, #36]	; (d4e64 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4e40:	6829      	ldr	r1, [r5, #0]
   d4e42:	f011 0401 	ands.w	r4, r1, #1
   d4e46:	d10a      	bne.n	d4e5e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4e48:	4628      	mov	r0, r5
   d4e4a:	f7ff f935 	bl	d40b8 <__cxa_guard_acquire>
   d4e4e:	b130      	cbz	r0, d4e5e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4e50:	4621      	mov	r1, r4
   d4e52:	4805      	ldr	r0, [pc, #20]	; (d4e68 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4e54:	f002 fcf2 	bl	d783c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4e58:	4628      	mov	r0, r5
   d4e5a:	f7ff f932 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d4e5e:	4802      	ldr	r0, [pc, #8]	; (d4e68 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4e60:	bd38      	pop	{r3, r4, r5, pc}
   d4e62:	bf00      	nop
   d4e64:	2003dd1c 	.word	0x2003dd1c
   d4e68:	2003dd20 	.word	0x2003dd20

000d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4e6c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d4e6e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4e72:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4e74:	4604      	mov	r4, r0
   d4e76:	460d      	mov	r5, r1
  if (sid != -1)
   d4e78:	d028      	beq.n	d4ecc <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d4e7a:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d4e7e:	2101      	movs	r1, #1
   d4e80:	b280      	uxth	r0, r0
   d4e82:	f003 fb72 	bl	d856a <digitalWrite>
    digitalWrite(dc, LOW);
   d4e86:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4e8a:	2100      	movs	r1, #0
   d4e8c:	b280      	uxth	r0, r0
   d4e8e:	f003 fb6c 	bl	d856a <digitalWrite>
    digitalWrite(cs, LOW);
   d4e92:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4e96:	2100      	movs	r1, #0
   d4e98:	b280      	uxth	r0, r0
   d4e9a:	f003 fb66 	bl	d856a <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4e9e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4ea2:	b12b      	cbz	r3, d4eb0 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4ea4:	f7ff ffca 	bl	d4e3c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4ea8:	4629      	mov	r1, r5
   d4eaa:	f002 fde3 	bl	d7a74 <_ZN8SPIClass8transferEh>
   d4eae:	e005      	b.n	d4ebc <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4eb0:	462b      	mov	r3, r5
   d4eb2:	2201      	movs	r2, #1
   d4eb4:	7fa1      	ldrb	r1, [r4, #30]
   d4eb6:	7f60      	ldrb	r0, [r4, #29]
   d4eb8:	f003 fb83 	bl	d85c2 <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d4ebc:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4ec0:	2101      	movs	r1, #1
   d4ec2:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d4ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d4ec8:	f003 bb4f 	b.w	d856a <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d4ecc:	f003 fbb6 	bl	d863c <_Z19__fetch_global_Wirev>
   d4ed0:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4ed4:	f003 f940 	bl	d8158 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d4ed8:	f003 fbb0 	bl	d863c <_Z19__fetch_global_Wirev>
   d4edc:	6803      	ldr	r3, [r0, #0]
   d4ede:	2100      	movs	r1, #0
   d4ee0:	689b      	ldr	r3, [r3, #8]
   d4ee2:	4798      	blx	r3
    Wire.write(c);
   d4ee4:	f003 fbaa 	bl	d863c <_Z19__fetch_global_Wirev>
   d4ee8:	6803      	ldr	r3, [r0, #0]
   d4eea:	4629      	mov	r1, r5
   d4eec:	689b      	ldr	r3, [r3, #8]
   d4eee:	4798      	blx	r3
    Wire.endTransmission();
   d4ef0:	f003 fba4 	bl	d863c <_Z19__fetch_global_Wirev>
  }
}
   d4ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d4ef8:	f003 b935 	b.w	d8166 <_ZN7TwoWire15endTransmissionEv>

000d4efc <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d4efc:	b538      	push	{r3, r4, r5, lr}
   d4efe:	4604      	mov	r4, r0
   d4f00:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d4f02:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d4f04:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d4f08:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d4f0a:	3301      	adds	r3, #1
   d4f0c:	d037      	beq.n	d4f7e <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d4f0e:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d4f12:	2101      	movs	r1, #1
   d4f14:	b280      	uxth	r0, r0
   d4f16:	f003 fb17 	bl	d8548 <pinMode>
    pinMode(cs, OUTPUT);
   d4f1a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4f1e:	2101      	movs	r1, #1
   d4f20:	b280      	uxth	r0, r0
   d4f22:	f003 fb11 	bl	d8548 <pinMode>
    if (!hwSPI){
   d4f26:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4f2a:	b95b      	cbnz	r3, d4f44 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d4f2c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4f30:	2101      	movs	r1, #1
   d4f32:	b280      	uxth	r0, r0
   d4f34:	f003 fb08 	bl	d8548 <pinMode>
    	pinMode(sclk, OUTPUT);
   d4f38:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d4f3c:	2101      	movs	r1, #1
   d4f3e:	b280      	uxth	r0, r0
   d4f40:	f003 fb02 	bl	d8548 <pinMode>
    	}
    if (hwSPI){
   d4f44:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4f48:	b1eb      	cbz	r3, d4f86 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d4f4a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4f4e:	2101      	movs	r1, #1
   d4f50:	b280      	uxth	r0, r0
   d4f52:	f003 fb0a 	bl	d856a <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d4f56:	f7ff ff71 	bl	d4e3c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4f5a:	2101      	movs	r1, #1
   d4f5c:	f002 fc89 	bl	d7872 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d4f60:	f7ff ff6c 	bl	d4e3c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4f64:	2110      	movs	r1, #16
   d4f66:	f002 fd61 	bl	d7a2c <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d4f6a:	f7ff ff67 	bl	d4e3c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4f6e:	2100      	movs	r1, #0
   d4f70:	f002 fc90 	bl	d7894 <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4f74:	f7ff ff62 	bl	d4e3c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4f78:	f002 fc6a 	bl	d7850 <_ZN8SPIClass5beginEv>
   d4f7c:	e003      	b.n	d4f86 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d4f7e:	f003 fb5d 	bl	d863c <_Z19__fetch_global_Wirev>
   d4f82:	f003 f8df 	bl	d8144 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d4f86:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4f8a:	2101      	movs	r1, #1
   d4f8c:	b280      	uxth	r0, r0
   d4f8e:	f003 fadb 	bl	d8548 <pinMode>
  digitalWrite(rst, HIGH);
   d4f92:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4f96:	2101      	movs	r1, #1
   d4f98:	b280      	uxth	r0, r0
   d4f9a:	f003 fae6 	bl	d856a <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d4f9e:	2001      	movs	r0, #1
   d4fa0:	f002 fe70 	bl	d7c84 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d4fa4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4fa8:	2100      	movs	r1, #0
   d4faa:	b280      	uxth	r0, r0
   d4fac:	f003 fadd 	bl	d856a <digitalWrite>
  // wait 10ms
  delay(10);
   d4fb0:	200a      	movs	r0, #10
   d4fb2:	f002 fe67 	bl	d7c84 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d4fb6:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4fba:	2101      	movs	r1, #1
   d4fbc:	b280      	uxth	r0, r0
   d4fbe:	f003 fad4 	bl	d856a <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d4fc2:	4620      	mov	r0, r4
   d4fc4:	21ae      	movs	r1, #174	; 0xae
   d4fc6:	f7ff ff51 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d4fca:	4620      	mov	r0, r4
   d4fcc:	21d5      	movs	r1, #213	; 0xd5
   d4fce:	f7ff ff4d 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d4fd2:	4620      	mov	r0, r4
   d4fd4:	2180      	movs	r1, #128	; 0x80
   d4fd6:	f7ff ff49 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d4fda:	4620      	mov	r0, r4
   d4fdc:	21a8      	movs	r1, #168	; 0xa8
   d4fde:	f7ff ff45 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d4fe2:	4620      	mov	r0, r4
   d4fe4:	213f      	movs	r1, #63	; 0x3f
   d4fe6:	f7ff ff41 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d4fea:	4620      	mov	r0, r4
   d4fec:	21d3      	movs	r1, #211	; 0xd3
   d4fee:	f7ff ff3d 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d4ff2:	4620      	mov	r0, r4
   d4ff4:	2100      	movs	r1, #0
   d4ff6:	f7ff ff39 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d4ffa:	4620      	mov	r0, r4
   d4ffc:	2140      	movs	r1, #64	; 0x40
   d4ffe:	f7ff ff35 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d5002:	218d      	movs	r1, #141	; 0x8d
   d5004:	4620      	mov	r0, r4
   d5006:	f7ff ff31 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d500a:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d500c:	bf0c      	ite	eq
   d500e:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d5010:	2114      	movne	r1, #20
   d5012:	4620      	mov	r0, r4
   d5014:	f7ff ff2a 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d5018:	4620      	mov	r0, r4
   d501a:	2120      	movs	r1, #32
   d501c:	f7ff ff26 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d5020:	4620      	mov	r0, r4
   d5022:	2100      	movs	r1, #0
   d5024:	f7ff ff22 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d5028:	4620      	mov	r0, r4
   d502a:	21a1      	movs	r1, #161	; 0xa1
   d502c:	f7ff ff1e 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d5030:	4620      	mov	r0, r4
   d5032:	21c8      	movs	r1, #200	; 0xc8
   d5034:	f7ff ff1a 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d5038:	4620      	mov	r0, r4
   d503a:	21da      	movs	r1, #218	; 0xda
   d503c:	f7ff ff16 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d5040:	4620      	mov	r0, r4
   d5042:	2112      	movs	r1, #18
   d5044:	f7ff ff12 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d5048:	2181      	movs	r1, #129	; 0x81
   d504a:	4620      	mov	r0, r4
   d504c:	f7ff ff0e 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5050:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d5052:	bf0c      	ite	eq
   d5054:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d5056:	21cf      	movne	r1, #207	; 0xcf
   d5058:	4620      	mov	r0, r4
   d505a:	f7ff ff07 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d505e:	21d9      	movs	r1, #217	; 0xd9
   d5060:	4620      	mov	r0, r4
   d5062:	f7ff ff03 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5066:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d5068:	bf0c      	ite	eq
   d506a:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d506c:	21f1      	movne	r1, #241	; 0xf1
   d506e:	4620      	mov	r0, r4
   d5070:	f7ff fefc 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d5074:	4620      	mov	r0, r4
   d5076:	21db      	movs	r1, #219	; 0xdb
   d5078:	f7ff fef8 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d507c:	4620      	mov	r0, r4
   d507e:	2140      	movs	r1, #64	; 0x40
   d5080:	f7ff fef4 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d5084:	4620      	mov	r0, r4
   d5086:	21a4      	movs	r1, #164	; 0xa4
   d5088:	f7ff fef0 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d508c:	4620      	mov	r0, r4
   d508e:	21a6      	movs	r1, #166	; 0xa6
   d5090:	f7ff feec 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5094:	4620      	mov	r0, r4
   d5096:	21af      	movs	r1, #175	; 0xaf
}
   d5098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d509c:	f7ff bee6 	b.w	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d50a0 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d50a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d50a4:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d50a6:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d50a8:	f7ff fee0 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d50ac:	2100      	movs	r1, #0
   d50ae:	4620      	mov	r0, r4
   d50b0:	f7ff fedc 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d50b4:	217f      	movs	r1, #127	; 0x7f
   d50b6:	4620      	mov	r0, r4
   d50b8:	f7ff fed8 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d50bc:	2122      	movs	r1, #34	; 0x22
   d50be:	4620      	mov	r0, r4
   d50c0:	f7ff fed4 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d50c4:	2100      	movs	r1, #0
   d50c6:	4620      	mov	r0, r4
   d50c8:	f7ff fed0 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d50cc:	2107      	movs	r1, #7
   d50ce:	4620      	mov	r0, r4
   d50d0:	f7ff fecc 	bl	d4e6c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d50d4:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d50d8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d5198 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d50dc:	3301      	adds	r3, #1
   d50de:	d035      	beq.n	d514c <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d50e0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d50e4:	2101      	movs	r1, #1
   d50e6:	b280      	uxth	r0, r0
   d50e8:	f003 fa3f 	bl	d856a <digitalWrite>
    digitalWrite(dc, HIGH);
   d50ec:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d50f0:	2101      	movs	r1, #1
   d50f2:	b280      	uxth	r0, r0
   d50f4:	f003 fa39 	bl	d856a <digitalWrite>
    digitalWrite(cs, LOW);
   d50f8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d50fc:	2100      	movs	r1, #0
   d50fe:	b280      	uxth	r0, r0
   d5100:	f003 fa33 	bl	d856a <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d5104:	2001      	movs	r0, #1
   d5106:	f002 f981 	bl	d740c <HAL_Delay_Microseconds>
   d510a:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d510c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d5110:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d5114:	b12b      	cbz	r3, d5122 <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5116:	f7ff fe91 	bl	d4e3c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d511a:	4631      	mov	r1, r6
   d511c:	f002 fcaa 	bl	d7a74 <_ZN8SPIClass8transferEh>
   d5120:	e005      	b.n	d512e <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d5122:	4633      	mov	r3, r6
   d5124:	2201      	movs	r2, #1
   d5126:	7fa1      	ldrb	r1, [r4, #30]
   d5128:	7f60      	ldrb	r0, [r4, #29]
   d512a:	f003 fa4a 	bl	d85c2 <shiftOut>
   d512e:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d5130:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d5134:	d1ea      	bne.n	d510c <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d5136:	2001      	movs	r0, #1
   d5138:	f002 f968 	bl	d740c <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d513c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5140:	2101      	movs	r1, #1
   d5142:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d5144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d5148:	f003 ba0f 	b.w	d856a <digitalWrite>
   d514c:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d514e:	f003 fa75 	bl	d863c <_Z19__fetch_global_Wirev>
   d5152:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d5156:	f002 ffff 	bl	d8158 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d515a:	f003 fa6f 	bl	d863c <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d515e:	6803      	ldr	r3, [r0, #0]
   d5160:	2140      	movs	r1, #64	; 0x40
   d5162:	689b      	ldr	r3, [r3, #8]
   d5164:	4798      	blx	r3
   d5166:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d5168:	f003 fa68 	bl	d863c <_Z19__fetch_global_Wirev>
   d516c:	19af      	adds	r7, r5, r6
   d516e:	6803      	ldr	r3, [r0, #0]
   d5170:	b2bf      	uxth	r7, r7
   d5172:	689b      	ldr	r3, [r3, #8]
   d5174:	f818 1007 	ldrb.w	r1, [r8, r7]
   d5178:	3601      	adds	r6, #1
   d517a:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d517c:	2e10      	cmp	r6, #16
   d517e:	d1f3      	bne.n	d5168 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d5180:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d5182:	f003 fa5b 	bl	d863c <_Z19__fetch_global_Wirev>
   d5186:	b2ad      	uxth	r5, r5
   d5188:	f002 ffed 	bl	d8166 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d518c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d5190:	d1dd      	bne.n	d514e <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d5192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5196:	bf00      	nop
   d5198:	2003d8a9 	.word	0x2003d8a9

000d519c <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d519c:	f002 b89e 	b.w	d72dc <HAL_Pin_Map>

000d51a0 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d51a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d51a4:	b085      	sub	sp, #20
   d51a6:	461e      	mov	r6, r3
   d51a8:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d51ac:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d51b0:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d51b2:	1a9a      	subs	r2, r3, r2
   d51b4:	2a00      	cmp	r2, #0
   d51b6:	bfb8      	it	lt
   d51b8:	4252      	neglt	r2, r2
   d51ba:	9200      	str	r2, [sp, #0]
   d51bc:	1a72      	subs	r2, r6, r1
   d51be:	2a00      	cmp	r2, #0
   d51c0:	bfb8      	it	lt
   d51c2:	4252      	neglt	r2, r2
   d51c4:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d51c6:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d51c8:	9a00      	ldr	r2, [sp, #0]
   d51ca:	9901      	ldr	r1, [sp, #4]
   d51cc:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d51ce:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d51d0:	dd05      	ble.n	d51de <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d51d2:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d51d4:	461e      	mov	r6, r3
   d51d6:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d51d8:	4622      	mov	r2, r4
    swap(x0, y0);
   d51da:	462c      	mov	r4, r5
   d51dc:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d51de:	42b4      	cmp	r4, r6
   d51e0:	dd05      	ble.n	d51ee <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d51e2:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d51e4:	461d      	mov	r5, r3
   d51e6:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d51e8:	4622      	mov	r2, r4
   d51ea:	4634      	mov	r4, r6
   d51ec:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d51ee:	1b5a      	subs	r2, r3, r5
   d51f0:	2a00      	cmp	r2, #0
   d51f2:	bfb8      	it	lt
   d51f4:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d51f6:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d51fa:	429d      	cmp	r5, r3
   d51fc:	bfb4      	ite	lt
   d51fe:	2301      	movlt	r3, #1
   d5200:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d5204:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d5208:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d520a:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d520c:	fa0f f788 	sxth.w	r7, r8
   d5210:	2202      	movs	r2, #2
   d5212:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d5216:	42b4      	cmp	r4, r6
   d5218:	dc1f      	bgt.n	d525a <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d521a:	9a01      	ldr	r2, [sp, #4]
   d521c:	9b00      	ldr	r3, [sp, #0]
   d521e:	4293      	cmp	r3, r2
   d5220:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d5224:	bfc8      	it	gt
   d5226:	4622      	movgt	r2, r4
   d5228:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d522c:	bfc8      	it	gt
   d522e:	4629      	movgt	r1, r5
   d5230:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d5232:	bfdc      	itt	le
   d5234:	462a      	movle	r2, r5
   d5236:	4621      	movle	r1, r4
   d5238:	4648      	mov	r0, r9
   d523a:	47d8      	blx	fp
    }
    err -= dy;
   d523c:	9b03      	ldr	r3, [sp, #12]
   d523e:	1aff      	subs	r7, r7, r3
   d5240:	b2bb      	uxth	r3, r7
   d5242:	b21f      	sxth	r7, r3
    if (err < 0) {
   d5244:	2f00      	cmp	r7, #0
   d5246:	da05      	bge.n	d5254 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d5248:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d524a:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d524e:	4415      	add	r5, r2
   d5250:	b22d      	sxth	r5, r5
      err += dx;
   d5252:	b23f      	sxth	r7, r7
   d5254:	3401      	adds	r4, #1
   d5256:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d5258:	e7dd      	b.n	d5216 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d525a:	b005      	add	sp, #20
   d525c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5260 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5260:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5264:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d5268:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d526a:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d526e:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5270:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d5272:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5274:	4691      	mov	r9, r2
   d5276:	460d      	mov	r5, r1
   d5278:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d527a:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d527c:	6823      	ldr	r3, [r4, #0]
   d527e:	9600      	str	r6, [sp, #0]
   d5280:	f10a 32ff 	add.w	r2, sl, #4294967295
   d5284:	444a      	add	r2, r9
   d5286:	69df      	ldr	r7, [r3, #28]
   d5288:	4629      	mov	r1, r5
   d528a:	4643      	mov	r3, r8
   d528c:	4620      	mov	r0, r4
   d528e:	b212      	sxth	r2, r2
   d5290:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d5292:	6823      	ldr	r3, [r4, #0]
   d5294:	9600      	str	r6, [sp, #0]
   d5296:	699f      	ldr	r7, [r3, #24]
   d5298:	464a      	mov	r2, r9
   d529a:	4653      	mov	r3, sl
   d529c:	4629      	mov	r1, r5
   d529e:	4620      	mov	r0, r4
   d52a0:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d52a2:	6823      	ldr	r3, [r4, #0]
   d52a4:	960a      	str	r6, [sp, #40]	; 0x28
   d52a6:	f108 31ff 	add.w	r1, r8, #4294967295
   d52aa:	4429      	add	r1, r5
   d52ac:	699d      	ldr	r5, [r3, #24]
   d52ae:	464a      	mov	r2, r9
   d52b0:	4653      	mov	r3, sl
   d52b2:	b209      	sxth	r1, r1
   d52b4:	4620      	mov	r0, r4
   d52b6:	46ac      	mov	ip, r5
}
   d52b8:	b002      	add	sp, #8
   d52ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d52be:	4760      	bx	ip

000d52c0 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d52c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d52c2:	3b01      	subs	r3, #1
   d52c4:	4413      	add	r3, r2
   d52c6:	6804      	ldr	r4, [r0, #0]
   d52c8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d52cc:	9501      	str	r5, [sp, #4]
   d52ce:	b21b      	sxth	r3, r3
   d52d0:	9300      	str	r3, [sp, #0]
   d52d2:	6964      	ldr	r4, [r4, #20]
   d52d4:	460b      	mov	r3, r1
   d52d6:	47a0      	blx	r4
}
   d52d8:	b003      	add	sp, #12
   d52da:	bd30      	pop	{r4, r5, pc}

000d52dc <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d52dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d52de:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d52e2:	6804      	ldr	r4, [r0, #0]
   d52e4:	e88d 0024 	stmia.w	sp, {r2, r5}
   d52e8:	3b01      	subs	r3, #1
   d52ea:	440b      	add	r3, r1
   d52ec:	6964      	ldr	r4, [r4, #20]
   d52ee:	b21b      	sxth	r3, r3
   d52f0:	47a0      	blx	r4
}
   d52f2:	b003      	add	sp, #12
   d52f4:	bd30      	pop	{r4, r5, pc}

000d52f6 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d52f6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d52fa:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d52fe:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d5302:	4605      	mov	r5, r0
   d5304:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d5306:	460c      	mov	r4, r1
   d5308:	eb01 0a03 	add.w	sl, r1, r3
   d530c:	4554      	cmp	r4, sl
   d530e:	da0b      	bge.n	d5328 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d5310:	682b      	ldr	r3, [r5, #0]
   d5312:	f8cd 9000 	str.w	r9, [sp]
   d5316:	699e      	ldr	r6, [r3, #24]
   d5318:	4621      	mov	r1, r4
   d531a:	4643      	mov	r3, r8
   d531c:	463a      	mov	r2, r7
   d531e:	4628      	mov	r0, r5
   d5320:	3401      	adds	r4, #1
   d5322:	47b0      	blx	r6
   d5324:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d5326:	e7f1      	b.n	d530c <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d5328:	b002      	add	sp, #8
   d532a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d532e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d532e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d5330:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d5334:	6804      	ldr	r4, [r0, #0]
   d5336:	9101      	str	r1, [sp, #4]
   d5338:	9200      	str	r2, [sp, #0]
   d533a:	2200      	movs	r2, #0
   d533c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5340:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d5342:	4611      	mov	r1, r2
   d5344:	47a0      	blx	r4
}
   d5346:	b002      	add	sp, #8
   d5348:	bd10      	pop	{r4, pc}

000d534a <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d534a:	4770      	bx	lr

000d534c <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d534c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d534e:	8101      	strh	r1, [r0, #8]
   d5350:	2400      	movs	r4, #0
   d5352:	4d08      	ldr	r5, [pc, #32]	; (d5374 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d5354:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d5356:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d5358:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d535a:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d535e:	2201      	movs	r2, #1
   d5360:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d5362:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d5364:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d5366:	8204      	strh	r4, [r0, #16]
   d5368:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d536a:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d536c:	82c1      	strh	r1, [r0, #22]
   d536e:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d5370:	7682      	strb	r2, [r0, #26]
}
   d5372:	bd30      	pop	{r4, r5, pc}
   d5374:	000d9794 	.word	0x000d9794

000d5378 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d537c:	b08f      	sub	sp, #60	; 0x3c
   d537e:	4605      	mov	r5, r0
   d5380:	9106      	str	r1, [sp, #24]
   d5382:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d5386:	9107      	str	r1, [sp, #28]
   d5388:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d538c:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d538e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d5392:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5394:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d5398:	4281      	cmp	r1, r0
   d539a:	dd7c      	ble.n	d5496 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d539c:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d53a0:	4291      	cmp	r1, r2
   d53a2:	dd78      	ble.n	d5496 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d53a4:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d53a6:	fb11 0008 	smlabb	r0, r1, r8, r0
   d53aa:	2800      	cmp	r0, #0
   d53ac:	dd73      	ble.n	d5496 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d53ae:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d53b2:	2800      	cmp	r0, #0
   d53b4:	dd6f      	ble.n	d5496 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d53b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d53ba:	b296      	uxth	r6, r2
   d53bc:	930c      	str	r3, [sp, #48]	; 0x30
   d53be:	f106 0308 	add.w	r3, r6, #8
   d53c2:	b29b      	uxth	r3, r3
   d53c4:	9109      	str	r1, [sp, #36]	; 0x24
   d53c6:	2400      	movs	r4, #0
   d53c8:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d53ca:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d53cc:	bf1c      	itt	ne
   d53ce:	4b33      	ldrne	r3, [pc, #204]	; (d549c <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d53d0:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d53d2:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d53d4:	bf16      	itet	ne
   d53d6:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d53d8:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d53dc:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d53e0:	9604      	str	r6, [sp, #16]
   d53e2:	fa1f f388 	uxth.w	r3, r8
   d53e6:	9303      	str	r3, [sp, #12]
   d53e8:	9a03      	ldr	r2, [sp, #12]
   d53ea:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d53ee:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d53f2:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d53f6:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d53f8:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d53fa:	920a      	str	r2, [sp, #40]	; 0x28
   d53fc:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d53fe:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d5402:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d5404:	f019 0f01 	tst.w	r9, #1
   d5408:	d011      	beq.n	d542e <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d540a:	f1b8 0f01 	cmp.w	r8, #1
   d540e:	682b      	ldr	r3, [r5, #0]
   d5410:	d103      	bne.n	d541a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d5412:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5416:	9b07      	ldr	r3, [sp, #28]
   d5418:	e014      	b.n	d5444 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d541a:	9a07      	ldr	r2, [sp, #28]
   d541c:	9201      	str	r2, [sp, #4]
   d541e:	f8cd a000 	str.w	sl, [sp]
   d5422:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d5426:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d542a:	4653      	mov	r3, sl
   d542c:	e018      	b.n	d5460 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d542e:	9b07      	ldr	r3, [sp, #28]
   d5430:	9a08      	ldr	r2, [sp, #32]
   d5432:	4293      	cmp	r3, r2
   d5434:	d017      	beq.n	d5466 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d5436:	f1b8 0f01 	cmp.w	r8, #1
   d543a:	682b      	ldr	r3, [r5, #0]
   d543c:	d107      	bne.n	d544e <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d543e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5442:	4613      	mov	r3, r2
   d5444:	b23a      	sxth	r2, r7
   d5446:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d5448:	4628      	mov	r0, r5
   d544a:	47d8      	blx	fp
   d544c:	e00b      	b.n	d5466 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d544e:	9a08      	ldr	r2, [sp, #32]
   d5450:	9201      	str	r2, [sp, #4]
   d5452:	f8cd a000 	str.w	sl, [sp]
   d5456:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d545a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d545e:	4653      	mov	r3, sl
   d5460:	990a      	ldr	r1, [sp, #40]	; 0x28
   d5462:	4628      	mov	r0, r5
   d5464:	47d8      	blx	fp
   d5466:	9b04      	ldr	r3, [sp, #16]
   d5468:	9a03      	ldr	r2, [sp, #12]
   d546a:	4413      	add	r3, r2
   d546c:	b29b      	uxth	r3, r3
   d546e:	9304      	str	r3, [sp, #16]
   d5470:	9b05      	ldr	r3, [sp, #20]
   d5472:	4413      	add	r3, r2
   d5474:	b29b      	uxth	r3, r3
   d5476:	3701      	adds	r7, #1
   d5478:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d547a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d547c:	b2bf      	uxth	r7, r7
   d547e:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d5480:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d5484:	d1be      	bne.n	d5404 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d5486:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5488:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d548a:	3401      	adds	r4, #1
   d548c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5490:	b264      	sxtb	r4, r4
   d5492:	9309      	str	r3, [sp, #36]	; 0x24
   d5494:	d199      	bne.n	d53ca <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d5496:	b00f      	add	sp, #60	; 0x3c
   d5498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d549c:	000d97c4 	.word	0x000d97c4

000d54a0 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d54a0:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d54a2:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d54a4:	b085      	sub	sp, #20
   d54a6:	4604      	mov	r4, r0
   d54a8:	460b      	mov	r3, r1

  if (c == '\n') {
   d54aa:	d104      	bne.n	d54b6 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d54ac:	7e02      	ldrb	r2, [r0, #24]
   d54ae:	8a43      	ldrh	r3, [r0, #18]
   d54b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d54b4:	e023      	b.n	d54fe <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d54b6:	290d      	cmp	r1, #13
   d54b8:	d024      	beq.n	d5504 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d54ba:	7e05      	ldrb	r5, [r0, #24]
   d54bc:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d54c0:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d54c4:	9502      	str	r5, [sp, #8]
   d54c6:	8ac5      	ldrh	r5, [r0, #22]
   d54c8:	9501      	str	r5, [sp, #4]
   d54ca:	8a85      	ldrh	r5, [r0, #20]
   d54cc:	9500      	str	r5, [sp, #0]
   d54ce:	f7ff ff53 	bl	d5378 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d54d2:	7e22      	ldrb	r2, [r4, #24]
   d54d4:	8a23      	ldrh	r3, [r4, #16]
   d54d6:	b291      	uxth	r1, r2
   d54d8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d54dc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d54e0:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d54e2:	b21b      	sxth	r3, r3
   d54e4:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d54e6:	b168      	cbz	r0, d5504 <_ZN12Adafruit_GFX5writeEh+0x64>
   d54e8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d54ec:	f06f 0505 	mvn.w	r5, #5
   d54f0:	fb05 0202 	mla	r2, r5, r2, r0
   d54f4:	4293      	cmp	r3, r2
   d54f6:	dd05      	ble.n	d5504 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d54f8:	8a63      	ldrh	r3, [r4, #18]
   d54fa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d54fe:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d5500:	2300      	movs	r3, #0
   d5502:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d5504:	2001      	movs	r0, #1
   d5506:	b005      	add	sp, #20
   d5508:	bd30      	pop	{r4, r5, pc}

000d550a <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d550a:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d550c:	8242      	strh	r2, [r0, #18]
   d550e:	4770      	bx	lr

000d5510 <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d5510:	2900      	cmp	r1, #0
   d5512:	bf08      	it	eq
   d5514:	2101      	moveq	r1, #1
   d5516:	7601      	strb	r1, [r0, #24]
   d5518:	4770      	bx	lr

000d551a <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d551a:	82c1      	strh	r1, [r0, #22]
   d551c:	8281      	strh	r1, [r0, #20]
   d551e:	4770      	bx	lr

000d5520 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d5520:	7e40      	ldrb	r0, [r0, #25]
   d5522:	4770      	bx	lr

000d5524 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d5524:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d5528:	4770      	bx	lr

000d552a <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d552a:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d552e:	4770      	bx	lr

000d5530 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d5530:	f001 bed4 	b.w	d72dc <HAL_Pin_Map>

000d5534 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d5534:	f001 bed2 	b.w	d72dc <HAL_Pin_Map>

000d5538 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d5538:	f001 bed0 	b.w	d72dc <HAL_Pin_Map>

000d553c <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d553c:	b510      	push	{r4, lr}
   d553e:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5540:	3024      	adds	r0, #36	; 0x24
   d5542:	f000 fe7b 	bl	d623c <_ZN8FatCache4syncEv>
   d5546:	b128      	cbz	r0, d5554 <_ZN9FatVolume9cacheSyncEv+0x18>
   d5548:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d554c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5550:	f000 be74 	b.w	d623c <_ZN8FatCache4syncEv>
  }
   d5554:	bd10      	pop	{r4, pc}

000d5556 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d5556:	1e41      	subs	r1, r0, #1
   d5558:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d555c:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d555e:	0843      	lsrs	r3, r0, #1
   d5560:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d5564:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d5568:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d556c:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d556e:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d5570:	d1f5      	bne.n	d555e <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d5572:	4770      	bx	lr

000d5574 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d5574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d5578:	7803      	ldrb	r3, [r0, #0]
   d557a:	2b20      	cmp	r3, #32
   d557c:	f100 0401 	add.w	r4, r0, #1
   d5580:	d101      	bne.n	d5586 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d5582:	4620      	mov	r0, r4
   d5584:	e7f8      	b.n	d5578 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5586:	4f70      	ldr	r7, [pc, #448]	; (d5748 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d5588:	6088      	str	r0, [r1, #8]
   d558a:	4605      	mov	r5, r0
   d558c:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d558e:	462e      	mov	r6, r5
   d5590:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d5594:	b30b      	cbz	r3, d55da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d5596:	2b2f      	cmp	r3, #47	; 0x2f
   d5598:	d101      	bne.n	d559e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d559a:	1903      	adds	r3, r0, r4
   d559c:	e017      	b.n	d55ce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d559e:	2b5c      	cmp	r3, #92	; 0x5c
   d55a0:	d102      	bne.n	d55a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d55a2:	2000      	movs	r0, #0
   d55a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d55a8:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d55ac:	b2e4      	uxtb	r4, r4
   d55ae:	2c1d      	cmp	r4, #29
   d55b0:	d803      	bhi.n	d55ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d55b2:	fa27 f404 	lsr.w	r4, r7, r4
   d55b6:	07e4      	lsls	r4, r4, #31
   d55b8:	d4f3      	bmi.n	d55a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d55ba:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d55be:	2c3c      	cmp	r4, #60	; 0x3c
   d55c0:	d0ef      	beq.n	d55a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d55c2:	3b20      	subs	r3, #32
   d55c4:	2b5e      	cmp	r3, #94	; 0x5e
   d55c6:	d9e1      	bls.n	d558c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d55c8:	e7eb      	b.n	d55a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d55ca:	2d2f      	cmp	r5, #47	; 0x2f
   d55cc:	d105      	bne.n	d55da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d55ce:	461e      	mov	r6, r3
   d55d0:	f813 5b01 	ldrb.w	r5, [r3], #1
   d55d4:	2d20      	cmp	r5, #32
   d55d6:	d1f8      	bne.n	d55ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d55d8:	e7f9      	b.n	d55ce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d55da:	6016      	str	r6, [r2, #0]
   d55dc:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d55de:	4298      	cmp	r0, r3
   d55e0:	ebc0 0803 	rsb	r8, r0, r3
   d55e4:	d009      	beq.n	d55fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d55e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d55ea:	2a2e      	cmp	r2, #46	; 0x2e
   d55ec:	d0f7      	beq.n	d55de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d55ee:	2a20      	cmp	r2, #32
   d55f0:	d0f5      	beq.n	d55de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d55f2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d55f6:	dcd4      	bgt.n	d55a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d55f8:	e001      	b.n	d55fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d55fa:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d55fe:	f8c1 8004 	str.w	r8, [r1, #4]
   d5602:	f101 030c 	add.w	r3, r1, #12
   d5606:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d560a:	2420      	movs	r4, #32
   d560c:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d5610:	4293      	cmp	r3, r2
   d5612:	d1fb      	bne.n	d560c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d5614:	4603      	mov	r3, r0
   d5616:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d5618:	f813 4b01 	ldrb.w	r4, [r3], #1
   d561c:	2c2e      	cmp	r4, #46	; 0x2e
   d561e:	d0fa      	beq.n	d5616 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d5620:	2c20      	cmp	r4, #32
   d5622:	d0f8      	beq.n	d5616 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d5624:	fab2 f482 	clz	r4, r2
   d5628:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d562a:	f108 36ff 	add.w	r6, r8, #4294967295
   d562e:	1c73      	adds	r3, r6, #1
   d5630:	d107      	bne.n	d5642 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d5632:	2700      	movs	r7, #0
   d5634:	f04f 0e07 	mov.w	lr, #7
   d5638:	463d      	mov	r5, r7
   d563a:	46ba      	mov	sl, r7
   d563c:	f04f 0908 	mov.w	r9, #8
   d5640:	e009      	b.n	d5656 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d5642:	5d83      	ldrb	r3, [r0, r6]
   d5644:	2b2e      	cmp	r3, #46	; 0x2e
   d5646:	d0f4      	beq.n	d5632 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d5648:	3e01      	subs	r6, #1
   d564a:	e7f0      	b.n	d562e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d564c:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d564e:	2b20      	cmp	r3, #32
   d5650:	d104      	bne.n	d565c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d5652:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d5654:	3201      	adds	r2, #1
   d5656:	4542      	cmp	r2, r8
   d5658:	dbf8      	blt.n	d564c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d565a:	e04b      	b.n	d56f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d565c:	2b2e      	cmp	r3, #46	; 0x2e
   d565e:	d102      	bne.n	d5666 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d5660:	42b2      	cmp	r2, r6
   d5662:	d1f6      	bne.n	d5652 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d5664:	e003      	b.n	d566e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d5666:	2b22      	cmp	r3, #34	; 0x22
   d5668:	d017      	beq.n	d569a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d566a:	2b7c      	cmp	r3, #124	; 0x7c
   d566c:	d015      	beq.n	d569a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d566e:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d5672:	f1bc 0f05 	cmp.w	ip, #5
   d5676:	d801      	bhi.n	d567c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d5678:	2b2d      	cmp	r3, #45	; 0x2d
   d567a:	d10e      	bne.n	d569a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d567c:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d5680:	f1bc 0f05 	cmp.w	ip, #5
   d5684:	d909      	bls.n	d569a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d5686:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d568a:	f1bc 0f02 	cmp.w	ip, #2
   d568e:	d904      	bls.n	d569a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d5690:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d5694:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d5698:	d902      	bls.n	d56a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d569a:	42b2      	cmp	r2, r6
   d569c:	d10e      	bne.n	d56bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d569e:	e049      	b.n	d5734 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d56a0:	42b2      	cmp	r2, r6
   d56a2:	d047      	beq.n	d5734 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d56a4:	4575      	cmp	r5, lr
   d56a6:	d821      	bhi.n	d56ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d56a8:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d56ac:	f1bc 0f19 	cmp.w	ip, #25
   d56b0:	d808      	bhi.n	d56c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d56b2:	3b20      	subs	r3, #32
   d56b4:	b2db      	uxtb	r3, r3
        lc |= bit;
   d56b6:	ea49 0707 	orr.w	r7, r9, r7
   d56ba:	e00a      	b.n	d56d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d56bc:	4575      	cmp	r5, lr
   d56be:	d815      	bhi.n	d56ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d56c0:	2400      	movs	r4, #0
      c = '_';
   d56c2:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d56c4:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d56c8:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d56cc:	bf98      	it	ls
   d56ce:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d56d2:	f105 0c01 	add.w	ip, r5, #1
   d56d6:	fa5f fc8c 	uxtb.w	ip, ip
   d56da:	440d      	add	r5, r1
      if (i < 7) {
   d56dc:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d56e0:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d56e2:	d801      	bhi.n	d56e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d56e4:	f881 c00c 	strb.w	ip, [r1, #12]
   d56e8:	4665      	mov	r5, ip
   d56ea:	e7b3      	b.n	d5654 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d56ec:	f1be 0f0a 	cmp.w	lr, #10
   d56f0:	d117      	bne.n	d5722 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d56f2:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d56f4:	7b4b      	ldrb	r3, [r1, #13]
   d56f6:	2b20      	cmp	r3, #32
   d56f8:	f43f af53 	beq.w	d55a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d56fc:	b13c      	cbz	r4, d570e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d56fe:	ea1a 0f07 	tst.w	sl, r7
   d5702:	bf18      	it	ne
   d5704:	2702      	movne	r7, #2
   d5706:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d5708:	2001      	movs	r0, #1
   d570a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d570e:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d5710:	2001      	movs	r0, #1
   d5712:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d5714:	4419      	add	r1, r3
   d5716:	237e      	movs	r3, #126	; 0x7e
   d5718:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d571a:	2331      	movs	r3, #49	; 0x31
   d571c:	738b      	strb	r3, [r1, #14]
   d571e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d5722:	42b2      	cmp	r2, r6
   d5724:	dce5      	bgt.n	d56f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d5726:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d5728:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d572c:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d572e:	f04f 0910 	mov.w	r9, #16
   d5732:	e78e      	b.n	d5652 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d5734:	f1be 0f0a 	cmp.w	lr, #10
   d5738:	d0db      	beq.n	d56f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d573a:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d573c:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d5740:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d5742:	f04f 0910 	mov.w	r9, #16
   d5746:	e785      	b.n	d5654 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d5748:	31000101 	.word	0x31000101

000d574c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d574c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d5750:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d5754:	4606      	mov	r6, r0
   d5756:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d5758:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d575a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d575c:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d5760:	6869      	ldr	r1, [r5, #4]
   d5762:	68aa      	ldr	r2, [r5, #8]
   d5764:	1863      	adds	r3, r4, r1
   d5766:	b29b      	uxth	r3, r3
   d5768:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d576a:	4291      	cmp	r1, r2
   d576c:	d006      	beq.n	d577c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d576e:	f812 0b01 	ldrb.w	r0, [r2], #1
   d5772:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d5776:	4043      	eors	r3, r0
   d5778:	b29b      	uxth	r3, r3
   d577a:	e7f6      	b.n	d576a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d577c:	f1b9 0f03 	cmp.w	r9, #3
   d5780:	bf28      	it	cs
   d5782:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5786:	f109 0204 	add.w	r2, r9, #4
   d578a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d578c:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5790:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5792:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5794:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5796:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5798:	bf94      	ite	ls
   d579a:	3130      	addls	r1, #48	; 0x30
   d579c:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d579e:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d57a0:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d57a2:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d57a6:	d3f1      	bcc.n	d578c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d57a8:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d57ac:	2100      	movs	r1, #0
   d57ae:	735f      	strb	r7, [r3, #13]
   d57b0:	4630      	mov	r0, r6
   d57b2:	f000 fb1e 	bl	d5df2 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d57b6:	2101      	movs	r1, #1
   d57b8:	4630      	mov	r0, r6
   d57ba:	f000 fafd 	bl	d5db8 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d57be:	4601      	mov	r1, r0
   d57c0:	b928      	cbnz	r0, d57ce <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d57c2:	7870      	ldrb	r0, [r6, #1]
   d57c4:	fab0 f080 	clz	r0, r0
   d57c8:	0940      	lsrs	r0, r0, #5
   d57ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d57ce:	7803      	ldrb	r3, [r0, #0]
   d57d0:	b14b      	cbz	r3, d57e6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d57d2:	7ac3      	ldrb	r3, [r0, #11]
   d57d4:	071b      	lsls	r3, r3, #28
   d57d6:	d4ee      	bmi.n	d57b6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d57d8:	220b      	movs	r2, #11
   d57da:	4640      	mov	r0, r8
   d57dc:	f003 fcea 	bl	d91b4 <memcmp>
   d57e0:	2800      	cmp	r0, #0
   d57e2:	d1e8      	bne.n	d57b6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d57e4:	e002      	b.n	d57ec <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d57e6:	2001      	movs	r0, #1
   d57e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d57ec:	3401      	adds	r4, #1
   d57ee:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d57f0:	2c64      	cmp	r4, #100	; 0x64
   d57f2:	d1b5      	bne.n	d5760 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d57f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d57f8 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d57f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57fc:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d57fe:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5800:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5802:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5806:	9005      	str	r0, [sp, #20]
   d5808:	460e      	mov	r6, r1
   d580a:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d580c:	d101      	bne.n	d5812 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d580e:	2000      	movs	r0, #0
   d5810:	e1a0      	b.n	d5b54 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5812:	9b05      	ldr	r3, [sp, #20]
   d5814:	781b      	ldrb	r3, [r3, #0]
   d5816:	2b00      	cmp	r3, #0
   d5818:	d1f9      	bne.n	d580e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d581a:	6853      	ldr	r3, [r2, #4]
   d581c:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d581e:	7813      	ldrb	r3, [r2, #0]
   d5820:	079b      	lsls	r3, r3, #30
   d5822:	f000 818d 	beq.w	d5b40 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d5826:	9b02      	ldr	r3, [sp, #8]
   d5828:	270d      	movs	r7, #13
   d582a:	330c      	adds	r3, #12
   d582c:	fbb3 f7f7 	udiv	r7, r3, r7
   d5830:	3701      	adds	r7, #1
   d5832:	b2ff      	uxtb	r7, r7
   d5834:	2100      	movs	r1, #0
   d5836:	4630      	mov	r0, r6
   d5838:	f000 fadb 	bl	d5df2 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d583c:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5840:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d5844:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d5848:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d584a:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d584c:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d584e:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5852:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5854:	6972      	ldr	r2, [r6, #20]
   d5856:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d5858:	2101      	movs	r1, #1
   d585a:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d585c:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d5860:	f000 faaa 	bl	d5db8 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d5864:	9b07      	ldr	r3, [sp, #28]
   d5866:	b920      	cbnz	r0, d5872 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d5868:	7873      	ldrb	r3, [r6, #1]
   d586a:	2b00      	cmp	r3, #0
   d586c:	f000 8090 	beq.w	d5990 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d5870:	e7cd      	b.n	d580e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d5872:	7802      	ldrb	r2, [r0, #0]
   d5874:	2ae5      	cmp	r2, #229	; 0xe5
   d5876:	d000      	beq.n	d587a <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d5878:	b942      	cbnz	r2, d588c <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d587a:	2c00      	cmp	r4, #0
   d587c:	bf08      	it	eq
   d587e:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d5880:	42bc      	cmp	r4, r7
        freeFound++;
   d5882:	bf3c      	itt	cc
   d5884:	3401      	addcc	r4, #1
   d5886:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d5888:	b922      	cbnz	r2, d5894 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d588a:	e081      	b.n	d5990 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d588c:	42bc      	cmp	r4, r7
   d588e:	bf38      	it	cc
   d5890:	2400      	movcc	r4, #0
   d5892:	e003      	b.n	d589c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5894:	2ae5      	cmp	r2, #229	; 0xe5
   d5896:	d101      	bne.n	d589c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d5898:	2500      	movs	r5, #0
   d589a:	e7db      	b.n	d5854 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d589c:	2a2e      	cmp	r2, #46	; 0x2e
   d589e:	d0fb      	beq.n	d5898 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d58a0:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d58a2:	290f      	cmp	r1, #15
   d58a4:	d152      	bne.n	d594c <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d58a6:	b93d      	cbnz	r5, d58b8 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d58a8:	0651      	lsls	r1, r2, #25
   d58aa:	d5d3      	bpl.n	d5854 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d58ac:	7b43      	ldrb	r3, [r0, #13]
   d58ae:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d58b0:	f002 051f 	and.w	r5, r2, #31
   d58b4:	462b      	mov	r3, r5
   d58b6:	e007      	b.n	d58c8 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d58b8:	3b01      	subs	r3, #1
   d58ba:	b2db      	uxtb	r3, r3
   d58bc:	429a      	cmp	r2, r3
   d58be:	d1eb      	bne.n	d5898 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d58c0:	7b42      	ldrb	r2, [r0, #13]
   d58c2:	9903      	ldr	r1, [sp, #12]
   d58c4:	4291      	cmp	r1, r2
   d58c6:	d1e7      	bne.n	d5898 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d58c8:	1e5a      	subs	r2, r3, #1
   d58ca:	f04f 0c0d 	mov.w	ip, #13
   d58ce:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d58d2:	9a02      	ldr	r2, [sp, #8]
   d58d4:	4562      	cmp	r2, ip
   d58d6:	d9df      	bls.n	d5898 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d58d8:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d58dc:	f1be 0f04 	cmp.w	lr, #4
   d58e0:	fa5f f28e 	uxtb.w	r2, lr
   d58e4:	d804      	bhi.n	d58f0 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d58e6:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d58ea:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d58ee:	e00c      	b.n	d590a <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d58f0:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d58f2:	bf95      	itete	ls
   d58f4:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d58f8:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d58fc:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5900:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5904:	bf94      	ite	ls
   d5906:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5908:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d590a:	9902      	ldr	r1, [sp, #8]
   d590c:	4561      	cmp	r1, ip
   d590e:	d103      	bne.n	d5918 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d5910:	2a00      	cmp	r2, #0
   d5912:	bf18      	it	ne
   d5914:	2500      	movne	r5, #0
   d5916:	e79d      	b.n	d5854 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5918:	2aff      	cmp	r2, #255	; 0xff
   d591a:	d8bd      	bhi.n	d5898 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d591c:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d591e:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d5922:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5924:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d5928:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d592c:	bf98      	it	ls
   d592e:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5930:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5934:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d5938:	bf98      	it	ls
   d593a:	b2d2      	uxtbls	r2, r2
   d593c:	f1bc 0f19 	cmp.w	ip, #25
   d5940:	bf9c      	itt	ls
   d5942:	3120      	addls	r1, #32
   d5944:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5946:	4291      	cmp	r1, r2
   d5948:	d1a6      	bne.n	d5898 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d594a:	e0fb      	b.n	d5b44 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d594c:	0709      	lsls	r1, r1, #28
   d594e:	d4a3      	bmi.n	d5898 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d5950:	b14d      	cbz	r5, d5966 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d5952:	2b01      	cmp	r3, #1
   d5954:	f47f af5b 	bne.w	d580e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5958:	f7ff fdfd 	bl	d5556 <_ZN7FatFile11lfnChecksumEPh>
   d595c:	9b03      	ldr	r3, [sp, #12]
   d595e:	4283      	cmp	r3, r0
   d5960:	f47f af55 	bne.w	d580e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5964:	e00f      	b.n	d5986 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5966:	220b      	movs	r2, #11
   d5968:	9906      	ldr	r1, [sp, #24]
   d596a:	9307      	str	r3, [sp, #28]
   d596c:	f003 fc22 	bl	d91b4 <memcmp>
   d5970:	9b07      	ldr	r3, [sp, #28]
   d5972:	2800      	cmp	r0, #0
   d5974:	f47f af6e 	bne.w	d5854 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d5978:	f899 2000 	ldrb.w	r2, [r9]
   d597c:	07d2      	lsls	r2, r2, #31
   d597e:	d502      	bpl.n	d5986 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d5980:	2201      	movs	r2, #1
   d5982:	9204      	str	r2, [sp, #16]
   d5984:	e766      	b.n	d5854 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d5986:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d598a:	f000 80d1 	beq.w	d5b30 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d598e:	e73e      	b.n	d580e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d5990:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d5994:	f43f af3b 	beq.w	d580e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5998:	f00b 0303 	and.w	r3, fp, #3
   d599c:	3b01      	subs	r3, #1
   d599e:	2b01      	cmp	r3, #1
   d59a0:	f63f af35 	bhi.w	d580e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d59a4:	2c00      	cmp	r4, #0
   d59a6:	bf08      	it	eq
   d59a8:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d59aa:	42bc      	cmp	r4, r7
   d59ac:	d302      	bcc.n	d59b4 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d59ae:	9b04      	ldr	r3, [sp, #16]
   d59b0:	b9cb      	cbnz	r3, d59e6 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d59b2:	e01f      	b.n	d59f4 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d59b4:	2100      	movs	r1, #0
   d59b6:	4630      	mov	r0, r6
   d59b8:	f000 f9fe 	bl	d5db8 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d59bc:	b910      	cbnz	r0, d59c4 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d59be:	7873      	ldrb	r3, [r6, #1]
   d59c0:	b15b      	cbz	r3, d59da <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d59c2:	e724      	b.n	d580e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d59c4:	3401      	adds	r4, #1
   d59c6:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d59c8:	e7ef      	b.n	d59aa <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d59ca:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d59cc:	791b      	ldrb	r3, [r3, #4]
   d59ce:	2b01      	cmp	r3, #1
   d59d0:	d8ed      	bhi.n	d59ae <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d59d2:	3410      	adds	r4, #16
   d59d4:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d59d6:	42a7      	cmp	r7, r4
   d59d8:	d9e9      	bls.n	d59ae <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d59da:	4630      	mov	r0, r6
   d59dc:	f000 f8d2 	bl	d5b84 <_ZN7FatFile13addDirClusterEv>
   d59e0:	2800      	cmp	r0, #0
   d59e2:	d1f2      	bne.n	d59ca <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d59e4:	e713      	b.n	d580e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d59e6:	4649      	mov	r1, r9
   d59e8:	4630      	mov	r0, r6
   d59ea:	f7ff feaf 	bl	d574c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d59ee:	2800      	cmp	r0, #0
   d59f0:	f43f af0d 	beq.w	d580e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d59f4:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d59f8:	4630      	mov	r0, r6
   d59fa:	f000 f9fa 	bl	d5df2 <_ZN7FatFile7seekSetEm>
   d59fe:	2800      	cmp	r0, #0
   d5a00:	f43f af05 	beq.w	d580e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d5a04:	1e7d      	subs	r5, r7, #1
   d5a06:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5a08:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5a0a:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d5a0e:	f04f 080f 	mov.w	r8, #15
   d5a12:	e041      	b.n	d5a98 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5a14:	2100      	movs	r1, #0
   d5a16:	4630      	mov	r0, r6
   d5a18:	f000 f9ce 	bl	d5db8 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d5a1c:	4607      	mov	r7, r0
   d5a1e:	2800      	cmp	r0, #0
   d5a20:	f43f aef5 	beq.w	d580e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d5a24:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d5a26:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d5a2a:	42ac      	cmp	r4, r5
   d5a2c:	f043 0301 	orr.w	r3, r3, #1
   d5a30:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d5a34:	bf0c      	ite	eq
   d5a36:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d5a3a:	4622      	movne	r2, r4
   d5a3c:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d5a3e:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d5a42:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d5a46:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d5a4a:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5a4c:	f7ff fd83 	bl	d5556 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5a50:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5a52:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d5a54:	f887 a01a 	strb.w	sl, [r7, #26]
   d5a58:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5a5c:	f002 021f 	and.w	r2, r2, #31
   d5a60:	230d      	movs	r3, #13
   d5a62:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d5a64:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5a68:	435a      	muls	r2, r3
   d5a6a:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5a6c:	9902      	ldr	r1, [sp, #8]
   d5a6e:	4291      	cmp	r1, r2
   d5a70:	d915      	bls.n	d5a9e <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d5a72:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d5a76:	2b04      	cmp	r3, #4
   d5a78:	fa5f fc83 	uxtb.w	ip, r3
   d5a7c:	f103 0001 	add.w	r0, r3, #1
   d5a80:	d813      	bhi.n	d5aaa <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d5a82:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d5a86:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d5a8a:	280d      	cmp	r0, #13
   d5a8c:	f102 0201 	add.w	r2, r2, #1
   d5a90:	4603      	mov	r3, r0
   d5a92:	d1eb      	bne.n	d5a6c <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5a94:	3c01      	subs	r4, #1
   d5a96:	b2e4      	uxtb	r4, r4
   d5a98:	2c00      	cmp	r4, #0
   d5a9a:	d1bb      	bne.n	d5a14 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d5a9c:	e00e      	b.n	d5abc <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5a9e:	bf14      	ite	ne
   d5aa0:	f04f 31ff 	movne.w	r1, #4294967295
   d5aa4:	2100      	moveq	r1, #0
   d5aa6:	b289      	uxth	r1, r1
   d5aa8:	e7e5      	b.n	d5a76 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d5aaa:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d5aae:	bf94      	ite	ls
   d5ab0:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d5ab4:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d5ab8:	8099      	strh	r1, [r3, #4]
   d5aba:	e7e6      	b.n	d5a8a <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d5abc:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d5abe:	4621      	mov	r1, r4
   d5ac0:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d5ac2:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d5ac6:	f000 f977 	bl	d5db8 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d5aca:	4607      	mov	r7, r0
   d5acc:	2800      	cmp	r0, #0
   d5ace:	f43f ae9e 	beq.w	d580e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d5ad2:	2220      	movs	r2, #32
   d5ad4:	4621      	mov	r1, r4
   d5ad6:	f003 fb87 	bl	d91e8 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d5ada:	464b      	mov	r3, r9
   d5adc:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d5ae0:	603a      	str	r2, [r7, #0]
   d5ae2:	685a      	ldr	r2, [r3, #4]
   d5ae4:	607a      	str	r2, [r7, #4]
   d5ae6:	891a      	ldrh	r2, [r3, #8]
   d5ae8:	813a      	strh	r2, [r7, #8]
   d5aea:	7a9b      	ldrb	r3, [r3, #10]
   d5aec:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d5aee:	f899 3000 	ldrb.w	r3, [r9]
   d5af2:	f003 0318 	and.w	r3, r3, #24
   d5af6:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d5af8:	4b18      	ldr	r3, [pc, #96]	; (d5b5c <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d5afa:	681b      	ldr	r3, [r3, #0]
   d5afc:	b12b      	cbz	r3, d5b0a <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d5afe:	f107 010e 	add.w	r1, r7, #14
   d5b02:	f107 0010 	add.w	r0, r7, #16
   d5b06:	4798      	blx	r3
   d5b08:	e006      	b.n	d5b18 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d5b0a:	2321      	movs	r3, #33	; 0x21
   d5b0c:	743b      	strb	r3, [r7, #16]
   d5b0e:	2328      	movs	r3, #40	; 0x28
   d5b10:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d5b12:	2308      	movs	r3, #8
   d5b14:	73bc      	strb	r4, [r7, #14]
   d5b16:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d5b18:	8a3b      	ldrh	r3, [r7, #16]
   d5b1a:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d5b1c:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d5b1e:	89fb      	ldrh	r3, [r7, #14]
   d5b20:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d5b22:	68b2      	ldr	r2, [r6, #8]
   d5b24:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d5b28:	f043 0301 	orr.w	r3, r3, #1
   d5b2c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d5b30:	9500      	str	r5, [sp, #0]
   d5b32:	465b      	mov	r3, fp
   d5b34:	4652      	mov	r2, sl
   d5b36:	4631      	mov	r1, r6
   d5b38:	9805      	ldr	r0, [sp, #20]
   d5b3a:	f000 f9a3 	bl	d5e84 <_ZN7FatFile15openCachedEntryEPS_tih>
   d5b3e:	e009      	b.n	d5b54 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d5b40:	2701      	movs	r7, #1
   d5b42:	e677      	b.n	d5834 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d5b44:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d5b48:	f1be 0f0d 	cmp.w	lr, #13
   d5b4c:	f43f ae82 	beq.w	d5854 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5b50:	46d4      	mov	ip, sl
   d5b52:	e6c3      	b.n	d58dc <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d5b54:	b009      	add	sp, #36	; 0x24
   d5b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5b5a:	bf00      	nop
   d5b5c:	2003e3d0 	.word	0x2003e3d0

000d5b60 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d5b60:	f001 bbbc 	b.w	d72dc <HAL_Pin_Map>

000d5b64 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d5b64:	f001 bbba 	b.w	d72dc <HAL_Pin_Map>

000d5b68 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d5b68:	f001 bbb8 	b.w	d72dc <HAL_Pin_Map>

000d5b6c <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d5b6c:	f001 bbb6 	b.w	d72dc <HAL_Pin_Map>

000d5b70 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5b70:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5b72:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5b74:	f043 0304 	orr.w	r3, r3, #4
   d5b78:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5b7a:	f100 0210 	add.w	r2, r0, #16
   d5b7e:	6880      	ldr	r0, [r0, #8]
   d5b80:	f000 bc12 	b.w	d63a8 <_ZN9FatVolume15allocateClusterEmPm>

000d5b84 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5b88:	7803      	ldrb	r3, [r0, #0]
   d5b8a:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5b8e:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5b90:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d5b94:	b10b      	cbz	r3, d5b9a <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d5b96:	2600      	movs	r6, #0
   d5b98:	e02e      	b.n	d5bf8 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d5b9a:	6942      	ldr	r2, [r0, #20]
   d5b9c:	4b18      	ldr	r3, [pc, #96]	; (d5c00 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d5b9e:	429a      	cmp	r2, r3
   d5ba0:	d8f9      	bhi.n	d5b96 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d5ba2:	f7ff ffe5 	bl	d5b70 <_ZN7FatFile10addClusterEv>
   d5ba6:	4606      	mov	r6, r0
   d5ba8:	2800      	cmp	r0, #0
   d5baa:	d0f4      	beq.n	d5b96 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d5bac:	6921      	ldr	r1, [r4, #16]
   d5bae:	68a0      	ldr	r0, [r4, #8]
   d5bb0:	f000 fb8f 	bl	d62d2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5bb4:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5bb6:	68a0      	ldr	r0, [r4, #8]
   d5bb8:	2205      	movs	r2, #5
   d5bba:	4639      	mov	r1, r7
   d5bbc:	3024      	adds	r0, #36	; 0x24
   d5bbe:	f000 fb64 	bl	d628a <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d5bc2:	4680      	mov	r8, r0
   d5bc4:	2800      	cmp	r0, #0
   d5bc6:	d0e6      	beq.n	d5b96 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d5bc8:	4629      	mov	r1, r5
   d5bca:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5bce:	f003 fb0b 	bl	d91e8 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5bd2:	2501      	movs	r5, #1
   d5bd4:	68a3      	ldr	r3, [r4, #8]
   d5bd6:	791a      	ldrb	r2, [r3, #4]
   d5bd8:	42aa      	cmp	r2, r5
   d5bda:	d909      	bls.n	d5bf0 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5bdc:	4642      	mov	r2, r8
   d5bde:	19e9      	adds	r1, r5, r7
   d5be0:	6818      	ldr	r0, [r3, #0]
   d5be2:	f000 fecf 	bl	d6984 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d5be6:	2800      	cmp	r0, #0
   d5be8:	d0d5      	beq.n	d5b96 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5bea:	3501      	adds	r5, #1
   d5bec:	b2ed      	uxtb	r5, r5
   d5bee:	e7f1      	b.n	d5bd4 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d5bf0:	6963      	ldr	r3, [r4, #20]
   d5bf2:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d5bf6:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d5bf8:	4630      	mov	r0, r6
   d5bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5bfe:	bf00      	nop
   d5c00:	001ffdff 	.word	0x001ffdff

000d5c04 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5c04:	b510      	push	{r4, lr}
   d5c06:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5c08:	6880      	ldr	r0, [r0, #8]
   d5c0a:	460a      	mov	r2, r1
   d5c0c:	3024      	adds	r0, #36	; 0x24
   d5c0e:	69a1      	ldr	r1, [r4, #24]
   d5c10:	f000 fb3b 	bl	d628a <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5c14:	b120      	cbz	r0, d5c20 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d5c16:	88a3      	ldrh	r3, [r4, #4]
   d5c18:	f003 030f 	and.w	r3, r3, #15
   d5c1c:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d5c20:	bd10      	pop	{r4, pc}

000d5c22 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5c22:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d5c24:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5c26:	4605      	mov	r5, r0
   d5c28:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d5c2a:	b984      	cbnz	r4, d5c4e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d5c2c:	2224      	movs	r2, #36	; 0x24
   d5c2e:	4621      	mov	r1, r4
   d5c30:	f003 fada 	bl	d91e8 <memset>

  m_vol = vol;
   d5c34:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d5c36:	79f3      	ldrb	r3, [r6, #7]
   d5c38:	2b10      	cmp	r3, #16
   d5c3a:	d003      	beq.n	d5c44 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5c3c:	2b20      	cmp	r3, #32
   d5c3e:	d106      	bne.n	d5c4e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5c40:	2340      	movs	r3, #64	; 0x40
   d5c42:	e000      	b.n	d5c46 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5c44:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5c46:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5c48:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5c4a:	70a8      	strb	r0, [r5, #2]
   d5c4c:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d5c4e:	2000      	movs	r0, #0
   d5c50:	bd70      	pop	{r4, r5, r6, pc}

000d5c52 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5c52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c56:	7803      	ldrb	r3, [r0, #0]
   d5c58:	4604      	mov	r4, r0
   d5c5a:	4689      	mov	r9, r1
   d5c5c:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5c5e:	b14b      	cbz	r3, d5c74 <_ZN7FatFile4readEPvj+0x22>
   d5c60:	7882      	ldrb	r2, [r0, #2]
   d5c62:	07d1      	lsls	r1, r2, #31
   d5c64:	d506      	bpl.n	d5c74 <_ZN7FatFile4readEPvj+0x22>
   d5c66:	e00c      	b.n	d5c82 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5c68:	465a      	mov	r2, fp
   d5c6a:	6921      	ldr	r1, [r4, #16]
   d5c6c:	f000 fb37 	bl	d62de <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5c70:	2800      	cmp	r0, #0
   d5c72:	da3d      	bge.n	d5cf0 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d5c74:	7863      	ldrb	r3, [r4, #1]
   d5c76:	f043 0302 	orr.w	r3, r3, #2
   d5c7a:	7063      	strb	r3, [r4, #1]
  return -1;
   d5c7c:	f04f 30ff 	mov.w	r0, #4294967295
   d5c80:	e097      	b.n	d5db2 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d5c82:	071a      	lsls	r2, r3, #28
   d5c84:	d503      	bpl.n	d5c8e <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d5c86:	69e3      	ldr	r3, [r4, #28]
   d5c88:	6962      	ldr	r2, [r4, #20]
   d5c8a:	1a9b      	subs	r3, r3, r2
   d5c8c:	e007      	b.n	d5c9e <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d5c8e:	069a      	lsls	r2, r3, #26
   d5c90:	d508      	bpl.n	d5ca4 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d5c92:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d5c94:	891a      	ldrh	r2, [r3, #8]
   d5c96:	6963      	ldr	r3, [r4, #20]
   d5c98:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d5c9c:	b29b      	uxth	r3, r3
   d5c9e:	429d      	cmp	r5, r3
   d5ca0:	bf28      	it	cs
   d5ca2:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d5ca4:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d5ca6:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5caa:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5cae:	2e00      	cmp	r6, #0
   d5cb0:	d035      	beq.n	d5d1e <_ZN7FatFile4readEPvj+0xcc>
   d5cb2:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5cb4:	6963      	ldr	r3, [r4, #20]
   d5cb6:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d5cb8:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5cbc:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d5cc0:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d5cc4:	d002      	beq.n	d5ccc <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d5cc6:	6a03      	ldr	r3, [r0, #32]
   d5cc8:	4419      	add	r1, r3
   d5cca:	e01d      	b.n	d5d08 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5ccc:	f890 8005 	ldrb.w	r8, [r0, #5]
   d5cd0:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d5cd4:	f1ba 0f00 	cmp.w	sl, #0
   d5cd8:	d110      	bne.n	d5cfc <_ZN7FatFile4readEPvj+0xaa>
   d5cda:	f1b8 0f00 	cmp.w	r8, #0
   d5cde:	d10d      	bne.n	d5cfc <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d5ce0:	2b00      	cmp	r3, #0
   d5ce2:	d1c1      	bne.n	d5c68 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5ce4:	0653      	lsls	r3, r2, #25
   d5ce6:	bf4c      	ite	mi
   d5ce8:	6a03      	ldrmi	r3, [r0, #32]
   d5cea:	6a23      	ldrpl	r3, [r4, #32]
   d5cec:	6123      	str	r3, [r4, #16]
   d5cee:	e005      	b.n	d5cfc <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d5cf0:	d104      	bne.n	d5cfc <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d5cf2:	7823      	ldrb	r3, [r4, #0]
   d5cf4:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5cf8:	d111      	bne.n	d5d1e <_ZN7FatFile4readEPvj+0xcc>
   d5cfa:	e7bb      	b.n	d5c74 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5cfc:	6921      	ldr	r1, [r4, #16]
   d5cfe:	68a0      	ldr	r0, [r4, #8]
   d5d00:	f000 fae7 	bl	d62d2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5d04:	eb08 0100 	add.w	r1, r8, r0
   d5d08:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5d0a:	f1ba 0f00 	cmp.w	sl, #0
   d5d0e:	d135      	bne.n	d5d7c <_ZN7FatFile4readEPvj+0x12a>
   d5d10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5d14:	d332      	bcc.n	d5d7c <_ZN7FatFile4readEPvj+0x12a>
   d5d16:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5d18:	4299      	cmp	r1, r3
   d5d1a:	d102      	bne.n	d5d22 <_ZN7FatFile4readEPvj+0xd0>
   d5d1c:	e02e      	b.n	d5d7c <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d5d1e:	1ba8      	subs	r0, r5, r6
   d5d20:	e047      	b.n	d5db2 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d5d22:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5d26:	d31b      	bcc.n	d5d60 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d5d28:	7822      	ldrb	r2, [r4, #0]
   d5d2a:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d5d2c:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5d30:	d406      	bmi.n	d5d40 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d5d32:	7902      	ldrb	r2, [r0, #4]
   d5d34:	ebc8 0202 	rsb	r2, r8, r2
   d5d38:	b2d2      	uxtb	r2, r2
   d5d3a:	4592      	cmp	sl, r2
   d5d3c:	bf28      	it	cs
   d5d3e:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5d40:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d5d42:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5d46:	d207      	bcs.n	d5d58 <_ZN7FatFile4readEPvj+0x106>
   d5d48:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d5d4a:	4653      	mov	r3, sl
   d5d4c:	464a      	mov	r2, r9
   d5d4e:	6800      	ldr	r0, [r0, #0]
   d5d50:	f000 fdd6 	bl	d6900 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5d54:	b960      	cbnz	r0, d5d70 <_ZN7FatFile4readEPvj+0x11e>
   d5d56:	e78d      	b.n	d5c74 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5d58:	4453      	add	r3, sl
   d5d5a:	4299      	cmp	r1, r3
   d5d5c:	d321      	bcc.n	d5da2 <_ZN7FatFile4readEPvj+0x150>
   d5d5e:	e7f3      	b.n	d5d48 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5d60:	464a      	mov	r2, r9
   d5d62:	6800      	ldr	r0, [r0, #0]
   d5d64:	f000 fd84 	bl	d6870 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d5d68:	2800      	cmp	r0, #0
   d5d6a:	d083      	beq.n	d5c74 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d5d6c:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d5d70:	6963      	ldr	r3, [r4, #20]
   d5d72:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d5d74:	44b9      	add	r9, r7
    m_curPosition += n;
   d5d76:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5d78:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5d7a:	e798      	b.n	d5cae <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5d7c:	2200      	movs	r2, #0
   d5d7e:	3024      	adds	r0, #36	; 0x24
   d5d80:	f000 fa83 	bl	d628a <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d5d84:	2800      	cmp	r0, #0
   d5d86:	f43f af75 	beq.w	d5c74 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d5d8a:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d5d8e:	42b7      	cmp	r7, r6
   d5d90:	bf28      	it	cs
   d5d92:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d5d94:	eb00 010a 	add.w	r1, r0, sl
   d5d98:	463a      	mov	r2, r7
   d5d9a:	4648      	mov	r0, r9
   d5d9c:	f003 fa19 	bl	d91d2 <memcpy>
   d5da0:	e7e6      	b.n	d5d70 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5da2:	3024      	adds	r0, #36	; 0x24
   d5da4:	9101      	str	r1, [sp, #4]
   d5da6:	f000 fa49 	bl	d623c <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d5daa:	9901      	ldr	r1, [sp, #4]
   d5dac:	2800      	cmp	r0, #0
   d5dae:	d1cb      	bne.n	d5d48 <_ZN7FatFile4readEPvj+0xf6>
   d5db0:	e760      	b.n	d5c74 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d5db2:	b003      	add	sp, #12
   d5db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5db8 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d5dba:	6943      	ldr	r3, [r0, #20]
   d5dbc:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5dc0:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d5dc2:	b105      	cbz	r5, d5dc6 <_ZN7FatFile12readDirCacheEb+0xe>
   d5dc4:	b969      	cbnz	r1, d5de2 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d5dc6:	2201      	movs	r2, #1
   d5dc8:	f10d 0107 	add.w	r1, sp, #7
   d5dcc:	4620      	mov	r0, r4
   d5dce:	f7ff ff40 	bl	d5c52 <_ZN7FatFile4readEPvj>
   d5dd2:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d5dd4:	2801      	cmp	r0, #1
   d5dd6:	d001      	beq.n	d5ddc <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d5dd8:	2000      	movs	r0, #0
   d5dda:	e008      	b.n	d5dee <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d5ddc:	6963      	ldr	r3, [r4, #20]
   d5dde:	331f      	adds	r3, #31
   d5de0:	e000      	b.n	d5de4 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d5de2:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5de4:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d5de6:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5de8:	3030      	adds	r0, #48	; 0x30
   d5dea:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d5dee:	b003      	add	sp, #12
   d5df0:	bd30      	pop	{r4, r5, pc}

000d5df2 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5df6:	460e      	mov	r6, r1
   d5df8:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d5dfa:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5dfc:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d5dfe:	2900      	cmp	r1, #0
   d5e00:	d039      	beq.n	d5e76 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d5e02:	6945      	ldr	r5, [r0, #20]
   d5e04:	42b5      	cmp	r5, r6
   d5e06:	d03a      	beq.n	d5e7e <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d5e08:	b90e      	cbnz	r6, d5e0e <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d5e0a:	6106      	str	r6, [r0, #16]
    goto done;
   d5e0c:	e031      	b.n	d5e72 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d5e0e:	070b      	lsls	r3, r1, #28
   d5e10:	d503      	bpl.n	d5e1a <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d5e12:	69c3      	ldr	r3, [r0, #28]
   d5e14:	429e      	cmp	r6, r3
   d5e16:	d82e      	bhi.n	d5e76 <_ZN7FatFile7seekSetEm+0x84>
   d5e18:	e007      	b.n	d5e2a <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d5e1a:	0688      	lsls	r0, r1, #26
   d5e1c:	d505      	bpl.n	d5e2a <_ZN7FatFile7seekSetEm+0x38>
   d5e1e:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5e20:	891b      	ldrh	r3, [r3, #8]
   d5e22:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d5e26:	d826      	bhi.n	d5e76 <_ZN7FatFile7seekSetEm+0x84>
   d5e28:	e023      	b.n	d5e72 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5e2a:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d5e2e:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d5e32:	1e6a      	subs	r2, r5, #1
   d5e34:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5e38:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5e3a:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5e3c:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d5e3e:	429a      	cmp	r2, r3
   d5e40:	d800      	bhi.n	d5e44 <_ZN7FatFile7seekSetEm+0x52>
   d5e42:	b94d      	cbnz	r5, d5e58 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5e44:	064a      	lsls	r2, r1, #25
   d5e46:	bf4c      	ite	mi
   d5e48:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5e4c:	6a22      	ldrpl	r2, [r4, #32]
   d5e4e:	6122      	str	r2, [r4, #16]
   d5e50:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5e52:	f104 0810 	add.w	r8, r4, #16
   d5e56:	e00a      	b.n	d5e6e <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d5e58:	1a9b      	subs	r3, r3, r2
   d5e5a:	e7f9      	b.n	d5e50 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5e5c:	4642      	mov	r2, r8
   d5e5e:	6921      	ldr	r1, [r4, #16]
   d5e60:	68a0      	ldr	r0, [r4, #8]
   d5e62:	f000 fa3c 	bl	d62de <_ZN9FatVolume6fatGetEmPm>
   d5e66:	2800      	cmp	r0, #0
   d5e68:	f105 35ff 	add.w	r5, r5, #4294967295
   d5e6c:	dd03      	ble.n	d5e76 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d5e6e:	2d00      	cmp	r5, #0
   d5e70:	d1f4      	bne.n	d5e5c <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d5e72:	6166      	str	r6, [r4, #20]
   d5e74:	e003      	b.n	d5e7e <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d5e76:	6127      	str	r7, [r4, #16]
  return false;
   d5e78:	2000      	movs	r0, #0
   d5e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d5e7e:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d5e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5e84 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e86:	460f      	mov	r7, r1
   d5e88:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5e8a:	2100      	movs	r1, #0
   d5e8c:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5e8e:	4604      	mov	r4, r0
   d5e90:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5e92:	f003 f9a9 	bl	d91e8 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d5e96:	68b8      	ldr	r0, [r7, #8]
   d5e98:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5e9a:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d5e9e:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5ea0:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d5ea4:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d5ea6:	6a3b      	ldr	r3, [r7, #32]
   d5ea8:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5eaa:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5eac:	7acb      	ldrb	r3, [r1, #11]
   d5eae:	071d      	lsls	r5, r3, #28
   d5eb0:	d44c      	bmi.n	d5f4c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d5eb2:	1883      	adds	r3, r0, r2
   d5eb4:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d5eb8:	f003 0317 	and.w	r3, r3, #23
   d5ebc:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d5ebe:	7ac9      	ldrb	r1, [r1, #11]
   d5ec0:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d5ec4:	bf04      	itt	eq
   d5ec6:	f043 0308 	orreq.w	r3, r3, #8
   d5eca:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d5ecc:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5ed0:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d5ed2:	f006 0303 	and.w	r3, r6, #3
   d5ed6:	2b01      	cmp	r3, #1
   d5ed8:	d009      	beq.n	d5eee <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d5eda:	2b02      	cmp	r3, #2
   d5edc:	d005      	beq.n	d5eea <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d5ede:	2b00      	cmp	r3, #0
   d5ee0:	d134      	bne.n	d5f4c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d5ee2:	0571      	lsls	r1, r6, #21
   d5ee4:	d432      	bmi.n	d5f4c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d5ee6:	2301      	movs	r3, #1
   d5ee8:	e002      	b.n	d5ef0 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d5eea:	2303      	movs	r3, #3
   d5eec:	e000      	b.n	d5ef0 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d5eee:	2302      	movs	r3, #2
   d5ef0:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d5ef2:	78a1      	ldrb	r1, [r4, #2]
   d5ef4:	078b      	lsls	r3, r1, #30
   d5ef6:	d503      	bpl.n	d5f00 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d5ef8:	7823      	ldrb	r3, [r4, #0]
   d5efa:	f013 0f11 	tst.w	r3, #17
   d5efe:	d125      	bne.n	d5f4c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d5f00:	b24b      	sxtb	r3, r1
   d5f02:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d5f06:	f006 0108 	and.w	r1, r6, #8
   d5f0a:	bf14      	ite	ne
   d5f0c:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d5f10:	2700      	moveq	r7, #0
   d5f12:	4319      	orrs	r1, r3
   d5f14:	4339      	orrs	r1, r7
   d5f16:	70a1      	strb	r1, [r4, #2]
   d5f18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d5f1a:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5f1c:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d5f1e:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d5f20:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d5f24:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d5f28:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d5f2c:	d504      	bpl.n	d5f38 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5f2e:	b181      	cbz	r1, d5f52 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5f30:	f000 fa75 	bl	d641e <_ZN9FatVolume9freeChainEm>
   d5f34:	b968      	cbnz	r0, d5f52 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5f36:	e009      	b.n	d5f4c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d5f38:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d5f3a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d5f3c:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d5f3e:	0473      	lsls	r3, r6, #17
   d5f40:	d50c      	bpl.n	d5f5c <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d5f42:	69e1      	ldr	r1, [r4, #28]
   d5f44:	4620      	mov	r0, r4
   d5f46:	f7ff ff54 	bl	d5df2 <_ZN7FatFile7seekSetEm>
   d5f4a:	b938      	cbnz	r0, d5f5c <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d5f4c:	2000      	movs	r0, #0
   d5f4e:	7020      	strb	r0, [r4, #0]
  return false;
   d5f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d5f52:	78a3      	ldrb	r3, [r4, #2]
   d5f54:	f043 0304 	orr.w	r3, r3, #4
   d5f58:	70a3      	strb	r3, [r4, #2]
   d5f5a:	e7f0      	b.n	d5f3e <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d5f5c:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d5f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5f60 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5f60:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d5f62:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5f64:	4604      	mov	r4, r0
  if (!isOpen()) {
   d5f66:	b90b      	cbnz	r3, d5f6c <_ZN7FatFile4syncEv+0xc>
    return true;
   d5f68:	2001      	movs	r0, #1
   d5f6a:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5f6c:	7883      	ldrb	r3, [r0, #2]
   d5f6e:	075a      	lsls	r2, r3, #29
   d5f70:	d523      	bpl.n	d5fba <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5f72:	2101      	movs	r1, #1
   d5f74:	f7ff fe46 	bl	d5c04 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5f78:	4605      	mov	r5, r0
   d5f7a:	b928      	cbnz	r0, d5f88 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d5f7c:	7863      	ldrb	r3, [r4, #1]
   d5f7e:	f043 0301 	orr.w	r3, r3, #1
   d5f82:	7063      	strb	r3, [r4, #1]
  return false;
   d5f84:	2000      	movs	r0, #0
   d5f86:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5f88:	7803      	ldrb	r3, [r0, #0]
   d5f8a:	2be5      	cmp	r3, #229	; 0xe5
   d5f8c:	d0f6      	beq.n	d5f7c <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d5f8e:	7823      	ldrb	r3, [r4, #0]
   d5f90:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d5f92:	bf44      	itt	mi
   d5f94:	69e3      	ldrmi	r3, [r4, #28]
   d5f96:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5f98:	8c23      	ldrh	r3, [r4, #32]
   d5f9a:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5f9c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5f9e:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d5fa0:	4b09      	ldr	r3, [pc, #36]	; (d5fc8 <_ZN7FatFile4syncEv+0x68>)
   d5fa2:	681b      	ldr	r3, [r3, #0]
   d5fa4:	b12b      	cbz	r3, d5fb2 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d5fa6:	f100 0116 	add.w	r1, r0, #22
   d5faa:	3018      	adds	r0, #24
   d5fac:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5fae:	8b2b      	ldrh	r3, [r5, #24]
   d5fb0:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d5fb2:	78a3      	ldrb	r3, [r4, #2]
   d5fb4:	f023 0304 	bic.w	r3, r3, #4
   d5fb8:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5fba:	68a0      	ldr	r0, [r4, #8]
   d5fbc:	f7ff fabe 	bl	d553c <_ZN9FatVolume9cacheSyncEv>
   d5fc0:	2800      	cmp	r0, #0
   d5fc2:	d0db      	beq.n	d5f7c <_ZN7FatFile4syncEv+0x1c>
   d5fc4:	e7d0      	b.n	d5f68 <_ZN7FatFile4syncEv+0x8>
   d5fc6:	bf00      	nop
   d5fc8:	2003e3d0 	.word	0x2003e3d0

000d5fcc <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5fcc:	b510      	push	{r4, lr}
   d5fce:	4604      	mov	r4, r0
  bool rtn = sync();
   d5fd0:	f7ff ffc6 	bl	d5f60 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d5fd4:	2300      	movs	r3, #0
   d5fd6:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d5fd8:	bd10      	pop	{r4, pc}

000d5fda <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5fda:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5fdc:	b093      	sub	sp, #76	; 0x4c
   d5fde:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5fe0:	2300      	movs	r3, #0
   d5fe2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d5fe6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5fea:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5fec:	9201      	str	r2, [sp, #4]
   d5fee:	4606      	mov	r6, r0
   d5ff0:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5ff2:	b10b      	cbz	r3, d5ff8 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d5ff4:	2000      	movs	r0, #0
   d5ff6:	e03d      	b.n	d6074 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5ff8:	780b      	ldrb	r3, [r1, #0]
   d5ffa:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5ffe:	d0f9      	beq.n	d5ff4 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d6000:	7813      	ldrb	r3, [r2, #0]
   d6002:	2b2f      	cmp	r3, #47	; 0x2f
   d6004:	d112      	bne.n	d602c <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d6006:	9b01      	ldr	r3, [sp, #4]
   d6008:	781a      	ldrb	r2, [r3, #0]
   d600a:	2a2f      	cmp	r2, #47	; 0x2f
   d600c:	d102      	bne.n	d6014 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d600e:	3301      	adds	r3, #1
   d6010:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d6012:	e7f8      	b.n	d6006 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d6014:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d6016:	b91a      	cbnz	r2, d6020 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d6018:	4630      	mov	r0, r6
   d601a:	f7ff fe02 	bl	d5c22 <_ZN7FatFile8openRootEP9FatVolume>
   d601e:	e029      	b.n	d6074 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d6020:	a809      	add	r0, sp, #36	; 0x24
   d6022:	f7ff fdfe 	bl	d5c22 <_ZN7FatFile8openRootEP9FatVolume>
   d6026:	2800      	cmp	r0, #0
   d6028:	d0e4      	beq.n	d5ff4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d602a:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d602c:	aa01      	add	r2, sp, #4
   d602e:	a903      	add	r1, sp, #12
   d6030:	9801      	ldr	r0, [sp, #4]
   d6032:	f7ff fa9f 	bl	d5574 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d6036:	2800      	cmp	r0, #0
   d6038:	d0dc      	beq.n	d5ff4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d603a:	9b01      	ldr	r3, [sp, #4]
   d603c:	781b      	ldrb	r3, [r3, #0]
   d603e:	b19b      	cbz	r3, d6068 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d6040:	2300      	movs	r3, #0
   d6042:	aa03      	add	r2, sp, #12
   d6044:	4621      	mov	r1, r4
   d6046:	4630      	mov	r0, r6
   d6048:	f7ff fbd6 	bl	d57f8 <_ZN7FatFile4openEPS_P7fname_ti>
   d604c:	2800      	cmp	r0, #0
   d604e:	d0d1      	beq.n	d5ff4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d6050:	4635      	mov	r5, r6
   d6052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6054:	ac09      	add	r4, sp, #36	; 0x24
   d6056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d605a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d605c:	682b      	ldr	r3, [r5, #0]
   d605e:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d6060:	4630      	mov	r0, r6
   d6062:	f7ff ffb3 	bl	d5fcc <_ZN7FatFile5closeEv>
   d6066:	e7e0      	b.n	d602a <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d6068:	463b      	mov	r3, r7
   d606a:	aa03      	add	r2, sp, #12
   d606c:	4621      	mov	r1, r4
   d606e:	4630      	mov	r0, r6
   d6070:	f7ff fbc2 	bl	d57f8 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d6074:	b013      	add	sp, #76	; 0x4c
   d6076:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6078 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d607c:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d607e:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6080:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6082:	4604      	mov	r4, r0
   d6084:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6086:	d508      	bpl.n	d609a <_ZN7FatFile5writeEPKvj+0x22>
   d6088:	7883      	ldrb	r3, [r0, #2]
   d608a:	079a      	lsls	r2, r3, #30
   d608c:	d505      	bpl.n	d609a <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d608e:	071b      	lsls	r3, r3, #28
   d6090:	d50b      	bpl.n	d60aa <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d6092:	69e1      	ldr	r1, [r4, #28]
   d6094:	f7ff fead 	bl	d5df2 <_ZN7FatFile7seekSetEm>
   d6098:	b938      	cbnz	r0, d60aa <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d609a:	7863      	ldrb	r3, [r4, #1]
   d609c:	f043 0301 	orr.w	r3, r3, #1
   d60a0:	7063      	strb	r3, [r4, #1]
  return -1;
   d60a2:	f04f 30ff 	mov.w	r0, #4294967295
   d60a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d60aa:	6963      	ldr	r3, [r4, #20]
   d60ac:	43db      	mvns	r3, r3
   d60ae:	4598      	cmp	r8, r3
   d60b0:	d8f3      	bhi.n	d609a <_ZN7FatFile5writeEPKvj+0x22>
   d60b2:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d60b4:	f04f 0a00 	mov.w	sl, #0
   d60b8:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d60ba:	2e00      	cmp	r6, #0
   d60bc:	f000 8081 	beq.w	d61c2 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d60c0:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d60c2:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d60c4:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d60c8:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d60cc:	d11c      	bne.n	d6108 <_ZN7FatFile5writeEPKvj+0x90>
   d60ce:	b9df      	cbnz	r7, d6108 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d60d0:	6921      	ldr	r1, [r4, #16]
   d60d2:	b171      	cbz	r1, d60f2 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d60d4:	f104 0210 	add.w	r2, r4, #16
   d60d8:	f000 f901 	bl	d62de <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d60dc:	2800      	cmp	r0, #0
   d60de:	dbdc      	blt.n	d609a <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d60e0:	f040 808e 	bne.w	d6200 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d60e4:	4620      	mov	r0, r4
   d60e6:	f7ff fd43 	bl	d5b70 <_ZN7FatFile10addClusterEv>
   d60ea:	2800      	cmp	r0, #0
   d60ec:	f040 8088 	bne.w	d6200 <_ZN7FatFile5writeEPKvj+0x188>
   d60f0:	e7d3      	b.n	d609a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d60f2:	6a23      	ldr	r3, [r4, #32]
   d60f4:	b93b      	cbnz	r3, d6106 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d60f6:	4620      	mov	r0, r4
   d60f8:	f7ff fd3a 	bl	d5b70 <_ZN7FatFile10addClusterEv>
   d60fc:	2800      	cmp	r0, #0
   d60fe:	d0cc      	beq.n	d609a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d6100:	6923      	ldr	r3, [r4, #16]
   d6102:	6223      	str	r3, [r4, #32]
   d6104:	e000      	b.n	d6108 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d6106:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6108:	6921      	ldr	r1, [r4, #16]
   d610a:	68a0      	ldr	r0, [r4, #8]
   d610c:	f000 f8e1 	bl	d62d2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6110:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d6112:	b917      	cbnz	r7, d611a <_ZN7FatFile5writeEPKvj+0xa2>
   d6114:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6118:	d221      	bcs.n	d615e <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d611a:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d611e:	42b5      	cmp	r5, r6
   d6120:	bf28      	it	cs
   d6122:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d6124:	b937      	cbnz	r7, d6134 <_ZN7FatFile5writeEPKvj+0xbc>
   d6126:	6963      	ldr	r3, [r4, #20]
   d6128:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d612a:	4293      	cmp	r3, r2
   d612c:	bf34      	ite	cc
   d612e:	2201      	movcc	r2, #1
   d6130:	2205      	movcs	r2, #5
   d6132:	e000      	b.n	d6136 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d6134:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6136:	68a0      	ldr	r0, [r4, #8]
   d6138:	3024      	adds	r0, #36	; 0x24
   d613a:	f000 f8a6 	bl	d628a <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d613e:	2800      	cmp	r0, #0
   d6140:	d0ab      	beq.n	d609a <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d6142:	4438      	add	r0, r7
   d6144:	462a      	mov	r2, r5
   d6146:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d6148:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d614a:	f003 f842 	bl	d91d2 <memcpy>
      if (512 == (n + blockOffset)) {
   d614e:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d6152:	d130      	bne.n	d61b6 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d6154:	68a0      	ldr	r0, [r4, #8]
   d6156:	3024      	adds	r0, #36	; 0x24
   d6158:	f000 f870 	bl	d623c <_ZN8FatCache4syncEv>
   d615c:	e017      	b.n	d618e <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d615e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d6162:	68a0      	ldr	r0, [r4, #8]
   d6164:	d315      	bcc.n	d6192 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d6166:	7902      	ldrb	r2, [r0, #4]
   d6168:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d616a:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d616c:	b2d2      	uxtb	r2, r2
   d616e:	4293      	cmp	r3, r2
   d6170:	bf28      	it	cs
   d6172:	4613      	movcs	r3, r2
   d6174:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6176:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d6178:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d617c:	d302      	bcc.n	d6184 <_ZN7FatFile5writeEPKvj+0x10c>
   d617e:	441a      	add	r2, r3
   d6180:	4291      	cmp	r1, r2
   d6182:	d337      	bcc.n	d61f4 <_ZN7FatFile5writeEPKvj+0x17c>
   d6184:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d6186:	464a      	mov	r2, r9
   d6188:	6838      	ldr	r0, [r7, #0]
   d618a:	f000 fc6d 	bl	d6a68 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d618e:	b990      	cbnz	r0, d61b6 <_ZN7FatFile5writeEPKvj+0x13e>
   d6190:	e783      	b.n	d609a <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d6192:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6194:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d6196:	bf02      	ittt	eq
   d6198:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d619c:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d61a0:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d61a2:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d61a4:	464a      	mov	r2, r9
   d61a6:	6818      	ldr	r0, [r3, #0]
   d61a8:	f000 fbec 	bl	d6984 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d61ac:	2800      	cmp	r0, #0
   d61ae:	f43f af74 	beq.w	d609a <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d61b2:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d61b6:	6963      	ldr	r3, [r4, #20]
   d61b8:	442b      	add	r3, r5
   d61ba:	6163      	str	r3, [r4, #20]
    src += n;
   d61bc:	44a9      	add	r9, r5
    nToWrite -= n;
   d61be:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d61c0:	e77a      	b.n	d60b8 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d61c2:	69e2      	ldr	r2, [r4, #28]
   d61c4:	4293      	cmp	r3, r2
   d61c6:	d901      	bls.n	d61cc <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d61c8:	61e3      	str	r3, [r4, #28]
   d61ca:	e002      	b.n	d61d2 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d61cc:	4b0f      	ldr	r3, [pc, #60]	; (d620c <_ZN7FatFile5writeEPKvj+0x194>)
   d61ce:	681b      	ldr	r3, [r3, #0]
   d61d0:	b11b      	cbz	r3, d61da <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d61d2:	78a3      	ldrb	r3, [r4, #2]
   d61d4:	f043 0304 	orr.w	r3, r3, #4
   d61d8:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d61da:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d61de:	2b00      	cmp	r3, #0
   d61e0:	db02      	blt.n	d61e8 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d61e2:	4640      	mov	r0, r8
   d61e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d61e8:	4620      	mov	r0, r4
   d61ea:	f7ff feb9 	bl	d5f60 <_ZN7FatFile4syncEv>
   d61ee:	2800      	cmp	r0, #0
   d61f0:	d1f7      	bne.n	d61e2 <_ZN7FatFile5writeEPKvj+0x16a>
   d61f2:	e752      	b.n	d609a <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d61f4:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d61f8:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d61fc:	62c2      	str	r2, [r0, #44]	; 0x2c
   d61fe:	e7c1      	b.n	d6184 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6200:	6921      	ldr	r1, [r4, #16]
   d6202:	68a0      	ldr	r0, [r4, #8]
   d6204:	f000 f865 	bl	d62d2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6208:	4601      	mov	r1, r0
   d620a:	e783      	b.n	d6114 <_ZN7FatFile5writeEPKvj+0x9c>
   d620c:	2003e3d0 	.word	0x2003e3d0

000d6210 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d6210:	f001 b864 	b.w	d72dc <HAL_Pin_Map>

000d6214 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6214:	b570      	push	{r4, r5, r6, lr}
   d6216:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6218:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d621a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d621c:	b149      	cbz	r1, d6232 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d621e:	f003 f85f 	bl	d92e0 <strlen>
   d6222:	682b      	ldr	r3, [r5, #0]
   d6224:	4602      	mov	r2, r0
   d6226:	4621      	mov	r1, r4
   d6228:	4628      	mov	r0, r5
   d622a:	68db      	ldr	r3, [r3, #12]
    }
   d622c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6230:	4718      	bx	r3
    }
   d6232:	bd70      	pop	{r4, r5, r6, pc}

000d6234 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d6234:	f001 b852 	b.w	d72dc <HAL_Pin_Map>

000d6238 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d6238:	f001 b850 	b.w	d72dc <HAL_Pin_Map>

000d623c <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d623c:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d623e:	7803      	ldrb	r3, [r0, #0]
   d6240:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d6242:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d6244:	d51e      	bpl.n	d6284 <_ZN8FatCache4syncEv+0x48>
   d6246:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6248:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d624a:	f100 060c 	add.w	r6, r0, #12
   d624e:	4632      	mov	r2, r6
   d6250:	6818      	ldr	r0, [r3, #0]
   d6252:	f000 fb97 	bl	d6984 <_ZN9SdSpiCard10writeBlockEmPKh>
   d6256:	4605      	mov	r5, r0
   d6258:	b908      	cbnz	r0, d625e <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d625a:	2500      	movs	r5, #0
   d625c:	e013      	b.n	d6286 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d625e:	7823      	ldrb	r3, [r4, #0]
   d6260:	079b      	lsls	r3, r3, #30
   d6262:	d404      	bmi.n	d626e <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d6264:	7823      	ldrb	r3, [r4, #0]
   d6266:	f023 0301 	bic.w	r3, r3, #1
   d626a:	7023      	strb	r3, [r4, #0]
   d626c:	e00b      	b.n	d6286 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d626e:	6863      	ldr	r3, [r4, #4]
   d6270:	68a0      	ldr	r0, [r4, #8]
   d6272:	6919      	ldr	r1, [r3, #16]
   d6274:	4632      	mov	r2, r6
   d6276:	4401      	add	r1, r0
   d6278:	6818      	ldr	r0, [r3, #0]
   d627a:	f000 fb83 	bl	d6984 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d627e:	2800      	cmp	r0, #0
   d6280:	d1f0      	bne.n	d6264 <_ZN8FatCache4syncEv+0x28>
   d6282:	e7ea      	b.n	d625a <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d6284:	2501      	movs	r5, #1

fail:
  return false;
}
   d6286:	4628      	mov	r0, r5
   d6288:	bd70      	pop	{r4, r5, r6, pc}

000d628a <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d628a:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d628c:	6883      	ldr	r3, [r0, #8]
   d628e:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6290:	4604      	mov	r4, r0
   d6292:	460e      	mov	r6, r1
   d6294:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d6296:	d014      	beq.n	d62c2 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d6298:	f7ff ffd0 	bl	d623c <_ZN8FatCache4syncEv>
   d629c:	b908      	cbnz	r0, d62a2 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d629e:	2000      	movs	r0, #0
   d62a0:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d62a2:	076b      	lsls	r3, r5, #29
   d62a4:	d503      	bpl.n	d62ae <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d62a6:	2300      	movs	r3, #0
   d62a8:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d62aa:	60a6      	str	r6, [r4, #8]
   d62ac:	e009      	b.n	d62c2 <_ZN8FatCache4readEmh+0x38>
   d62ae:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d62b0:	f104 020c 	add.w	r2, r4, #12
   d62b4:	4631      	mov	r1, r6
   d62b6:	6818      	ldr	r0, [r3, #0]
   d62b8:	f000 fada 	bl	d6870 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d62bc:	2800      	cmp	r0, #0
   d62be:	d1f2      	bne.n	d62a6 <_ZN8FatCache4readEmh+0x1c>
   d62c0:	e7ed      	b.n	d629e <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d62c2:	7823      	ldrb	r3, [r4, #0]
   d62c4:	4620      	mov	r0, r4
   d62c6:	f005 0503 	and.w	r5, r5, #3
   d62ca:	431d      	orrs	r5, r3
   d62cc:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d62d0:	bd70      	pop	{r4, r5, r6, pc}

000d62d2 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d62d2:	7983      	ldrb	r3, [r0, #6]
   d62d4:	6940      	ldr	r0, [r0, #20]
   d62d6:	3902      	subs	r1, #2
   d62d8:	4099      	lsls	r1, r3
}
   d62da:	4408      	add	r0, r1
   d62dc:	4770      	bx	lr

000d62de <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d62de:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d62e0:	b570      	push	{r4, r5, r6, lr}
   d62e2:	4605      	mov	r5, r0
   d62e4:	460c      	mov	r4, r1
   d62e6:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d62e8:	d802      	bhi.n	d62f0 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d62ea:	f04f 30ff 	mov.w	r0, #4294967295
   d62ee:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d62f0:	69c3      	ldr	r3, [r0, #28]
   d62f2:	4299      	cmp	r1, r3
   d62f4:	d8f9      	bhi.n	d62ea <_ZN9FatVolume6fatGetEmPm+0xc>
   d62f6:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d62f8:	2b20      	cmp	r3, #32
   d62fa:	d110      	bne.n	d631e <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d62fc:	6981      	ldr	r1, [r0, #24]
   d62fe:	2202      	movs	r2, #2
   d6300:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d6304:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6308:	f7ff ffbf 	bl	d628a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d630c:	2800      	cmp	r0, #0
   d630e:	d0ec      	beq.n	d62ea <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d6310:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6314:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d6318:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d631c:	e00f      	b.n	d633e <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d631e:	2b10      	cmp	r3, #16
   d6320:	d1e3      	bne.n	d62ea <_ZN9FatVolume6fatGetEmPm+0xc>
   d6322:	6983      	ldr	r3, [r0, #24]
   d6324:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6328:	2202      	movs	r2, #2
   d632a:	4419      	add	r1, r3
   d632c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6330:	f7ff ffab 	bl	d628a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6334:	2800      	cmp	r0, #0
   d6336:	d0d8      	beq.n	d62ea <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d6338:	b2e4      	uxtb	r4, r4
   d633a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d633e:	69ea      	ldr	r2, [r5, #28]
   d6340:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d6342:	bf9a      	itte	ls
   d6344:	6033      	strls	r3, [r6, #0]
  return 1;
   d6346:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d6348:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d634a:	bd70      	pop	{r4, r5, r6, pc}

000d634c <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d634c:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d634e:	b538      	push	{r3, r4, r5, lr}
   d6350:	460c      	mov	r4, r1
   d6352:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6354:	d801      	bhi.n	d635a <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d6356:	2000      	movs	r0, #0
   d6358:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d635a:	69c3      	ldr	r3, [r0, #28]
   d635c:	4299      	cmp	r1, r3
   d635e:	d8fa      	bhi.n	d6356 <_ZN9FatVolume6fatPutEmm+0xa>
   d6360:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d6362:	2b20      	cmp	r3, #32
   d6364:	d10e      	bne.n	d6384 <_ZN9FatVolume6fatPutEmm+0x38>
   d6366:	6981      	ldr	r1, [r0, #24]
   d6368:	2203      	movs	r2, #3
   d636a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d636e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6372:	f7ff ff8a 	bl	d628a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d6376:	2800      	cmp	r0, #0
   d6378:	d0ed      	beq.n	d6356 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d637a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d637e:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d6382:	e00f      	b.n	d63a4 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d6384:	2b10      	cmp	r3, #16
   d6386:	d1e6      	bne.n	d6356 <_ZN9FatVolume6fatPutEmm+0xa>
   d6388:	6983      	ldr	r3, [r0, #24]
   d638a:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d638e:	2203      	movs	r2, #3
   d6390:	4419      	add	r1, r3
   d6392:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6396:	f7ff ff78 	bl	d628a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d639a:	2800      	cmp	r0, #0
   d639c:	d0db      	beq.n	d6356 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d639e:	b2e4      	uxtb	r4, r4
   d63a0:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d63a4:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d63a6:	bd38      	pop	{r3, r4, r5, pc}

000d63a8 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d63a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d63ac:	68c4      	ldr	r4, [r0, #12]
   d63ae:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d63b0:	4605      	mov	r5, r0
   d63b2:	460e      	mov	r6, r1
   d63b4:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d63b6:	d207      	bcs.n	d63c8 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d63b8:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d63ba:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d63bc:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d63be:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d63c0:	429c      	cmp	r4, r3
   d63c2:	d903      	bls.n	d63cc <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d63c4:	b9cf      	cbnz	r7, d63fa <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d63c6:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d63c8:	2701      	movs	r7, #1
   d63ca:	e7f7      	b.n	d63bc <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d63cc:	42a6      	cmp	r6, r4
   d63ce:	d014      	beq.n	d63fa <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d63d0:	aa01      	add	r2, sp, #4
   d63d2:	4621      	mov	r1, r4
   d63d4:	4628      	mov	r0, r5
   d63d6:	f7ff ff82 	bl	d62de <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d63da:	2800      	cmp	r0, #0
   d63dc:	db0d      	blt.n	d63fa <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d63de:	d0ed      	beq.n	d63bc <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d63e0:	9b01      	ldr	r3, [sp, #4]
   d63e2:	2b00      	cmp	r3, #0
   d63e4:	d1ea      	bne.n	d63bc <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d63e6:	b107      	cbz	r7, d63ea <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d63e8:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d63ea:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d63ee:	4621      	mov	r1, r4
   d63f0:	4628      	mov	r0, r5
   d63f2:	f7ff ffab 	bl	d634c <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d63f6:	4607      	mov	r7, r0
   d63f8:	b908      	cbnz	r0, d63fe <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d63fa:	2700      	movs	r7, #0
   d63fc:	e00b      	b.n	d6416 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d63fe:	b916      	cbnz	r6, d6406 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d6400:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d6404:	e007      	b.n	d6416 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d6406:	4622      	mov	r2, r4
   d6408:	4631      	mov	r1, r6
   d640a:	4628      	mov	r0, r5
   d640c:	f7ff ff9e 	bl	d634c <_ZN9FatVolume6fatPutEmm>
   d6410:	2800      	cmp	r0, #0
   d6412:	d1f5      	bne.n	d6400 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d6414:	e7f1      	b.n	d63fa <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d6416:	4638      	mov	r0, r7
   d6418:	b002      	add	sp, #8
   d641a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d641e <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d641e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6420:	4605      	mov	r5, r0
   d6422:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d6424:	aa01      	add	r2, sp, #4
   d6426:	4621      	mov	r1, r4
   d6428:	4628      	mov	r0, r5
   d642a:	f7ff ff58 	bl	d62de <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d642e:	1e06      	subs	r6, r0, #0
   d6430:	da01      	bge.n	d6436 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d6432:	2000      	movs	r0, #0
   d6434:	e00f      	b.n	d6456 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d6436:	2200      	movs	r2, #0
   d6438:	4621      	mov	r1, r4
   d643a:	4628      	mov	r0, r5
   d643c:	f7ff ff86 	bl	d634c <_ZN9FatVolume6fatPutEmm>
   d6440:	2800      	cmp	r0, #0
   d6442:	d0f6      	beq.n	d6432 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d6444:	68eb      	ldr	r3, [r5, #12]
   d6446:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d6448:	bf9c      	itt	ls
   d644a:	f104 34ff 	addls.w	r4, r4, #4294967295
   d644e:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d6450:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d6452:	2e00      	cmp	r6, #0
   d6454:	d1e6      	bne.n	d6424 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d6456:	b002      	add	sp, #8
   d6458:	bd70      	pop	{r4, r5, r6, pc}

000d645a <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d645a:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d645c:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d645e:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6460:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d6462:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d6464:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6468:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d646a:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d646c:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d646e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6472:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d6474:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6478:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d647c:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d6480:	b1a1      	cbz	r1, d64ac <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d6482:	2904      	cmp	r1, #4
   d6484:	d85d      	bhi.n	d6542 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6486:	4611      	mov	r1, r2
   d6488:	3024      	adds	r0, #36	; 0x24
   d648a:	f7ff fefe 	bl	d628a <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d648e:	2800      	cmp	r0, #0
   d6490:	d057      	beq.n	d6542 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d6492:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d6496:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d649a:	065b      	lsls	r3, r3, #25
   d649c:	d151      	bne.n	d6542 <_ZN9FatVolume4initEh+0xe8>
   d649e:	351b      	adds	r5, #27
   d64a0:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d64a4:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d64a8:	2d00      	cmp	r5, #0
   d64aa:	d04a      	beq.n	d6542 <_ZN9FatVolume4initEh+0xe8>
   d64ac:	2200      	movs	r2, #0
   d64ae:	4629      	mov	r1, r5
   d64b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d64b4:	f7ff fee9 	bl	d628a <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d64b8:	2800      	cmp	r0, #0
   d64ba:	d042      	beq.n	d6542 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d64bc:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d64c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d64c4:	d13d      	bne.n	d6542 <_ZN9FatVolume4initEh+0xe8>
   d64c6:	7c03      	ldrb	r3, [r0, #16]
   d64c8:	2b02      	cmp	r3, #2
   d64ca:	d13a      	bne.n	d6542 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d64cc:	89c3      	ldrh	r3, [r0, #14]
   d64ce:	2b00      	cmp	r3, #0
   d64d0:	d037      	beq.n	d6542 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d64d2:	7b41      	ldrb	r1, [r0, #13]
   d64d4:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d64d6:	1e4b      	subs	r3, r1, #1
   d64d8:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d64da:	2300      	movs	r3, #0
   d64dc:	71a3      	strb	r3, [r4, #6]
   d64de:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d64e0:	2301      	movs	r3, #1
   d64e2:	428b      	cmp	r3, r1
   d64e4:	d007      	beq.n	d64f6 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d64e6:	3e01      	subs	r6, #1
   d64e8:	d02b      	beq.n	d6542 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d64ea:	79a2      	ldrb	r2, [r4, #6]
   d64ec:	005b      	lsls	r3, r3, #1
   d64ee:	3201      	adds	r2, #1
   d64f0:	b2db      	uxtb	r3, r3
   d64f2:	71a2      	strb	r2, [r4, #6]
   d64f4:	e7f5      	b.n	d64e2 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d64f6:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d64f8:	b902      	cbnz	r2, d64fc <_ZN9FatVolume4initEh+0xa2>
   d64fa:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d64fc:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d64fe:	89c6      	ldrh	r6, [r0, #14]
   d6500:	442e      	add	r6, r5
   d6502:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d6504:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d6508:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d650a:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d650e:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d6510:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d6514:	0152      	lsls	r2, r2, #5
   d6516:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d651a:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d651e:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d6520:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d6524:	b903      	cbnz	r3, d6528 <_ZN9FatVolume4initEh+0xce>
   d6526:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d6528:	1aad      	subs	r5, r5, r2
   d652a:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d652c:	79a5      	ldrb	r5, [r4, #6]
   d652e:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d6532:	1c6b      	adds	r3, r5, #1
   d6534:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d6536:	f640 73f4 	movw	r3, #4084	; 0xff4
   d653a:	429d      	cmp	r5, r3
   d653c:	d803      	bhi.n	d6546 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d653e:	230c      	movs	r3, #12
   d6540:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d6542:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d6544:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d6546:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d654a:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d654c:	bf85      	ittet	hi
   d654e:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d6550:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d6552:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d6554:	2320      	movhi	r3, #32
   d6556:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d6558:	2001      	movs	r0, #1

fail:
  return false;
}
   d655a:	bd70      	pop	{r4, r5, r6, pc}

000d655c <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d655c:	f000 bebe 	b.w	d72dc <HAL_Pin_Map>

000d6560 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d6560:	f000 bebc 	b.w	d72dc <HAL_Pin_Map>

000d6564 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d6564:	f000 beba 	b.w	d72dc <HAL_Pin_Map>

000d6568 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6568:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d656a:	4c0e      	ldr	r4, [pc, #56]	; (d65a4 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d656c:	460e      	mov	r6, r1
   d656e:	4615      	mov	r5, r2
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d6570:	f000 ff54 	bl	d741c <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6574:	6823      	ldr	r3, [r4, #0]
   d6576:	1ac0      	subs	r0, r0, r3
   d6578:	4b0b      	ldr	r3, [pc, #44]	; (d65a8 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d657a:	4298      	cmp	r0, r3
   d657c:	d908      	bls.n	d6590 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d657e:	f000 ff55 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6582:	4b0a      	ldr	r3, [pc, #40]	; (d65ac <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d6584:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d6586:	f001 f8ed 	bl	d7764 <spark_process>
   d658a:	f000 ff47 	bl	d741c <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d658e:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6590:	f000 ff4c 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d6594:	b280      	uxth	r0, r0
   d6596:	1b80      	subs	r0, r0, r6
}
   d6598:	42a8      	cmp	r0, r5
   d659a:	bfd4      	ite	le
   d659c:	2000      	movle	r0, #0
   d659e:	2001      	movgt	r0, #1
   d65a0:	bd70      	pop	{r4, r5, r6, pc}
   d65a2:	bf00      	nop
   d65a4:	2003e3d4 	.word	0x2003e3d4
   d65a8:	000186a0 	.word	0x000186a0
   d65ac:	2003e730 	.word	0x2003e730

000d65b0 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d65b0:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d65b2:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d65b4:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d65b6:	b94d      	cbnz	r5, d65cc <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d65b8:	6840      	ldr	r0, [r0, #4]
   d65ba:	f000 fa7d 	bl	d6ab8 <_ZN14SdSpiAltDriver8activateEv>
   d65be:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d65c0:	4629      	mov	r1, r5
   d65c2:	7d18      	ldrb	r0, [r3, #20]
   d65c4:	f001 ffd1 	bl	d856a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d65c8:	2301      	movs	r3, #1
   d65ca:	7223      	strb	r3, [r4, #8]
   d65cc:	bd38      	pop	{r3, r4, r5, pc}

000d65ce <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d65ce:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d65d0:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d65d2:	4604      	mov	r4, r0
  if (m_spiActive) {
   d65d4:	b16b      	cbz	r3, d65f2 <_ZN9SdSpiCard7spiStopEv+0x24>
   d65d6:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d65d8:	2101      	movs	r1, #1
   d65da:	7d18      	ldrb	r0, [r3, #20]
   d65dc:	f001 ffc5 	bl	d856a <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d65e0:	21ff      	movs	r1, #255	; 0xff
   d65e2:	6860      	ldr	r0, [r4, #4]
   d65e4:	f000 fa9a 	bl	d6b1c <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d65e8:	6860      	ldr	r0, [r4, #4]
   d65ea:	f000 fa79 	bl	d6ae0 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d65ee:	2300      	movs	r3, #0
   d65f0:	7223      	strb	r3, [r4, #8]
   d65f2:	bd10      	pop	{r4, pc}

000d65f4 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d65f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d65f6:	4604      	mov	r4, r0
   d65f8:	460d      	mov	r5, r1
   d65fa:	4616      	mov	r6, r2
   d65fc:	f000 ff16 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d6600:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6602:	6860      	ldr	r0, [r4, #4]
   d6604:	f000 fa6f 	bl	d6ae6 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d6608:	28ff      	cmp	r0, #255	; 0xff
   d660a:	7260      	strb	r0, [r4, #9]
   d660c:	d109      	bne.n	d6622 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d660e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6612:	4639      	mov	r1, r7
   d6614:	4620      	mov	r0, r4
   d6616:	f7ff ffa7 	bl	d6568 <_ZN9SdSpiCard10isTimedOutEtt>
   d661a:	2800      	cmp	r0, #0
   d661c:	d0f1      	beq.n	d6602 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d661e:	2355      	movs	r3, #85	; 0x55
   d6620:	e00b      	b.n	d663a <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d6622:	28fe      	cmp	r0, #254	; 0xfe
   d6624:	d001      	beq.n	d662a <_ZN9SdSpiCard8readDataEPhj+0x36>
   d6626:	2350      	movs	r3, #80	; 0x50
   d6628:	e007      	b.n	d663a <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d662a:	4632      	mov	r2, r6
   d662c:	4629      	mov	r1, r5
   d662e:	6860      	ldr	r0, [r4, #4]
   d6630:	f000 fa5e 	bl	d6af0 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d6634:	7260      	strb	r0, [r4, #9]
   d6636:	b130      	cbz	r0, d6646 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6638:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d663a:	4620      	mov	r0, r4
   d663c:	7023      	strb	r3, [r4, #0]
   d663e:	f7ff ffc6 	bl	d65ce <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6642:	2000      	movs	r0, #0
}
   d6644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6646:	6860      	ldr	r0, [r4, #4]
   d6648:	f000 fa4d 	bl	d6ae6 <_ZN14SdSpiAltDriver7receiveEv>
   d664c:	6860      	ldr	r0, [r4, #4]
   d664e:	f000 fa4a 	bl	d6ae6 <_ZN14SdSpiAltDriver7receiveEv>
   d6652:	2001      	movs	r0, #1
   d6654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6656 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d6656:	b570      	push	{r4, r5, r6, lr}
   d6658:	4604      	mov	r4, r0
   d665a:	460e      	mov	r6, r1
   d665c:	f000 fee6 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
   d6660:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d6662:	4632      	mov	r2, r6
   d6664:	4629      	mov	r1, r5
   d6666:	4620      	mov	r0, r4
   d6668:	f7ff ff7e 	bl	d6568 <_ZN9SdSpiCard10isTimedOutEtt>
   d666c:	b930      	cbnz	r0, d667c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d666e:	6860      	ldr	r0, [r4, #4]
   d6670:	f000 fa39 	bl	d6ae6 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d6674:	28ff      	cmp	r0, #255	; 0xff
   d6676:	d1f4      	bne.n	d6662 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d6678:	2001      	movs	r0, #1
   d667a:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d667c:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d667e:	bd70      	pop	{r4, r5, r6, pc}

000d6680 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d6682:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6684:	9201      	str	r2, [sp, #4]
   d6686:	4604      	mov	r4, r0
   d6688:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d668a:	b90b      	cbnz	r3, d6690 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d668c:	f7ff ff90 	bl	d65b0 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d6690:	b125      	cbz	r5, d669c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d6692:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d6696:	4620      	mov	r0, r4
   d6698:	f7ff ffdd 	bl	d6656 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d669c:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d66a0:	6860      	ldr	r0, [r4, #4]
   d66a2:	f000 fa3b 	bl	d6b1c <_ZN14SdSpiAltDriver4sendEh>
   d66a6:	f10d 0607 	add.w	r6, sp, #7
   d66aa:	f10d 0703 	add.w	r7, sp, #3
   d66ae:	f816 1901 	ldrb.w	r1, [r6], #-1
   d66b2:	6860      	ldr	r0, [r4, #4]
   d66b4:	f000 fa32 	bl	d6b1c <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d66b8:	42be      	cmp	r6, r7
   d66ba:	d1f8      	bne.n	d66ae <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d66bc:	2d00      	cmp	r5, #0
   d66be:	bf0c      	ite	eq
   d66c0:	2195      	moveq	r1, #149	; 0x95
   d66c2:	2187      	movne	r1, #135	; 0x87
   d66c4:	6860      	ldr	r0, [r4, #4]
   d66c6:	f000 fa29 	bl	d6b1c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d66ca:	6860      	ldr	r0, [r4, #4]
   d66cc:	f000 fa0b 	bl	d6ae6 <_ZN14SdSpiAltDriver7receiveEv>
   d66d0:	250b      	movs	r5, #11
   d66d2:	6860      	ldr	r0, [r4, #4]
   d66d4:	f000 fa07 	bl	d6ae6 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d66d8:	0603      	lsls	r3, r0, #24
   d66da:	7260      	strb	r0, [r4, #9]
   d66dc:	d503      	bpl.n	d66e6 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d66de:	3d01      	subs	r5, #1
   d66e0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d66e4:	d1f5      	bne.n	d66d2 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d66e6:	b003      	add	sp, #12
   d66e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d66ea <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d66ea:	b570      	push	{r4, r5, r6, lr}
   d66ec:	4604      	mov	r4, r0
   d66ee:	460d      	mov	r5, r1
   d66f0:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d66f2:	2137      	movs	r1, #55	; 0x37
   d66f4:	2200      	movs	r2, #0
   d66f6:	f7ff ffc3 	bl	d6680 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d66fa:	4632      	mov	r2, r6
   d66fc:	4629      	mov	r1, r5
   d66fe:	4620      	mov	r0, r4
  }
   d6700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d6704:	f7ff bfbc 	b.w	d6680 <_ZN9SdSpiCard11cardCommandEhm>

000d6708 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d670c:	2500      	movs	r5, #0
   d670e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d6710:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d6712:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d6714:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6716:	4604      	mov	r4, r0
   d6718:	4690      	mov	r8, r2
   d671a:	461e      	mov	r6, r3
   d671c:	f000 fe86 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d6720:	4641      	mov	r1, r8
   d6722:	4607      	mov	r7, r0
   d6724:	6860      	ldr	r0, [r4, #4]
   d6726:	f000 f9cb 	bl	d6ac0 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d672a:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d672c:	4a4f      	ldr	r2, [pc, #316]	; (d686c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d672e:	721d      	strb	r5, [r3, #8]
   d6730:	f04f 0801 	mov.w	r8, #1
   d6734:	60da      	str	r2, [r3, #12]
   d6736:	745d      	strb	r5, [r3, #17]
   d6738:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d673c:	4620      	mov	r0, r4
   d673e:	f7ff ff37 	bl	d65b0 <_ZN9SdSpiCard8spiStartEv>
   d6742:	6863      	ldr	r3, [r4, #4]
   d6744:	4641      	mov	r1, r8
   d6746:	7d18      	ldrb	r0, [r3, #20]
   d6748:	f001 ff0f 	bl	d856a <digitalWrite>
   d674c:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d674e:	21ff      	movs	r1, #255	; 0xff
   d6750:	6860      	ldr	r0, [r4, #4]
   d6752:	3d01      	subs	r5, #1
   d6754:	f000 f9e2 	bl	d6b1c <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d6758:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d675c:	d1f7      	bne.n	d674e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d675e:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d6760:	4629      	mov	r1, r5
   d6762:	7d18      	ldrb	r0, [r3, #20]
   d6764:	f001 ff01 	bl	d856a <digitalWrite>
   d6768:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d676a:	2200      	movs	r2, #0
   d676c:	4611      	mov	r1, r2
   d676e:	4620      	mov	r0, r4
   d6770:	f7ff ff86 	bl	d6680 <_ZN9SdSpiCard11cardCommandEhm>
   d6774:	2801      	cmp	r0, #1
   d6776:	4680      	mov	r8, r0
   d6778:	d012      	beq.n	d67a0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d677a:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d677c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6780:	d101      	bne.n	d6786 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6782:	2320      	movs	r3, #32
   d6784:	e057      	b.n	d6836 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6786:	21fd      	movs	r1, #253	; 0xfd
   d6788:	6860      	ldr	r0, [r4, #4]
   d678a:	f000 f9c7 	bl	d6b1c <_ZN14SdSpiAltDriver4sendEh>
   d678e:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6792:	6860      	ldr	r0, [r4, #4]
   d6794:	f000 f9a7 	bl	d6ae6 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d6798:	f1b8 0801 	subs.w	r8, r8, #1
   d679c:	d1f9      	bne.n	d6792 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d679e:	e7e4      	b.n	d676a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d67a0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d67a4:	2108      	movs	r1, #8
   d67a6:	4620      	mov	r0, r4
   d67a8:	f7ff ff6a 	bl	d6680 <_ZN9SdSpiCard11cardCommandEhm>
   d67ac:	2805      	cmp	r0, #5
   d67ae:	d102      	bne.n	d67b6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d67b0:	f884 800a 	strb.w	r8, [r4, #10]
   d67b4:	e00f      	b.n	d67d6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d67b6:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d67b8:	6860      	ldr	r0, [r4, #4]
   d67ba:	f000 f994 	bl	d6ae6 <_ZN14SdSpiAltDriver7receiveEv>
   d67be:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d67c0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d67c4:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d67c6:	d1f7      	bne.n	d67b8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d67c8:	28aa      	cmp	r0, #170	; 0xaa
   d67ca:	d102      	bne.n	d67d2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d67cc:	2302      	movs	r3, #2
   d67ce:	72a3      	strb	r3, [r4, #10]
   d67d0:	e001      	b.n	d67d6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d67d2:	2325      	movs	r3, #37	; 0x25
   d67d4:	e02f      	b.n	d6836 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d67d6:	7aa3      	ldrb	r3, [r4, #10]
   d67d8:	2b02      	cmp	r3, #2
   d67da:	bf0c      	ite	eq
   d67dc:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d67e0:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d67e2:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d67e4:	462a      	mov	r2, r5
   d67e6:	2129      	movs	r1, #41	; 0x29
   d67e8:	4620      	mov	r0, r4
   d67ea:	f7ff ff7e 	bl	d66ea <_ZN9SdSpiCard8cardAcmdEhm>
   d67ee:	4602      	mov	r2, r0
   d67f0:	b148      	cbz	r0, d6806 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d67f2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d67f6:	4639      	mov	r1, r7
   d67f8:	4620      	mov	r0, r4
   d67fa:	f7ff feb5 	bl	d6568 <_ZN9SdSpiCard10isTimedOutEtt>
   d67fe:	2800      	cmp	r0, #0
   d6800:	d0f0      	beq.n	d67e4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d6802:	2343      	movs	r3, #67	; 0x43
   d6804:	e017      	b.n	d6836 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d6806:	7aa3      	ldrb	r3, [r4, #10]
   d6808:	2b02      	cmp	r3, #2
   d680a:	d00e      	beq.n	d682a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d680c:	4620      	mov	r0, r4
   d680e:	f7ff fede 	bl	d65ce <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d6812:	6863      	ldr	r3, [r4, #4]
   d6814:	68b0      	ldr	r0, [r6, #8]
   d6816:	7934      	ldrb	r4, [r6, #4]
   d6818:	7b31      	ldrb	r1, [r6, #12]
   d681a:	7b72      	ldrb	r2, [r6, #13]
   d681c:	745a      	strb	r2, [r3, #17]
   d681e:	60d8      	str	r0, [r3, #12]
   d6820:	721c      	strb	r4, [r3, #8]
   d6822:	7419      	strb	r1, [r3, #16]
  return true;
   d6824:	2001      	movs	r0, #1
   d6826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d682a:	213a      	movs	r1, #58	; 0x3a
   d682c:	4620      	mov	r0, r4
   d682e:	f7ff ff27 	bl	d6680 <_ZN9SdSpiCard11cardCommandEhm>
   d6832:	b138      	cbz	r0, d6844 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d6834:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d6836:	4620      	mov	r0, r4
   d6838:	7023      	strb	r3, [r4, #0]
   d683a:	f7ff fec8 	bl	d65ce <_ZN9SdSpiCard7spiStopEv>
  return false;
   d683e:	2000      	movs	r0, #0
}
   d6840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6844:	6860      	ldr	r0, [r4, #4]
   d6846:	f000 f94e 	bl	d6ae6 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d684a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d684e:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6850:	bf04      	itt	eq
   d6852:	2303      	moveq	r3, #3
   d6854:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6856:	6860      	ldr	r0, [r4, #4]
   d6858:	f000 f945 	bl	d6ae6 <_ZN14SdSpiAltDriver7receiveEv>
   d685c:	6860      	ldr	r0, [r4, #4]
   d685e:	f000 f942 	bl	d6ae6 <_ZN14SdSpiAltDriver7receiveEv>
   d6862:	6860      	ldr	r0, [r4, #4]
   d6864:	f000 f93f 	bl	d6ae6 <_ZN14SdSpiAltDriver7receiveEv>
   d6868:	e7d0      	b.n	d680c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d686a:	bf00      	nop
   d686c:	0003d090 	.word	0x0003d090

000d6870 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6870:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6872:	7a83      	ldrb	r3, [r0, #10]
   d6874:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6876:	bf18      	it	ne
   d6878:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d687a:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d687c:	460a      	mov	r2, r1
   d687e:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6880:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6882:	f7ff fefd 	bl	d6680 <_ZN9SdSpiCard11cardCommandEhm>
   d6886:	b110      	cbz	r0, d688e <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6888:	2330      	movs	r3, #48	; 0x30
   d688a:	7023      	strb	r3, [r4, #0]
   d688c:	e00b      	b.n	d68a6 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d688e:	4629      	mov	r1, r5
   d6890:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6894:	4620      	mov	r0, r4
   d6896:	f7ff fead 	bl	d65f4 <_ZN9SdSpiCard8readDataEPhj>
   d689a:	4605      	mov	r5, r0
   d689c:	b118      	cbz	r0, d68a6 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d689e:	4620      	mov	r0, r4
   d68a0:	f7ff fe95 	bl	d65ce <_ZN9SdSpiCard7spiStopEv>
  return true;
   d68a4:	e003      	b.n	d68ae <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d68a6:	4620      	mov	r0, r4
   d68a8:	f7ff fe91 	bl	d65ce <_ZN9SdSpiCard7spiStopEv>
  return false;
   d68ac:	2500      	movs	r5, #0
}
   d68ae:	4628      	mov	r0, r5
   d68b0:	bd38      	pop	{r3, r4, r5, pc}

000d68b2 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d68b2:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d68b4:	7a83      	ldrb	r3, [r0, #10]
   d68b6:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d68b8:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d68ba:	bf18      	it	ne
   d68bc:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d68be:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d68c0:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d68c2:	f7ff fedd 	bl	d6680 <_ZN9SdSpiCard11cardCommandEhm>
   d68c6:	b130      	cbz	r0, d68d6 <_ZN9SdSpiCard9readStartEm+0x24>
   d68c8:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d68ca:	4620      	mov	r0, r4
   d68cc:	7023      	strb	r3, [r4, #0]
   d68ce:	f7ff fe7e 	bl	d65ce <_ZN9SdSpiCard7spiStopEv>
  return false;
   d68d2:	2000      	movs	r0, #0
   d68d4:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d68d6:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d68d8:	bd10      	pop	{r4, pc}

000d68da <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d68da:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d68dc:	2200      	movs	r2, #0
   d68de:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d68e0:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d68e2:	f7ff fecd 	bl	d6680 <_ZN9SdSpiCard11cardCommandEhm>
   d68e6:	b130      	cbz	r0, d68f6 <_ZN9SdSpiCard8readStopEv+0x1c>
   d68e8:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d68ea:	4620      	mov	r0, r4
   d68ec:	7023      	strb	r3, [r4, #0]
   d68ee:	f7ff fe6e 	bl	d65ce <_ZN9SdSpiCard7spiStopEv>
  return false;
   d68f2:	2000      	movs	r0, #0
   d68f4:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d68f6:	4620      	mov	r0, r4
   d68f8:	f7ff fe69 	bl	d65ce <_ZN9SdSpiCard7spiStopEv>
  return true;
   d68fc:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d68fe:	bd10      	pop	{r4, pc}

000d6900 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d6900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6902:	4605      	mov	r5, r0
   d6904:	4616      	mov	r6, r2
   d6906:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d6908:	f7ff ffd3 	bl	d68b2 <_ZN9SdSpiCard9readStartEm>
   d690c:	b198      	cbz	r0, d6936 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d690e:	2400      	movs	r4, #0
   d6910:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d6912:	429f      	cmp	r7, r3
   d6914:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d6918:	d908      	bls.n	d692c <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d691a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d691e:	4628      	mov	r0, r5
   d6920:	f7ff fe68 	bl	d65f4 <_ZN9SdSpiCard8readDataEPhj>
   d6924:	3401      	adds	r4, #1
   d6926:	2800      	cmp	r0, #0
   d6928:	d1f2      	bne.n	d6910 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d692a:	e004      	b.n	d6936 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d692c:	4628      	mov	r0, r5
}
   d692e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d6932:	f7ff bfd2 	b.w	d68da <_ZN9SdSpiCard8readStopEv>
}
   d6936:	2000      	movs	r0, #0
   d6938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d693a <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d693a:	b538      	push	{r3, r4, r5, lr}
   d693c:	4604      	mov	r4, r0
   d693e:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6940:	6840      	ldr	r0, [r0, #4]
   d6942:	f000 f8eb 	bl	d6b1c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d6946:	f44f 7200 	mov.w	r2, #512	; 0x200
   d694a:	4629      	mov	r1, r5
   d694c:	6860      	ldr	r0, [r4, #4]
   d694e:	f000 f8e9 	bl	d6b24 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6952:	21ff      	movs	r1, #255	; 0xff
   d6954:	6860      	ldr	r0, [r4, #4]
   d6956:	f000 f8e1 	bl	d6b1c <_ZN14SdSpiAltDriver4sendEh>
   d695a:	21ff      	movs	r1, #255	; 0xff
   d695c:	6860      	ldr	r0, [r4, #4]
   d695e:	f000 f8dd 	bl	d6b1c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6962:	6860      	ldr	r0, [r4, #4]
   d6964:	f000 f8bf 	bl	d6ae6 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d6968:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d696a:	f000 001f 	and.w	r0, r0, #31
   d696e:	2805      	cmp	r0, #5
   d6970:	d006      	beq.n	d6980 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6972:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6974:	4620      	mov	r0, r4
   d6976:	7023      	strb	r3, [r4, #0]
   d6978:	f7ff fe29 	bl	d65ce <_ZN9SdSpiCard7spiStopEv>
  return false;
   d697c:	2000      	movs	r0, #0
   d697e:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d6980:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6982:	bd38      	pop	{r3, r4, r5, pc}

000d6984 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6984:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6986:	7a83      	ldrb	r3, [r0, #10]
   d6988:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d698a:	bf18      	it	ne
   d698c:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d698e:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6990:	460a      	mov	r2, r1
   d6992:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6994:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6996:	f7ff fe73 	bl	d6680 <_ZN9SdSpiCard11cardCommandEhm>
   d699a:	4606      	mov	r6, r0
   d699c:	b108      	cbz	r0, d69a2 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d699e:	2332      	movs	r3, #50	; 0x32
   d69a0:	e01d      	b.n	d69de <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d69a2:	462a      	mov	r2, r5
   d69a4:	21fe      	movs	r1, #254	; 0xfe
   d69a6:	4620      	mov	r0, r4
   d69a8:	f7ff ffc7 	bl	d693a <_ZN9SdSpiCard9writeDataEhPKh>
   d69ac:	b1c0      	cbz	r0, d69e0 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d69ae:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d69b2:	4620      	mov	r0, r4
   d69b4:	f7ff fe4f 	bl	d6656 <_ZN9SdSpiCard11waitNotBusyEt>
   d69b8:	4605      	mov	r5, r0
   d69ba:	b908      	cbnz	r0, d69c0 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d69bc:	235a      	movs	r3, #90	; 0x5a
   d69be:	e00e      	b.n	d69de <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d69c0:	4632      	mov	r2, r6
   d69c2:	210d      	movs	r1, #13
   d69c4:	4620      	mov	r0, r4
   d69c6:	f7ff fe5b 	bl	d6680 <_ZN9SdSpiCard11cardCommandEhm>
   d69ca:	b938      	cbnz	r0, d69dc <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d69cc:	6860      	ldr	r0, [r4, #4]
   d69ce:	f000 f88a 	bl	d6ae6 <_ZN14SdSpiAltDriver7receiveEv>
   d69d2:	b918      	cbnz	r0, d69dc <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d69d4:	4620      	mov	r0, r4
   d69d6:	f7ff fdfa 	bl	d65ce <_ZN9SdSpiCard7spiStopEv>
  return true;
   d69da:	e005      	b.n	d69e8 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d69dc:	2329      	movs	r3, #41	; 0x29
   d69de:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d69e0:	4620      	mov	r0, r4
   d69e2:	f7ff fdf4 	bl	d65ce <_ZN9SdSpiCard7spiStopEv>
  return false;
   d69e6:	2500      	movs	r5, #0
}
   d69e8:	4628      	mov	r0, r5
   d69ea:	bd70      	pop	{r4, r5, r6, pc}

000d69ec <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d69ec:	b538      	push	{r3, r4, r5, lr}
   d69ee:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d69f0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d69f4:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d69f6:	f7ff fe2e 	bl	d6656 <_ZN9SdSpiCard11waitNotBusyEt>
   d69fa:	b910      	cbnz	r0, d6a02 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d69fc:	235b      	movs	r3, #91	; 0x5b
   d69fe:	7023      	strb	r3, [r4, #0]
   d6a00:	e005      	b.n	d6a0e <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d6a02:	462a      	mov	r2, r5
   d6a04:	21fc      	movs	r1, #252	; 0xfc
   d6a06:	4620      	mov	r0, r4
   d6a08:	f7ff ff97 	bl	d693a <_ZN9SdSpiCard9writeDataEhPKh>
   d6a0c:	b918      	cbnz	r0, d6a16 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6a0e:	4620      	mov	r0, r4
   d6a10:	f7ff fddd 	bl	d65ce <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6a14:	2000      	movs	r0, #0
}
   d6a16:	bd38      	pop	{r3, r4, r5, pc}

000d6a18 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6a18:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6a1a:	7a83      	ldrb	r3, [r0, #10]
   d6a1c:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6a1e:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d6a20:	bf18      	it	ne
   d6a22:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6a24:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6a26:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6a28:	f7ff fe2a 	bl	d6680 <_ZN9SdSpiCard11cardCommandEhm>
   d6a2c:	b130      	cbz	r0, d6a3c <_ZN9SdSpiCard10writeStartEm+0x24>
   d6a2e:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6a30:	4620      	mov	r0, r4
   d6a32:	7023      	strb	r3, [r4, #0]
   d6a34:	f7ff fdcb 	bl	d65ce <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6a38:	2000      	movs	r0, #0
   d6a3a:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d6a3c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6a3e:	bd10      	pop	{r4, pc}

000d6a40 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6a40:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6a42:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6a46:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6a48:	f7ff fe05 	bl	d6656 <_ZN9SdSpiCard11waitNotBusyEt>
   d6a4c:	4605      	mov	r5, r0
   d6a4e:	b120      	cbz	r0, d6a5a <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6a50:	21fd      	movs	r1, #253	; 0xfd
   d6a52:	6860      	ldr	r0, [r4, #4]
   d6a54:	f000 f862 	bl	d6b1c <_ZN14SdSpiAltDriver4sendEh>
   d6a58:	e001      	b.n	d6a5e <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6a5a:	2356      	movs	r3, #86	; 0x56
   d6a5c:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d6a5e:	4620      	mov	r0, r4
   d6a60:	f7ff fdb5 	bl	d65ce <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6a64:	4628      	mov	r0, r5
   d6a66:	bd38      	pop	{r3, r4, r5, pc}

000d6a68 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d6a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a6a:	4605      	mov	r5, r0
   d6a6c:	4616      	mov	r6, r2
   d6a6e:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d6a70:	f7ff ffd2 	bl	d6a18 <_ZN9SdSpiCard10writeStartEm>
   d6a74:	b170      	cbz	r0, d6a94 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d6a76:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6a78:	42bc      	cmp	r4, r7
   d6a7a:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6a7e:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6a80:	d004      	beq.n	d6a8c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d6a82:	f7ff ffb3 	bl	d69ec <_ZN9SdSpiCard9writeDataEPKh>
   d6a86:	b128      	cbz	r0, d6a94 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6a88:	3401      	adds	r4, #1
   d6a8a:	e7f5      	b.n	d6a78 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d6a8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6a90:	f7ff bfd6 	b.w	d6a40 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d6a94:	4628      	mov	r0, r5
   d6a96:	f7ff fd9a 	bl	d65ce <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6a9a:	2000      	movs	r0, #0
   d6a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a9e <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d6a9e:	f000 bc1d 	b.w	d72dc <HAL_Pin_Map>

000d6aa2 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d6aa2:	f000 bc1b 	b.w	d72dc <HAL_Pin_Map>

000d6aa6 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d6aa6:	f000 bc19 	b.w	d72dc <HAL_Pin_Map>
	...

000d6aac <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d6aac:	4b01      	ldr	r3, [pc, #4]	; (d6ab4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d6aae:	2201      	movs	r2, #1
   d6ab0:	701a      	strb	r2, [r3, #0]
   d6ab2:	4770      	bx	lr
   d6ab4:	2003e3d8 	.word	0x2003e3d8

000d6ab8 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d6ab8:	1d01      	adds	r1, r0, #4
   d6aba:	6800      	ldr	r0, [r0, #0]
   d6abc:	f000 bf14 	b.w	d78e8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d6ac0 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d6ac0:	b510      	push	{r4, lr}
   d6ac2:	4604      	mov	r4, r0
  m_csPin = csPin;
   d6ac4:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d6ac6:	6800      	ldr	r0, [r0, #0]
   d6ac8:	f000 fec2 	bl	d7850 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d6acc:	7d20      	ldrb	r0, [r4, #20]
   d6ace:	2101      	movs	r1, #1
   d6ad0:	f001 fd3a 	bl	d8548 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d6ad4:	7d20      	ldrb	r0, [r4, #20]
   d6ad6:	2101      	movs	r1, #1
}
   d6ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d6adc:	f001 bd45 	b.w	d856a <digitalWrite>

000d6ae0 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d6ae0:	6800      	ldr	r0, [r0, #0]
   d6ae2:	f000 bee8 	b.w	d78b6 <_ZN8SPIClass14endTransactionEv>

000d6ae6 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d6ae6:	21ff      	movs	r1, #255	; 0xff
   d6ae8:	6800      	ldr	r0, [r0, #0]
   d6aea:	f000 bfc3 	b.w	d7a74 <_ZN8SPIClass8transferEh>
	...

000d6af0 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d6af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6af2:	4b08      	ldr	r3, [pc, #32]	; (d6b14 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d6af4:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6af6:	2500      	movs	r5, #0
   d6af8:	4c07      	ldr	r4, [pc, #28]	; (d6b18 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6afa:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6afc:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6afe:	4613      	mov	r3, r2
   d6b00:	460a      	mov	r2, r1
   d6b02:	4629      	mov	r1, r5
   d6b04:	f000 ffbc 	bl	d7a80 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d6b08:	7823      	ldrb	r3, [r4, #0]
   d6b0a:	2b00      	cmp	r3, #0
   d6b0c:	d0fc      	beq.n	d6b08 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d6b0e:	2000      	movs	r0, #0
   d6b10:	b003      	add	sp, #12
   d6b12:	bd30      	pop	{r4, r5, pc}
   d6b14:	000d6aad 	.word	0x000d6aad
   d6b18:	2003e3d8 	.word	0x2003e3d8

000d6b1c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d6b1c:	6800      	ldr	r0, [r0, #0]
   d6b1e:	f000 bfa9 	b.w	d7a74 <_ZN8SPIClass8transferEh>
	...

000d6b24 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d6b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6b26:	4b07      	ldr	r3, [pc, #28]	; (d6b44 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d6b28:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6b2a:	2500      	movs	r5, #0
   d6b2c:	4c06      	ldr	r4, [pc, #24]	; (d6b48 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6b2e:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6b30:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6b32:	4613      	mov	r3, r2
   d6b34:	462a      	mov	r2, r5
   d6b36:	f000 ffa3 	bl	d7a80 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d6b3a:	7823      	ldrb	r3, [r4, #0]
   d6b3c:	2b00      	cmp	r3, #0
   d6b3e:	d0fc      	beq.n	d6b3a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d6b40:	b003      	add	sp, #12
   d6b42:	bd30      	pop	{r4, r5, pc}
   d6b44:	000d6aad 	.word	0x000d6aad
   d6b48:	2003e3d8 	.word	0x2003e3d8

000d6b4c <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d6b4c:	f000 bbc6 	b.w	d72dc <HAL_Pin_Map>

000d6b50 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6b50:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6b52:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6b54:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6b56:	b113      	cbz	r3, d6b5e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6b58:	2203      	movs	r2, #3
   d6b5a:	4601      	mov	r1, r0
   d6b5c:	4798      	blx	r3
    }
   d6b5e:	4620      	mov	r0, r4
   d6b60:	bd10      	pop	{r4, pc}
	...

000d6b64 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6b64:	4b02      	ldr	r3, [pc, #8]	; (d6b70 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
   d6b66:	2201      	movs	r2, #1
   d6b68:	701a      	strb	r2, [r3, #0]
   d6b6a:	f000 bbb7 	b.w	d72dc <HAL_Pin_Map>
   d6b6e:	bf00      	nop
   d6b70:	2003e3d9 	.word	0x2003e3d9

000d6b74 <_ZN11TinyGPSDataC1Ev>:
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d6b74:	2200      	movs	r2, #0
   d6b76:	7002      	strb	r2, [r0, #0]
   d6b78:	7042      	strb	r2, [r0, #1]
{
	uint16_t deg; 			//!< Degree value (0 <= deg < 365)
	uint32_t billionths; 	//!< Billionths of a segree
	bool negative; 			//!< true if negative (south latitude or east longitude)
public:
	RawDegrees() : deg(0), billionths(0), negative(false)
   d6b7a:	8082      	strh	r2, [r0, #4]
   d6b7c:	6082      	str	r2, [r0, #8]
   d6b7e:	7302      	strb	r2, [r0, #12]
   d6b80:	8202      	strh	r2, [r0, #16]
   d6b82:	6142      	str	r2, [r0, #20]
   d6b84:	7602      	strb	r2, [r0, #24]
   d6b86:	8382      	strh	r2, [r0, #28]
   d6b88:	6202      	str	r2, [r0, #32]
   d6b8a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d6b8e:	8502      	strh	r2, [r0, #40]	; 0x28
   d6b90:	62c2      	str	r2, [r0, #44]	; 0x2c
   d6b92:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d6b96:	6342      	str	r2, [r0, #52]	; 0x34
	uint8_t day();

	/**
	 * @brief Constructor
	 */
	TinyGPSDate() : valid(false), updated(false), date(0), newDate(0), lastCommitTime(0)
   d6b98:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
   d6b9c:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
   d6ba0:	63c2      	str	r2, [r0, #60]	; 0x3c
   d6ba2:	6402      	str	r2, [r0, #64]	; 0x40
   d6ba4:	6442      	str	r2, [r0, #68]	; 0x44
	uint8_t centisecond();

	/**
	 * @brief Constructor
	 */
	TinyGPSTime() : valid(false), updated(false), time(0), newTime(0), lastCommitTime(0)
   d6ba6:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
   d6baa:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
   d6bae:	64c2      	str	r2, [r0, #76]	; 0x4c
   d6bb0:	6502      	str	r2, [r0, #80]	; 0x50
   d6bb2:	6542      	str	r2, [r0, #84]	; 0x54
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d6bb4:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
   d6bb8:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
   d6bbc:	65c2      	str	r2, [r0, #92]	; 0x5c
   d6bbe:	6602      	str	r2, [r0, #96]	; 0x60
   d6bc0:	6642      	str	r2, [r0, #100]	; 0x64
   d6bc2:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
   d6bc6:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
   d6bca:	66c2      	str	r2, [r0, #108]	; 0x6c
   d6bcc:	6702      	str	r2, [r0, #112]	; 0x70
   d6bce:	6742      	str	r2, [r0, #116]	; 0x74
   d6bd0:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
   d6bd4:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
   d6bd8:	67c2      	str	r2, [r0, #124]	; 0x7c
   d6bda:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   d6bde:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
   d6be2:	f880 2088 	strb.w	r2, [r0, #136]	; 0x88
   d6be6:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
   d6bea:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
   d6bee:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   d6bf2:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSInteger() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d6bf6:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
   d6bfa:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
   d6bfe:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
   d6c02:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d6c06:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d6c0a:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
   d6c0e:	f880 20a9 	strb.w	r2, [r0, #169]	; 0xa9
   d6c12:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
   d6c16:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   d6c1a:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
 *
 * For best thread safety, you should avoid using fields like location directly and instead should
 * use methods like getLocation() to make a copy of the location data. This will assure that your
 * data is valid and does not change while you are reading it.
 */
class TinyGPSData {
   d6c1e:	4770      	bx	lr

000d6c20 <_ZN11TinyGPSPlusC1Ev>:
	return value * value;
}
#endif
// End

TinyGPSPlus::TinyGPSPlus()
   d6c20:	b510      	push	{r4, lr}
   d6c22:	4604      	mov	r4, r0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d6c24:	f7ff ffa6 	bl	d6b74 <_ZN11TinyGPSDataC1Ev>
   d6c28:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d6c2c:	f7ff ffa2 	bl	d6b74 <_ZN11TinyGPSDataC1Ev>
   d6c30:	2300      	movs	r3, #0
   d6c32:	2202      	movs	r2, #2
   d6c34:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
   d6c38:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
   d6c3c:	f884 2181 	strb.w	r2, [r4, #385]	; 0x181
   d6c40:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
   d6c44:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
   d6c48:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
   d6c4c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
   d6c50:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d6c54:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
   d6c58:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
   d6c5c:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
   d6c60:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
{
  term[0] = '\0';
   d6c64:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
}
   d6c68:	4620      	mov	r0, r4
   d6c6a:	bd10      	pop	{r4, pc}

000d6c6c <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d6c6c:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d6c70:	2b05      	cmp	r3, #5
   d6c72:	d802      	bhi.n	d6c7a <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d6c74:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d6c78:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d6c7a:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d6c7e:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d6c80:	bf94      	ite	ls
   d6c82:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d6c86:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d6c8a:	4770      	bx	lr

000d6c8c <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d6c8c:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d6c8e:	7805      	ldrb	r5, [r0, #0]
}

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d6c90:	4604      	mov	r4, r0
  bool negative = *term == '-';
  if (negative) ++term;
   d6c92:	2d2d      	cmp	r5, #45	; 0x2d
   d6c94:	bf08      	it	eq
   d6c96:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d6c98:	4620      	mov	r0, r4
   d6c9a:	f002 fa79 	bl	d9190 <atol>
   d6c9e:	2364      	movs	r3, #100	; 0x64
   d6ca0:	4358      	muls	r0, r3
   d6ca2:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d6ca4:	f814 3b01 	ldrb.w	r3, [r4], #1
   d6ca8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d6cac:	2909      	cmp	r1, #9
   d6cae:	d9f8      	bls.n	d6ca2 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d6cb0:	2b2e      	cmp	r3, #46	; 0x2e
   d6cb2:	d10b      	bne.n	d6ccc <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d6cb4:	7853      	ldrb	r3, [r2, #1]
   d6cb6:	3b30      	subs	r3, #48	; 0x30
   d6cb8:	2b09      	cmp	r3, #9
   d6cba:	d807      	bhi.n	d6ccc <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d6cbc:	210a      	movs	r1, #10
   d6cbe:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d6cc2:	7893      	ldrb	r3, [r2, #2]
   d6cc4:	3b30      	subs	r3, #48	; 0x30
   d6cc6:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d6cc8:	bf98      	it	ls
   d6cca:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d6ccc:	2d2d      	cmp	r5, #45	; 0x2d
   d6cce:	bf08      	it	eq
   d6cd0:	4240      	negeq	r0, r0
}
   d6cd2:	bd38      	pop	{r3, r4, r5, pc}

000d6cd4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d6cd4:	b538      	push	{r3, r4, r5, lr}
   d6cd6:	4604      	mov	r4, r0
   d6cd8:	460d      	mov	r5, r1
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d6cda:	f002 fa59 	bl	d9190 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d6cde:	2364      	movs	r3, #100	; 0x64
   d6ce0:	fbb0 f2f3 	udiv	r2, r0, r3
   d6ce4:	fb03 0012 	mls	r0, r3, r2, r0
   d6ce8:	4b11      	ldr	r3, [pc, #68]	; (d6d30 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d6cea:	802a      	strh	r2, [r5, #0]
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
  uint32_t leftOfDecimal = (uint32_t)atol(term);
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d6cec:	4343      	muls	r3, r0
   d6cee:	4620      	mov	r0, r4

  deg.deg = (int16_t)(leftOfDecimal / 100);

  while (isdigit(*term))
   d6cf0:	7802      	ldrb	r2, [r0, #0]
   d6cf2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   d6cf6:	2909      	cmp	r1, #9
   d6cf8:	4604      	mov	r4, r0
   d6cfa:	f100 0001 	add.w	r0, r0, #1
   d6cfe:	d9f7      	bls.n	d6cf0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d6d00:	2a2e      	cmp	r2, #46	; 0x2e
   d6d02:	d10b      	bne.n	d6d1c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
   d6d04:	490a      	ldr	r1, [pc, #40]	; (d6d30 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d6d06:	200a      	movs	r0, #10

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d6d08:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   d6d0c:	3a30      	subs	r2, #48	; 0x30
   d6d0e:	2a09      	cmp	r2, #9
   d6d10:	d804      	bhi.n	d6d1c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
    {
      multiplier /= 10;
   d6d12:	fbb1 f1f0 	udiv	r1, r1, r0
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d6d16:	fb01 3302 	mla	r3, r1, r2, r3

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d6d1a:	e7f5      	b.n	d6d08 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    {
      multiplier /= 10;
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d6d1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d6d20:	3301      	adds	r3, #1
   d6d22:	2203      	movs	r2, #3
   d6d24:	fbb3 f3f2 	udiv	r3, r3, r2
   d6d28:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d6d2a:	2300      	movs	r3, #0
   d6d2c:	722b      	strb	r3, [r5, #8]
   d6d2e:	bd38      	pop	{r3, r4, r5, pc}
   d6d30:	00989680 	.word	0x00989680

000d6d34 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d6d34:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d6d36:	4603      	mov	r3, r0
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d6d38:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d6d3a:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d6d3e:	6042      	str	r2, [r0, #4]
   d6d40:	685a      	ldr	r2, [r3, #4]
   d6d42:	6082      	str	r2, [r0, #8]
   d6d44:	7a1b      	ldrb	r3, [r3, #8]
   d6d46:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d6d48:	4603      	mov	r3, r0
   d6d4a:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d6d4e:	6102      	str	r2, [r0, #16]
   d6d50:	685a      	ldr	r2, [r3, #4]
   d6d52:	6142      	str	r2, [r0, #20]
   d6d54:	7a1b      	ldrb	r3, [r3, #8]
   d6d56:	7603      	strb	r3, [r0, #24]
   d6d58:	f000 fb68 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6d5c:	2301      	movs	r3, #1

void TinyGPSLocation::commit()
{
   rawLatData = rawNewLatData;
   rawLngData = rawNewLngData;
   lastCommitTime = millis();
   d6d5e:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d6d60:	7063      	strb	r3, [r4, #1]
   d6d62:	7023      	strb	r3, [r4, #0]
   d6d64:	bd10      	pop	{r4, pc}
	...

000d6d68 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d6d68:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d6d6a:	2300      	movs	r3, #0
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d6d6c:	4604      	mov	r4, r0
   updated = false;
   d6d6e:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d6d70:	6880      	ldr	r0, [r0, #8]
   d6d72:	f001 ff35 	bl	d8be0 <__aeabi_ui2d>
   d6d76:	a30e      	add	r3, pc, #56	; (adr r3, d6db0 <_ZN15TinyGPSLocation3latEv+0x48>)
   d6d78:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6d7c:	f002 f8d0 	bl	d8f20 <__aeabi_ddiv>
   d6d80:	4606      	mov	r6, r0
   d6d82:	88a0      	ldrh	r0, [r4, #4]
   d6d84:	460f      	mov	r7, r1
   d6d86:	f001 ff3b 	bl	d8c00 <__aeabi_i2d>
   d6d8a:	460b      	mov	r3, r1
   d6d8c:	4602      	mov	r2, r0
   d6d8e:	4639      	mov	r1, r7
   d6d90:	4630      	mov	r0, r6
   d6d92:	f001 fde9 	bl	d8968 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d6d96:	7b23      	ldrb	r3, [r4, #12]
   d6d98:	b11b      	cbz	r3, d6da2 <_ZN15TinyGPSLocation3latEv+0x3a>
   d6d9a:	4602      	mov	r2, r0
   d6d9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d6da0:	e001      	b.n	d6da6 <_ZN15TinyGPSLocation3latEv+0x3e>
   d6da2:	4602      	mov	r2, r0
   d6da4:	460b      	mov	r3, r1
}
   d6da6:	ec43 2b10 	vmov	d0, r2, r3
   d6daa:	bdd0      	pop	{r4, r6, r7, pc}
   d6dac:	f3af 8000 	nop.w
   d6db0:	00000000 	.word	0x00000000
   d6db4:	41cdcd65 	.word	0x41cdcd65

000d6db8 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d6db8:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d6dba:	2300      	movs	r3, #0
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   return rawLatData.negative ? -ret : ret;
}

double TinyGPSLocation::lng()
{
   d6dbc:	4604      	mov	r4, r0
   updated = false;
   d6dbe:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d6dc0:	6940      	ldr	r0, [r0, #20]
   d6dc2:	f001 ff0d 	bl	d8be0 <__aeabi_ui2d>
   d6dc6:	a30e      	add	r3, pc, #56	; (adr r3, d6e00 <_ZN15TinyGPSLocation3lngEv+0x48>)
   d6dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6dcc:	f002 f8a8 	bl	d8f20 <__aeabi_ddiv>
   d6dd0:	4606      	mov	r6, r0
   d6dd2:	8a20      	ldrh	r0, [r4, #16]
   d6dd4:	460f      	mov	r7, r1
   d6dd6:	f001 ff13 	bl	d8c00 <__aeabi_i2d>
   d6dda:	460b      	mov	r3, r1
   d6ddc:	4602      	mov	r2, r0
   d6dde:	4639      	mov	r1, r7
   d6de0:	4630      	mov	r0, r6
   d6de2:	f001 fdc1 	bl	d8968 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d6de6:	7e23      	ldrb	r3, [r4, #24]
   d6de8:	b11b      	cbz	r3, d6df2 <_ZN15TinyGPSLocation3lngEv+0x3a>
   d6dea:	4602      	mov	r2, r0
   d6dec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d6df0:	e001      	b.n	d6df6 <_ZN15TinyGPSLocation3lngEv+0x3e>
   d6df2:	4602      	mov	r2, r0
   d6df4:	460b      	mov	r3, r1
}
   d6df6:	ec43 2b10 	vmov	d0, r2, r3
   d6dfa:	bdd0      	pop	{r4, r6, r7, pc}
   d6dfc:	f3af 8000 	nop.w
   d6e00:	00000000 	.word	0x00000000
   d6e04:	41cdcd65 	.word	0x41cdcd65

000d6e08 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d6e08:	b510      	push	{r4, lr}
   date = newDate;
   d6e0a:	6883      	ldr	r3, [r0, #8]
   d6e0c:	6043      	str	r3, [r0, #4]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
   d6e0e:	4604      	mov	r4, r0
   d6e10:	f000 fb0c 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
   date = newDate;
   lastCommitTime = millis();
   valid = updated = true;
   d6e14:	2301      	movs	r3, #1
}

void TinyGPSDate::commit()
{
   date = newDate;
   lastCommitTime = millis();
   d6e16:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d6e18:	7063      	strb	r3, [r4, #1]
   d6e1a:	7023      	strb	r3, [r4, #0]
   d6e1c:	bd10      	pop	{r4, pc}

000d6e1e <_ZN11TinyGPSTime6commitEv>:
}

void TinyGPSTime::commit()
{
   d6e1e:	b510      	push	{r4, lr}
   time = newTime;
   d6e20:	6883      	ldr	r3, [r0, #8]
   d6e22:	6043      	str	r3, [r0, #4]
   lastCommitTime = millis();
   valid = updated = true;
}

void TinyGPSTime::commit()
{
   d6e24:	4604      	mov	r4, r0
   d6e26:	f000 fb01 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
   time = newTime;
   lastCommitTime = millis();
   valid = updated = true;
   d6e2a:	2301      	movs	r3, #1
}

void TinyGPSTime::commit()
{
   time = newTime;
   lastCommitTime = millis();
   d6e2c:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d6e2e:	7063      	strb	r3, [r4, #1]
   d6e30:	7023      	strb	r3, [r4, #0]
   d6e32:	bd10      	pop	{r4, pc}

000d6e34 <_ZN11TinyGPSTime7setTimeEPKc>:
}

void TinyGPSTime::setTime(const char *term)
{
   d6e34:	b510      	push	{r4, lr}
   d6e36:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d6e38:	4608      	mov	r0, r1
   d6e3a:	f7ff ff27 	bl	d6c8c <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d6e3e:	60a0      	str	r0, [r4, #8]
   d6e40:	bd10      	pop	{r4, pc}

000d6e42 <_ZN11TinyGPSDate7setDateEPKc>:
}

void TinyGPSDate::setDate(const char *term)
{
   d6e42:	b510      	push	{r4, lr}
   d6e44:	4604      	mov	r4, r0
   newDate = atol(term);
   d6e46:	4608      	mov	r0, r1
   d6e48:	f002 f9a2 	bl	d9190 <atol>
   d6e4c:	60a0      	str	r0, [r4, #8]
   d6e4e:	bd10      	pop	{r4, pc}

000d6e50 <_ZN11TinyGPSDate4yearEv>:
}

uint16_t TinyGPSDate::year()
{
   updated = false;
   d6e50:	2300      	movs	r3, #0
   d6e52:	7043      	strb	r3, [r0, #1]
   uint16_t year = date % 100;
   return year + 2000;
   d6e54:	6840      	ldr	r0, [r0, #4]
   d6e56:	2264      	movs	r2, #100	; 0x64
   d6e58:	fbb0 f3f2 	udiv	r3, r0, r2
   d6e5c:	fb02 0013 	mls	r0, r2, r3, r0
   d6e60:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
}
   d6e64:	b280      	uxth	r0, r0
   d6e66:	4770      	bx	lr

000d6e68 <_ZN11TinyGPSDate5monthEv>:

uint8_t TinyGPSDate::month()
{
   updated = false;
   d6e68:	2300      	movs	r3, #0
   d6e6a:	7043      	strb	r3, [r0, #1]
   return (date / 100) % 100;
   d6e6c:	6843      	ldr	r3, [r0, #4]
   d6e6e:	2064      	movs	r0, #100	; 0x64
   d6e70:	fbb3 f3f0 	udiv	r3, r3, r0
   d6e74:	fbb3 f2f0 	udiv	r2, r3, r0
   d6e78:	fb00 3012 	mls	r0, r0, r2, r3
}
   d6e7c:	b2c0      	uxtb	r0, r0
   d6e7e:	4770      	bx	lr

000d6e80 <_ZN11TinyGPSDate3dayEv>:

uint8_t TinyGPSDate::day()
{
   updated = false;
   d6e80:	2300      	movs	r3, #0
   d6e82:	7043      	strb	r3, [r0, #1]
   return date / 10000;
   d6e84:	6843      	ldr	r3, [r0, #4]
   d6e86:	f242 7010 	movw	r0, #10000	; 0x2710
   d6e8a:	fbb3 f0f0 	udiv	r0, r3, r0
}
   d6e8e:	b2c0      	uxtb	r0, r0
   d6e90:	4770      	bx	lr
	...

000d6e94 <_ZN11TinyGPSTime4hourEv>:

uint8_t TinyGPSTime::hour()
{
   updated = false;
   d6e94:	2300      	movs	r3, #0
   d6e96:	7043      	strb	r3, [r0, #1]
   return time / 1000000;
   d6e98:	6843      	ldr	r3, [r0, #4]
   d6e9a:	4802      	ldr	r0, [pc, #8]	; (d6ea4 <_ZN11TinyGPSTime4hourEv+0x10>)
   d6e9c:	fbb3 f0f0 	udiv	r0, r3, r0
}
   d6ea0:	b2c0      	uxtb	r0, r0
   d6ea2:	4770      	bx	lr
   d6ea4:	000f4240 	.word	0x000f4240

000d6ea8 <_ZN11TinyGPSTime6minuteEv>:

uint8_t TinyGPSTime::minute()
{
   updated = false;
   d6ea8:	2300      	movs	r3, #0
   d6eaa:	7043      	strb	r3, [r0, #1]
   return (time / 10000) % 100;
   d6eac:	6843      	ldr	r3, [r0, #4]
   d6eae:	f242 7010 	movw	r0, #10000	; 0x2710
   d6eb2:	fbb3 f3f0 	udiv	r3, r3, r0
   d6eb6:	2064      	movs	r0, #100	; 0x64
   d6eb8:	fbb3 f2f0 	udiv	r2, r3, r0
   d6ebc:	fb00 3012 	mls	r0, r0, r2, r3
}
   d6ec0:	b2c0      	uxtb	r0, r0
   d6ec2:	4770      	bx	lr

000d6ec4 <_ZN11TinyGPSTime6secondEv>:

uint8_t TinyGPSTime::second()
{
   updated = false;
   d6ec4:	2300      	movs	r3, #0
   d6ec6:	7043      	strb	r3, [r0, #1]
   return (time / 100) % 100;
   d6ec8:	6843      	ldr	r3, [r0, #4]
   d6eca:	2064      	movs	r0, #100	; 0x64
   d6ecc:	fbb3 f3f0 	udiv	r3, r3, r0
   d6ed0:	fbb3 f2f0 	udiv	r2, r3, r0
   d6ed4:	fb00 3012 	mls	r0, r0, r2, r3
}
   d6ed8:	b2c0      	uxtb	r0, r0
   d6eda:	4770      	bx	lr

000d6edc <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d6edc:	b510      	push	{r4, lr}
   val = newval;
   d6ede:	68c3      	ldr	r3, [r0, #12]
   d6ee0:	6083      	str	r3, [r0, #8]
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d6ee2:	4604      	mov	r4, r0
   d6ee4:	f000 faa2 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d6ee8:	2301      	movs	r3, #1
}

void TinyGPSDecimal::commit()
{
   val = newval;
   lastCommitTime = millis();
   d6eea:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d6eec:	7063      	strb	r3, [r4, #1]
   d6eee:	7023      	strb	r3, [r4, #0]
   d6ef0:	bd10      	pop	{r4, pc}

000d6ef2 <_ZN14TinyGPSDecimal3setEPKc>:
}

void TinyGPSDecimal::set(const char *term)
{
   d6ef2:	b510      	push	{r4, lr}
   d6ef4:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d6ef6:	4608      	mov	r0, r1
   d6ef8:	f7ff fec8 	bl	d6c8c <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d6efc:	60e0      	str	r0, [r4, #12]
   d6efe:	bd10      	pop	{r4, pc}

000d6f00 <_ZN14TinyGPSInteger6commitEv>:
}

void TinyGPSInteger::commit()
{
   d6f00:	b510      	push	{r4, lr}
   val = newval;
   d6f02:	68c3      	ldr	r3, [r0, #12]
   d6f04:	6083      	str	r3, [r0, #8]
{
   newval = TinyGPSPlus::parseDecimal(term);
}

void TinyGPSInteger::commit()
{
   d6f06:	4604      	mov	r4, r0
   d6f08:	f000 fa90 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d6f0c:	2301      	movs	r3, #1
}

void TinyGPSInteger::commit()
{
   val = newval;
   lastCommitTime = millis();
   d6f0e:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d6f10:	7063      	strb	r3, [r4, #1]
   d6f12:	7023      	strb	r3, [r4, #0]
   d6f14:	bd10      	pop	{r4, pc}

000d6f16 <_ZN14TinyGPSInteger3setEPKc>:
}

void TinyGPSInteger::set(const char *term)
{
   d6f16:	b510      	push	{r4, lr}
   d6f18:	4604      	mov	r4, r0
   newval = atol(term);
   d6f1a:	4608      	mov	r0, r1
   d6f1c:	f002 f938 	bl	d9190 <atol>
   d6f20:	60e0      	str	r0, [r4, #12]
   d6f22:	bd10      	pop	{r4, pc}

000d6f24 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d6f24:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d6f26:	4601      	mov	r1, r0
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d6f28:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d6f2a:	3010      	adds	r0, #16
   d6f2c:	f002 f9d0 	bl	d92d0 <strcpy>
   d6f30:	f000 fa7c 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6f34:	2301      	movs	r3, #1
}

void TinyGPSCustom::commit()
{
   strcpy(this->buffer, this->stagingBuffer);
   lastCommitTime = millis();
   d6f36:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d6f38:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   d6f3c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d6f40:	bd10      	pop	{r4, pc}

000d6f42 <_ZN13TinyGPSCustom3setEPKc>:
}

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d6f42:	2210      	movs	r2, #16
   d6f44:	f002 b9d4 	b.w	d92f0 <strncpy>

000d6f48 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d6f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d6f4a:	f890 5171 	ldrb.w	r5, [r0, #369]	; 0x171
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d6f4e:	4604      	mov	r4, r0
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d6f50:	2d00      	cmp	r5, #0
   d6f52:	f000 808b 	beq.w	d706c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x124>
  {
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d6f56:	f890 1172 	ldrb.w	r1, [r0, #370]	; 0x172
   d6f5a:	f7ff fe87 	bl	d6c6c <_ZN11TinyGPSPlus7fromHexEc>
   d6f5e:	f894 1173 	ldrb.w	r1, [r4, #371]	; 0x173
   d6f62:	4602      	mov	r2, r0
   d6f64:	4620      	mov	r0, r4
   d6f66:	f7ff fe81 	bl	d6c6c <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d6f6a:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   d6f6e:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   d6f72:	b2c0      	uxtb	r0, r0
   d6f74:	4283      	cmp	r3, r0
   d6f76:	d172      	bne.n	d705e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x116>
    {
      passedChecksumCount++;
   d6f78:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
   d6f7c:	3301      	adds	r3, #1
   d6f7e:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
      if (sentenceHasFix)
   d6f82:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d6f86:	b123      	cbz	r3, d6f92 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x4a>
        ++sentencesWithFixCount;
   d6f88:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   d6f8c:	3301      	adds	r3, #1
   d6f8e:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194

      switch(curSentenceType)
   d6f92:	f894 3181 	ldrb.w	r3, [r4, #385]	; 0x181
   d6f96:	b1fb      	cbz	r3, d6fd8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x90>
   d6f98:	2b01      	cmp	r3, #1
   d6f9a:	d14d      	bne.n	d7038 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf0>
      {
      case GPS_SENTENCE_GPRMC:
    	tempData.date.commit();
   d6f9c:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   d6fa0:	f7ff ff32 	bl	d6e08 <_ZN11TinyGPSDate6commitEv>
    	tempData.time.commit();
   d6fa4:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d6fa8:	f7ff ff39 	bl	d6e1e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d6fac:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d6fb0:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d6fb4:	b14b      	cbz	r3, d6fca <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x82>
        {
           tempData.location.commit();
   d6fb6:	4630      	mov	r0, r6
   d6fb8:	f7ff febc 	bl	d6d34 <_ZN15TinyGPSLocation6commitEv>
           tempData.speed.commit();
   d6fbc:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d6fc0:	f7ff ff8c 	bl	d6edc <_ZN14TinyGPSDecimal6commitEv>
           tempData.course.commit();
   d6fc4:	f504 7090 	add.w	r0, r4, #288	; 0x120
   d6fc8:	e027      	b.n	d701a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d6fca:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d6fce:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
   d6fd2:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
   d6fd6:	e022      	b.n	d701e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd6>
        SINGLE_THREADED_BLOCK() {
        	TinyGPSData::operator=(tempData);
        }
        break;
      case GPS_SENTENCE_GPGGA:
        tempData.time.commit();
   d6fd8:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d6fdc:	f7ff ff1f 	bl	d6e1e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d6fe0:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d6fe4:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d6fe8:	b15b      	cbz	r3, d7002 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xba>
        {
          tempData.location.commit();
   d6fea:	4630      	mov	r0, r6
   d6fec:	f7ff fea2 	bl	d6d34 <_ZN15TinyGPSLocation6commitEv>
          tempData.altitude.commit();
   d6ff0:	f504 7098 	add.w	r0, r4, #304	; 0x130
   d6ff4:	f7ff ff72 	bl	d6edc <_ZN14TinyGPSDecimal6commitEv>
          tempData.geoidSeparation.commit();
   d6ff8:	f504 70a0 	add.w	r0, r4, #320	; 0x140
   d6ffc:	f7ff ff6e 	bl	d6edc <_ZN14TinyGPSDecimal6commitEv>
   d7000:	e005      	b.n	d700e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc6>
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d7002:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d7006:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
   d700a:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
        {
            tempData.location.invalidate();
            tempData.altitude.invalidate();
            tempData.geoidSeparation.invalidate();
        }
        tempData.satellites.commit();
   d700e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   d7012:	f7ff ff75 	bl	d6f00 <_ZN14TinyGPSInteger6commitEv>
        tempData.hdop.commit();
   d7016:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   d701a:	f7ff ff5f 	bl	d6edc <_ZN14TinyGPSDecimal6commitEv>
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d701e:	2100      	movs	r1, #0
   d7020:	4608      	mov	r0, r1
   d7022:	f000 fa2b 	bl	d747c <os_thread_scheduling>
        SINGLE_THREADED_BLOCK() {
        	TinyGPSData::operator=(tempData);
   d7026:	4631      	mov	r1, r6
   d7028:	22b8      	movs	r2, #184	; 0xb8
   d702a:	4620      	mov	r0, r4
   d702c:	f002 f8d1 	bl	d91d2 <memcpy>
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d7030:	2100      	movs	r1, #0
   d7032:	2001      	movs	r0, #1
   d7034:	f000 fa22 	bl	d747c <os_thread_scheduling>
        }
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d7038:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
   d703c:	2e00      	cmp	r6, #0
   d703e:	f000 80d9 	beq.w	d71f4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d7042:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d7046:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d7048:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d704a:	f002 f937 	bl	d92bc <strcmp>
   d704e:	2800      	cmp	r0, #0
   d7050:	f040 80d0 	bne.w	d71f4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
         p->commit();
   d7054:	4630      	mov	r0, r6
   d7056:	f7ff ff65 	bl	d6f24 <_ZN13TinyGPSCustom6commitEv>
        }
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d705a:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d705c:	e7ee      	b.n	d703c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
      return true;
    }

    else
    {
      ++failedChecksumCount;
   d705e:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
   d7062:	3301      	adds	r3, #1
   d7064:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
    }

    return false;
   d7068:	2500      	movs	r5, #0
   d706a:	e0c3      	b.n	d71f4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0)
   d706c:	f890 2182 	ldrb.w	r2, [r0, #386]	; 0x182
   d7070:	bb72      	cbnz	r2, d70d0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
  {
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, "GNRMC"))
   d7072:	f500 76b9 	add.w	r6, r0, #370	; 0x172
   d7076:	4960      	ldr	r1, [pc, #384]	; (d71f8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b0>)
   d7078:	4630      	mov	r0, r6
   d707a:	f002 f91f 	bl	d92bc <strcmp>
   d707e:	b120      	cbz	r0, d708a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x142>
   d7080:	495e      	ldr	r1, [pc, #376]	; (d71fc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b4>)
   d7082:	4630      	mov	r0, r6
   d7084:	f002 f91a 	bl	d92bc <strcmp>
   d7088:	b908      	cbnz	r0, d708e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x146>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d708a:	2301      	movs	r3, #1
   d708c:	e00c      	b.n	d70a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x160>
    else if (!strcmp(term, _GPGGAterm) ||!strcmp(term, "GNGGA"))
   d708e:	495c      	ldr	r1, [pc, #368]	; (d7200 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b8>)
   d7090:	4630      	mov	r0, r6
   d7092:	f002 f913 	bl	d92bc <strcmp>
   d7096:	b120      	cbz	r0, d70a2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x15a>
   d7098:	495a      	ldr	r1, [pc, #360]	; (d7204 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2bc>)
   d709a:	4630      	mov	r0, r6
   d709c:	f002 f90e 	bl	d92bc <strcmp>
   d70a0:	b908      	cbnz	r0, d70a6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x15e>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d70a2:	2300      	movs	r3, #0
   d70a4:	e000      	b.n	d70a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x160>
    else
      curSentenceType = GPS_SENTENCE_OTHER;
   d70a6:	2302      	movs	r3, #2
   d70a8:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d70ac:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
   d70b0:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d70b4:	f8d4 718c 	ldr.w	r7, [r4, #396]	; 0x18c
   d70b8:	2f00      	cmp	r7, #0
   d70ba:	f000 809b 	beq.w	d71f4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d70be:	4631      	mov	r1, r6
   d70c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   d70c2:	f002 f8fb 	bl	d92bc <strcmp>
   d70c6:	2800      	cmp	r0, #0
   d70c8:	f280 8090 	bge.w	d71ec <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2a4>
   d70cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   d70ce:	e7ef      	b.n	d70b0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x168>
       customCandidates = NULL;

    return false;
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d70d0:	f890 1181 	ldrb.w	r1, [r0, #385]	; 0x181
   d70d4:	2902      	cmp	r1, #2
   d70d6:	d071      	beq.n	d71bc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
   d70d8:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   d70dc:	2b00      	cmp	r3, #0
   d70de:	d06d      	beq.n	d71bc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    switch(COMBINE(curSentenceType, curTermNumber))
   d70e0:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d70e4:	3a01      	subs	r2, #1
   d70e6:	2a28      	cmp	r2, #40	; 0x28
   d70e8:	d868      	bhi.n	d71bc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
   d70ea:	e8df f002 	tbb	[pc, r2]
   d70ee:	2115      	.short	0x2115
   d70f0:	49322b24 	.word	0x49322b24
   d70f4:	675c5750 	.word	0x675c5750
   d70f8:	67676761 	.word	0x67676761
   d70fc:	67676767 	.word	0x67676767
   d7100:	67676767 	.word	0x67676767
   d7104:	67676767 	.word	0x67676767
   d7108:	67676767 	.word	0x67676767
   d710c:	1c156767 	.word	0x1c156767
   d7110:	322b2421 	.word	0x322b2421
   d7114:	3e39      	.short	0x3e39
   d7116:	43          	.byte	0x43
   d7117:	00          	.byte	0x00
  {
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
	  tempData.time.setTime(term);
   d7118:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d711c:	f500 7080 	add.w	r0, r0, #256	; 0x100
   d7120:	f7ff fe88 	bl	d6e34 <_ZN11TinyGPSTime7setTimeEPKc>
      break;
   d7124:	e04a      	b.n	d71bc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      sentenceHasFix = term[0] == 'A';
   d7126:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d712a:	4243      	negs	r3, r0
   d712c:	4143      	adcs	r3, r0
   d712e:	e02b      	b.n	d7188 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>
   valid = updated = true;
}

void TinyGPSLocation::setLatitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d7130:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
   d7134:	e008      	b.n	d7148 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
      tempData.location.setLatitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
      tempData.location.rawNewLatData.negative = term[0] == 'S';
   d7136:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d713a:	424b      	negs	r3, r1
   d713c:	414b      	adcs	r3, r1
   d713e:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
      break;
   d7142:	e03b      	b.n	d71bc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
}

void TinyGPSLocation::setLongitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d7144:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   d7148:	f504 70b9 	add.w	r0, r4, #370	; 0x172
   d714c:	f7ff fdc2 	bl	d6cd4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
   d7150:	e034      	b.n	d71bc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
      tempData.location.setLongitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
      tempData.location.rawNewLngData.negative = term[0] == 'W';
   d7152:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d7156:	4253      	negs	r3, r2
   d7158:	4153      	adcs	r3, r2
   d715a:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
      break;
   d715e:	e02d      	b.n	d71bc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
	  tempData.speed.set(term);
   d7160:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d7164:	f500 7088 	add.w	r0, r0, #272	; 0x110
   d7168:	e026      	b.n	d71b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
	  tempData.course.set(term);
   d716a:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d716e:	f500 7090 	add.w	r0, r0, #288	; 0x120
   d7172:	e021      	b.n	d71b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
	  tempData.date.setDate(term);
   d7174:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d7178:	30f0      	adds	r0, #240	; 0xf0
   d717a:	f7ff fe62 	bl	d6e42 <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d717e:	e01d      	b.n	d71bc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      sentenceHasFix = term[0] > '0';
   d7180:	2b30      	cmp	r3, #48	; 0x30
   d7182:	bf94      	ite	ls
   d7184:	2300      	movls	r3, #0
   d7186:	2301      	movhi	r3, #1
   d7188:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
      break;
   d718c:	e016      	b.n	d71bc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
	  tempData.satellites.set(term);
   d718e:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d7192:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   d7196:	f7ff febe 	bl	d6f16 <_ZN14TinyGPSInteger3setEPKc>
      break;
   d719a:	e00f      	b.n	d71bc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
	  tempData.hdop.set(term);
   d719c:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d71a0:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   d71a4:	e008      	b.n	d71b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
	  tempData.altitude.set(term);
   d71a6:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d71aa:	f500 7098 	add.w	r0, r0, #304	; 0x130
   d71ae:	e003      	b.n	d71b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 11): // Geoid Separation (GPGGA) (difference between ellipsoid and mean sea level)
	  tempData.geoidSeparation.set(term);
   d71b0:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d71b4:	f500 70a0 	add.w	r0, r0, #320	; 0x140
   d71b8:	f7ff fe9b 	bl	d6ef2 <_ZN14TinyGPSDecimal3setEPKc>
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d71bc:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
    if (p->termNumber == curTermNumber)
         p->set(term);
   d71c0:	f504 77b9 	add.w	r7, r4, #370	; 0x172
	  tempData.geoidSeparation.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d71c4:	b1b6      	cbz	r6, d71f4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d71c6:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d71ca:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d71cc:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d71ce:	f002 f875 	bl	d92bc <strcmp>
   d71d2:	b978      	cbnz	r0, d71f4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d71d4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d71d6:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d71da:	429a      	cmp	r2, r3
   d71dc:	dc0a      	bgt.n	d71f4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
    if (p->termNumber == curTermNumber)
   d71de:	d103      	bne.n	d71e8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2a0>
         p->set(term);
   d71e0:	4639      	mov	r1, r7
   d71e2:	4630      	mov	r0, r6
   d71e4:	f7ff fead 	bl	d6f42 <_ZN13TinyGPSCustom3setEPKc>
	  tempData.geoidSeparation.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d71e8:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d71ea:	e7eb      	b.n	d71c4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x27c>
    else
      curSentenceType = GPS_SENTENCE_OTHER;

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d71ec:	d002      	beq.n	d71f4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
       customCandidates = NULL;
   d71ee:	2300      	movs	r3, #0
   d71f0:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    if (p->termNumber == curTermNumber)
         p->set(term);

  return false;
}
   d71f4:	4628      	mov	r0, r5
   d71f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d71f8:	000d9cbf 	.word	0x000d9cbf
   d71fc:	000d9cc5 	.word	0x000d9cc5
   d7200:	000d9ccb 	.word	0x000d9ccb
   d7204:	000d9cd1 	.word	0x000d9cd1

000d7208 <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d7208:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d720a:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190

  switch(c)
   d720e:	2924      	cmp	r1, #36	; 0x24
// public methods
//

bool TinyGPSPlus::encode(char c)
{
  ++encodedCharCount;
   d7210:	f103 0301 	add.w	r3, r3, #1
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d7214:	4604      	mov	r4, r0
   d7216:	460d      	mov	r5, r1
  ++encodedCharCount;
   d7218:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190

  switch(c)
   d721c:	d02a      	beq.n	d7274 <_ZN11TinyGPSPlus6encodeEc+0x6c>
   d721e:	f890 3183 	ldrb.w	r3, [r0, #387]	; 0x183
   d7222:	d804      	bhi.n	d722e <_ZN11TinyGPSPlus6encodeEc+0x26>
   d7224:	290a      	cmp	r1, #10
   d7226:	d00c      	beq.n	d7242 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d7228:	290d      	cmp	r1, #13
   d722a:	d132      	bne.n	d7292 <_ZN11TinyGPSPlus6encodeEc+0x8a>
   d722c:	e009      	b.n	d7242 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d722e:	292a      	cmp	r1, #42	; 0x2a
   d7230:	d007      	beq.n	d7242 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d7232:	292c      	cmp	r1, #44	; 0x2c
   d7234:	d12d      	bne.n	d7292 <_ZN11TinyGPSPlus6encodeEc+0x8a>
  {
  case ',': // term terminators
    parity ^= (uint8_t)c;
   d7236:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   d723a:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d723e:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
  case '\r':
  case '\n':
  case '*':
    {
      bool isValidSentence = false;
      if (curTermOffset < sizeof(term))
   d7242:	2b0e      	cmp	r3, #14
   d7244:	f04f 0000 	mov.w	r0, #0
   d7248:	d805      	bhi.n	d7256 <_ZN11TinyGPSPlus6encodeEc+0x4e>
      {
        term[curTermOffset] = 0;
   d724a:	4423      	add	r3, r4
   d724c:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
        isValidSentence = endOfTermHandler();
   d7250:	4620      	mov	r0, r4
   d7252:	f7ff fe79 	bl	d6f48 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      }
      ++curTermNumber;
   d7256:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d725a:	3301      	adds	r3, #1
   d725c:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
      curTermOffset = 0;
   d7260:	2300      	movs	r3, #0
   d7262:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
      isChecksumTerm = c == '*';
   d7266:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d726a:	425d      	negs	r5, r3
   d726c:	415d      	adcs	r5, r3
   d726e:	f884 5171 	strb.w	r5, [r4, #369]	; 0x171
      return isValidSentence;
   d7272:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d7274:	2000      	movs	r0, #0
    parity = 0;
    curSentenceType = GPS_SENTENCE_OTHER;
   d7276:	2302      	movs	r3, #2
      return isValidSentence;
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d7278:	f884 0183 	strb.w	r0, [r4, #387]	; 0x183
   d727c:	f884 0182 	strb.w	r0, [r4, #386]	; 0x182
    parity = 0;
   d7280:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
    curSentenceType = GPS_SENTENCE_OTHER;
   d7284:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
    isChecksumTerm = false;
   d7288:	f884 0171 	strb.w	r0, [r4, #369]	; 0x171
    sentenceHasFix = false;
   d728c:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
    return false;
   d7290:	bd38      	pop	{r3, r4, r5, pc}

  default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
   d7292:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d7294:	bf9f      	itttt	ls
   d7296:	1c5a      	addls	r2, r3, #1
   d7298:	191b      	addls	r3, r3, r4
   d729a:	f884 2183 	strbls.w	r2, [r4, #387]	; 0x183
   d729e:	f883 5172 	strbls.w	r5, [r3, #370]	; 0x172
    if (!isChecksumTerm)
   d72a2:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   d72a6:	b928      	cbnz	r0, d72b4 <_ZN11TinyGPSPlus6encodeEc+0xac>
      parity ^= c;
   d72a8:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   d72ac:	404d      	eors	r5, r1
   d72ae:	f884 5170 	strb.w	r5, [r4, #368]	; 0x170
   d72b2:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d72b4:	2000      	movs	r0, #0
  }

  return false;
}
   d72b6:	bd38      	pop	{r3, r4, r5, pc}

000d72b8 <_GLOBAL__sub_I__Z7radiansd>:
   d72b8:	f000 b810 	b.w	d72dc <HAL_Pin_Map>

000d72bc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d72bc:	b508      	push	{r3, lr}
   d72be:	4b02      	ldr	r3, [pc, #8]	; (d72c8 <netdb_freeaddrinfo+0xc>)
   d72c0:	681b      	ldr	r3, [r3, #0]
   d72c2:	689b      	ldr	r3, [r3, #8]
   d72c4:	9301      	str	r3, [sp, #4]
   d72c6:	bd08      	pop	{r3, pc}
   d72c8:	00030268 	.word	0x00030268

000d72cc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d72cc:	b508      	push	{r3, lr}
   d72ce:	4b02      	ldr	r3, [pc, #8]	; (d72d8 <netdb_getaddrinfo+0xc>)
   d72d0:	681b      	ldr	r3, [r3, #0]
   d72d2:	68db      	ldr	r3, [r3, #12]
   d72d4:	9301      	str	r3, [sp, #4]
   d72d6:	bd08      	pop	{r3, pc}
   d72d8:	00030268 	.word	0x00030268

000d72dc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d72dc:	b508      	push	{r3, lr}
   d72de:	4b02      	ldr	r3, [pc, #8]	; (d72e8 <HAL_Pin_Map+0xc>)
   d72e0:	681b      	ldr	r3, [r3, #0]
   d72e2:	681b      	ldr	r3, [r3, #0]
   d72e4:	9301      	str	r3, [sp, #4]
   d72e6:	bd08      	pop	{r3, pc}
   d72e8:	0003022c 	.word	0x0003022c

000d72ec <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d72ec:	b508      	push	{r3, lr}
   d72ee:	4b02      	ldr	r3, [pc, #8]	; (d72f8 <HAL_Pin_Mode+0xc>)
   d72f0:	681b      	ldr	r3, [r3, #0]
   d72f2:	689b      	ldr	r3, [r3, #8]
   d72f4:	9301      	str	r3, [sp, #4]
   d72f6:	bd08      	pop	{r3, pc}
   d72f8:	0003022c 	.word	0x0003022c

000d72fc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d72fc:	b508      	push	{r3, lr}
   d72fe:	4b02      	ldr	r3, [pc, #8]	; (d7308 <HAL_Get_Pin_Mode+0xc>)
   d7300:	681b      	ldr	r3, [r3, #0]
   d7302:	68db      	ldr	r3, [r3, #12]
   d7304:	9301      	str	r3, [sp, #4]
   d7306:	bd08      	pop	{r3, pc}
   d7308:	0003022c 	.word	0x0003022c

000d730c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d730c:	b508      	push	{r3, lr}
   d730e:	4b02      	ldr	r3, [pc, #8]	; (d7318 <HAL_GPIO_Write+0xc>)
   d7310:	681b      	ldr	r3, [r3, #0]
   d7312:	691b      	ldr	r3, [r3, #16]
   d7314:	9301      	str	r3, [sp, #4]
   d7316:	bd08      	pop	{r3, pc}
   d7318:	0003022c 	.word	0x0003022c

000d731c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d731c:	b508      	push	{r3, lr}
   d731e:	4b02      	ldr	r3, [pc, #8]	; (d7328 <HAL_GPIO_Read+0xc>)
   d7320:	681b      	ldr	r3, [r3, #0]
   d7322:	695b      	ldr	r3, [r3, #20]
   d7324:	9301      	str	r3, [sp, #4]
   d7326:	bd08      	pop	{r3, pc}
   d7328:	0003022c 	.word	0x0003022c

000d732c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d732c:	b508      	push	{r3, lr}
   d732e:	4b02      	ldr	r3, [pc, #8]	; (d7338 <HAL_SPI_Begin+0xc>)
   d7330:	681b      	ldr	r3, [r3, #0]
   d7332:	681b      	ldr	r3, [r3, #0]
   d7334:	9301      	str	r3, [sp, #4]
   d7336:	bd08      	pop	{r3, pc}
   d7338:	00030230 	.word	0x00030230

000d733c <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d733c:	b508      	push	{r3, lr}
   d733e:	4b02      	ldr	r3, [pc, #8]	; (d7348 <HAL_SPI_Set_Bit_Order+0xc>)
   d7340:	681b      	ldr	r3, [r3, #0]
   d7342:	689b      	ldr	r3, [r3, #8]
   d7344:	9301      	str	r3, [sp, #4]
   d7346:	bd08      	pop	{r3, pc}
   d7348:	00030230 	.word	0x00030230

000d734c <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d734c:	b508      	push	{r3, lr}
   d734e:	4b02      	ldr	r3, [pc, #8]	; (d7358 <HAL_SPI_Set_Data_Mode+0xc>)
   d7350:	681b      	ldr	r3, [r3, #0]
   d7352:	68db      	ldr	r3, [r3, #12]
   d7354:	9301      	str	r3, [sp, #4]
   d7356:	bd08      	pop	{r3, pc}
   d7358:	00030230 	.word	0x00030230

000d735c <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d735c:	b508      	push	{r3, lr}
   d735e:	4b02      	ldr	r3, [pc, #8]	; (d7368 <HAL_SPI_Set_Clock_Divider+0xc>)
   d7360:	681b      	ldr	r3, [r3, #0]
   d7362:	691b      	ldr	r3, [r3, #16]
   d7364:	9301      	str	r3, [sp, #4]
   d7366:	bd08      	pop	{r3, pc}
   d7368:	00030230 	.word	0x00030230

000d736c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d736c:	b508      	push	{r3, lr}
   d736e:	4b02      	ldr	r3, [pc, #8]	; (d7378 <HAL_SPI_Send_Receive_Data+0xc>)
   d7370:	681b      	ldr	r3, [r3, #0]
   d7372:	695b      	ldr	r3, [r3, #20]
   d7374:	9301      	str	r3, [sp, #4]
   d7376:	bd08      	pop	{r3, pc}
   d7378:	00030230 	.word	0x00030230

000d737c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d737c:	b508      	push	{r3, lr}
   d737e:	4b02      	ldr	r3, [pc, #8]	; (d7388 <HAL_SPI_Init+0xc>)
   d7380:	681b      	ldr	r3, [r3, #0]
   d7382:	69db      	ldr	r3, [r3, #28]
   d7384:	9301      	str	r3, [sp, #4]
   d7386:	bd08      	pop	{r3, pc}
   d7388:	00030230 	.word	0x00030230

000d738c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d738c:	b508      	push	{r3, lr}
   d738e:	4b02      	ldr	r3, [pc, #8]	; (d7398 <HAL_SPI_Is_Enabled+0xc>)
   d7390:	681b      	ldr	r3, [r3, #0]
   d7392:	6a1b      	ldr	r3, [r3, #32]
   d7394:	9301      	str	r3, [sp, #4]
   d7396:	bd08      	pop	{r3, pc}
   d7398:	00030230 	.word	0x00030230

000d739c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d739c:	b508      	push	{r3, lr}
   d739e:	4b02      	ldr	r3, [pc, #8]	; (d73a8 <HAL_SPI_Info+0xc>)
   d73a0:	681b      	ldr	r3, [r3, #0]
   d73a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d73a4:	9301      	str	r3, [sp, #4]
   d73a6:	bd08      	pop	{r3, pc}
   d73a8:	00030230 	.word	0x00030230

000d73ac <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d73ac:	b508      	push	{r3, lr}
   d73ae:	4b02      	ldr	r3, [pc, #8]	; (d73b8 <HAL_SPI_DMA_Transfer+0xc>)
   d73b0:	681b      	ldr	r3, [r3, #0]
   d73b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d73b4:	9301      	str	r3, [sp, #4]
   d73b6:	bd08      	pop	{r3, pc}
   d73b8:	00030230 	.word	0x00030230

000d73bc <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d73bc:	b508      	push	{r3, lr}
   d73be:	4b02      	ldr	r3, [pc, #8]	; (d73c8 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d73c0:	681b      	ldr	r3, [r3, #0]
   d73c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d73c4:	9301      	str	r3, [sp, #4]
   d73c6:	bd08      	pop	{r3, pc}
   d73c8:	00030230 	.word	0x00030230

000d73cc <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d73cc:	b508      	push	{r3, lr}
   d73ce:	4b02      	ldr	r3, [pc, #8]	; (d73d8 <HAL_SPI_Set_Settings+0xc>)
   d73d0:	681b      	ldr	r3, [r3, #0]
   d73d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d73d4:	9301      	str	r3, [sp, #4]
   d73d6:	bd08      	pop	{r3, pc}
   d73d8:	00030230 	.word	0x00030230

000d73dc <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d73dc:	b508      	push	{r3, lr}
   d73de:	4b02      	ldr	r3, [pc, #8]	; (d73e8 <HAL_SPI_Acquire+0xc>)
   d73e0:	681b      	ldr	r3, [r3, #0]
   d73e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d73e4:	9301      	str	r3, [sp, #4]
   d73e6:	bd08      	pop	{r3, pc}
   d73e8:	00030230 	.word	0x00030230

000d73ec <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d73ec:	b508      	push	{r3, lr}
   d73ee:	4b02      	ldr	r3, [pc, #8]	; (d73f8 <HAL_SPI_Release+0xc>)
   d73f0:	681b      	ldr	r3, [r3, #0]
   d73f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d73f4:	9301      	str	r3, [sp, #4]
   d73f6:	bd08      	pop	{r3, pc}
   d73f8:	00030230 	.word	0x00030230

000d73fc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d73fc:	b508      	push	{r3, lr}
   d73fe:	4b02      	ldr	r3, [pc, #8]	; (d7408 <HAL_RNG_GetRandomNumber+0xc>)
   d7400:	681b      	ldr	r3, [r3, #0]
   d7402:	685b      	ldr	r3, [r3, #4]
   d7404:	9301      	str	r3, [sp, #4]
   d7406:	bd08      	pop	{r3, pc}
   d7408:	00030218 	.word	0x00030218

000d740c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d740c:	b508      	push	{r3, lr}
   d740e:	4b02      	ldr	r3, [pc, #8]	; (d7418 <HAL_Delay_Microseconds+0xc>)
   d7410:	681b      	ldr	r3, [r3, #0]
   d7412:	68db      	ldr	r3, [r3, #12]
   d7414:	9301      	str	r3, [sp, #4]
   d7416:	bd08      	pop	{r3, pc}
   d7418:	00030218 	.word	0x00030218

000d741c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d741c:	b508      	push	{r3, lr}
   d741e:	4b02      	ldr	r3, [pc, #8]	; (d7428 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d7420:	681b      	ldr	r3, [r3, #0]
   d7422:	691b      	ldr	r3, [r3, #16]
   d7424:	9301      	str	r3, [sp, #4]
   d7426:	bd08      	pop	{r3, pc}
   d7428:	00030218 	.word	0x00030218

000d742c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d742c:	b508      	push	{r3, lr}
   d742e:	4b02      	ldr	r3, [pc, #8]	; (d7438 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7430:	681b      	ldr	r3, [r3, #0]
   d7432:	695b      	ldr	r3, [r3, #20]
   d7434:	9301      	str	r3, [sp, #4]
   d7436:	bd08      	pop	{r3, pc}
   d7438:	00030218 	.word	0x00030218

000d743c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d743c:	b508      	push	{r3, lr}
   d743e:	4b02      	ldr	r3, [pc, #8]	; (d7448 <os_thread_is_current+0xc>)
   d7440:	681b      	ldr	r3, [r3, #0]
   d7442:	689b      	ldr	r3, [r3, #8]
   d7444:	9301      	str	r3, [sp, #4]
   d7446:	bd08      	pop	{r3, pc}
   d7448:	00030248 	.word	0x00030248

000d744c <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d744c:	b508      	push	{r3, lr}
   d744e:	4b02      	ldr	r3, [pc, #8]	; (d7458 <os_thread_yield+0xc>)
   d7450:	681b      	ldr	r3, [r3, #0]
   d7452:	68db      	ldr	r3, [r3, #12]
   d7454:	9301      	str	r3, [sp, #4]
   d7456:	bd08      	pop	{r3, pc}
   d7458:	00030248 	.word	0x00030248

000d745c <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d745c:	b508      	push	{r3, lr}
   d745e:	4b02      	ldr	r3, [pc, #8]	; (d7468 <os_thread_join+0xc>)
   d7460:	681b      	ldr	r3, [r3, #0]
   d7462:	691b      	ldr	r3, [r3, #16]
   d7464:	9301      	str	r3, [sp, #4]
   d7466:	bd08      	pop	{r3, pc}
   d7468:	00030248 	.word	0x00030248

000d746c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d746c:	b508      	push	{r3, lr}
   d746e:	4b02      	ldr	r3, [pc, #8]	; (d7478 <os_thread_cleanup+0xc>)
   d7470:	681b      	ldr	r3, [r3, #0]
   d7472:	695b      	ldr	r3, [r3, #20]
   d7474:	9301      	str	r3, [sp, #4]
   d7476:	bd08      	pop	{r3, pc}
   d7478:	00030248 	.word	0x00030248

000d747c <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d747c:	b508      	push	{r3, lr}
   d747e:	4b02      	ldr	r3, [pc, #8]	; (d7488 <os_thread_scheduling+0xc>)
   d7480:	681b      	ldr	r3, [r3, #0]
   d7482:	69db      	ldr	r3, [r3, #28]
   d7484:	9301      	str	r3, [sp, #4]
   d7486:	bd08      	pop	{r3, pc}
   d7488:	00030248 	.word	0x00030248

000d748c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d748c:	b508      	push	{r3, lr}
   d748e:	4b02      	ldr	r3, [pc, #8]	; (d7498 <os_mutex_recursive_create+0xc>)
   d7490:	681b      	ldr	r3, [r3, #0]
   d7492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7494:	9301      	str	r3, [sp, #4]
   d7496:	bd08      	pop	{r3, pc}
   d7498:	00030248 	.word	0x00030248

000d749c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d749c:	b508      	push	{r3, lr}
   d749e:	4b02      	ldr	r3, [pc, #8]	; (d74a8 <os_mutex_recursive_destroy+0xc>)
   d74a0:	681b      	ldr	r3, [r3, #0]
   d74a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d74a4:	9301      	str	r3, [sp, #4]
   d74a6:	bd08      	pop	{r3, pc}
   d74a8:	00030248 	.word	0x00030248

000d74ac <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d74ac:	b508      	push	{r3, lr}
   d74ae:	4b02      	ldr	r3, [pc, #8]	; (d74b8 <inet_inet_ntop+0xc>)
   d74b0:	681b      	ldr	r3, [r3, #0]
   d74b2:	695b      	ldr	r3, [r3, #20]
   d74b4:	9301      	str	r3, [sp, #4]
   d74b6:	bd08      	pop	{r3, pc}
   d74b8:	00030264 	.word	0x00030264

000d74bc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d74bc:	b508      	push	{r3, lr}
   d74be:	4b02      	ldr	r3, [pc, #8]	; (d74c8 <HAL_USART_Init+0xc>)
   d74c0:	681b      	ldr	r3, [r3, #0]
   d74c2:	681b      	ldr	r3, [r3, #0]
   d74c4:	9301      	str	r3, [sp, #4]
   d74c6:	bd08      	pop	{r3, pc}
   d74c8:	0003023c 	.word	0x0003023c

000d74cc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d74cc:	b508      	push	{r3, lr}
   d74ce:	4b02      	ldr	r3, [pc, #8]	; (d74d8 <HAL_USART_Write_Data+0xc>)
   d74d0:	681b      	ldr	r3, [r3, #0]
   d74d2:	68db      	ldr	r3, [r3, #12]
   d74d4:	9301      	str	r3, [sp, #4]
   d74d6:	bd08      	pop	{r3, pc}
   d74d8:	0003023c 	.word	0x0003023c

000d74dc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d74dc:	b508      	push	{r3, lr}
   d74de:	4b02      	ldr	r3, [pc, #8]	; (d74e8 <HAL_USART_Available_Data+0xc>)
   d74e0:	681b      	ldr	r3, [r3, #0]
   d74e2:	691b      	ldr	r3, [r3, #16]
   d74e4:	9301      	str	r3, [sp, #4]
   d74e6:	bd08      	pop	{r3, pc}
   d74e8:	0003023c 	.word	0x0003023c

000d74ec <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d74ec:	b508      	push	{r3, lr}
   d74ee:	4b02      	ldr	r3, [pc, #8]	; (d74f8 <HAL_USART_Read_Data+0xc>)
   d74f0:	681b      	ldr	r3, [r3, #0]
   d74f2:	695b      	ldr	r3, [r3, #20]
   d74f4:	9301      	str	r3, [sp, #4]
   d74f6:	bd08      	pop	{r3, pc}
   d74f8:	0003023c 	.word	0x0003023c

000d74fc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d74fc:	b508      	push	{r3, lr}
   d74fe:	4b02      	ldr	r3, [pc, #8]	; (d7508 <HAL_USART_Peek_Data+0xc>)
   d7500:	681b      	ldr	r3, [r3, #0]
   d7502:	699b      	ldr	r3, [r3, #24]
   d7504:	9301      	str	r3, [sp, #4]
   d7506:	bd08      	pop	{r3, pc}
   d7508:	0003023c 	.word	0x0003023c

000d750c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d750c:	b508      	push	{r3, lr}
   d750e:	4b02      	ldr	r3, [pc, #8]	; (d7518 <HAL_USART_Flush_Data+0xc>)
   d7510:	681b      	ldr	r3, [r3, #0]
   d7512:	69db      	ldr	r3, [r3, #28]
   d7514:	9301      	str	r3, [sp, #4]
   d7516:	bd08      	pop	{r3, pc}
   d7518:	0003023c 	.word	0x0003023c

000d751c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d751c:	b508      	push	{r3, lr}
   d751e:	4b02      	ldr	r3, [pc, #8]	; (d7528 <HAL_USART_Is_Enabled+0xc>)
   d7520:	681b      	ldr	r3, [r3, #0]
   d7522:	6a1b      	ldr	r3, [r3, #32]
   d7524:	9301      	str	r3, [sp, #4]
   d7526:	bd08      	pop	{r3, pc}
   d7528:	0003023c 	.word	0x0003023c

000d752c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d752c:	b508      	push	{r3, lr}
   d752e:	4b02      	ldr	r3, [pc, #8]	; (d7538 <HAL_USART_Available_Data_For_Write+0xc>)
   d7530:	681b      	ldr	r3, [r3, #0]
   d7532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7534:	9301      	str	r3, [sp, #4]
   d7536:	bd08      	pop	{r3, pc}
   d7538:	0003023c 	.word	0x0003023c

000d753c <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d753c:	b508      	push	{r3, lr}
   d753e:	4b02      	ldr	r3, [pc, #8]	; (d7548 <HAL_USART_BeginConfig+0xc>)
   d7540:	681b      	ldr	r3, [r3, #0]
   d7542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7544:	9301      	str	r3, [sp, #4]
   d7546:	bd08      	pop	{r3, pc}
   d7548:	0003023c 	.word	0x0003023c

000d754c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d754c:	b508      	push	{r3, lr}
   d754e:	4b02      	ldr	r3, [pc, #8]	; (d7558 <HAL_I2C_Begin+0xc>)
   d7550:	681b      	ldr	r3, [r3, #0]
   d7552:	68db      	ldr	r3, [r3, #12]
   d7554:	9301      	str	r3, [sp, #4]
   d7556:	bd08      	pop	{r3, pc}
   d7558:	00030228 	.word	0x00030228

000d755c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d755c:	b508      	push	{r3, lr}
   d755e:	4b02      	ldr	r3, [pc, #8]	; (d7568 <HAL_I2C_Begin_Transmission+0xc>)
   d7560:	681b      	ldr	r3, [r3, #0]
   d7562:	699b      	ldr	r3, [r3, #24]
   d7564:	9301      	str	r3, [sp, #4]
   d7566:	bd08      	pop	{r3, pc}
   d7568:	00030228 	.word	0x00030228

000d756c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d756c:	b508      	push	{r3, lr}
   d756e:	4b02      	ldr	r3, [pc, #8]	; (d7578 <HAL_I2C_End_Transmission+0xc>)
   d7570:	681b      	ldr	r3, [r3, #0]
   d7572:	69db      	ldr	r3, [r3, #28]
   d7574:	9301      	str	r3, [sp, #4]
   d7576:	bd08      	pop	{r3, pc}
   d7578:	00030228 	.word	0x00030228

000d757c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d757c:	b508      	push	{r3, lr}
   d757e:	4b02      	ldr	r3, [pc, #8]	; (d7588 <HAL_I2C_Write_Data+0xc>)
   d7580:	681b      	ldr	r3, [r3, #0]
   d7582:	6a1b      	ldr	r3, [r3, #32]
   d7584:	9301      	str	r3, [sp, #4]
   d7586:	bd08      	pop	{r3, pc}
   d7588:	00030228 	.word	0x00030228

000d758c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d758c:	b508      	push	{r3, lr}
   d758e:	4b02      	ldr	r3, [pc, #8]	; (d7598 <HAL_I2C_Available_Data+0xc>)
   d7590:	681b      	ldr	r3, [r3, #0]
   d7592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7594:	9301      	str	r3, [sp, #4]
   d7596:	bd08      	pop	{r3, pc}
   d7598:	00030228 	.word	0x00030228

000d759c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d759c:	b508      	push	{r3, lr}
   d759e:	4b02      	ldr	r3, [pc, #8]	; (d75a8 <HAL_I2C_Read_Data+0xc>)
   d75a0:	681b      	ldr	r3, [r3, #0]
   d75a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d75a4:	9301      	str	r3, [sp, #4]
   d75a6:	bd08      	pop	{r3, pc}
   d75a8:	00030228 	.word	0x00030228

000d75ac <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d75ac:	b508      	push	{r3, lr}
   d75ae:	4b02      	ldr	r3, [pc, #8]	; (d75b8 <HAL_I2C_Peek_Data+0xc>)
   d75b0:	681b      	ldr	r3, [r3, #0]
   d75b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d75b4:	9301      	str	r3, [sp, #4]
   d75b6:	bd08      	pop	{r3, pc}
   d75b8:	00030228 	.word	0x00030228

000d75bc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d75bc:	b508      	push	{r3, lr}
   d75be:	4b02      	ldr	r3, [pc, #8]	; (d75c8 <HAL_I2C_Flush_Data+0xc>)
   d75c0:	681b      	ldr	r3, [r3, #0]
   d75c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d75c4:	9301      	str	r3, [sp, #4]
   d75c6:	bd08      	pop	{r3, pc}
   d75c8:	00030228 	.word	0x00030228

000d75cc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d75cc:	b508      	push	{r3, lr}
   d75ce:	4b02      	ldr	r3, [pc, #8]	; (d75d8 <HAL_I2C_Is_Enabled+0xc>)
   d75d0:	681b      	ldr	r3, [r3, #0]
   d75d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d75d4:	9301      	str	r3, [sp, #4]
   d75d6:	bd08      	pop	{r3, pc}
   d75d8:	00030228 	.word	0x00030228

000d75dc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d75dc:	b508      	push	{r3, lr}
   d75de:	4b02      	ldr	r3, [pc, #8]	; (d75e8 <HAL_I2C_Init+0xc>)
   d75e0:	681b      	ldr	r3, [r3, #0]
   d75e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d75e4:	9301      	str	r3, [sp, #4]
   d75e6:	bd08      	pop	{r3, pc}
   d75e8:	00030228 	.word	0x00030228

000d75ec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d75ec:	b508      	push	{r3, lr}
   d75ee:	4b02      	ldr	r3, [pc, #8]	; (d75f8 <HAL_USB_USART_Init+0xc>)
   d75f0:	681b      	ldr	r3, [r3, #0]
   d75f2:	681b      	ldr	r3, [r3, #0]
   d75f4:	9301      	str	r3, [sp, #4]
   d75f6:	bd08      	pop	{r3, pc}
   d75f8:	0003024c 	.word	0x0003024c

000d75fc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d75fc:	b508      	push	{r3, lr}
   d75fe:	4b02      	ldr	r3, [pc, #8]	; (d7608 <HAL_USB_USART_Begin+0xc>)
   d7600:	681b      	ldr	r3, [r3, #0]
   d7602:	685b      	ldr	r3, [r3, #4]
   d7604:	9301      	str	r3, [sp, #4]
   d7606:	bd08      	pop	{r3, pc}
   d7608:	0003024c 	.word	0x0003024c

000d760c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d760c:	b508      	push	{r3, lr}
   d760e:	4b02      	ldr	r3, [pc, #8]	; (d7618 <HAL_USB_USART_Available_Data+0xc>)
   d7610:	681b      	ldr	r3, [r3, #0]
   d7612:	691b      	ldr	r3, [r3, #16]
   d7614:	9301      	str	r3, [sp, #4]
   d7616:	bd08      	pop	{r3, pc}
   d7618:	0003024c 	.word	0x0003024c

000d761c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d761c:	b508      	push	{r3, lr}
   d761e:	4b02      	ldr	r3, [pc, #8]	; (d7628 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7620:	681b      	ldr	r3, [r3, #0]
   d7622:	695b      	ldr	r3, [r3, #20]
   d7624:	9301      	str	r3, [sp, #4]
   d7626:	bd08      	pop	{r3, pc}
   d7628:	0003024c 	.word	0x0003024c

000d762c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d762c:	b508      	push	{r3, lr}
   d762e:	4b02      	ldr	r3, [pc, #8]	; (d7638 <HAL_USB_USART_Receive_Data+0xc>)
   d7630:	681b      	ldr	r3, [r3, #0]
   d7632:	699b      	ldr	r3, [r3, #24]
   d7634:	9301      	str	r3, [sp, #4]
   d7636:	bd08      	pop	{r3, pc}
   d7638:	0003024c 	.word	0x0003024c

000d763c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d763c:	b508      	push	{r3, lr}
   d763e:	4b02      	ldr	r3, [pc, #8]	; (d7648 <HAL_USB_USART_Send_Data+0xc>)
   d7640:	681b      	ldr	r3, [r3, #0]
   d7642:	69db      	ldr	r3, [r3, #28]
   d7644:	9301      	str	r3, [sp, #4]
   d7646:	bd08      	pop	{r3, pc}
   d7648:	0003024c 	.word	0x0003024c

000d764c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d764c:	b508      	push	{r3, lr}
   d764e:	4b02      	ldr	r3, [pc, #8]	; (d7658 <HAL_USB_USART_Flush_Data+0xc>)
   d7650:	681b      	ldr	r3, [r3, #0]
   d7652:	6a1b      	ldr	r3, [r3, #32]
   d7654:	9301      	str	r3, [sp, #4]
   d7656:	bd08      	pop	{r3, pc}
   d7658:	0003024c 	.word	0x0003024c

000d765c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d765c:	b508      	push	{r3, lr}
   d765e:	4b02      	ldr	r3, [pc, #8]	; (d7668 <panic_+0xc>)
   d7660:	681b      	ldr	r3, [r3, #0]
   d7662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7664:	9301      	str	r3, [sp, #4]
   d7666:	bd08      	pop	{r3, pc}
   d7668:	00030260 	.word	0x00030260

000d766c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d766c:	b508      	push	{r3, lr}
   d766e:	4b02      	ldr	r3, [pc, #8]	; (d7678 <set_system_mode+0xc>)
   d7670:	681b      	ldr	r3, [r3, #0]
   d7672:	685b      	ldr	r3, [r3, #4]
   d7674:	9301      	str	r3, [sp, #4]
   d7676:	bd08      	pop	{r3, pc}
   d7678:	00030220 	.word	0x00030220

000d767c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d767c:	b508      	push	{r3, lr}
   d767e:	4b02      	ldr	r3, [pc, #8]	; (d7688 <system_delay_ms+0xc>)
   d7680:	681b      	ldr	r3, [r3, #0]
   d7682:	695b      	ldr	r3, [r3, #20]
   d7684:	9301      	str	r3, [sp, #4]
   d7686:	bd08      	pop	{r3, pc}
   d7688:	00030220 	.word	0x00030220

000d768c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d768c:	b508      	push	{r3, lr}
   d768e:	4b02      	ldr	r3, [pc, #8]	; (d7698 <system_thread_set_state+0xc>)
   d7690:	681b      	ldr	r3, [r3, #0]
   d7692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7694:	9301      	str	r3, [sp, #4]
   d7696:	bd08      	pop	{r3, pc}
   d7698:	00030220 	.word	0x00030220

000d769c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d769c:	b508      	push	{r3, lr}
   d769e:	4b03      	ldr	r3, [pc, #12]	; (d76ac <system_ctrl_set_app_request_handler+0x10>)
   d76a0:	681b      	ldr	r3, [r3, #0]
   d76a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d76a6:	9301      	str	r3, [sp, #4]
   d76a8:	bd08      	pop	{r3, pc}
   d76aa:	0000      	.short	0x0000
   d76ac:	00030220 	.word	0x00030220

000d76b0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d76b0:	b508      	push	{r3, lr}
   d76b2:	4b03      	ldr	r3, [pc, #12]	; (d76c0 <system_ctrl_set_result+0x10>)
   d76b4:	681b      	ldr	r3, [r3, #0]
   d76b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d76ba:	9301      	str	r3, [sp, #4]
   d76bc:	bd08      	pop	{r3, pc}
   d76be:	0000      	.short	0x0000
   d76c0:	00030220 	.word	0x00030220

000d76c4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d76c4:	b508      	push	{r3, lr}
   d76c6:	4b02      	ldr	r3, [pc, #8]	; (d76d0 <network_connect+0xc>)
   d76c8:	681b      	ldr	r3, [r3, #0]
   d76ca:	685b      	ldr	r3, [r3, #4]
   d76cc:	9301      	str	r3, [sp, #4]
   d76ce:	bd08      	pop	{r3, pc}
   d76d0:	00030240 	.word	0x00030240

000d76d4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d76d4:	b508      	push	{r3, lr}
   d76d6:	4b02      	ldr	r3, [pc, #8]	; (d76e0 <network_connecting+0xc>)
   d76d8:	681b      	ldr	r3, [r3, #0]
   d76da:	689b      	ldr	r3, [r3, #8]
   d76dc:	9301      	str	r3, [sp, #4]
   d76de:	bd08      	pop	{r3, pc}
   d76e0:	00030240 	.word	0x00030240

000d76e4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d76e4:	b508      	push	{r3, lr}
   d76e6:	4b02      	ldr	r3, [pc, #8]	; (d76f0 <network_disconnect+0xc>)
   d76e8:	681b      	ldr	r3, [r3, #0]
   d76ea:	68db      	ldr	r3, [r3, #12]
   d76ec:	9301      	str	r3, [sp, #4]
   d76ee:	bd08      	pop	{r3, pc}
   d76f0:	00030240 	.word	0x00030240

000d76f4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d76f4:	b508      	push	{r3, lr}
   d76f6:	4b02      	ldr	r3, [pc, #8]	; (d7700 <network_ready+0xc>)
   d76f8:	681b      	ldr	r3, [r3, #0]
   d76fa:	691b      	ldr	r3, [r3, #16]
   d76fc:	9301      	str	r3, [sp, #4]
   d76fe:	bd08      	pop	{r3, pc}
   d7700:	00030240 	.word	0x00030240

000d7704 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7704:	b508      	push	{r3, lr}
   d7706:	4b02      	ldr	r3, [pc, #8]	; (d7710 <network_on+0xc>)
   d7708:	681b      	ldr	r3, [r3, #0]
   d770a:	695b      	ldr	r3, [r3, #20]
   d770c:	9301      	str	r3, [sp, #4]
   d770e:	bd08      	pop	{r3, pc}
   d7710:	00030240 	.word	0x00030240

000d7714 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7714:	b508      	push	{r3, lr}
   d7716:	4b02      	ldr	r3, [pc, #8]	; (d7720 <network_off+0xc>)
   d7718:	681b      	ldr	r3, [r3, #0]
   d771a:	699b      	ldr	r3, [r3, #24]
   d771c:	9301      	str	r3, [sp, #4]
   d771e:	bd08      	pop	{r3, pc}
   d7720:	00030240 	.word	0x00030240

000d7724 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7724:	b508      	push	{r3, lr}
   d7726:	4b02      	ldr	r3, [pc, #8]	; (d7730 <network_listen+0xc>)
   d7728:	681b      	ldr	r3, [r3, #0]
   d772a:	69db      	ldr	r3, [r3, #28]
   d772c:	9301      	str	r3, [sp, #4]
   d772e:	bd08      	pop	{r3, pc}
   d7730:	00030240 	.word	0x00030240

000d7734 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7734:	b508      	push	{r3, lr}
   d7736:	4b02      	ldr	r3, [pc, #8]	; (d7740 <network_listening+0xc>)
   d7738:	681b      	ldr	r3, [r3, #0]
   d773a:	6a1b      	ldr	r3, [r3, #32]
   d773c:	9301      	str	r3, [sp, #4]
   d773e:	bd08      	pop	{r3, pc}
   d7740:	00030240 	.word	0x00030240

000d7744 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7744:	b508      	push	{r3, lr}
   d7746:	4b02      	ldr	r3, [pc, #8]	; (d7750 <network_set_listen_timeout+0xc>)
   d7748:	681b      	ldr	r3, [r3, #0]
   d774a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d774c:	9301      	str	r3, [sp, #4]
   d774e:	bd08      	pop	{r3, pc}
   d7750:	00030240 	.word	0x00030240

000d7754 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7754:	b508      	push	{r3, lr}
   d7756:	4b02      	ldr	r3, [pc, #8]	; (d7760 <network_get_listen_timeout+0xc>)
   d7758:	681b      	ldr	r3, [r3, #0]
   d775a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d775c:	9301      	str	r3, [sp, #4]
   d775e:	bd08      	pop	{r3, pc}
   d7760:	00030240 	.word	0x00030240

000d7764 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7764:	b508      	push	{r3, lr}
   d7766:	4b02      	ldr	r3, [pc, #8]	; (d7770 <spark_process+0xc>)
   d7768:	681b      	ldr	r3, [r3, #0]
   d776a:	689b      	ldr	r3, [r3, #8]
   d776c:	9301      	str	r3, [sp, #4]
   d776e:	bd08      	pop	{r3, pc}
   d7770:	00030244 	.word	0x00030244

000d7774 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7774:	b508      	push	{r3, lr}
   d7776:	4b02      	ldr	r3, [pc, #8]	; (d7780 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7778:	681b      	ldr	r3, [r3, #0]
   d777a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d777c:	9301      	str	r3, [sp, #4]
   d777e:	bd08      	pop	{r3, pc}
   d7780:	00030244 	.word	0x00030244

000d7784 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7784:	b508      	push	{r3, lr}
   d7786:	4b02      	ldr	r3, [pc, #8]	; (d7790 <malloc+0xc>)
   d7788:	681b      	ldr	r3, [r3, #0]
   d778a:	681b      	ldr	r3, [r3, #0]
   d778c:	9301      	str	r3, [sp, #4]
   d778e:	bd08      	pop	{r3, pc}
   d7790:	0003021c 	.word	0x0003021c

000d7794 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7794:	b508      	push	{r3, lr}
   d7796:	4b02      	ldr	r3, [pc, #8]	; (d77a0 <free+0xc>)
   d7798:	681b      	ldr	r3, [r3, #0]
   d779a:	685b      	ldr	r3, [r3, #4]
   d779c:	9301      	str	r3, [sp, #4]
   d779e:	bd08      	pop	{r3, pc}
   d77a0:	0003021c 	.word	0x0003021c

000d77a4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d77a4:	b508      	push	{r3, lr}
   d77a6:	4b02      	ldr	r3, [pc, #8]	; (d77b0 <vsnprintf+0xc>)
   d77a8:	681b      	ldr	r3, [r3, #0]
   d77aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d77ac:	9301      	str	r3, [sp, #4]
   d77ae:	bd08      	pop	{r3, pc}
   d77b0:	0003021c 	.word	0x0003021c

000d77b4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d77b4:	2200      	movs	r2, #0
   d77b6:	4611      	mov	r1, r2
   d77b8:	6840      	ldr	r0, [r0, #4]
   d77ba:	f7ff bfbb 	b.w	d7734 <network_listening>

000d77be <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d77be:	2200      	movs	r2, #0
   d77c0:	4611      	mov	r1, r2
   d77c2:	6840      	ldr	r0, [r0, #4]
   d77c4:	f7ff bfc6 	b.w	d7754 <network_get_listen_timeout>

000d77c8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d77c8:	2200      	movs	r2, #0
   d77ca:	6840      	ldr	r0, [r0, #4]
   d77cc:	f7ff bfba 	b.w	d7744 <network_set_listen_timeout>

000d77d0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d77d0:	2200      	movs	r2, #0
   d77d2:	f081 0101 	eor.w	r1, r1, #1
   d77d6:	6840      	ldr	r0, [r0, #4]
   d77d8:	f7ff bfa4 	b.w	d7724 <network_listen>

000d77dc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d77dc:	2300      	movs	r3, #0
   d77de:	461a      	mov	r2, r3
   d77e0:	4619      	mov	r1, r3
   d77e2:	6840      	ldr	r0, [r0, #4]
   d77e4:	f7ff bf96 	b.w	d7714 <network_off>

000d77e8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d77e8:	2300      	movs	r3, #0
   d77ea:	461a      	mov	r2, r3
   d77ec:	4619      	mov	r1, r3
   d77ee:	6840      	ldr	r0, [r0, #4]
   d77f0:	f7ff bf88 	b.w	d7704 <network_on>

000d77f4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d77f4:	2200      	movs	r2, #0
   d77f6:	4611      	mov	r1, r2
   d77f8:	6840      	ldr	r0, [r0, #4]
   d77fa:	f7ff bf7b 	b.w	d76f4 <network_ready>

000d77fe <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d77fe:	2200      	movs	r2, #0
   d7800:	4611      	mov	r1, r2
   d7802:	6840      	ldr	r0, [r0, #4]
   d7804:	f7ff bf66 	b.w	d76d4 <network_connecting>

000d7808 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7808:	2200      	movs	r2, #0
   d780a:	2102      	movs	r1, #2
   d780c:	6840      	ldr	r0, [r0, #4]
   d780e:	f7ff bf69 	b.w	d76e4 <network_disconnect>

000d7812 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7812:	2300      	movs	r3, #0
   d7814:	461a      	mov	r2, r3
   d7816:	6840      	ldr	r0, [r0, #4]
   d7818:	f7ff bf54 	b.w	d76c4 <network_connect>

000d781c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d781c:	4b02      	ldr	r3, [pc, #8]	; (d7828 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d781e:	2203      	movs	r2, #3
   d7820:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7822:	4a02      	ldr	r2, [pc, #8]	; (d782c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7824:	601a      	str	r2, [r3, #0]
   d7826:	4770      	bx	lr
   d7828:	2003e3dc 	.word	0x2003e3dc
   d782c:	000d9d04 	.word	0x000d9d04

000d7830 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d7830:	2100      	movs	r1, #0
   d7832:	f7ff bdd3 	b.w	d73dc <HAL_SPI_Acquire>

000d7836 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d7836:	2100      	movs	r1, #0
   d7838:	f7ff bdd8 	b.w	d73ec <HAL_SPI_Release>

000d783c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d783c:	b510      	push	{r4, lr}
   d783e:	4604      	mov	r4, r0
{
    _spi = spi;
   d7840:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d7842:	4608      	mov	r0, r1
   d7844:	f7ff fd9a 	bl	d737c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7848:	2300      	movs	r3, #0
   d784a:	6063      	str	r3, [r4, #4]
}
   d784c:	4620      	mov	r0, r4
   d784e:	bd10      	pop	{r4, pc}

000d7850 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d7850:	b510      	push	{r4, lr}
   d7852:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d7854:	7800      	ldrb	r0, [r0, #0]
   d7856:	f7ff ffeb 	bl	d7830 <_ZN8SPIClass4lockEv.isra.0>
   d785a:	b948      	cbnz	r0, d7870 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d785c:	7820      	ldrb	r0, [r4, #0]
   d785e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d7862:	f7ff fd63 	bl	d732c <HAL_SPI_Begin>
        unlock();
   d7866:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d786c:	f7ff bfe3 	b.w	d7836 <_ZN8SPIClass6unlockEv.isra.1>
   d7870:	bd10      	pop	{r4, pc}

000d7872 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d7872:	b538      	push	{r3, r4, r5, lr}
   d7874:	4604      	mov	r4, r0
    if (!lock())
   d7876:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d7878:	460d      	mov	r5, r1
    if (!lock())
   d787a:	f7ff ffd9 	bl	d7830 <_ZN8SPIClass4lockEv.isra.0>
   d787e:	b940      	cbnz	r0, d7892 <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d7880:	7820      	ldrb	r0, [r4, #0]
   d7882:	4629      	mov	r1, r5
   d7884:	f7ff fd5a 	bl	d733c <HAL_SPI_Set_Bit_Order>
        unlock();
   d7888:	7820      	ldrb	r0, [r4, #0]
    }
}
   d788a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d788e:	f7ff bfd2 	b.w	d7836 <_ZN8SPIClass6unlockEv.isra.1>
   d7892:	bd38      	pop	{r3, r4, r5, pc}

000d7894 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d7894:	b538      	push	{r3, r4, r5, lr}
   d7896:	4604      	mov	r4, r0
    if (!lock())
   d7898:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d789a:	460d      	mov	r5, r1
    if (!lock())
   d789c:	f7ff ffc8 	bl	d7830 <_ZN8SPIClass4lockEv.isra.0>
   d78a0:	b940      	cbnz	r0, d78b4 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d78a2:	7820      	ldrb	r0, [r4, #0]
   d78a4:	4629      	mov	r1, r5
   d78a6:	f7ff fd51 	bl	d734c <HAL_SPI_Set_Data_Mode>
        unlock();
   d78aa:	7820      	ldrb	r0, [r4, #0]
    }
}
   d78ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d78b0:	f7ff bfc1 	b.w	d7836 <_ZN8SPIClass6unlockEv.isra.1>
   d78b4:	bd38      	pop	{r3, r4, r5, pc}

000d78b6 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d78b6:	7800      	ldrb	r0, [r0, #0]
   d78b8:	f7ff bfbd 	b.w	d7836 <_ZN8SPIClass6unlockEv.isra.1>

000d78bc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d78bc:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d78be:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d78c0:	6018      	str	r0, [r3, #0]
   d78c2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d78c4:	6818      	ldr	r0, [r3, #0]
   d78c6:	4288      	cmp	r0, r1
   d78c8:	b2e5      	uxtb	r5, r4
   d78ca:	d906      	bls.n	d78da <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d78cc:	3401      	adds	r4, #1
   d78ce:	2c08      	cmp	r4, #8
   d78d0:	d002      	beq.n	d78d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d78d2:	0840      	lsrs	r0, r0, #1
   d78d4:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d78d6:	e7f5      	b.n	d78c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d78d8:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d78da:	4b02      	ldr	r3, [pc, #8]	; (d78e4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d78dc:	5d5b      	ldrb	r3, [r3, r5]
   d78de:	7013      	strb	r3, [r2, #0]
   d78e0:	bd30      	pop	{r4, r5, pc}
   d78e2:	bf00      	nop
   d78e4:	000d9d30 	.word	0x000d9d30

000d78e8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d78e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d78ec:	4607      	mov	r7, r0
   d78ee:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d78f0:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d78f2:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d78f4:	f7ff ff9c 	bl	d7830 <_ZN8SPIClass4lockEv.isra.0>
   d78f8:	2800      	cmp	r0, #0
   d78fa:	db62      	blt.n	d79c2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d78fc:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d78fe:	2214      	movs	r2, #20
   d7900:	2100      	movs	r1, #0
   d7902:	a809      	add	r0, sp, #36	; 0x24
   d7904:	f001 fc70 	bl	d91e8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7908:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d790a:	4620      	mov	r0, r4
   d790c:	2200      	movs	r2, #0
   d790e:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d7910:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d7914:	f7ff fd42 	bl	d739c <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d7918:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d791c:	b154      	cbz	r4, d7934 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d791e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d7922:	b935      	cbnz	r5, d7932 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d7924:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d7928:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d792c:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d7930:	e003      	b.n	d793a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d7932:	2400      	movs	r4, #0
   d7934:	46a1      	mov	r9, r4
   d7936:	46a0      	mov	r8, r4
   d7938:	2501      	movs	r5, #1
   d793a:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d793c:	b105      	cbz	r5, d7940 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d793e:	b9bb      	cbnz	r3, d7970 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d7940:	429d      	cmp	r5, r3
   d7942:	d10b      	bne.n	d795c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d7944:	68b2      	ldr	r2, [r6, #8]
   d7946:	4542      	cmp	r2, r8
   d7948:	d108      	bne.n	d795c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d794a:	f88d 9020 	strb.w	r9, [sp, #32]
   d794e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d7952:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d7956:	89b2      	ldrh	r2, [r6, #12]
   d7958:	4291      	cmp	r1, r2
   d795a:	d009      	beq.n	d7970 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d795c:	b153      	cbz	r3, d7974 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d795e:	2400      	movs	r4, #0
   d7960:	7838      	ldrb	r0, [r7, #0]
   d7962:	9401      	str	r4, [sp, #4]
   d7964:	9400      	str	r4, [sp, #0]
   d7966:	4623      	mov	r3, r4
   d7968:	4622      	mov	r2, r4
   d796a:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d796c:	f7ff fd2e 	bl	d73cc <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d7970:	2000      	movs	r0, #0
   d7972:	e026      	b.n	d79c2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d7974:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d7978:	68b1      	ldr	r1, [r6, #8]
   d797a:	980a      	ldr	r0, [sp, #40]	; 0x28
   d797c:	ab04      	add	r3, sp, #16
   d797e:	f10d 020f 	add.w	r2, sp, #15
   d7982:	f7ff ff9b 	bl	d78bc <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d7986:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7988:	b105      	cbz	r5, d798c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d798a:	b9b1      	cbnz	r1, d79ba <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d798c:	42a9      	cmp	r1, r5
   d798e:	d008      	beq.n	d79a2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d7990:	2400      	movs	r4, #0
   d7992:	7838      	ldrb	r0, [r7, #0]
   d7994:	9401      	str	r4, [sp, #4]
   d7996:	7b74      	ldrb	r4, [r6, #13]
   d7998:	7b33      	ldrb	r3, [r6, #12]
   d799a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d799e:	9400      	str	r4, [sp, #0]
   d79a0:	e7e4      	b.n	d796c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d79a2:	68b3      	ldr	r3, [r6, #8]
   d79a4:	4543      	cmp	r3, r8
   d79a6:	d3f3      	bcc.n	d7990 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d79a8:	f88d 9020 	strb.w	r9, [sp, #32]
   d79ac:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d79b0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d79b4:	89b3      	ldrh	r3, [r6, #12]
   d79b6:	429a      	cmp	r2, r3
   d79b8:	d1ea      	bne.n	d7990 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d79ba:	9b04      	ldr	r3, [sp, #16]
   d79bc:	4543      	cmp	r3, r8
   d79be:	d1e7      	bne.n	d7990 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d79c0:	e7d6      	b.n	d7970 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d79c2:	b00f      	add	sp, #60	; 0x3c
   d79c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d79c8 <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d79c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d79cc:	b088      	sub	sp, #32
    unsigned clock = 0;
   d79ce:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d79d0:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d79d2:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d79d4:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d79d6:	460e      	mov	r6, r1
   d79d8:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d79da:	f7ff ff29 	bl	d7830 <_ZN8SPIClass4lockEv.isra.0>
   d79de:	4605      	mov	r5, r0
   d79e0:	bb00      	cbnz	r0, d7a24 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d79e2:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d79e6:	4601      	mov	r1, r0
   d79e8:	2214      	movs	r2, #20
   d79ea:	a803      	add	r0, sp, #12
   d79ec:	f001 fbfc 	bl	d91e8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d79f0:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d79f2:	462a      	mov	r2, r5
   d79f4:	a903      	add	r1, sp, #12
   d79f6:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d79f8:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d79fc:	f7ff fcce 	bl	d739c <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d7a00:	ab02      	add	r3, sp, #8
   d7a02:	f10d 0207 	add.w	r2, sp, #7
   d7a06:	fb07 f106 	mul.w	r1, r7, r6
   d7a0a:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d7a0c:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d7a10:	f7ff ff54 	bl	d78bc <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d7a14:	7820      	ldrb	r0, [r4, #0]
   d7a16:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d7a1a:	f7ff fc9f 	bl	d735c <HAL_SPI_Set_Clock_Divider>
        unlock();
   d7a1e:	7820      	ldrb	r0, [r4, #0]
   d7a20:	f7ff ff09 	bl	d7836 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d7a24:	9802      	ldr	r0, [sp, #8]
   d7a26:	b008      	add	sp, #32
   d7a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7a2c <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d7a2c:	b538      	push	{r3, r4, r5, lr}
   d7a2e:	4604      	mov	r4, r0
    if (!lock())
   d7a30:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d7a32:	460d      	mov	r5, r1
    if (!lock())
   d7a34:	f7ff fefc 	bl	d7830 <_ZN8SPIClass4lockEv.isra.0>
   d7a38:	b9c8      	cbnz	r0, d7a6e <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d7a3a:	6861      	ldr	r1, [r4, #4]
   d7a3c:	b171      	cbz	r1, d7a5c <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d7a3e:	4b0c      	ldr	r3, [pc, #48]	; (d7a70 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d7a40:	5cc2      	ldrb	r2, [r0, r3]
   d7a42:	42aa      	cmp	r2, r5
   d7a44:	d002      	beq.n	d7a4c <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d7a46:	3001      	adds	r0, #1
   d7a48:	2808      	cmp	r0, #8
   d7a4a:	d1f9      	bne.n	d7a40 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d7a4c:	3001      	adds	r0, #1
   d7a4e:	b2c0      	uxtb	r0, r0
   d7a50:	40c1      	lsrs	r1, r0
   d7a52:	2201      	movs	r2, #1
   d7a54:	4620      	mov	r0, r4
   d7a56:	f7ff ffb7 	bl	d79c8 <_ZN8SPIClass13setClockSpeedEjj>
   d7a5a:	e003      	b.n	d7a64 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d7a5c:	4629      	mov	r1, r5
   d7a5e:	7820      	ldrb	r0, [r4, #0]
   d7a60:	f7ff fc7c 	bl	d735c <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d7a64:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d7a6a:	f7ff bee4 	b.w	d7836 <_ZN8SPIClass6unlockEv.isra.1>
   d7a6e:	bd38      	pop	{r3, r4, r5, pc}
   d7a70:	000d9d30 	.word	0x000d9d30

000d7a74 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7a74:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d7a76:	7800      	ldrb	r0, [r0, #0]
   d7a78:	f7ff fc78 	bl	d736c <HAL_SPI_Send_Receive_Data>
}
   d7a7c:	b2c0      	uxtb	r0, r0
   d7a7e:	bd08      	pop	{r3, pc}

000d7a80 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d7a80:	b530      	push	{r4, r5, lr}
   d7a82:	b087      	sub	sp, #28
   d7a84:	4604      	mov	r4, r0
   d7a86:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d7a88:	7800      	ldrb	r0, [r0, #0]
   d7a8a:	9500      	str	r5, [sp, #0]
   d7a8c:	f7ff fc8e 	bl	d73ac <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d7a90:	b93d      	cbnz	r5, d7aa2 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d7a92:	a902      	add	r1, sp, #8
   d7a94:	7820      	ldrb	r0, [r4, #0]
   d7a96:	f7ff fc91 	bl	d73bc <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d7a9a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d7a9e:	07db      	lsls	r3, r3, #31
   d7aa0:	d4f7      	bmi.n	d7a92 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d7aa2:	b007      	add	sp, #28
   d7aa4:	bd30      	pop	{r4, r5, pc}

000d7aa6 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d7aa6:	7800      	ldrb	r0, [r0, #0]
   d7aa8:	f7ff bc70 	b.w	d738c <HAL_SPI_Is_Enabled>

000d7aac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7aac:	b510      	push	{r4, lr}
   d7aae:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7ab0:	6800      	ldr	r0, [r0, #0]
   d7ab2:	b118      	cbz	r0, d7abc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d7ab4:	f7ff fe6e 	bl	d7794 <free>
            wakeupSource_ = nullptr;
   d7ab8:	2300      	movs	r3, #0
   d7aba:	6023      	str	r3, [r4, #0]
   d7abc:	bd10      	pop	{r4, pc}

000d7abe <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7abe:	b510      	push	{r4, lr}
   d7ac0:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d7ac2:	f7ff fff3 	bl	d7aac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7ac6:	4620      	mov	r0, r4
   d7ac8:	bd10      	pop	{r4, pc}
	...

000d7acc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7acc:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7ace:	4c09      	ldr	r4, [pc, #36]	; (d7af4 <_GLOBAL__sub_I_System+0x28>)
   d7ad0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7ad6:	6020      	str	r0, [r4, #0]
   d7ad8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7ada:	71a0      	strb	r0, [r4, #6]
   d7adc:	8120      	strh	r0, [r4, #8]
   d7ade:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7ae0:	f7ff fdc4 	bl	d766c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7ae4:	4620      	mov	r0, r4
   d7ae6:	4a04      	ldr	r2, [pc, #16]	; (d7af8 <_GLOBAL__sub_I_System+0x2c>)
   d7ae8:	4904      	ldr	r1, [pc, #16]	; (d7afc <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7aee:	f000 bdcb 	b.w	d8688 <__aeabi_atexit>
   d7af2:	bf00      	nop
   d7af4:	2003e3e4 	.word	0x2003e3e4
   d7af8:	2003dd18 	.word	0x2003dd18
   d7afc:	000d7abf 	.word	0x000d7abf

000d7b00 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d7b00:	b510      	push	{r4, lr}
   d7b02:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7b04:	6800      	ldr	r0, [r0, #0]
   d7b06:	b108      	cbz	r0, d7b0c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7b08:	f7ff fcc8 	bl	d749c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d7b0c:	4620      	mov	r0, r4
   d7b0e:	bd10      	pop	{r4, pc}

000d7b10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7b10:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7b12:	4c06      	ldr	r4, [pc, #24]	; (d7b2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7b14:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d7b16:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7b18:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7b1a:	f7ff fcb7 	bl	d748c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7b1e:	4620      	mov	r0, r4
   d7b20:	4a03      	ldr	r2, [pc, #12]	; (d7b30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7b22:	4904      	ldr	r1, [pc, #16]	; (d7b34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7b28:	f000 bdae 	b.w	d8688 <__aeabi_atexit>
   d7b2c:	2003e3f0 	.word	0x2003e3f0
   d7b30:	2003dd18 	.word	0x2003dd18
   d7b34:	000d7b01 	.word	0x000d7b01

000d7b38 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7b3a:	4606      	mov	r6, r0
   d7b3c:	460d      	mov	r5, r1
   d7b3e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7b40:	2400      	movs	r4, #0
  while (size--) {
   d7b42:	42bd      	cmp	r5, r7
   d7b44:	d00c      	beq.n	d7b60 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7b46:	6833      	ldr	r3, [r6, #0]
   d7b48:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7b4c:	689b      	ldr	r3, [r3, #8]
   d7b4e:	4630      	mov	r0, r6
   d7b50:	4798      	blx	r3
     if (chunk>=0)
   d7b52:	2800      	cmp	r0, #0
   d7b54:	db01      	blt.n	d7b5a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7b56:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7b58:	e7f3      	b.n	d7b42 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7b5a:	2c00      	cmp	r4, #0
   d7b5c:	bf08      	it	eq
   d7b5e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7b60:	4620      	mov	r0, r4
   d7b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7b64 <_ZN5Print5printEPKc>:
   d7b64:	b508      	push	{r3, lr}
   d7b66:	f7fe fb55 	bl	d6214 <_ZN5Print5writeEPKc>
   d7b6a:	bd08      	pop	{r3, pc}

000d7b6c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7b6c:	6803      	ldr	r3, [r0, #0]
   d7b6e:	689b      	ldr	r3, [r3, #8]
   d7b70:	4718      	bx	r3

000d7b72 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d7b72:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7b74:	f7fe fb4e 	bl	d6214 <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
   d7b78:	bd08      	pop	{r3, pc}

000d7b7a <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d7b7a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7b7c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7b7e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7b80:	f7ff fff4 	bl	d7b6c <_ZN5Print5printEc>
  n += print('\n');
   d7b84:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d7b86:	4604      	mov	r4, r0
  n += print('\n');
   d7b88:	4628      	mov	r0, r5
   d7b8a:	f7ff ffef 	bl	d7b6c <_ZN5Print5printEc>
  return n;
}
   d7b8e:	4420      	add	r0, r4
   d7b90:	bd38      	pop	{r3, r4, r5, pc}

000d7b92 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7b92:	b538      	push	{r3, r4, r5, lr}
   d7b94:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7b96:	f7fe fb3d 	bl	d6214 <_ZN5Print5writeEPKc>
   d7b9a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d7b9c:	4628      	mov	r0, r5
   d7b9e:	f7ff ffec 	bl	d7b7a <_ZN5Print7printlnEv>
  return n;
}
   d7ba2:	4420      	add	r0, r4
   d7ba4:	bd38      	pop	{r3, r4, r5, pc}

000d7ba6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d7ba6:	f7ff bff4 	b.w	d7b92 <_ZN5Print7printlnEPKc>

000d7baa <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7baa:	b530      	push	{r4, r5, lr}
   d7bac:	b08b      	sub	sp, #44	; 0x2c
   d7bae:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7bb0:	2100      	movs	r1, #0
   d7bb2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7bb6:	2a01      	cmp	r2, #1
   d7bb8:	bf98      	it	ls
   d7bba:	220a      	movls	r2, #10
   d7bbc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7bc0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7bc4:	fb05 3312 	mls	r3, r5, r2, r3
   d7bc8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7bcc:	2b09      	cmp	r3, #9
   d7bce:	bf94      	ite	ls
   d7bd0:	3330      	addls	r3, #48	; 0x30
   d7bd2:	3337      	addhi	r3, #55	; 0x37
   d7bd4:	b2db      	uxtb	r3, r3
   d7bd6:	4621      	mov	r1, r4
   d7bd8:	f804 3901 	strb.w	r3, [r4], #-1
   d7bdc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d7bde:	2d00      	cmp	r5, #0
   d7be0:	d1ee      	bne.n	d7bc0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7be2:	f7fe fb17 	bl	d6214 <_ZN5Print5writeEPKc>
}
   d7be6:	b00b      	add	sp, #44	; 0x2c
   d7be8:	bd30      	pop	{r4, r5, pc}

000d7bea <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7bea:	b40c      	push	{r2, r3}
   d7bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7bf0:	b087      	sub	sp, #28
   d7bf2:	af00      	add	r7, sp, #0
   d7bf4:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7bf8:	4605      	mov	r5, r0
   d7bfa:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7bfe:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7c00:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d7c02:	4623      	mov	r3, r4
   d7c04:	464a      	mov	r2, r9
   d7c06:	2114      	movs	r1, #20
   d7c08:	1d38      	adds	r0, r7, #4
   d7c0a:	f7ff fdcb 	bl	d77a4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7c0e:	2813      	cmp	r0, #19
   d7c10:	d805      	bhi.n	d7c1e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7c12:	1d39      	adds	r1, r7, #4
   d7c14:	4628      	mov	r0, r5
   d7c16:	f7fe fafd 	bl	d6214 <_ZN5Print5writeEPKc>
   d7c1a:	4604      	mov	r4, r0
   d7c1c:	e013      	b.n	d7c46 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7c1e:	f100 0308 	add.w	r3, r0, #8
   d7c22:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d7c26:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7c28:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7c2c:	1c41      	adds	r1, r0, #1
   d7c2e:	4623      	mov	r3, r4
   d7c30:	464a      	mov	r2, r9
   d7c32:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d7c34:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d7c36:	f7ff fdb5 	bl	d77a4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7c3a:	4669      	mov	r1, sp
   d7c3c:	4628      	mov	r0, r5
   d7c3e:	f7fe fae9 	bl	d6214 <_ZN5Print5writeEPKc>
   d7c42:	4604      	mov	r4, r0
   d7c44:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d7c46:	b11e      	cbz	r6, d7c50 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7c48:	4628      	mov	r0, r5
   d7c4a:	f7ff ff96 	bl	d7b7a <_ZN5Print7printlnEv>
   d7c4e:	4404      	add	r4, r0
    return n;
}
   d7c50:	4620      	mov	r0, r4
   d7c52:	371c      	adds	r7, #28
   d7c54:	46bd      	mov	sp, r7
   d7c56:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7c5a:	b002      	add	sp, #8
   d7c5c:	4770      	bx	lr
	...

000d7c60 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7c60:	4b01      	ldr	r3, [pc, #4]	; (d7c68 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7c62:	4a02      	ldr	r2, [pc, #8]	; (d7c6c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7c64:	601a      	str	r2, [r3, #0]
   d7c66:	4770      	bx	lr
   d7c68:	2003e3f4 	.word	0x2003e3f4
   d7c6c:	000d9dab 	.word	0x000d9dab

000d7c70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7c70:	4b02      	ldr	r3, [pc, #8]	; (d7c7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7c72:	681a      	ldr	r2, [r3, #0]
   d7c74:	4b02      	ldr	r3, [pc, #8]	; (d7c80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7c76:	601a      	str	r2, [r3, #0]
   d7c78:	4770      	bx	lr
   d7c7a:	bf00      	nop
   d7c7c:	2003dcac 	.word	0x2003dcac
   d7c80:	2003e3f8 	.word	0x2003e3f8

000d7c84 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7c84:	2100      	movs	r1, #0
   d7c86:	f7ff bcf9 	b.w	d767c <system_delay_ms>

000d7c8a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7c8a:	b510      	push	{r4, lr}
   d7c8c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7c8e:	f7fe ff5f 	bl	d6b50 <_ZNSt14_Function_baseD1Ev>
   d7c92:	4620      	mov	r0, r4
   d7c94:	bd10      	pop	{r4, pc}
	...

000d7c98 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7c98:	4803      	ldr	r0, [pc, #12]	; (d7ca8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7c9a:	4a04      	ldr	r2, [pc, #16]	; (d7cac <_GLOBAL__sub_I_RGB+0x14>)
   d7c9c:	4904      	ldr	r1, [pc, #16]	; (d7cb0 <_GLOBAL__sub_I_RGB+0x18>)
   d7c9e:	2300      	movs	r3, #0
   d7ca0:	6083      	str	r3, [r0, #8]
   d7ca2:	f000 bcf1 	b.w	d8688 <__aeabi_atexit>
   d7ca6:	bf00      	nop
   d7ca8:	2003e3fc 	.word	0x2003e3fc
   d7cac:	2003dd18 	.word	0x2003dd18
   d7cb0:	000d7c8b 	.word	0x000d7c8b

000d7cb4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7cb4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7cb6:	4b0c      	ldr	r3, [pc, #48]	; (d7ce8 <serialEventRun+0x34>)
   d7cb8:	b133      	cbz	r3, d7cc8 <serialEventRun+0x14>
   d7cba:	f000 f957 	bl	d7f6c <_Z16_fetch_usbserialv>
   d7cbe:	6803      	ldr	r3, [r0, #0]
   d7cc0:	691b      	ldr	r3, [r3, #16]
   d7cc2:	4798      	blx	r3
   d7cc4:	2800      	cmp	r0, #0
   d7cc6:	dc09      	bgt.n	d7cdc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7cc8:	4b08      	ldr	r3, [pc, #32]	; (d7cec <serialEventRun+0x38>)
   d7cca:	b163      	cbz	r3, d7ce6 <serialEventRun+0x32>
   d7ccc:	f000 f9d6 	bl	d807c <_Z22__fetch_global_Serial1v>
   d7cd0:	6803      	ldr	r3, [r0, #0]
   d7cd2:	691b      	ldr	r3, [r3, #16]
   d7cd4:	4798      	blx	r3
   d7cd6:	2800      	cmp	r0, #0
   d7cd8:	dc03      	bgt.n	d7ce2 <serialEventRun+0x2e>
   d7cda:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7cdc:	f3af 8000 	nop.w
   d7ce0:	e7f2      	b.n	d7cc8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7ce2:	f3af 8000 	nop.w
   d7ce6:	bd08      	pop	{r3, pc}
	...

000d7cf0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7cf0:	b508      	push	{r3, lr}
	serialEventRun();
   d7cf2:	f7ff ffdf 	bl	d7cb4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7cf6:	f7ff fb99 	bl	d742c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7cfa:	4b01      	ldr	r3, [pc, #4]	; (d7d00 <_post_loop+0x10>)
   d7cfc:	6018      	str	r0, [r3, #0]
   d7cfe:	bd08      	pop	{r3, pc}
   d7d00:	2003e730 	.word	0x2003e730

000d7d04 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7d04:	4802      	ldr	r0, [pc, #8]	; (d7d10 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7d06:	4a03      	ldr	r2, [pc, #12]	; (d7d14 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7d08:	4903      	ldr	r1, [pc, #12]	; (d7d18 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7d0a:	1a12      	subs	r2, r2, r0
   d7d0c:	f001 ba61 	b.w	d91d2 <memcpy>
   d7d10:	2003f400 	.word	0x2003f400
   d7d14:	2003f404 	.word	0x2003f404
   d7d18:	000da170 	.word	0x000da170

000d7d1c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7d1c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7d1e:	2300      	movs	r3, #0
   d7d20:	9300      	str	r3, [sp, #0]
   d7d22:	461a      	mov	r2, r3
   d7d24:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7d28:	f7ff fcc2 	bl	d76b0 <system_ctrl_set_result>
}
   d7d2c:	b003      	add	sp, #12
   d7d2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7d34 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7d34:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7d36:	8843      	ldrh	r3, [r0, #2]
   d7d38:	2b0a      	cmp	r3, #10
   d7d3a:	d008      	beq.n	d7d4e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7d3c:	2b50      	cmp	r3, #80	; 0x50
   d7d3e:	d109      	bne.n	d7d54 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7d40:	4b09      	ldr	r3, [pc, #36]	; (d7d68 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7d42:	681b      	ldr	r3, [r3, #0]
   d7d44:	b13b      	cbz	r3, d7d56 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7d46:	b003      	add	sp, #12
   d7d48:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7d4c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7d4e:	f7ff ffe5 	bl	d7d1c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7d52:	e006      	b.n	d7d62 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7d54:	2300      	movs	r3, #0
   d7d56:	9300      	str	r3, [sp, #0]
   d7d58:	461a      	mov	r2, r3
   d7d5a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7d5e:	f7ff fca7 	bl	d76b0 <system_ctrl_set_result>
        break;
    }
}
   d7d62:	b003      	add	sp, #12
   d7d64:	f85d fb04 	ldr.w	pc, [sp], #4
   d7d68:	2003e40c 	.word	0x2003e40c

000d7d6c <module_user_init_hook>:

void module_user_init_hook()
{
   d7d6c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7d6e:	4c10      	ldr	r4, [pc, #64]	; (d7db0 <module_user_init_hook+0x44>)
   d7d70:	4d10      	ldr	r5, [pc, #64]	; (d7db4 <module_user_init_hook+0x48>)
   d7d72:	6823      	ldr	r3, [r4, #0]
   d7d74:	42ab      	cmp	r3, r5
   d7d76:	4b10      	ldr	r3, [pc, #64]	; (d7db8 <module_user_init_hook+0x4c>)
   d7d78:	bf0c      	ite	eq
   d7d7a:	2201      	moveq	r2, #1
   d7d7c:	2200      	movne	r2, #0
   d7d7e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7d80:	d002      	beq.n	d7d88 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7d82:	f7ff ffbf 	bl	d7d04 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7d86:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7d88:	f7ff fb38 	bl	d73fc <HAL_RNG_GetRandomNumber>
   d7d8c:	4604      	mov	r4, r0
    srand(seed);
   d7d8e:	f001 fa33 	bl	d91f8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7d92:	4b0a      	ldr	r3, [pc, #40]	; (d7dbc <module_user_init_hook+0x50>)
   d7d94:	b113      	cbz	r3, d7d9c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7d96:	4620      	mov	r0, r4
   d7d98:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7d9c:	2100      	movs	r1, #0
   d7d9e:	4807      	ldr	r0, [pc, #28]	; (d7dbc <module_user_init_hook+0x50>)
   d7da0:	f7ff fce8 	bl	d7774 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7da4:	2100      	movs	r1, #0
   d7da6:	4806      	ldr	r0, [pc, #24]	; (d7dc0 <module_user_init_hook+0x54>)
}
   d7da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7dac:	f7ff bc76 	b.w	d769c <system_ctrl_set_app_request_handler>
   d7db0:	2003f400 	.word	0x2003f400
   d7db4:	9a271c1e 	.word	0x9a271c1e
   d7db8:	2003e410 	.word	0x2003e410
   d7dbc:	00000000 	.word	0x00000000
   d7dc0:	000d7d35 	.word	0x000d7d35

000d7dc4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7dc4:	4770      	bx	lr

000d7dc6 <_ZN9IPAddressD0Ev>:
   d7dc6:	b510      	push	{r4, lr}
   d7dc8:	2118      	movs	r1, #24
   d7dca:	4604      	mov	r4, r0
   d7dcc:	f000 fc6a 	bl	d86a4 <_ZdlPvj>
   d7dd0:	4620      	mov	r0, r4
   d7dd2:	bd10      	pop	{r4, pc}

000d7dd4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7dd6:	7d03      	ldrb	r3, [r0, #20]
   d7dd8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7dda:	b08d      	sub	sp, #52	; 0x34
   d7ddc:	460e      	mov	r6, r1
   d7dde:	f100 0704 	add.w	r7, r0, #4
   d7de2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7de6:	d002      	beq.n	d7dee <_ZNK9IPAddress7printToER5Print+0x1a>
   d7de8:	f100 0508 	add.w	r5, r0, #8
   d7dec:	e018      	b.n	d7e20 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7dee:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7df0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7df2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7df6:	232f      	movs	r3, #47	; 0x2f
   d7df8:	462a      	mov	r2, r5
   d7dfa:	200a      	movs	r0, #10
   d7dfc:	f7ff fb56 	bl	d74ac <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7e00:	4628      	mov	r0, r5
   d7e02:	f001 fa6d 	bl	d92e0 <strlen>
   d7e06:	6833      	ldr	r3, [r6, #0]
   d7e08:	4602      	mov	r2, r0
   d7e0a:	68db      	ldr	r3, [r3, #12]
   d7e0c:	4629      	mov	r1, r5
   d7e0e:	4630      	mov	r0, r6
   d7e10:	4798      	blx	r3
   d7e12:	e00f      	b.n	d7e34 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7e14:	b124      	cbz	r4, d7e20 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7e16:	212e      	movs	r1, #46	; 0x2e
   d7e18:	4630      	mov	r0, r6
   d7e1a:	f7ff fea7 	bl	d7b6c <_ZN5Print5printEc>
   d7e1e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7e20:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7e24:	220a      	movs	r2, #10
   d7e26:	4630      	mov	r0, r6
   d7e28:	f7ff febf 	bl	d7baa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7e2c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7e2e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7e30:	d1f0      	bne.n	d7e14 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7e32:	4620      	mov	r0, r4
    }
    return n;
}
   d7e34:	b00d      	add	sp, #52	; 0x34
   d7e36:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7e38 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7e38:	b510      	push	{r4, lr}
   d7e3a:	4b05      	ldr	r3, [pc, #20]	; (d7e50 <_ZN9IPAddressC1Ev+0x18>)
   d7e3c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7e3e:	2211      	movs	r2, #17
   d7e40:	f840 3b04 	str.w	r3, [r0], #4
   d7e44:	2100      	movs	r1, #0
   d7e46:	f001 f9cf 	bl	d91e8 <memset>
{
    clear();
}
   d7e4a:	4620      	mov	r0, r4
   d7e4c:	bd10      	pop	{r4, pc}
   d7e4e:	bf00      	nop
   d7e50:	000d9e4c 	.word	0x000d9e4c

000d7e54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7e54:	4603      	mov	r3, r0
   d7e56:	4a07      	ldr	r2, [pc, #28]	; (d7e74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7e58:	b510      	push	{r4, lr}
   d7e5a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7e5e:	f101 0210 	add.w	r2, r1, #16
   d7e62:	f851 4b04 	ldr.w	r4, [r1], #4
   d7e66:	f843 4b04 	str.w	r4, [r3], #4
   d7e6a:	4291      	cmp	r1, r2
   d7e6c:	d1f9      	bne.n	d7e62 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7e6e:	780a      	ldrb	r2, [r1, #0]
   d7e70:	701a      	strb	r2, [r3, #0]
}
   d7e72:	bd10      	pop	{r4, pc}
   d7e74:	000d9e4c 	.word	0x000d9e4c

000d7e78 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7e78:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7e7a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7e7e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7e82:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7e86:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d7e8a:	2304      	movs	r3, #4
   d7e8c:	6041      	str	r1, [r0, #4]
   d7e8e:	7503      	strb	r3, [r0, #20]
   d7e90:	bd10      	pop	{r4, pc}

000d7e92 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7e92:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7e94:	780d      	ldrb	r5, [r1, #0]
   d7e96:	788b      	ldrb	r3, [r1, #2]
   d7e98:	784a      	ldrb	r2, [r1, #1]
   d7e9a:	78c9      	ldrb	r1, [r1, #3]
   d7e9c:	9100      	str	r1, [sp, #0]
   d7e9e:	4629      	mov	r1, r5
   d7ea0:	f7ff ffea 	bl	d7e78 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7ea4:	b003      	add	sp, #12
   d7ea6:	bd30      	pop	{r4, r5, pc}

000d7ea8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7ea8:	7441      	strb	r1, [r0, #17]
   d7eaa:	4770      	bx	lr

000d7eac <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7eac:	4770      	bx	lr

000d7eae <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7eae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7eb0:	2100      	movs	r1, #0
   d7eb2:	7c00      	ldrb	r0, [r0, #16]
   d7eb4:	f7ff fbba 	bl	d762c <HAL_USB_USART_Receive_Data>
}
   d7eb8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7ebc:	bf28      	it	cs
   d7ebe:	f04f 30ff 	movcs.w	r0, #4294967295
   d7ec2:	bd08      	pop	{r3, pc}

000d7ec4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7ec4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7ec6:	2101      	movs	r1, #1
   d7ec8:	7c00      	ldrb	r0, [r0, #16]
   d7eca:	f7ff fbaf 	bl	d762c <HAL_USB_USART_Receive_Data>
}
   d7ece:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7ed2:	bf28      	it	cs
   d7ed4:	f04f 30ff 	movcs.w	r0, #4294967295
   d7ed8:	bd08      	pop	{r3, pc}

000d7eda <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7eda:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7edc:	7c00      	ldrb	r0, [r0, #16]
   d7ede:	f7ff fb9d 	bl	d761c <HAL_USB_USART_Available_Data_For_Write>
}
   d7ee2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7ee6:	bd08      	pop	{r3, pc}

000d7ee8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7ee8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7eea:	7c00      	ldrb	r0, [r0, #16]
   d7eec:	f7ff fb8e 	bl	d760c <HAL_USB_USART_Available_Data>
}
   d7ef0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7ef4:	bd08      	pop	{r3, pc}

000d7ef6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7ef6:	7c00      	ldrb	r0, [r0, #16]
   d7ef8:	f7ff bba8 	b.w	d764c <HAL_USB_USART_Flush_Data>

000d7efc <_ZN9USBSerialD0Ev>:
   d7efc:	b510      	push	{r4, lr}
   d7efe:	2114      	movs	r1, #20
   d7f00:	4604      	mov	r4, r0
   d7f02:	f000 fbcf 	bl	d86a4 <_ZdlPvj>
   d7f06:	4620      	mov	r0, r4
   d7f08:	bd10      	pop	{r4, pc}

000d7f0a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7f0a:	b538      	push	{r3, r4, r5, lr}
   d7f0c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7f0e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7f10:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7f12:	f7ff fb83 	bl	d761c <HAL_USB_USART_Available_Data_For_Write>
   d7f16:	2800      	cmp	r0, #0
   d7f18:	dc01      	bgt.n	d7f1e <_ZN9USBSerial5writeEh+0x14>
   d7f1a:	7c60      	ldrb	r0, [r4, #17]
   d7f1c:	b128      	cbz	r0, d7f2a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7f1e:	4629      	mov	r1, r5
   d7f20:	7c20      	ldrb	r0, [r4, #16]
   d7f22:	f7ff fb8b 	bl	d763c <HAL_USB_USART_Send_Data>
   d7f26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7f2a:	bd38      	pop	{r3, r4, r5, pc}

000d7f2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7f2c:	b510      	push	{r4, lr}
   d7f2e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7f30:	2300      	movs	r3, #0
   d7f32:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7f38:	60a3      	str	r3, [r4, #8]
   d7f3a:	4b05      	ldr	r3, [pc, #20]	; (d7f50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7f3c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7f3e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7f40:	4608      	mov	r0, r1
{
  _serial = serial;
   d7f42:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7f44:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7f46:	4611      	mov	r1, r2
   d7f48:	f7ff fb50 	bl	d75ec <HAL_USB_USART_Init>
}
   d7f4c:	4620      	mov	r0, r4
   d7f4e:	bd10      	pop	{r4, pc}
   d7f50:	000d9e60 	.word	0x000d9e60

000d7f54 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7f54:	2200      	movs	r2, #0
   d7f56:	7c00      	ldrb	r0, [r0, #16]
   d7f58:	f7ff bb50 	b.w	d75fc <HAL_USB_USART_Begin>

000d7f5c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7f5c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7f5e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7f60:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7f62:	2100      	movs	r1, #0
   d7f64:	f001 f940 	bl	d91e8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7f68:	4620      	mov	r0, r4
   d7f6a:	bd10      	pop	{r4, pc}

000d7f6c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7f6c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7f6e:	4d0e      	ldr	r5, [pc, #56]	; (d7fa8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7f70:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7f72:	a801      	add	r0, sp, #4
   d7f74:	f7ff fff2 	bl	d7f5c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7f78:	6829      	ldr	r1, [r5, #0]
   d7f7a:	f011 0401 	ands.w	r4, r1, #1
   d7f7e:	d110      	bne.n	d7fa2 <_Z16_fetch_usbserialv+0x36>
   d7f80:	4628      	mov	r0, r5
   d7f82:	f7fc f899 	bl	d40b8 <__cxa_guard_acquire>
   d7f86:	b160      	cbz	r0, d7fa2 <_Z16_fetch_usbserialv+0x36>
   d7f88:	aa01      	add	r2, sp, #4
   d7f8a:	4621      	mov	r1, r4
   d7f8c:	4807      	ldr	r0, [pc, #28]	; (d7fac <_Z16_fetch_usbserialv+0x40>)
   d7f8e:	f7ff ffcd 	bl	d7f2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7f92:	4628      	mov	r0, r5
   d7f94:	f7fc f895 	bl	d40c2 <__cxa_guard_release>
   d7f98:	4a05      	ldr	r2, [pc, #20]	; (d7fb0 <_Z16_fetch_usbserialv+0x44>)
   d7f9a:	4906      	ldr	r1, [pc, #24]	; (d7fb4 <_Z16_fetch_usbserialv+0x48>)
   d7f9c:	4803      	ldr	r0, [pc, #12]	; (d7fac <_Z16_fetch_usbserialv+0x40>)
   d7f9e:	f000 fb73 	bl	d8688 <__aeabi_atexit>
	return _usbserial;
}
   d7fa2:	4802      	ldr	r0, [pc, #8]	; (d7fac <_Z16_fetch_usbserialv+0x40>)
   d7fa4:	b007      	add	sp, #28
   d7fa6:	bd30      	pop	{r4, r5, pc}
   d7fa8:	2003e414 	.word	0x2003e414
   d7fac:	2003e418 	.word	0x2003e418
   d7fb0:	2003dd18 	.word	0x2003dd18
   d7fb4:	000d7ead 	.word	0x000d7ead

000d7fb8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7fb8:	4770      	bx	lr

000d7fba <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7fba:	7441      	strb	r1, [r0, #17]
   d7fbc:	4770      	bx	lr

000d7fbe <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7fbe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7fc0:	7c00      	ldrb	r0, [r0, #16]
   d7fc2:	f7ff fab3 	bl	d752c <HAL_USART_Available_Data_For_Write>
}
   d7fc6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7fca:	bd08      	pop	{r3, pc}

000d7fcc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7fcc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7fce:	7c00      	ldrb	r0, [r0, #16]
   d7fd0:	f7ff fa84 	bl	d74dc <HAL_USART_Available_Data>
}
   d7fd4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7fd8:	bd08      	pop	{r3, pc}

000d7fda <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7fda:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7fdc:	7c00      	ldrb	r0, [r0, #16]
   d7fde:	f7ff fa8d 	bl	d74fc <HAL_USART_Peek_Data>
}
   d7fe2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7fe6:	bf28      	it	cs
   d7fe8:	f04f 30ff 	movcs.w	r0, #4294967295
   d7fec:	bd08      	pop	{r3, pc}

000d7fee <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7fee:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7ff0:	7c00      	ldrb	r0, [r0, #16]
   d7ff2:	f7ff fa7b 	bl	d74ec <HAL_USART_Read_Data>
}
   d7ff6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7ffa:	bf28      	it	cs
   d7ffc:	f04f 30ff 	movcs.w	r0, #4294967295
   d8000:	bd08      	pop	{r3, pc}

000d8002 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d8002:	7c00      	ldrb	r0, [r0, #16]
   d8004:	f7ff ba82 	b.w	d750c <HAL_USART_Flush_Data>

000d8008 <_ZN11USARTSerialD0Ev>:
   d8008:	b510      	push	{r4, lr}
   d800a:	2114      	movs	r1, #20
   d800c:	4604      	mov	r4, r0
   d800e:	f000 fb49 	bl	d86a4 <_ZdlPvj>
   d8012:	4620      	mov	r0, r4
   d8014:	bd10      	pop	{r4, pc}

000d8016 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8016:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8018:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d801a:	4604      	mov	r4, r0
   d801c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d801e:	b925      	cbnz	r5, d802a <_ZN11USARTSerial5writeEh+0x14>
   d8020:	7c00      	ldrb	r0, [r0, #16]
   d8022:	f7ff fa83 	bl	d752c <HAL_USART_Available_Data_For_Write>
   d8026:	2800      	cmp	r0, #0
   d8028:	dd05      	ble.n	d8036 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d802a:	4631      	mov	r1, r6
   d802c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d802e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8032:	f7ff ba4b 	b.w	d74cc <HAL_USART_Write_Data>
  }
  return 0;
}
   d8036:	4628      	mov	r0, r5
   d8038:	bd70      	pop	{r4, r5, r6, pc}
	...

000d803c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d803c:	b510      	push	{r4, lr}
   d803e:	4604      	mov	r4, r0
   d8040:	4608      	mov	r0, r1
   d8042:	4611      	mov	r1, r2
   d8044:	2200      	movs	r2, #0
   d8046:	6062      	str	r2, [r4, #4]
   d8048:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d804c:	60a2      	str	r2, [r4, #8]
   d804e:	4a05      	ldr	r2, [pc, #20]	; (d8064 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8050:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d8052:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8054:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d8056:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d8058:	461a      	mov	r2, r3
   d805a:	f7ff fa2f 	bl	d74bc <HAL_USART_Init>
}
   d805e:	4620      	mov	r0, r4
   d8060:	bd10      	pop	{r4, pc}
   d8062:	bf00      	nop
   d8064:	000d9e90 	.word	0x000d9e90

000d8068 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d8068:	2300      	movs	r3, #0
   d806a:	7c00      	ldrb	r0, [r0, #16]
   d806c:	f7ff ba66 	b.w	d753c <HAL_USART_BeginConfig>

000d8070 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d8070:	2200      	movs	r2, #0
   d8072:	f7ff bff9 	b.w	d8068 <_ZN11USARTSerial5beginEmm>

000d8076 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d8076:	7c00      	ldrb	r0, [r0, #16]
   d8078:	f7ff ba50 	b.w	d751c <HAL_USART_Is_Enabled>

000d807c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d807c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d807e:	4d0c      	ldr	r5, [pc, #48]	; (d80b0 <_Z22__fetch_global_Serial1v+0x34>)
   d8080:	6829      	ldr	r1, [r5, #0]
   d8082:	f011 0401 	ands.w	r4, r1, #1
   d8086:	d111      	bne.n	d80ac <_Z22__fetch_global_Serial1v+0x30>
   d8088:	4628      	mov	r0, r5
   d808a:	f7fc f815 	bl	d40b8 <__cxa_guard_acquire>
   d808e:	b168      	cbz	r0, d80ac <_Z22__fetch_global_Serial1v+0x30>
   d8090:	4a08      	ldr	r2, [pc, #32]	; (d80b4 <_Z22__fetch_global_Serial1v+0x38>)
   d8092:	4b09      	ldr	r3, [pc, #36]	; (d80b8 <_Z22__fetch_global_Serial1v+0x3c>)
   d8094:	4809      	ldr	r0, [pc, #36]	; (d80bc <_Z22__fetch_global_Serial1v+0x40>)
   d8096:	4621      	mov	r1, r4
   d8098:	f7ff ffd0 	bl	d803c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d809c:	4628      	mov	r0, r5
   d809e:	f7fc f810 	bl	d40c2 <__cxa_guard_release>
   d80a2:	4a07      	ldr	r2, [pc, #28]	; (d80c0 <_Z22__fetch_global_Serial1v+0x44>)
   d80a4:	4907      	ldr	r1, [pc, #28]	; (d80c4 <_Z22__fetch_global_Serial1v+0x48>)
   d80a6:	4805      	ldr	r0, [pc, #20]	; (d80bc <_Z22__fetch_global_Serial1v+0x40>)
   d80a8:	f000 faee 	bl	d8688 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d80ac:	4803      	ldr	r0, [pc, #12]	; (d80bc <_Z22__fetch_global_Serial1v+0x40>)
   d80ae:	bd38      	pop	{r3, r4, r5, pc}
   d80b0:	2003e4c4 	.word	0x2003e4c4
   d80b4:	2003e4c8 	.word	0x2003e4c8
   d80b8:	2003e440 	.word	0x2003e440
   d80bc:	2003e42c 	.word	0x2003e42c
   d80c0:	2003dd18 	.word	0x2003dd18
   d80c4:	000d7fb9 	.word	0x000d7fb9

000d80c8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d80c8:	4770      	bx	lr

000d80ca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d80ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d80cc:	4606      	mov	r6, r0
   d80ce:	4615      	mov	r5, r2
   d80d0:	460c      	mov	r4, r1
   d80d2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d80d4:	42bc      	cmp	r4, r7
   d80d6:	d006      	beq.n	d80e6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d80d8:	6833      	ldr	r3, [r6, #0]
   d80da:	f814 1b01 	ldrb.w	r1, [r4], #1
   d80de:	689b      	ldr	r3, [r3, #8]
   d80e0:	4630      	mov	r0, r6
   d80e2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d80e4:	e7f6      	b.n	d80d4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d80e6:	4628      	mov	r0, r5
   d80e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d80ea <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d80ea:	2200      	movs	r2, #0
   d80ec:	7c00      	ldrb	r0, [r0, #16]
   d80ee:	f7ff ba45 	b.w	d757c <HAL_I2C_Write_Data>

000d80f2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d80f2:	2100      	movs	r1, #0
   d80f4:	7c00      	ldrb	r0, [r0, #16]
   d80f6:	f7ff ba49 	b.w	d758c <HAL_I2C_Available_Data>

000d80fa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d80fa:	2100      	movs	r1, #0
   d80fc:	7c00      	ldrb	r0, [r0, #16]
   d80fe:	f7ff ba4d 	b.w	d759c <HAL_I2C_Read_Data>

000d8102 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d8102:	2100      	movs	r1, #0
   d8104:	7c00      	ldrb	r0, [r0, #16]
   d8106:	f7ff ba51 	b.w	d75ac <HAL_I2C_Peek_Data>

000d810a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d810a:	2100      	movs	r1, #0
   d810c:	7c00      	ldrb	r0, [r0, #16]
   d810e:	f7ff ba55 	b.w	d75bc <HAL_I2C_Flush_Data>

000d8112 <_ZN7TwoWireD0Ev>:
   d8112:	b510      	push	{r4, lr}
   d8114:	2114      	movs	r1, #20
   d8116:	4604      	mov	r4, r0
   d8118:	f000 fac4 	bl	d86a4 <_ZdlPvj>
   d811c:	4620      	mov	r0, r4
   d811e:	bd10      	pop	{r4, pc}

000d8120 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8120:	b510      	push	{r4, lr}
   d8122:	4604      	mov	r4, r0
   d8124:	2300      	movs	r3, #0
   d8126:	6063      	str	r3, [r4, #4]
   d8128:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d812c:	60a3      	str	r3, [r4, #8]
   d812e:	4b04      	ldr	r3, [pc, #16]	; (d8140 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d8130:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8132:	4608      	mov	r0, r1
   d8134:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d8136:	4611      	mov	r1, r2
   d8138:	f7ff fa50 	bl	d75dc <HAL_I2C_Init>
}
   d813c:	4620      	mov	r0, r4
   d813e:	bd10      	pop	{r4, pc}
   d8140:	000d9ec0 	.word	0x000d9ec0

000d8144 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8144:	2300      	movs	r3, #0
   d8146:	461a      	mov	r2, r3
   d8148:	4619      	mov	r1, r3
   d814a:	7c00      	ldrb	r0, [r0, #16]
   d814c:	f7ff b9fe 	b.w	d754c <HAL_I2C_Begin>

000d8150 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d8150:	2200      	movs	r2, #0
   d8152:	7c00      	ldrb	r0, [r0, #16]
   d8154:	f7ff ba02 	b.w	d755c <HAL_I2C_Begin_Transmission>

000d8158 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d8158:	b2c9      	uxtb	r1, r1
   d815a:	f7ff bff9 	b.w	d8150 <_ZN7TwoWire17beginTransmissionEh>

000d815e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d815e:	2200      	movs	r2, #0
   d8160:	7c00      	ldrb	r0, [r0, #16]
   d8162:	f7ff ba03 	b.w	d756c <HAL_I2C_End_Transmission>

000d8166 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d8166:	2101      	movs	r1, #1
   d8168:	f7ff bff9 	b.w	d815e <_ZN7TwoWire15endTransmissionEh>

000d816c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d816c:	2100      	movs	r1, #0
   d816e:	7c00      	ldrb	r0, [r0, #16]
   d8170:	f7ff ba2c 	b.w	d75cc <HAL_I2C_Is_Enabled>

000d8174 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d8174:	b510      	push	{r4, lr}
  if (0 == max) {
   d8176:	4604      	mov	r4, r0
   d8178:	b130      	cbz	r0, d8188 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d817a:	f001 f865 	bl	d9248 <rand>
   d817e:	fb90 f3f4 	sdiv	r3, r0, r4
   d8182:	fb03 0014 	mls	r0, r3, r4, r0
   d8186:	bd10      	pop	{r4, pc}
}
   d8188:	bd10      	pop	{r4, pc}

000d818a <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d818a:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d818c:	b510      	push	{r4, lr}
   d818e:	4604      	mov	r4, r0
  if (min >= max) {
   d8190:	da04      	bge.n	d819c <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d8192:	1a08      	subs	r0, r1, r0
   d8194:	f7ff ffee 	bl	d8174 <_Z6randomi>
   d8198:	4420      	add	r0, r4
   d819a:	bd10      	pop	{r4, pc}
}
   d819c:	bd10      	pop	{r4, pc}

000d819e <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d819e:	2200      	movs	r2, #0
   d81a0:	4611      	mov	r1, r2
   d81a2:	6840      	ldr	r0, [r0, #4]
   d81a4:	f7ff bac6 	b.w	d7734 <network_listening>

000d81a8 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d81a8:	2200      	movs	r2, #0
   d81aa:	4611      	mov	r1, r2
   d81ac:	6840      	ldr	r0, [r0, #4]
   d81ae:	f7ff bad1 	b.w	d7754 <network_get_listen_timeout>

000d81b2 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d81b2:	2200      	movs	r2, #0
   d81b4:	6840      	ldr	r0, [r0, #4]
   d81b6:	f7ff bac5 	b.w	d7744 <network_set_listen_timeout>

000d81ba <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d81ba:	2200      	movs	r2, #0
   d81bc:	f081 0101 	eor.w	r1, r1, #1
   d81c0:	6840      	ldr	r0, [r0, #4]
   d81c2:	f7ff baaf 	b.w	d7724 <network_listen>

000d81c6 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d81c6:	2300      	movs	r3, #0
   d81c8:	461a      	mov	r2, r3
   d81ca:	2101      	movs	r1, #1
   d81cc:	6840      	ldr	r0, [r0, #4]
   d81ce:	f7ff baa1 	b.w	d7714 <network_off>

000d81d2 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d81d2:	2300      	movs	r3, #0
   d81d4:	461a      	mov	r2, r3
   d81d6:	4619      	mov	r1, r3
   d81d8:	6840      	ldr	r0, [r0, #4]
   d81da:	f7ff ba93 	b.w	d7704 <network_on>

000d81de <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d81de:	2200      	movs	r2, #0
   d81e0:	4611      	mov	r1, r2
   d81e2:	6840      	ldr	r0, [r0, #4]
   d81e4:	f7ff ba86 	b.w	d76f4 <network_ready>

000d81e8 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d81e8:	2200      	movs	r2, #0
   d81ea:	4611      	mov	r1, r2
   d81ec:	6840      	ldr	r0, [r0, #4]
   d81ee:	f7ff ba71 	b.w	d76d4 <network_connecting>

000d81f2 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d81f2:	2200      	movs	r2, #0
   d81f4:	2102      	movs	r1, #2
   d81f6:	6840      	ldr	r0, [r0, #4]
   d81f8:	f7ff ba74 	b.w	d76e4 <network_disconnect>

000d81fc <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d81fc:	2300      	movs	r3, #0
   d81fe:	461a      	mov	r2, r3
   d8200:	6840      	ldr	r0, [r0, #4]
   d8202:	f7ff ba5f 	b.w	d76c4 <network_connect>

000d8206 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d8206:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8208:	4605      	mov	r5, r0
   d820a:	b188      	cbz	r0, d8230 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d820c:	6804      	ldr	r4, [r0, #0]
   d820e:	b14c      	cbz	r4, d8224 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d8210:	68a3      	ldr	r3, [r4, #8]
   d8212:	b11b      	cbz	r3, d821c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8214:	2203      	movs	r2, #3
   d8216:	4621      	mov	r1, r4
   d8218:	4620      	mov	r0, r4
   d821a:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d821c:	2110      	movs	r1, #16
   d821e:	4620      	mov	r0, r4
   d8220:	f000 fa40 	bl	d86a4 <_ZdlPvj>
   d8224:	4628      	mov	r0, r5
   d8226:	2114      	movs	r1, #20
      }
   d8228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d822c:	f000 ba3a 	b.w	d86a4 <_ZdlPvj>
   d8230:	bd38      	pop	{r3, r4, r5, pc}

000d8232 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d8232:	b110      	cbz	r0, d823a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d8234:	6803      	ldr	r3, [r0, #0]
   d8236:	685b      	ldr	r3, [r3, #4]
   d8238:	4718      	bx	r3
   d823a:	4770      	bx	lr

000d823c <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d823c:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d823e:	6803      	ldr	r3, [r0, #0]
   d8240:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d8242:	b1bb      	cbz	r3, d8274 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d8244:	6858      	ldr	r0, [r3, #4]
   d8246:	f7ff f8f9 	bl	d743c <os_thread_is_current>
   d824a:	b978      	cbnz	r0, d826c <_ZN6ThreadD1Ev+0x30>
   d824c:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d824e:	7c5a      	ldrb	r2, [r3, #17]
   d8250:	b912      	cbnz	r2, d8258 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d8252:	6858      	ldr	r0, [r3, #4]
   d8254:	f7ff f902 	bl	d745c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d8258:	6823      	ldr	r3, [r4, #0]
   d825a:	6858      	ldr	r0, [r3, #4]
   d825c:	f7ff f906 	bl	d746c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8260:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8262:	2300      	movs	r3, #0
   d8264:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d8266:	b128      	cbz	r0, d8274 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d8268:	f7ff ffcd 	bl	d8206 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d826c:	6820      	ldr	r0, [r4, #0]
   d826e:	b108      	cbz	r0, d8274 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d8270:	f7ff ffc9 	bl	d8206 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d8274:	4620      	mov	r0, r4
   d8276:	bd10      	pop	{r4, pc}

000d8278 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d8278:	b538      	push	{r3, r4, r5, lr}
   d827a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d827c:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d8280:	b108      	cbz	r0, d8286 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d8282:	f7fb ff0c 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8286:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d828a:	b108      	cbz	r0, d8290 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d828c:	f7ff f906 	bl	d749c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8290:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d8294:	b135      	cbz	r5, d82a4 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8296:	4628      	mov	r0, r5
   d8298:	f7ff ffd0 	bl	d823c <_ZN6ThreadD1Ev>
   d829c:	2104      	movs	r1, #4
   d829e:	4628      	mov	r0, r5
   d82a0:	f000 fa00 	bl	d86a4 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d82a4:	6820      	ldr	r0, [r4, #0]
   d82a6:	b108      	cbz	r0, d82ac <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d82a8:	f7ff ffc3 	bl	d8232 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d82ac:	4620      	mov	r0, r4
   d82ae:	bd38      	pop	{r3, r4, r5, pc}

000d82b0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d82b0:	b510      	push	{r4, lr}
   d82b2:	4b04      	ldr	r3, [pc, #16]	; (d82c4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d82b4:	4604      	mov	r4, r0
   d82b6:	f840 3b08 	str.w	r3, [r0], #8
   d82ba:	f7ff ffdd 	bl	d8278 <_ZN5spark11MeshPublishD1Ev>
   d82be:	4620      	mov	r0, r4
   d82c0:	bd10      	pop	{r4, pc}
   d82c2:	bf00      	nop
   d82c4:	000d9ee8 	.word	0x000d9ee8

000d82c8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d82c8:	b538      	push	{r3, r4, r5, lr}
   d82ca:	4c0e      	ldr	r4, [pc, #56]	; (d8304 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d82cc:	4b0e      	ldr	r3, [pc, #56]	; (d8308 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d82ce:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d82d0:	2500      	movs	r5, #0
   d82d2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d82d4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d82d8:	6063      	str	r3, [r4, #4]
   d82da:	60a5      	str	r5, [r4, #8]
   d82dc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d82e0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d82e4:	f7ff f8d2 	bl	d748c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d82e8:	4b08      	ldr	r3, [pc, #32]	; (d830c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d82ea:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d82ee:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d82f2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d82f4:	4620      	mov	r0, r4
   d82f6:	4a06      	ldr	r2, [pc, #24]	; (d8310 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d82f8:	4906      	ldr	r1, [pc, #24]	; (d8314 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d82fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d82fe:	f000 b9c3 	b.w	d8688 <__aeabi_atexit>
   d8302:	bf00      	nop
   d8304:	2003e54c 	.word	0x2003e54c
   d8308:	000d9f50 	.word	0x000d9f50
   d830c:	000d9ee8 	.word	0x000d9ee8
   d8310:	2003dd18 	.word	0x2003dd18
   d8314:	000d82b1 	.word	0x000d82b1

000d8318 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8318:	2200      	movs	r2, #0
   d831a:	4611      	mov	r1, r2
   d831c:	6840      	ldr	r0, [r0, #4]
   d831e:	f7ff b9e9 	b.w	d76f4 <network_ready>

000d8322 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8322:	2200      	movs	r2, #0
   d8324:	4611      	mov	r1, r2
   d8326:	6840      	ldr	r0, [r0, #4]
   d8328:	f7ff ba04 	b.w	d7734 <network_listening>

000d832c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d832c:	2200      	movs	r2, #0
   d832e:	4611      	mov	r1, r2
   d8330:	6840      	ldr	r0, [r0, #4]
   d8332:	f7ff ba0f 	b.w	d7754 <network_get_listen_timeout>

000d8336 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8336:	2200      	movs	r2, #0
   d8338:	6840      	ldr	r0, [r0, #4]
   d833a:	f7ff ba03 	b.w	d7744 <network_set_listen_timeout>

000d833e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d833e:	2200      	movs	r2, #0
   d8340:	f081 0101 	eor.w	r1, r1, #1
   d8344:	6840      	ldr	r0, [r0, #4]
   d8346:	f7ff b9ed 	b.w	d7724 <network_listen>

000d834a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d834a:	2300      	movs	r3, #0
   d834c:	461a      	mov	r2, r3
   d834e:	4619      	mov	r1, r3
   d8350:	6840      	ldr	r0, [r0, #4]
   d8352:	f7ff b9df 	b.w	d7714 <network_off>

000d8356 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d8356:	2300      	movs	r3, #0
   d8358:	461a      	mov	r2, r3
   d835a:	4619      	mov	r1, r3
   d835c:	6840      	ldr	r0, [r0, #4]
   d835e:	f7ff b9d1 	b.w	d7704 <network_on>

000d8362 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8362:	2200      	movs	r2, #0
   d8364:	4611      	mov	r1, r2
   d8366:	6840      	ldr	r0, [r0, #4]
   d8368:	f7ff b9b4 	b.w	d76d4 <network_connecting>

000d836c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d836c:	2200      	movs	r2, #0
   d836e:	2102      	movs	r1, #2
   d8370:	6840      	ldr	r0, [r0, #4]
   d8372:	f7ff b9b7 	b.w	d76e4 <network_disconnect>

000d8376 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8376:	2300      	movs	r3, #0
   d8378:	461a      	mov	r2, r3
   d837a:	6840      	ldr	r0, [r0, #4]
   d837c:	f7ff b9a2 	b.w	d76c4 <network_connect>

000d8380 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8380:	4b02      	ldr	r3, [pc, #8]	; (d838c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8382:	2204      	movs	r2, #4
   d8384:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8386:	4a02      	ldr	r2, [pc, #8]	; (d8390 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8388:	601a      	str	r2, [r3, #0]
   d838a:	4770      	bx	lr
   d838c:	2003e720 	.word	0x2003e720
   d8390:	000d9f1c 	.word	0x000d9f1c

000d8394 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8394:	2300      	movs	r3, #0
   d8396:	461a      	mov	r2, r3
   d8398:	6840      	ldr	r0, [r0, #4]
   d839a:	f7ff b993 	b.w	d76c4 <network_connect>

000d839e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d839e:	2200      	movs	r2, #0
   d83a0:	2102      	movs	r1, #2
   d83a2:	6840      	ldr	r0, [r0, #4]
   d83a4:	f7ff b99e 	b.w	d76e4 <network_disconnect>

000d83a8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d83a8:	2200      	movs	r2, #0
   d83aa:	4611      	mov	r1, r2
   d83ac:	6840      	ldr	r0, [r0, #4]
   d83ae:	f7ff b991 	b.w	d76d4 <network_connecting>

000d83b2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d83b2:	2200      	movs	r2, #0
   d83b4:	4611      	mov	r1, r2
   d83b6:	6840      	ldr	r0, [r0, #4]
   d83b8:	f7ff b99c 	b.w	d76f4 <network_ready>

000d83bc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d83bc:	2300      	movs	r3, #0
   d83be:	461a      	mov	r2, r3
   d83c0:	4619      	mov	r1, r3
   d83c2:	6840      	ldr	r0, [r0, #4]
   d83c4:	f7ff b99e 	b.w	d7704 <network_on>

000d83c8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d83c8:	2300      	movs	r3, #0
   d83ca:	461a      	mov	r2, r3
   d83cc:	4619      	mov	r1, r3
   d83ce:	6840      	ldr	r0, [r0, #4]
   d83d0:	f7ff b9a0 	b.w	d7714 <network_off>

000d83d4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d83d4:	2200      	movs	r2, #0
   d83d6:	f081 0101 	eor.w	r1, r1, #1
   d83da:	6840      	ldr	r0, [r0, #4]
   d83dc:	f7ff b9a2 	b.w	d7724 <network_listen>

000d83e0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d83e0:	2200      	movs	r2, #0
   d83e2:	6840      	ldr	r0, [r0, #4]
   d83e4:	f7ff b9ae 	b.w	d7744 <network_set_listen_timeout>

000d83e8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d83e8:	2200      	movs	r2, #0
   d83ea:	4611      	mov	r1, r2
   d83ec:	6840      	ldr	r0, [r0, #4]
   d83ee:	f7ff b9b1 	b.w	d7754 <network_get_listen_timeout>

000d83f2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d83f2:	2200      	movs	r2, #0
   d83f4:	4611      	mov	r1, r2
   d83f6:	6840      	ldr	r0, [r0, #4]
   d83f8:	f7ff b99c 	b.w	d7734 <network_listening>

000d83fc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d83fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8400:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d8402:	b095      	sub	sp, #84	; 0x54
   d8404:	4616      	mov	r6, r2
   d8406:	460d      	mov	r5, r1
   d8408:	4607      	mov	r7, r0
    IPAddress addr;
   d840a:	f7ff fd15 	bl	d7e38 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d840e:	4621      	mov	r1, r4
   d8410:	2220      	movs	r2, #32
   d8412:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8414:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8416:	f000 fee7 	bl	d91e8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d841a:	2340      	movs	r3, #64	; 0x40
   d841c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d841e:	4621      	mov	r1, r4
   d8420:	466b      	mov	r3, sp
   d8422:	aa0c      	add	r2, sp, #48	; 0x30
   d8424:	4630      	mov	r0, r6
   d8426:	f7fe ff51 	bl	d72cc <netdb_getaddrinfo>
    if (!r) {
   d842a:	4604      	mov	r4, r0
   d842c:	2800      	cmp	r0, #0
   d842e:	d144      	bne.n	d84ba <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8430:	4602      	mov	r2, r0
   d8432:	2101      	movs	r1, #1
   d8434:	6868      	ldr	r0, [r5, #4]
   d8436:	f7ff f95d 	bl	d76f4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d843a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d843c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d843e:	4622      	mov	r2, r4
   d8440:	6868      	ldr	r0, [r5, #4]
   d8442:	f7ff f957 	bl	d76f4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8446:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8448:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d844a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d844c:	2e00      	cmp	r6, #0
   d844e:	d034      	beq.n	d84ba <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d8450:	2900      	cmp	r1, #0
   d8452:	d132      	bne.n	d84ba <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8454:	6873      	ldr	r3, [r6, #4]
   d8456:	2b02      	cmp	r3, #2
   d8458:	d002      	beq.n	d8460 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d845a:	2b0a      	cmp	r3, #10
   d845c:	d009      	beq.n	d8472 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d845e:	e02a      	b.n	d84b6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d8460:	f1b8 0f00 	cmp.w	r8, #0
   d8464:	d027      	beq.n	d84b6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8466:	6971      	ldr	r1, [r6, #20]
   d8468:	4638      	mov	r0, r7
   d846a:	3104      	adds	r1, #4
   d846c:	f7ff fd11 	bl	d7e92 <_ZN9IPAddressaSEPKh>
   d8470:	e020      	b.n	d84b4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8472:	f1b9 0f00 	cmp.w	r9, #0
   d8476:	d01e      	beq.n	d84b6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8478:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d847a:	2211      	movs	r2, #17
   d847c:	a801      	add	r0, sp, #4
   d847e:	f000 feb3 	bl	d91e8 <memset>
                    a.v = 6;
   d8482:	2306      	movs	r3, #6
   d8484:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8488:	ad01      	add	r5, sp, #4
   d848a:	f104 0308 	add.w	r3, r4, #8
   d848e:	3418      	adds	r4, #24
   d8490:	6818      	ldr	r0, [r3, #0]
   d8492:	6859      	ldr	r1, [r3, #4]
   d8494:	462a      	mov	r2, r5
   d8496:	c203      	stmia	r2!, {r0, r1}
   d8498:	3308      	adds	r3, #8
   d849a:	42a3      	cmp	r3, r4
   d849c:	4615      	mov	r5, r2
   d849e:	d1f7      	bne.n	d8490 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d84a0:	a901      	add	r1, sp, #4
   d84a2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d84a4:	ad07      	add	r5, sp, #28
   d84a6:	f7ff fcd5 	bl	d7e54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d84aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d84ac:	1d3c      	adds	r4, r7, #4
   d84ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d84b0:	682b      	ldr	r3, [r5, #0]
   d84b2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d84b4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d84b6:	69f6      	ldr	r6, [r6, #28]
   d84b8:	e7c8      	b.n	d844c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d84ba:	9800      	ldr	r0, [sp, #0]
   d84bc:	f7fe fefe 	bl	d72bc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d84c0:	4638      	mov	r0, r7
   d84c2:	b015      	add	sp, #84	; 0x54
   d84c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d84c8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d84c8:	4b02      	ldr	r3, [pc, #8]	; (d84d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d84ca:	4a03      	ldr	r2, [pc, #12]	; (d84d8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d84cc:	601a      	str	r2, [r3, #0]
   d84ce:	2200      	movs	r2, #0
   d84d0:	605a      	str	r2, [r3, #4]
   d84d2:	4770      	bx	lr
   d84d4:	2003e728 	.word	0x2003e728
   d84d8:	000d9f50 	.word	0x000d9f50

000d84dc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d84dc:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d84de:	4e18      	ldr	r6, [pc, #96]	; (d8540 <pinAvailable+0x64>)
   d84e0:	6831      	ldr	r1, [r6, #0]
   d84e2:	f011 0501 	ands.w	r5, r1, #1
   d84e6:	4604      	mov	r4, r0
   d84e8:	d10a      	bne.n	d8500 <pinAvailable+0x24>
   d84ea:	4630      	mov	r0, r6
   d84ec:	f7fb fde4 	bl	d40b8 <__cxa_guard_acquire>
   d84f0:	b130      	cbz	r0, d8500 <pinAvailable+0x24>
   d84f2:	4629      	mov	r1, r5
   d84f4:	4813      	ldr	r0, [pc, #76]	; (d8544 <pinAvailable+0x68>)
   d84f6:	f7ff f9a1 	bl	d783c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d84fa:	4630      	mov	r0, r6
   d84fc:	f7fb fde1 	bl	d40c2 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d8500:	4810      	ldr	r0, [pc, #64]	; (d8544 <pinAvailable+0x68>)
   d8502:	f7ff fad0 	bl	d7aa6 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8506:	b128      	cbz	r0, d8514 <pinAvailable+0x38>
   d8508:	f1a4 030b 	sub.w	r3, r4, #11
   d850c:	2b02      	cmp	r3, #2
   d850e:	d801      	bhi.n	d8514 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d8510:	2000      	movs	r0, #0
   d8512:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8514:	f000 f892 	bl	d863c <_Z19__fetch_global_Wirev>
   d8518:	f7ff fe28 	bl	d816c <_ZN7TwoWire9isEnabledEv>
   d851c:	b108      	cbz	r0, d8522 <pinAvailable+0x46>
   d851e:	2c01      	cmp	r4, #1
   d8520:	d9f6      	bls.n	d8510 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8522:	f7ff fdab 	bl	d807c <_Z22__fetch_global_Serial1v>
   d8526:	f7ff fda6 	bl	d8076 <_ZN11USARTSerial9isEnabledEv>
   d852a:	b118      	cbz	r0, d8534 <pinAvailable+0x58>
   d852c:	f1a4 0309 	sub.w	r3, r4, #9
   d8530:	2b01      	cmp	r3, #1
   d8532:	d9ed      	bls.n	d8510 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8534:	2c23      	cmp	r4, #35	; 0x23
   d8536:	bf8c      	ite	hi
   d8538:	2000      	movhi	r0, #0
   d853a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d853c:	bd70      	pop	{r4, r5, r6, pc}
   d853e:	bf00      	nop
   d8540:	2003dd1c 	.word	0x2003dd1c
   d8544:	2003dd20 	.word	0x2003dd20

000d8548 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8548:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d854a:	b538      	push	{r3, r4, r5, lr}
   d854c:	4604      	mov	r4, r0
   d854e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8550:	d80a      	bhi.n	d8568 <pinMode+0x20>
   d8552:	29ff      	cmp	r1, #255	; 0xff
   d8554:	d008      	beq.n	d8568 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8556:	f7ff ffc1 	bl	d84dc <pinAvailable>
   d855a:	b128      	cbz	r0, d8568 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d855c:	4629      	mov	r1, r5
   d855e:	4620      	mov	r0, r4
}
   d8560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8564:	f7fe bec2 	b.w	d72ec <HAL_Pin_Mode>
   d8568:	bd38      	pop	{r3, r4, r5, pc}

000d856a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d856a:	b538      	push	{r3, r4, r5, lr}
   d856c:	4604      	mov	r4, r0
   d856e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8570:	f7fe fec4 	bl	d72fc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8574:	28ff      	cmp	r0, #255	; 0xff
   d8576:	d010      	beq.n	d859a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8578:	2806      	cmp	r0, #6
   d857a:	d804      	bhi.n	d8586 <digitalWrite+0x1c>
   d857c:	234d      	movs	r3, #77	; 0x4d
   d857e:	fa23 f000 	lsr.w	r0, r3, r0
   d8582:	07c3      	lsls	r3, r0, #31
   d8584:	d409      	bmi.n	d859a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8586:	4620      	mov	r0, r4
   d8588:	f7ff ffa8 	bl	d84dc <pinAvailable>
   d858c:	b128      	cbz	r0, d859a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d858e:	4629      	mov	r1, r5
   d8590:	4620      	mov	r0, r4
}
   d8592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8596:	f7fe beb9 	b.w	d730c <HAL_GPIO_Write>
   d859a:	bd38      	pop	{r3, r4, r5, pc}

000d859c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d859c:	b510      	push	{r4, lr}
   d859e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d85a0:	f7fe feac 	bl	d72fc <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d85a4:	3804      	subs	r0, #4
   d85a6:	b2c0      	uxtb	r0, r0
   d85a8:	2801      	cmp	r0, #1
   d85aa:	d908      	bls.n	d85be <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d85ac:	4620      	mov	r0, r4
   d85ae:	f7ff ff95 	bl	d84dc <pinAvailable>
   d85b2:	b120      	cbz	r0, d85be <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d85b4:	4620      	mov	r0, r4
}
   d85b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d85ba:	f7fe beaf 	b.w	d731c <HAL_GPIO_Read>
}
   d85be:	2000      	movs	r0, #0
   d85c0:	bd10      	pop	{r4, pc}

000d85c2 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d85c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d85c6:	4690      	mov	r8, r2
   d85c8:	461e      	mov	r6, r3
   d85ca:	2407      	movs	r4, #7
   d85cc:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d85ce:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d85d0:	f1b8 0f00 	cmp.w	r8, #0
   d85d4:	d104      	bne.n	d85e0 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d85d6:	f1c4 0107 	rsb	r1, r4, #7
   d85da:	fa46 f101 	asr.w	r1, r6, r1
   d85de:	e001      	b.n	d85e4 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d85e0:	fa46 f104 	asr.w	r1, r6, r4
   d85e4:	f001 0101 	and.w	r1, r1, #1
   d85e8:	4638      	mov	r0, r7
   d85ea:	f7ff ffbe 	bl	d856a <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d85ee:	2101      	movs	r1, #1
   d85f0:	4628      	mov	r0, r5
   d85f2:	f7ff ffba 	bl	d856a <digitalWrite>
    digitalWrite(clockPin, LOW);
   d85f6:	2100      	movs	r1, #0
   d85f8:	4628      	mov	r0, r5
   d85fa:	f7ff ffb6 	bl	d856a <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d85fe:	f114 34ff 	adds.w	r4, r4, #4294967295
   d8602:	d2e5      	bcs.n	d85d0 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d8604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8608 <_Z17acquireWireBufferv>:
   d8608:	b570      	push	{r4, r5, r6, lr}
   d860a:	4604      	mov	r4, r0
   d860c:	2514      	movs	r5, #20
   d860e:	462a      	mov	r2, r5
   d8610:	4e09      	ldr	r6, [pc, #36]	; (d8638 <_Z17acquireWireBufferv+0x30>)
   d8612:	2100      	movs	r1, #0
   d8614:	f000 fde8 	bl	d91e8 <memset>
   d8618:	8025      	strh	r5, [r4, #0]
   d861a:	2520      	movs	r5, #32
   d861c:	4631      	mov	r1, r6
   d861e:	60a5      	str	r5, [r4, #8]
   d8620:	6125      	str	r5, [r4, #16]
   d8622:	4628      	mov	r0, r5
   d8624:	f000 f840 	bl	d86a8 <_ZnajRKSt9nothrow_t>
   d8628:	4631      	mov	r1, r6
   d862a:	6060      	str	r0, [r4, #4]
   d862c:	4628      	mov	r0, r5
   d862e:	f000 f83b 	bl	d86a8 <_ZnajRKSt9nothrow_t>
   d8632:	60e0      	str	r0, [r4, #12]
   d8634:	4620      	mov	r0, r4
   d8636:	bd70      	pop	{r4, r5, r6, pc}
   d8638:	000d9f7c 	.word	0x000d9f7c

000d863c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d863c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d863e:	4d0e      	ldr	r5, [pc, #56]	; (d8678 <_Z19__fetch_global_Wirev+0x3c>)
   d8640:	6829      	ldr	r1, [r5, #0]
   d8642:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8646:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8648:	d113      	bne.n	d8672 <_Z19__fetch_global_Wirev+0x36>
   d864a:	4628      	mov	r0, r5
   d864c:	f7fb fd34 	bl	d40b8 <__cxa_guard_acquire>
   d8650:	b178      	cbz	r0, d8672 <_Z19__fetch_global_Wirev+0x36>
   d8652:	a801      	add	r0, sp, #4
   d8654:	f7ff ffd8 	bl	d8608 <_Z17acquireWireBufferv>
   d8658:	aa01      	add	r2, sp, #4
   d865a:	4621      	mov	r1, r4
   d865c:	4807      	ldr	r0, [pc, #28]	; (d867c <_Z19__fetch_global_Wirev+0x40>)
   d865e:	f7ff fd5f 	bl	d8120 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8662:	4628      	mov	r0, r5
   d8664:	f7fb fd2d 	bl	d40c2 <__cxa_guard_release>
   d8668:	4a05      	ldr	r2, [pc, #20]	; (d8680 <_Z19__fetch_global_Wirev+0x44>)
   d866a:	4906      	ldr	r1, [pc, #24]	; (d8684 <_Z19__fetch_global_Wirev+0x48>)
   d866c:	4803      	ldr	r0, [pc, #12]	; (d867c <_Z19__fetch_global_Wirev+0x40>)
   d866e:	f000 f80b 	bl	d8688 <__aeabi_atexit>
	return wire;
}
   d8672:	4802      	ldr	r0, [pc, #8]	; (d867c <_Z19__fetch_global_Wirev+0x40>)
   d8674:	b007      	add	sp, #28
   d8676:	bd30      	pop	{r4, r5, pc}
   d8678:	2003e734 	.word	0x2003e734
   d867c:	2003e738 	.word	0x2003e738
   d8680:	2003dd18 	.word	0x2003dd18
   d8684:	000d80c9 	.word	0x000d80c9

000d8688 <__aeabi_atexit>:
   d8688:	460b      	mov	r3, r1
   d868a:	4601      	mov	r1, r0
   d868c:	4618      	mov	r0, r3
   d868e:	f000 bd83 	b.w	d9198 <__cxa_atexit>
	...

000d8694 <_ZSt15get_new_handlerv>:
   d8694:	4b02      	ldr	r3, [pc, #8]	; (d86a0 <_ZSt15get_new_handlerv+0xc>)
   d8696:	6818      	ldr	r0, [r3, #0]
   d8698:	f3bf 8f5f 	dmb	sy
   d869c:	4770      	bx	lr
   d869e:	bf00      	nop
   d86a0:	2003e74c 	.word	0x2003e74c

000d86a4 <_ZdlPvj>:
   d86a4:	f7fb bcf9 	b.w	d409a <_ZdlPv>

000d86a8 <_ZnajRKSt9nothrow_t>:
   d86a8:	f000 b800 	b.w	d86ac <_ZnwjRKSt9nothrow_t>

000d86ac <_ZnwjRKSt9nothrow_t>:
   d86ac:	b510      	push	{r4, lr}
   d86ae:	2800      	cmp	r0, #0
   d86b0:	bf14      	ite	ne
   d86b2:	4604      	movne	r4, r0
   d86b4:	2401      	moveq	r4, #1
   d86b6:	4620      	mov	r0, r4
   d86b8:	f7ff f864 	bl	d7784 <malloc>
   d86bc:	b920      	cbnz	r0, d86c8 <_ZnwjRKSt9nothrow_t+0x1c>
   d86be:	f7ff ffe9 	bl	d8694 <_ZSt15get_new_handlerv>
   d86c2:	b108      	cbz	r0, d86c8 <_ZnwjRKSt9nothrow_t+0x1c>
   d86c4:	4780      	blx	r0
   d86c6:	e7f6      	b.n	d86b6 <_ZnwjRKSt9nothrow_t+0xa>
   d86c8:	bd10      	pop	{r4, pc}
	...

000d86cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d86cc:	4b18      	ldr	r3, [pc, #96]	; (d8730 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d86ce:	681a      	ldr	r2, [r3, #0]
   d86d0:	07d1      	lsls	r1, r2, #31
   d86d2:	bf5c      	itt	pl
   d86d4:	2201      	movpl	r2, #1
   d86d6:	601a      	strpl	r2, [r3, #0]
   d86d8:	4b16      	ldr	r3, [pc, #88]	; (d8734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d86da:	681a      	ldr	r2, [r3, #0]
   d86dc:	07d2      	lsls	r2, r2, #31
   d86de:	bf5c      	itt	pl
   d86e0:	2201      	movpl	r2, #1
   d86e2:	601a      	strpl	r2, [r3, #0]
   d86e4:	4b14      	ldr	r3, [pc, #80]	; (d8738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d86e6:	681a      	ldr	r2, [r3, #0]
   d86e8:	07d0      	lsls	r0, r2, #31
   d86ea:	bf5c      	itt	pl
   d86ec:	2201      	movpl	r2, #1
   d86ee:	601a      	strpl	r2, [r3, #0]
   d86f0:	4b12      	ldr	r3, [pc, #72]	; (d873c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d86f2:	681a      	ldr	r2, [r3, #0]
   d86f4:	07d1      	lsls	r1, r2, #31
   d86f6:	bf5c      	itt	pl
   d86f8:	2201      	movpl	r2, #1
   d86fa:	601a      	strpl	r2, [r3, #0]
   d86fc:	4b10      	ldr	r3, [pc, #64]	; (d8740 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d86fe:	681a      	ldr	r2, [r3, #0]
   d8700:	07d2      	lsls	r2, r2, #31
   d8702:	bf5c      	itt	pl
   d8704:	2201      	movpl	r2, #1
   d8706:	601a      	strpl	r2, [r3, #0]
   d8708:	4b0e      	ldr	r3, [pc, #56]	; (d8744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d870a:	681a      	ldr	r2, [r3, #0]
   d870c:	07d0      	lsls	r0, r2, #31
   d870e:	bf5c      	itt	pl
   d8710:	2201      	movpl	r2, #1
   d8712:	601a      	strpl	r2, [r3, #0]
   d8714:	4b0c      	ldr	r3, [pc, #48]	; (d8748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8716:	681a      	ldr	r2, [r3, #0]
   d8718:	07d1      	lsls	r1, r2, #31
   d871a:	bf5c      	itt	pl
   d871c:	2201      	movpl	r2, #1
   d871e:	601a      	strpl	r2, [r3, #0]
   d8720:	4b0a      	ldr	r3, [pc, #40]	; (d874c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8722:	681a      	ldr	r2, [r3, #0]
   d8724:	07d2      	lsls	r2, r2, #31
   d8726:	bf5c      	itt	pl
   d8728:	2201      	movpl	r2, #1
   d872a:	601a      	strpl	r2, [r3, #0]
   d872c:	4770      	bx	lr
   d872e:	bf00      	nop
   d8730:	2003e76c 	.word	0x2003e76c
   d8734:	2003e768 	.word	0x2003e768
   d8738:	2003e764 	.word	0x2003e764
   d873c:	2003e760 	.word	0x2003e760
   d8740:	2003e75c 	.word	0x2003e75c
   d8744:	2003e758 	.word	0x2003e758
   d8748:	2003e754 	.word	0x2003e754
   d874c:	2003e750 	.word	0x2003e750

000d8750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8750:	4b24      	ldr	r3, [pc, #144]	; (d87e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8752:	681a      	ldr	r2, [r3, #0]
   d8754:	07d0      	lsls	r0, r2, #31
   d8756:	bf5c      	itt	pl
   d8758:	2201      	movpl	r2, #1
   d875a:	601a      	strpl	r2, [r3, #0]
   d875c:	4b22      	ldr	r3, [pc, #136]	; (d87e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d875e:	681a      	ldr	r2, [r3, #0]
   d8760:	07d1      	lsls	r1, r2, #31
   d8762:	bf5c      	itt	pl
   d8764:	2201      	movpl	r2, #1
   d8766:	601a      	strpl	r2, [r3, #0]
   d8768:	4b20      	ldr	r3, [pc, #128]	; (d87ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d876a:	681a      	ldr	r2, [r3, #0]
   d876c:	07d2      	lsls	r2, r2, #31
   d876e:	bf5c      	itt	pl
   d8770:	2201      	movpl	r2, #1
   d8772:	601a      	strpl	r2, [r3, #0]
   d8774:	4b1e      	ldr	r3, [pc, #120]	; (d87f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8776:	681a      	ldr	r2, [r3, #0]
   d8778:	07d0      	lsls	r0, r2, #31
   d877a:	bf5c      	itt	pl
   d877c:	2201      	movpl	r2, #1
   d877e:	601a      	strpl	r2, [r3, #0]
   d8780:	4b1c      	ldr	r3, [pc, #112]	; (d87f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8782:	681a      	ldr	r2, [r3, #0]
   d8784:	07d1      	lsls	r1, r2, #31
   d8786:	bf5c      	itt	pl
   d8788:	2201      	movpl	r2, #1
   d878a:	601a      	strpl	r2, [r3, #0]
   d878c:	4b1a      	ldr	r3, [pc, #104]	; (d87f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d878e:	681a      	ldr	r2, [r3, #0]
   d8790:	07d2      	lsls	r2, r2, #31
   d8792:	bf5c      	itt	pl
   d8794:	2201      	movpl	r2, #1
   d8796:	601a      	strpl	r2, [r3, #0]
   d8798:	4b18      	ldr	r3, [pc, #96]	; (d87fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d879a:	681a      	ldr	r2, [r3, #0]
   d879c:	07d0      	lsls	r0, r2, #31
   d879e:	bf5c      	itt	pl
   d87a0:	2201      	movpl	r2, #1
   d87a2:	601a      	strpl	r2, [r3, #0]
   d87a4:	4b16      	ldr	r3, [pc, #88]	; (d8800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d87a6:	681a      	ldr	r2, [r3, #0]
   d87a8:	07d1      	lsls	r1, r2, #31
   d87aa:	bf5c      	itt	pl
   d87ac:	2201      	movpl	r2, #1
   d87ae:	601a      	strpl	r2, [r3, #0]
   d87b0:	4b14      	ldr	r3, [pc, #80]	; (d8804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d87b2:	681a      	ldr	r2, [r3, #0]
   d87b4:	07d2      	lsls	r2, r2, #31
   d87b6:	bf5c      	itt	pl
   d87b8:	2201      	movpl	r2, #1
   d87ba:	601a      	strpl	r2, [r3, #0]
   d87bc:	4b12      	ldr	r3, [pc, #72]	; (d8808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d87be:	681a      	ldr	r2, [r3, #0]
   d87c0:	07d0      	lsls	r0, r2, #31
   d87c2:	bf5c      	itt	pl
   d87c4:	2201      	movpl	r2, #1
   d87c6:	601a      	strpl	r2, [r3, #0]
   d87c8:	4b10      	ldr	r3, [pc, #64]	; (d880c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d87ca:	681a      	ldr	r2, [r3, #0]
   d87cc:	07d1      	lsls	r1, r2, #31
   d87ce:	bf5c      	itt	pl
   d87d0:	2201      	movpl	r2, #1
   d87d2:	601a      	strpl	r2, [r3, #0]
   d87d4:	4b0e      	ldr	r3, [pc, #56]	; (d8810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d87d6:	681a      	ldr	r2, [r3, #0]
   d87d8:	07d2      	lsls	r2, r2, #31
   d87da:	bf5c      	itt	pl
   d87dc:	2201      	movpl	r2, #1
   d87de:	601a      	strpl	r2, [r3, #0]
   d87e0:	4770      	bx	lr
   d87e2:	bf00      	nop
   d87e4:	2003e79c 	.word	0x2003e79c
   d87e8:	2003e798 	.word	0x2003e798
   d87ec:	2003e794 	.word	0x2003e794
   d87f0:	2003e790 	.word	0x2003e790
   d87f4:	2003e78c 	.word	0x2003e78c
   d87f8:	2003e788 	.word	0x2003e788
   d87fc:	2003e784 	.word	0x2003e784
   d8800:	2003e780 	.word	0x2003e780
   d8804:	2003e77c 	.word	0x2003e77c
   d8808:	2003e778 	.word	0x2003e778
   d880c:	2003e774 	.word	0x2003e774
   d8810:	2003e770 	.word	0x2003e770

000d8814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8814:	4b24      	ldr	r3, [pc, #144]	; (d88a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8816:	681a      	ldr	r2, [r3, #0]
   d8818:	07d0      	lsls	r0, r2, #31
   d881a:	bf5c      	itt	pl
   d881c:	2201      	movpl	r2, #1
   d881e:	601a      	strpl	r2, [r3, #0]
   d8820:	4b22      	ldr	r3, [pc, #136]	; (d88ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d8822:	681a      	ldr	r2, [r3, #0]
   d8824:	07d1      	lsls	r1, r2, #31
   d8826:	bf5c      	itt	pl
   d8828:	2201      	movpl	r2, #1
   d882a:	601a      	strpl	r2, [r3, #0]
   d882c:	4b20      	ldr	r3, [pc, #128]	; (d88b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d882e:	681a      	ldr	r2, [r3, #0]
   d8830:	07d2      	lsls	r2, r2, #31
   d8832:	bf5c      	itt	pl
   d8834:	2201      	movpl	r2, #1
   d8836:	601a      	strpl	r2, [r3, #0]
   d8838:	4b1e      	ldr	r3, [pc, #120]	; (d88b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d883a:	681a      	ldr	r2, [r3, #0]
   d883c:	07d0      	lsls	r0, r2, #31
   d883e:	bf5c      	itt	pl
   d8840:	2201      	movpl	r2, #1
   d8842:	601a      	strpl	r2, [r3, #0]
   d8844:	4b1c      	ldr	r3, [pc, #112]	; (d88b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8846:	681a      	ldr	r2, [r3, #0]
   d8848:	07d1      	lsls	r1, r2, #31
   d884a:	bf5c      	itt	pl
   d884c:	2201      	movpl	r2, #1
   d884e:	601a      	strpl	r2, [r3, #0]
   d8850:	4b1a      	ldr	r3, [pc, #104]	; (d88bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d8852:	681a      	ldr	r2, [r3, #0]
   d8854:	07d2      	lsls	r2, r2, #31
   d8856:	bf5c      	itt	pl
   d8858:	2201      	movpl	r2, #1
   d885a:	601a      	strpl	r2, [r3, #0]
   d885c:	4b18      	ldr	r3, [pc, #96]	; (d88c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d885e:	681a      	ldr	r2, [r3, #0]
   d8860:	07d0      	lsls	r0, r2, #31
   d8862:	bf5c      	itt	pl
   d8864:	2201      	movpl	r2, #1
   d8866:	601a      	strpl	r2, [r3, #0]
   d8868:	4b16      	ldr	r3, [pc, #88]	; (d88c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d886a:	681a      	ldr	r2, [r3, #0]
   d886c:	07d1      	lsls	r1, r2, #31
   d886e:	bf5c      	itt	pl
   d8870:	2201      	movpl	r2, #1
   d8872:	601a      	strpl	r2, [r3, #0]
   d8874:	4b14      	ldr	r3, [pc, #80]	; (d88c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8876:	681a      	ldr	r2, [r3, #0]
   d8878:	07d2      	lsls	r2, r2, #31
   d887a:	bf5c      	itt	pl
   d887c:	2201      	movpl	r2, #1
   d887e:	601a      	strpl	r2, [r3, #0]
   d8880:	4b12      	ldr	r3, [pc, #72]	; (d88cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8882:	681a      	ldr	r2, [r3, #0]
   d8884:	07d0      	lsls	r0, r2, #31
   d8886:	bf5c      	itt	pl
   d8888:	2201      	movpl	r2, #1
   d888a:	601a      	strpl	r2, [r3, #0]
   d888c:	4b10      	ldr	r3, [pc, #64]	; (d88d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d888e:	681a      	ldr	r2, [r3, #0]
   d8890:	07d1      	lsls	r1, r2, #31
   d8892:	bf5c      	itt	pl
   d8894:	2201      	movpl	r2, #1
   d8896:	601a      	strpl	r2, [r3, #0]
   d8898:	4b0e      	ldr	r3, [pc, #56]	; (d88d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d889a:	681a      	ldr	r2, [r3, #0]
   d889c:	07d2      	lsls	r2, r2, #31
   d889e:	bf5c      	itt	pl
   d88a0:	2201      	movpl	r2, #1
   d88a2:	601a      	strpl	r2, [r3, #0]
   d88a4:	4770      	bx	lr
   d88a6:	bf00      	nop
   d88a8:	2003e7cc 	.word	0x2003e7cc
   d88ac:	2003e7c8 	.word	0x2003e7c8
   d88b0:	2003e7c4 	.word	0x2003e7c4
   d88b4:	2003e7c0 	.word	0x2003e7c0
   d88b8:	2003e7bc 	.word	0x2003e7bc
   d88bc:	2003e7b8 	.word	0x2003e7b8
   d88c0:	2003e7b4 	.word	0x2003e7b4
   d88c4:	2003e7b0 	.word	0x2003e7b0
   d88c8:	2003e7ac 	.word	0x2003e7ac
   d88cc:	2003e7a8 	.word	0x2003e7a8
   d88d0:	2003e7a4 	.word	0x2003e7a4
   d88d4:	2003e7a0 	.word	0x2003e7a0

000d88d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d88d8:	4b18      	ldr	r3, [pc, #96]	; (d893c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d88da:	681a      	ldr	r2, [r3, #0]
   d88dc:	07d1      	lsls	r1, r2, #31
   d88de:	bf5c      	itt	pl
   d88e0:	2201      	movpl	r2, #1
   d88e2:	601a      	strpl	r2, [r3, #0]
   d88e4:	4b16      	ldr	r3, [pc, #88]	; (d8940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d88e6:	681a      	ldr	r2, [r3, #0]
   d88e8:	07d2      	lsls	r2, r2, #31
   d88ea:	bf5c      	itt	pl
   d88ec:	2201      	movpl	r2, #1
   d88ee:	601a      	strpl	r2, [r3, #0]
   d88f0:	4b14      	ldr	r3, [pc, #80]	; (d8944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d88f2:	681a      	ldr	r2, [r3, #0]
   d88f4:	07d0      	lsls	r0, r2, #31
   d88f6:	bf5c      	itt	pl
   d88f8:	2201      	movpl	r2, #1
   d88fa:	601a      	strpl	r2, [r3, #0]
   d88fc:	4b12      	ldr	r3, [pc, #72]	; (d8948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d88fe:	681a      	ldr	r2, [r3, #0]
   d8900:	07d1      	lsls	r1, r2, #31
   d8902:	bf5c      	itt	pl
   d8904:	2201      	movpl	r2, #1
   d8906:	601a      	strpl	r2, [r3, #0]
   d8908:	4b10      	ldr	r3, [pc, #64]	; (d894c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d890a:	681a      	ldr	r2, [r3, #0]
   d890c:	07d2      	lsls	r2, r2, #31
   d890e:	bf5c      	itt	pl
   d8910:	2201      	movpl	r2, #1
   d8912:	601a      	strpl	r2, [r3, #0]
   d8914:	4b0e      	ldr	r3, [pc, #56]	; (d8950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8916:	681a      	ldr	r2, [r3, #0]
   d8918:	07d0      	lsls	r0, r2, #31
   d891a:	bf5c      	itt	pl
   d891c:	2201      	movpl	r2, #1
   d891e:	601a      	strpl	r2, [r3, #0]
   d8920:	4b0c      	ldr	r3, [pc, #48]	; (d8954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8922:	681a      	ldr	r2, [r3, #0]
   d8924:	07d1      	lsls	r1, r2, #31
   d8926:	bf5c      	itt	pl
   d8928:	2201      	movpl	r2, #1
   d892a:	601a      	strpl	r2, [r3, #0]
   d892c:	4b0a      	ldr	r3, [pc, #40]	; (d8958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d892e:	681a      	ldr	r2, [r3, #0]
   d8930:	07d2      	lsls	r2, r2, #31
   d8932:	bf5c      	itt	pl
   d8934:	2201      	movpl	r2, #1
   d8936:	601a      	strpl	r2, [r3, #0]
   d8938:	4770      	bx	lr
   d893a:	bf00      	nop
   d893c:	2003e7ec 	.word	0x2003e7ec
   d8940:	2003e7e8 	.word	0x2003e7e8
   d8944:	2003e7e4 	.word	0x2003e7e4
   d8948:	2003e7e0 	.word	0x2003e7e0
   d894c:	2003e7dc 	.word	0x2003e7dc
   d8950:	2003e7d8 	.word	0x2003e7d8
   d8954:	2003e7d4 	.word	0x2003e7d4
   d8958:	2003e7d0 	.word	0x2003e7d0

000d895c <__aeabi_drsub>:
   d895c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8960:	e002      	b.n	d8968 <__adddf3>
   d8962:	bf00      	nop

000d8964 <__aeabi_dsub>:
   d8964:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8968 <__adddf3>:
   d8968:	b530      	push	{r4, r5, lr}
   d896a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d896e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8972:	ea94 0f05 	teq	r4, r5
   d8976:	bf08      	it	eq
   d8978:	ea90 0f02 	teqeq	r0, r2
   d897c:	bf1f      	itttt	ne
   d897e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8982:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8986:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d898a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d898e:	f000 80e2 	beq.w	d8b56 <__adddf3+0x1ee>
   d8992:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8996:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d899a:	bfb8      	it	lt
   d899c:	426d      	neglt	r5, r5
   d899e:	dd0c      	ble.n	d89ba <__adddf3+0x52>
   d89a0:	442c      	add	r4, r5
   d89a2:	ea80 0202 	eor.w	r2, r0, r2
   d89a6:	ea81 0303 	eor.w	r3, r1, r3
   d89aa:	ea82 0000 	eor.w	r0, r2, r0
   d89ae:	ea83 0101 	eor.w	r1, r3, r1
   d89b2:	ea80 0202 	eor.w	r2, r0, r2
   d89b6:	ea81 0303 	eor.w	r3, r1, r3
   d89ba:	2d36      	cmp	r5, #54	; 0x36
   d89bc:	bf88      	it	hi
   d89be:	bd30      	pophi	{r4, r5, pc}
   d89c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d89c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d89c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d89cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d89d0:	d002      	beq.n	d89d8 <__adddf3+0x70>
   d89d2:	4240      	negs	r0, r0
   d89d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d89d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d89dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d89e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d89e4:	d002      	beq.n	d89ec <__adddf3+0x84>
   d89e6:	4252      	negs	r2, r2
   d89e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d89ec:	ea94 0f05 	teq	r4, r5
   d89f0:	f000 80a7 	beq.w	d8b42 <__adddf3+0x1da>
   d89f4:	f1a4 0401 	sub.w	r4, r4, #1
   d89f8:	f1d5 0e20 	rsbs	lr, r5, #32
   d89fc:	db0d      	blt.n	d8a1a <__adddf3+0xb2>
   d89fe:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8a02:	fa22 f205 	lsr.w	r2, r2, r5
   d8a06:	1880      	adds	r0, r0, r2
   d8a08:	f141 0100 	adc.w	r1, r1, #0
   d8a0c:	fa03 f20e 	lsl.w	r2, r3, lr
   d8a10:	1880      	adds	r0, r0, r2
   d8a12:	fa43 f305 	asr.w	r3, r3, r5
   d8a16:	4159      	adcs	r1, r3
   d8a18:	e00e      	b.n	d8a38 <__adddf3+0xd0>
   d8a1a:	f1a5 0520 	sub.w	r5, r5, #32
   d8a1e:	f10e 0e20 	add.w	lr, lr, #32
   d8a22:	2a01      	cmp	r2, #1
   d8a24:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8a28:	bf28      	it	cs
   d8a2a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8a2e:	fa43 f305 	asr.w	r3, r3, r5
   d8a32:	18c0      	adds	r0, r0, r3
   d8a34:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8a38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8a3c:	d507      	bpl.n	d8a4e <__adddf3+0xe6>
   d8a3e:	f04f 0e00 	mov.w	lr, #0
   d8a42:	f1dc 0c00 	rsbs	ip, ip, #0
   d8a46:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8a4a:	eb6e 0101 	sbc.w	r1, lr, r1
   d8a4e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8a52:	d31b      	bcc.n	d8a8c <__adddf3+0x124>
   d8a54:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8a58:	d30c      	bcc.n	d8a74 <__adddf3+0x10c>
   d8a5a:	0849      	lsrs	r1, r1, #1
   d8a5c:	ea5f 0030 	movs.w	r0, r0, rrx
   d8a60:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8a64:	f104 0401 	add.w	r4, r4, #1
   d8a68:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8a6c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8a70:	f080 809a 	bcs.w	d8ba8 <__adddf3+0x240>
   d8a74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8a78:	bf08      	it	eq
   d8a7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8a7e:	f150 0000 	adcs.w	r0, r0, #0
   d8a82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8a86:	ea41 0105 	orr.w	r1, r1, r5
   d8a8a:	bd30      	pop	{r4, r5, pc}
   d8a8c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8a90:	4140      	adcs	r0, r0
   d8a92:	eb41 0101 	adc.w	r1, r1, r1
   d8a96:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8a9a:	f1a4 0401 	sub.w	r4, r4, #1
   d8a9e:	d1e9      	bne.n	d8a74 <__adddf3+0x10c>
   d8aa0:	f091 0f00 	teq	r1, #0
   d8aa4:	bf04      	itt	eq
   d8aa6:	4601      	moveq	r1, r0
   d8aa8:	2000      	moveq	r0, #0
   d8aaa:	fab1 f381 	clz	r3, r1
   d8aae:	bf08      	it	eq
   d8ab0:	3320      	addeq	r3, #32
   d8ab2:	f1a3 030b 	sub.w	r3, r3, #11
   d8ab6:	f1b3 0220 	subs.w	r2, r3, #32
   d8aba:	da0c      	bge.n	d8ad6 <__adddf3+0x16e>
   d8abc:	320c      	adds	r2, #12
   d8abe:	dd08      	ble.n	d8ad2 <__adddf3+0x16a>
   d8ac0:	f102 0c14 	add.w	ip, r2, #20
   d8ac4:	f1c2 020c 	rsb	r2, r2, #12
   d8ac8:	fa01 f00c 	lsl.w	r0, r1, ip
   d8acc:	fa21 f102 	lsr.w	r1, r1, r2
   d8ad0:	e00c      	b.n	d8aec <__adddf3+0x184>
   d8ad2:	f102 0214 	add.w	r2, r2, #20
   d8ad6:	bfd8      	it	le
   d8ad8:	f1c2 0c20 	rsble	ip, r2, #32
   d8adc:	fa01 f102 	lsl.w	r1, r1, r2
   d8ae0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8ae4:	bfdc      	itt	le
   d8ae6:	ea41 010c 	orrle.w	r1, r1, ip
   d8aea:	4090      	lslle	r0, r2
   d8aec:	1ae4      	subs	r4, r4, r3
   d8aee:	bfa2      	ittt	ge
   d8af0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8af4:	4329      	orrge	r1, r5
   d8af6:	bd30      	popge	{r4, r5, pc}
   d8af8:	ea6f 0404 	mvn.w	r4, r4
   d8afc:	3c1f      	subs	r4, #31
   d8afe:	da1c      	bge.n	d8b3a <__adddf3+0x1d2>
   d8b00:	340c      	adds	r4, #12
   d8b02:	dc0e      	bgt.n	d8b22 <__adddf3+0x1ba>
   d8b04:	f104 0414 	add.w	r4, r4, #20
   d8b08:	f1c4 0220 	rsb	r2, r4, #32
   d8b0c:	fa20 f004 	lsr.w	r0, r0, r4
   d8b10:	fa01 f302 	lsl.w	r3, r1, r2
   d8b14:	ea40 0003 	orr.w	r0, r0, r3
   d8b18:	fa21 f304 	lsr.w	r3, r1, r4
   d8b1c:	ea45 0103 	orr.w	r1, r5, r3
   d8b20:	bd30      	pop	{r4, r5, pc}
   d8b22:	f1c4 040c 	rsb	r4, r4, #12
   d8b26:	f1c4 0220 	rsb	r2, r4, #32
   d8b2a:	fa20 f002 	lsr.w	r0, r0, r2
   d8b2e:	fa01 f304 	lsl.w	r3, r1, r4
   d8b32:	ea40 0003 	orr.w	r0, r0, r3
   d8b36:	4629      	mov	r1, r5
   d8b38:	bd30      	pop	{r4, r5, pc}
   d8b3a:	fa21 f004 	lsr.w	r0, r1, r4
   d8b3e:	4629      	mov	r1, r5
   d8b40:	bd30      	pop	{r4, r5, pc}
   d8b42:	f094 0f00 	teq	r4, #0
   d8b46:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8b4a:	bf06      	itte	eq
   d8b4c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8b50:	3401      	addeq	r4, #1
   d8b52:	3d01      	subne	r5, #1
   d8b54:	e74e      	b.n	d89f4 <__adddf3+0x8c>
   d8b56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8b5a:	bf18      	it	ne
   d8b5c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8b60:	d029      	beq.n	d8bb6 <__adddf3+0x24e>
   d8b62:	ea94 0f05 	teq	r4, r5
   d8b66:	bf08      	it	eq
   d8b68:	ea90 0f02 	teqeq	r0, r2
   d8b6c:	d005      	beq.n	d8b7a <__adddf3+0x212>
   d8b6e:	ea54 0c00 	orrs.w	ip, r4, r0
   d8b72:	bf04      	itt	eq
   d8b74:	4619      	moveq	r1, r3
   d8b76:	4610      	moveq	r0, r2
   d8b78:	bd30      	pop	{r4, r5, pc}
   d8b7a:	ea91 0f03 	teq	r1, r3
   d8b7e:	bf1e      	ittt	ne
   d8b80:	2100      	movne	r1, #0
   d8b82:	2000      	movne	r0, #0
   d8b84:	bd30      	popne	{r4, r5, pc}
   d8b86:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8b8a:	d105      	bne.n	d8b98 <__adddf3+0x230>
   d8b8c:	0040      	lsls	r0, r0, #1
   d8b8e:	4149      	adcs	r1, r1
   d8b90:	bf28      	it	cs
   d8b92:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8b96:	bd30      	pop	{r4, r5, pc}
   d8b98:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8b9c:	bf3c      	itt	cc
   d8b9e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8ba2:	bd30      	popcc	{r4, r5, pc}
   d8ba4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8ba8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8bac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8bb0:	f04f 0000 	mov.w	r0, #0
   d8bb4:	bd30      	pop	{r4, r5, pc}
   d8bb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8bba:	bf1a      	itte	ne
   d8bbc:	4619      	movne	r1, r3
   d8bbe:	4610      	movne	r0, r2
   d8bc0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8bc4:	bf1c      	itt	ne
   d8bc6:	460b      	movne	r3, r1
   d8bc8:	4602      	movne	r2, r0
   d8bca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8bce:	bf06      	itte	eq
   d8bd0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8bd4:	ea91 0f03 	teqeq	r1, r3
   d8bd8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8bdc:	bd30      	pop	{r4, r5, pc}
   d8bde:	bf00      	nop

000d8be0 <__aeabi_ui2d>:
   d8be0:	f090 0f00 	teq	r0, #0
   d8be4:	bf04      	itt	eq
   d8be6:	2100      	moveq	r1, #0
   d8be8:	4770      	bxeq	lr
   d8bea:	b530      	push	{r4, r5, lr}
   d8bec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8bf0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8bf4:	f04f 0500 	mov.w	r5, #0
   d8bf8:	f04f 0100 	mov.w	r1, #0
   d8bfc:	e750      	b.n	d8aa0 <__adddf3+0x138>
   d8bfe:	bf00      	nop

000d8c00 <__aeabi_i2d>:
   d8c00:	f090 0f00 	teq	r0, #0
   d8c04:	bf04      	itt	eq
   d8c06:	2100      	moveq	r1, #0
   d8c08:	4770      	bxeq	lr
   d8c0a:	b530      	push	{r4, r5, lr}
   d8c0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8c10:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8c14:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8c18:	bf48      	it	mi
   d8c1a:	4240      	negmi	r0, r0
   d8c1c:	f04f 0100 	mov.w	r1, #0
   d8c20:	e73e      	b.n	d8aa0 <__adddf3+0x138>
   d8c22:	bf00      	nop

000d8c24 <__aeabi_f2d>:
   d8c24:	0042      	lsls	r2, r0, #1
   d8c26:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8c2a:	ea4f 0131 	mov.w	r1, r1, rrx
   d8c2e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8c32:	bf1f      	itttt	ne
   d8c34:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8c38:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8c3c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8c40:	4770      	bxne	lr
   d8c42:	f092 0f00 	teq	r2, #0
   d8c46:	bf14      	ite	ne
   d8c48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8c4c:	4770      	bxeq	lr
   d8c4e:	b530      	push	{r4, r5, lr}
   d8c50:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8c54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8c58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8c5c:	e720      	b.n	d8aa0 <__adddf3+0x138>
   d8c5e:	bf00      	nop

000d8c60 <__aeabi_ul2d>:
   d8c60:	ea50 0201 	orrs.w	r2, r0, r1
   d8c64:	bf08      	it	eq
   d8c66:	4770      	bxeq	lr
   d8c68:	b530      	push	{r4, r5, lr}
   d8c6a:	f04f 0500 	mov.w	r5, #0
   d8c6e:	e00a      	b.n	d8c86 <__aeabi_l2d+0x16>

000d8c70 <__aeabi_l2d>:
   d8c70:	ea50 0201 	orrs.w	r2, r0, r1
   d8c74:	bf08      	it	eq
   d8c76:	4770      	bxeq	lr
   d8c78:	b530      	push	{r4, r5, lr}
   d8c7a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8c7e:	d502      	bpl.n	d8c86 <__aeabi_l2d+0x16>
   d8c80:	4240      	negs	r0, r0
   d8c82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8c86:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8c8a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8c8e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8c92:	f43f aedc 	beq.w	d8a4e <__adddf3+0xe6>
   d8c96:	f04f 0203 	mov.w	r2, #3
   d8c9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8c9e:	bf18      	it	ne
   d8ca0:	3203      	addne	r2, #3
   d8ca2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8ca6:	bf18      	it	ne
   d8ca8:	3203      	addne	r2, #3
   d8caa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8cae:	f1c2 0320 	rsb	r3, r2, #32
   d8cb2:	fa00 fc03 	lsl.w	ip, r0, r3
   d8cb6:	fa20 f002 	lsr.w	r0, r0, r2
   d8cba:	fa01 fe03 	lsl.w	lr, r1, r3
   d8cbe:	ea40 000e 	orr.w	r0, r0, lr
   d8cc2:	fa21 f102 	lsr.w	r1, r1, r2
   d8cc6:	4414      	add	r4, r2
   d8cc8:	e6c1      	b.n	d8a4e <__adddf3+0xe6>
   d8cca:	bf00      	nop

000d8ccc <__aeabi_dmul>:
   d8ccc:	b570      	push	{r4, r5, r6, lr}
   d8cce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8cd2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8cd6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8cda:	bf1d      	ittte	ne
   d8cdc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8ce0:	ea94 0f0c 	teqne	r4, ip
   d8ce4:	ea95 0f0c 	teqne	r5, ip
   d8ce8:	f000 f8de 	bleq	d8ea8 <__aeabi_dmul+0x1dc>
   d8cec:	442c      	add	r4, r5
   d8cee:	ea81 0603 	eor.w	r6, r1, r3
   d8cf2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8cf6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8cfa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8cfe:	bf18      	it	ne
   d8d00:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8d04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8d08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8d0c:	d038      	beq.n	d8d80 <__aeabi_dmul+0xb4>
   d8d0e:	fba0 ce02 	umull	ip, lr, r0, r2
   d8d12:	f04f 0500 	mov.w	r5, #0
   d8d16:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8d1a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8d1e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8d22:	f04f 0600 	mov.w	r6, #0
   d8d26:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8d2a:	f09c 0f00 	teq	ip, #0
   d8d2e:	bf18      	it	ne
   d8d30:	f04e 0e01 	orrne.w	lr, lr, #1
   d8d34:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8d38:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8d3c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8d40:	d204      	bcs.n	d8d4c <__aeabi_dmul+0x80>
   d8d42:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8d46:	416d      	adcs	r5, r5
   d8d48:	eb46 0606 	adc.w	r6, r6, r6
   d8d4c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8d50:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8d54:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8d58:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8d5c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8d60:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8d64:	bf88      	it	hi
   d8d66:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8d6a:	d81e      	bhi.n	d8daa <__aeabi_dmul+0xde>
   d8d6c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8d70:	bf08      	it	eq
   d8d72:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8d76:	f150 0000 	adcs.w	r0, r0, #0
   d8d7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8d7e:	bd70      	pop	{r4, r5, r6, pc}
   d8d80:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8d84:	ea46 0101 	orr.w	r1, r6, r1
   d8d88:	ea40 0002 	orr.w	r0, r0, r2
   d8d8c:	ea81 0103 	eor.w	r1, r1, r3
   d8d90:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8d94:	bfc2      	ittt	gt
   d8d96:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8d9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8d9e:	bd70      	popgt	{r4, r5, r6, pc}
   d8da0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8da4:	f04f 0e00 	mov.w	lr, #0
   d8da8:	3c01      	subs	r4, #1
   d8daa:	f300 80ab 	bgt.w	d8f04 <__aeabi_dmul+0x238>
   d8dae:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8db2:	bfde      	ittt	le
   d8db4:	2000      	movle	r0, #0
   d8db6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8dba:	bd70      	pople	{r4, r5, r6, pc}
   d8dbc:	f1c4 0400 	rsb	r4, r4, #0
   d8dc0:	3c20      	subs	r4, #32
   d8dc2:	da35      	bge.n	d8e30 <__aeabi_dmul+0x164>
   d8dc4:	340c      	adds	r4, #12
   d8dc6:	dc1b      	bgt.n	d8e00 <__aeabi_dmul+0x134>
   d8dc8:	f104 0414 	add.w	r4, r4, #20
   d8dcc:	f1c4 0520 	rsb	r5, r4, #32
   d8dd0:	fa00 f305 	lsl.w	r3, r0, r5
   d8dd4:	fa20 f004 	lsr.w	r0, r0, r4
   d8dd8:	fa01 f205 	lsl.w	r2, r1, r5
   d8ddc:	ea40 0002 	orr.w	r0, r0, r2
   d8de0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8de4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8de8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8dec:	fa21 f604 	lsr.w	r6, r1, r4
   d8df0:	eb42 0106 	adc.w	r1, r2, r6
   d8df4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8df8:	bf08      	it	eq
   d8dfa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8dfe:	bd70      	pop	{r4, r5, r6, pc}
   d8e00:	f1c4 040c 	rsb	r4, r4, #12
   d8e04:	f1c4 0520 	rsb	r5, r4, #32
   d8e08:	fa00 f304 	lsl.w	r3, r0, r4
   d8e0c:	fa20 f005 	lsr.w	r0, r0, r5
   d8e10:	fa01 f204 	lsl.w	r2, r1, r4
   d8e14:	ea40 0002 	orr.w	r0, r0, r2
   d8e18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8e1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8e20:	f141 0100 	adc.w	r1, r1, #0
   d8e24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8e28:	bf08      	it	eq
   d8e2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8e2e:	bd70      	pop	{r4, r5, r6, pc}
   d8e30:	f1c4 0520 	rsb	r5, r4, #32
   d8e34:	fa00 f205 	lsl.w	r2, r0, r5
   d8e38:	ea4e 0e02 	orr.w	lr, lr, r2
   d8e3c:	fa20 f304 	lsr.w	r3, r0, r4
   d8e40:	fa01 f205 	lsl.w	r2, r1, r5
   d8e44:	ea43 0302 	orr.w	r3, r3, r2
   d8e48:	fa21 f004 	lsr.w	r0, r1, r4
   d8e4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8e50:	fa21 f204 	lsr.w	r2, r1, r4
   d8e54:	ea20 0002 	bic.w	r0, r0, r2
   d8e58:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8e5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8e60:	bf08      	it	eq
   d8e62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8e66:	bd70      	pop	{r4, r5, r6, pc}
   d8e68:	f094 0f00 	teq	r4, #0
   d8e6c:	d10f      	bne.n	d8e8e <__aeabi_dmul+0x1c2>
   d8e6e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8e72:	0040      	lsls	r0, r0, #1
   d8e74:	eb41 0101 	adc.w	r1, r1, r1
   d8e78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8e7c:	bf08      	it	eq
   d8e7e:	3c01      	subeq	r4, #1
   d8e80:	d0f7      	beq.n	d8e72 <__aeabi_dmul+0x1a6>
   d8e82:	ea41 0106 	orr.w	r1, r1, r6
   d8e86:	f095 0f00 	teq	r5, #0
   d8e8a:	bf18      	it	ne
   d8e8c:	4770      	bxne	lr
   d8e8e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8e92:	0052      	lsls	r2, r2, #1
   d8e94:	eb43 0303 	adc.w	r3, r3, r3
   d8e98:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8e9c:	bf08      	it	eq
   d8e9e:	3d01      	subeq	r5, #1
   d8ea0:	d0f7      	beq.n	d8e92 <__aeabi_dmul+0x1c6>
   d8ea2:	ea43 0306 	orr.w	r3, r3, r6
   d8ea6:	4770      	bx	lr
   d8ea8:	ea94 0f0c 	teq	r4, ip
   d8eac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8eb0:	bf18      	it	ne
   d8eb2:	ea95 0f0c 	teqne	r5, ip
   d8eb6:	d00c      	beq.n	d8ed2 <__aeabi_dmul+0x206>
   d8eb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8ebc:	bf18      	it	ne
   d8ebe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8ec2:	d1d1      	bne.n	d8e68 <__aeabi_dmul+0x19c>
   d8ec4:	ea81 0103 	eor.w	r1, r1, r3
   d8ec8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8ecc:	f04f 0000 	mov.w	r0, #0
   d8ed0:	bd70      	pop	{r4, r5, r6, pc}
   d8ed2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8ed6:	bf06      	itte	eq
   d8ed8:	4610      	moveq	r0, r2
   d8eda:	4619      	moveq	r1, r3
   d8edc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8ee0:	d019      	beq.n	d8f16 <__aeabi_dmul+0x24a>
   d8ee2:	ea94 0f0c 	teq	r4, ip
   d8ee6:	d102      	bne.n	d8eee <__aeabi_dmul+0x222>
   d8ee8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8eec:	d113      	bne.n	d8f16 <__aeabi_dmul+0x24a>
   d8eee:	ea95 0f0c 	teq	r5, ip
   d8ef2:	d105      	bne.n	d8f00 <__aeabi_dmul+0x234>
   d8ef4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8ef8:	bf1c      	itt	ne
   d8efa:	4610      	movne	r0, r2
   d8efc:	4619      	movne	r1, r3
   d8efe:	d10a      	bne.n	d8f16 <__aeabi_dmul+0x24a>
   d8f00:	ea81 0103 	eor.w	r1, r1, r3
   d8f04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8f08:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8f0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8f10:	f04f 0000 	mov.w	r0, #0
   d8f14:	bd70      	pop	{r4, r5, r6, pc}
   d8f16:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8f1a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8f1e:	bd70      	pop	{r4, r5, r6, pc}

000d8f20 <__aeabi_ddiv>:
   d8f20:	b570      	push	{r4, r5, r6, lr}
   d8f22:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8f26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8f2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8f2e:	bf1d      	ittte	ne
   d8f30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8f34:	ea94 0f0c 	teqne	r4, ip
   d8f38:	ea95 0f0c 	teqne	r5, ip
   d8f3c:	f000 f8a7 	bleq	d908e <__aeabi_ddiv+0x16e>
   d8f40:	eba4 0405 	sub.w	r4, r4, r5
   d8f44:	ea81 0e03 	eor.w	lr, r1, r3
   d8f48:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8f4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8f50:	f000 8088 	beq.w	d9064 <__aeabi_ddiv+0x144>
   d8f54:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8f58:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8f5c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8f60:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8f64:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8f68:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8f6c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8f70:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8f74:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8f78:	429d      	cmp	r5, r3
   d8f7a:	bf08      	it	eq
   d8f7c:	4296      	cmpeq	r6, r2
   d8f7e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8f82:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8f86:	d202      	bcs.n	d8f8e <__aeabi_ddiv+0x6e>
   d8f88:	085b      	lsrs	r3, r3, #1
   d8f8a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f8e:	1ab6      	subs	r6, r6, r2
   d8f90:	eb65 0503 	sbc.w	r5, r5, r3
   d8f94:	085b      	lsrs	r3, r3, #1
   d8f96:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8f9e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8fa2:	ebb6 0e02 	subs.w	lr, r6, r2
   d8fa6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8faa:	bf22      	ittt	cs
   d8fac:	1ab6      	subcs	r6, r6, r2
   d8fae:	4675      	movcs	r5, lr
   d8fb0:	ea40 000c 	orrcs.w	r0, r0, ip
   d8fb4:	085b      	lsrs	r3, r3, #1
   d8fb6:	ea4f 0232 	mov.w	r2, r2, rrx
   d8fba:	ebb6 0e02 	subs.w	lr, r6, r2
   d8fbe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8fc2:	bf22      	ittt	cs
   d8fc4:	1ab6      	subcs	r6, r6, r2
   d8fc6:	4675      	movcs	r5, lr
   d8fc8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8fcc:	085b      	lsrs	r3, r3, #1
   d8fce:	ea4f 0232 	mov.w	r2, r2, rrx
   d8fd2:	ebb6 0e02 	subs.w	lr, r6, r2
   d8fd6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8fda:	bf22      	ittt	cs
   d8fdc:	1ab6      	subcs	r6, r6, r2
   d8fde:	4675      	movcs	r5, lr
   d8fe0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8fe4:	085b      	lsrs	r3, r3, #1
   d8fe6:	ea4f 0232 	mov.w	r2, r2, rrx
   d8fea:	ebb6 0e02 	subs.w	lr, r6, r2
   d8fee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8ff2:	bf22      	ittt	cs
   d8ff4:	1ab6      	subcs	r6, r6, r2
   d8ff6:	4675      	movcs	r5, lr
   d8ff8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8ffc:	ea55 0e06 	orrs.w	lr, r5, r6
   d9000:	d018      	beq.n	d9034 <__aeabi_ddiv+0x114>
   d9002:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9006:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d900a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d900e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9012:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9016:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d901a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d901e:	d1c0      	bne.n	d8fa2 <__aeabi_ddiv+0x82>
   d9020:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9024:	d10b      	bne.n	d903e <__aeabi_ddiv+0x11e>
   d9026:	ea41 0100 	orr.w	r1, r1, r0
   d902a:	f04f 0000 	mov.w	r0, #0
   d902e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9032:	e7b6      	b.n	d8fa2 <__aeabi_ddiv+0x82>
   d9034:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9038:	bf04      	itt	eq
   d903a:	4301      	orreq	r1, r0
   d903c:	2000      	moveq	r0, #0
   d903e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9042:	bf88      	it	hi
   d9044:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9048:	f63f aeaf 	bhi.w	d8daa <__aeabi_dmul+0xde>
   d904c:	ebb5 0c03 	subs.w	ip, r5, r3
   d9050:	bf04      	itt	eq
   d9052:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9056:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d905a:	f150 0000 	adcs.w	r0, r0, #0
   d905e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9062:	bd70      	pop	{r4, r5, r6, pc}
   d9064:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9068:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d906c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9070:	bfc2      	ittt	gt
   d9072:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9076:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d907a:	bd70      	popgt	{r4, r5, r6, pc}
   d907c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9080:	f04f 0e00 	mov.w	lr, #0
   d9084:	3c01      	subs	r4, #1
   d9086:	e690      	b.n	d8daa <__aeabi_dmul+0xde>
   d9088:	ea45 0e06 	orr.w	lr, r5, r6
   d908c:	e68d      	b.n	d8daa <__aeabi_dmul+0xde>
   d908e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9092:	ea94 0f0c 	teq	r4, ip
   d9096:	bf08      	it	eq
   d9098:	ea95 0f0c 	teqeq	r5, ip
   d909c:	f43f af3b 	beq.w	d8f16 <__aeabi_dmul+0x24a>
   d90a0:	ea94 0f0c 	teq	r4, ip
   d90a4:	d10a      	bne.n	d90bc <__aeabi_ddiv+0x19c>
   d90a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d90aa:	f47f af34 	bne.w	d8f16 <__aeabi_dmul+0x24a>
   d90ae:	ea95 0f0c 	teq	r5, ip
   d90b2:	f47f af25 	bne.w	d8f00 <__aeabi_dmul+0x234>
   d90b6:	4610      	mov	r0, r2
   d90b8:	4619      	mov	r1, r3
   d90ba:	e72c      	b.n	d8f16 <__aeabi_dmul+0x24a>
   d90bc:	ea95 0f0c 	teq	r5, ip
   d90c0:	d106      	bne.n	d90d0 <__aeabi_ddiv+0x1b0>
   d90c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d90c6:	f43f aefd 	beq.w	d8ec4 <__aeabi_dmul+0x1f8>
   d90ca:	4610      	mov	r0, r2
   d90cc:	4619      	mov	r1, r3
   d90ce:	e722      	b.n	d8f16 <__aeabi_dmul+0x24a>
   d90d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d90d4:	bf18      	it	ne
   d90d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d90da:	f47f aec5 	bne.w	d8e68 <__aeabi_dmul+0x19c>
   d90de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d90e2:	f47f af0d 	bne.w	d8f00 <__aeabi_dmul+0x234>
   d90e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d90ea:	f47f aeeb 	bne.w	d8ec4 <__aeabi_dmul+0x1f8>
   d90ee:	e712      	b.n	d8f16 <__aeabi_dmul+0x24a>

000d90f0 <__aeabi_d2f>:
   d90f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d90f4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d90f8:	bf24      	itt	cs
   d90fa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d90fe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9102:	d90d      	bls.n	d9120 <__aeabi_d2f+0x30>
   d9104:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9108:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d910c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9110:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9114:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9118:	bf08      	it	eq
   d911a:	f020 0001 	biceq.w	r0, r0, #1
   d911e:	4770      	bx	lr
   d9120:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9124:	d121      	bne.n	d916a <__aeabi_d2f+0x7a>
   d9126:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d912a:	bfbc      	itt	lt
   d912c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9130:	4770      	bxlt	lr
   d9132:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9136:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d913a:	f1c2 0218 	rsb	r2, r2, #24
   d913e:	f1c2 0c20 	rsb	ip, r2, #32
   d9142:	fa10 f30c 	lsls.w	r3, r0, ip
   d9146:	fa20 f002 	lsr.w	r0, r0, r2
   d914a:	bf18      	it	ne
   d914c:	f040 0001 	orrne.w	r0, r0, #1
   d9150:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9154:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9158:	fa03 fc0c 	lsl.w	ip, r3, ip
   d915c:	ea40 000c 	orr.w	r0, r0, ip
   d9160:	fa23 f302 	lsr.w	r3, r3, r2
   d9164:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9168:	e7cc      	b.n	d9104 <__aeabi_d2f+0x14>
   d916a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d916e:	d107      	bne.n	d9180 <__aeabi_d2f+0x90>
   d9170:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9174:	bf1e      	ittt	ne
   d9176:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d917a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d917e:	4770      	bxne	lr
   d9180:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9184:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d918c:	4770      	bx	lr
   d918e:	bf00      	nop

000d9190 <atol>:
   d9190:	220a      	movs	r2, #10
   d9192:	2100      	movs	r1, #0
   d9194:	f000 b946 	b.w	d9424 <strtol>

000d9198 <__cxa_atexit>:
   d9198:	b510      	push	{r4, lr}
   d919a:	4c05      	ldr	r4, [pc, #20]	; (d91b0 <__cxa_atexit+0x18>)
   d919c:	4613      	mov	r3, r2
   d919e:	b12c      	cbz	r4, d91ac <__cxa_atexit+0x14>
   d91a0:	460a      	mov	r2, r1
   d91a2:	4601      	mov	r1, r0
   d91a4:	2002      	movs	r0, #2
   d91a6:	f3af 8000 	nop.w
   d91aa:	bd10      	pop	{r4, pc}
   d91ac:	4620      	mov	r0, r4
   d91ae:	bd10      	pop	{r4, pc}
   d91b0:	00000000 	.word	0x00000000

000d91b4 <memcmp>:
   d91b4:	b510      	push	{r4, lr}
   d91b6:	3901      	subs	r1, #1
   d91b8:	4402      	add	r2, r0
   d91ba:	4290      	cmp	r0, r2
   d91bc:	d007      	beq.n	d91ce <memcmp+0x1a>
   d91be:	f810 3b01 	ldrb.w	r3, [r0], #1
   d91c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d91c6:	42a3      	cmp	r3, r4
   d91c8:	d0f7      	beq.n	d91ba <memcmp+0x6>
   d91ca:	1b18      	subs	r0, r3, r4
   d91cc:	bd10      	pop	{r4, pc}
   d91ce:	2000      	movs	r0, #0
   d91d0:	bd10      	pop	{r4, pc}

000d91d2 <memcpy>:
   d91d2:	b510      	push	{r4, lr}
   d91d4:	1e43      	subs	r3, r0, #1
   d91d6:	440a      	add	r2, r1
   d91d8:	4291      	cmp	r1, r2
   d91da:	d004      	beq.n	d91e6 <memcpy+0x14>
   d91dc:	f811 4b01 	ldrb.w	r4, [r1], #1
   d91e0:	f803 4f01 	strb.w	r4, [r3, #1]!
   d91e4:	e7f8      	b.n	d91d8 <memcpy+0x6>
   d91e6:	bd10      	pop	{r4, pc}

000d91e8 <memset>:
   d91e8:	4402      	add	r2, r0
   d91ea:	4603      	mov	r3, r0
   d91ec:	4293      	cmp	r3, r2
   d91ee:	d002      	beq.n	d91f6 <memset+0xe>
   d91f0:	f803 1b01 	strb.w	r1, [r3], #1
   d91f4:	e7fa      	b.n	d91ec <memset+0x4>
   d91f6:	4770      	bx	lr

000d91f8 <srand>:
   d91f8:	b538      	push	{r3, r4, r5, lr}
   d91fa:	4b12      	ldr	r3, [pc, #72]	; (d9244 <srand+0x4c>)
   d91fc:	681c      	ldr	r4, [r3, #0]
   d91fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9200:	4605      	mov	r5, r0
   d9202:	b9d3      	cbnz	r3, d923a <srand+0x42>
   d9204:	2018      	movs	r0, #24
   d9206:	f7fe fabd 	bl	d7784 <malloc>
   d920a:	f243 330e 	movw	r3, #13070	; 0x330e
   d920e:	63a0      	str	r0, [r4, #56]	; 0x38
   d9210:	8003      	strh	r3, [r0, #0]
   d9212:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9216:	8043      	strh	r3, [r0, #2]
   d9218:	f241 2334 	movw	r3, #4660	; 0x1234
   d921c:	8083      	strh	r3, [r0, #4]
   d921e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9222:	80c3      	strh	r3, [r0, #6]
   d9224:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9228:	8103      	strh	r3, [r0, #8]
   d922a:	2305      	movs	r3, #5
   d922c:	8143      	strh	r3, [r0, #10]
   d922e:	230b      	movs	r3, #11
   d9230:	8183      	strh	r3, [r0, #12]
   d9232:	2201      	movs	r2, #1
   d9234:	2300      	movs	r3, #0
   d9236:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d923a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d923c:	2200      	movs	r2, #0
   d923e:	611d      	str	r5, [r3, #16]
   d9240:	615a      	str	r2, [r3, #20]
   d9242:	bd38      	pop	{r3, r4, r5, pc}
   d9244:	2003dd14 	.word	0x2003dd14

000d9248 <rand>:
   d9248:	4b19      	ldr	r3, [pc, #100]	; (d92b0 <rand+0x68>)
   d924a:	b510      	push	{r4, lr}
   d924c:	681c      	ldr	r4, [r3, #0]
   d924e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9250:	b9d3      	cbnz	r3, d9288 <rand+0x40>
   d9252:	2018      	movs	r0, #24
   d9254:	f7fe fa96 	bl	d7784 <malloc>
   d9258:	f243 330e 	movw	r3, #13070	; 0x330e
   d925c:	63a0      	str	r0, [r4, #56]	; 0x38
   d925e:	8003      	strh	r3, [r0, #0]
   d9260:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9264:	8043      	strh	r3, [r0, #2]
   d9266:	f241 2334 	movw	r3, #4660	; 0x1234
   d926a:	8083      	strh	r3, [r0, #4]
   d926c:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9270:	80c3      	strh	r3, [r0, #6]
   d9272:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9276:	8103      	strh	r3, [r0, #8]
   d9278:	2305      	movs	r3, #5
   d927a:	8143      	strh	r3, [r0, #10]
   d927c:	230b      	movs	r3, #11
   d927e:	8183      	strh	r3, [r0, #12]
   d9280:	2201      	movs	r2, #1
   d9282:	2300      	movs	r3, #0
   d9284:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9288:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d928a:	4c0a      	ldr	r4, [pc, #40]	; (d92b4 <rand+0x6c>)
   d928c:	690b      	ldr	r3, [r1, #16]
   d928e:	6948      	ldr	r0, [r1, #20]
   d9290:	4a09      	ldr	r2, [pc, #36]	; (d92b8 <rand+0x70>)
   d9292:	435c      	muls	r4, r3
   d9294:	fb02 4000 	mla	r0, r2, r0, r4
   d9298:	fba3 2302 	umull	r2, r3, r3, r2
   d929c:	3201      	adds	r2, #1
   d929e:	4403      	add	r3, r0
   d92a0:	f143 0300 	adc.w	r3, r3, #0
   d92a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d92a8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d92ac:	bd10      	pop	{r4, pc}
   d92ae:	bf00      	nop
   d92b0:	2003dd14 	.word	0x2003dd14
   d92b4:	5851f42d 	.word	0x5851f42d
   d92b8:	4c957f2d 	.word	0x4c957f2d

000d92bc <strcmp>:
   d92bc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d92c0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d92c4:	2a01      	cmp	r2, #1
   d92c6:	bf28      	it	cs
   d92c8:	429a      	cmpcs	r2, r3
   d92ca:	d0f7      	beq.n	d92bc <strcmp>
   d92cc:	1ad0      	subs	r0, r2, r3
   d92ce:	4770      	bx	lr

000d92d0 <strcpy>:
   d92d0:	4603      	mov	r3, r0
   d92d2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d92d6:	f803 2b01 	strb.w	r2, [r3], #1
   d92da:	2a00      	cmp	r2, #0
   d92dc:	d1f9      	bne.n	d92d2 <strcpy+0x2>
   d92de:	4770      	bx	lr

000d92e0 <strlen>:
   d92e0:	4603      	mov	r3, r0
   d92e2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d92e6:	2a00      	cmp	r2, #0
   d92e8:	d1fb      	bne.n	d92e2 <strlen+0x2>
   d92ea:	1a18      	subs	r0, r3, r0
   d92ec:	3801      	subs	r0, #1
   d92ee:	4770      	bx	lr

000d92f0 <strncpy>:
   d92f0:	b510      	push	{r4, lr}
   d92f2:	4603      	mov	r3, r0
   d92f4:	b142      	cbz	r2, d9308 <strncpy+0x18>
   d92f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d92fa:	f803 4b01 	strb.w	r4, [r3], #1
   d92fe:	3a01      	subs	r2, #1
   d9300:	2c00      	cmp	r4, #0
   d9302:	d1f7      	bne.n	d92f4 <strncpy+0x4>
   d9304:	441a      	add	r2, r3
   d9306:	e000      	b.n	d930a <strncpy+0x1a>
   d9308:	bd10      	pop	{r4, pc}
   d930a:	4293      	cmp	r3, r2
   d930c:	d002      	beq.n	d9314 <strncpy+0x24>
   d930e:	f803 4b01 	strb.w	r4, [r3], #1
   d9312:	e7fa      	b.n	d930a <strncpy+0x1a>
   d9314:	bd10      	pop	{r4, pc}
	...

000d9318 <_strtol_r>:
   d9318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d931c:	4680      	mov	r8, r0
   d931e:	4840      	ldr	r0, [pc, #256]	; (d9420 <_strtol_r+0x108>)
   d9320:	f8d0 9000 	ldr.w	r9, [r0]
   d9324:	460f      	mov	r7, r1
   d9326:	463d      	mov	r5, r7
   d9328:	f815 4b01 	ldrb.w	r4, [r5], #1
   d932c:	eb09 0004 	add.w	r0, r9, r4
   d9330:	7840      	ldrb	r0, [r0, #1]
   d9332:	f000 0008 	and.w	r0, r0, #8
   d9336:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d933a:	b108      	cbz	r0, d9340 <_strtol_r+0x28>
   d933c:	462f      	mov	r7, r5
   d933e:	e7f2      	b.n	d9326 <_strtol_r+0xe>
   d9340:	2c2d      	cmp	r4, #45	; 0x2d
   d9342:	d103      	bne.n	d934c <_strtol_r+0x34>
   d9344:	1cbd      	adds	r5, r7, #2
   d9346:	787c      	ldrb	r4, [r7, #1]
   d9348:	2601      	movs	r6, #1
   d934a:	e003      	b.n	d9354 <_strtol_r+0x3c>
   d934c:	2c2b      	cmp	r4, #43	; 0x2b
   d934e:	bf04      	itt	eq
   d9350:	787c      	ldrbeq	r4, [r7, #1]
   d9352:	1cbd      	addeq	r5, r7, #2
   d9354:	b113      	cbz	r3, d935c <_strtol_r+0x44>
   d9356:	2b10      	cmp	r3, #16
   d9358:	d10a      	bne.n	d9370 <_strtol_r+0x58>
   d935a:	e05b      	b.n	d9414 <_strtol_r+0xfc>
   d935c:	2c30      	cmp	r4, #48	; 0x30
   d935e:	d157      	bne.n	d9410 <_strtol_r+0xf8>
   d9360:	7828      	ldrb	r0, [r5, #0]
   d9362:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9366:	2858      	cmp	r0, #88	; 0x58
   d9368:	d14d      	bne.n	d9406 <_strtol_r+0xee>
   d936a:	786c      	ldrb	r4, [r5, #1]
   d936c:	2310      	movs	r3, #16
   d936e:	3502      	adds	r5, #2
   d9370:	2e00      	cmp	r6, #0
   d9372:	bf14      	ite	ne
   d9374:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d9378:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d937c:	2700      	movs	r7, #0
   d937e:	fbbc faf3 	udiv	sl, ip, r3
   d9382:	4638      	mov	r0, r7
   d9384:	fb03 cc1a 	mls	ip, r3, sl, ip
   d9388:	eb09 0e04 	add.w	lr, r9, r4
   d938c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9390:	f01e 0f04 	tst.w	lr, #4
   d9394:	d001      	beq.n	d939a <_strtol_r+0x82>
   d9396:	3c30      	subs	r4, #48	; 0x30
   d9398:	e00b      	b.n	d93b2 <_strtol_r+0x9a>
   d939a:	f01e 0e03 	ands.w	lr, lr, #3
   d939e:	d01b      	beq.n	d93d8 <_strtol_r+0xc0>
   d93a0:	f1be 0f01 	cmp.w	lr, #1
   d93a4:	bf0c      	ite	eq
   d93a6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d93aa:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d93ae:	ebce 0404 	rsb	r4, lr, r4
   d93b2:	42a3      	cmp	r3, r4
   d93b4:	dd10      	ble.n	d93d8 <_strtol_r+0xc0>
   d93b6:	f1b7 3fff 	cmp.w	r7, #4294967295
   d93ba:	d00a      	beq.n	d93d2 <_strtol_r+0xba>
   d93bc:	4550      	cmp	r0, sl
   d93be:	d806      	bhi.n	d93ce <_strtol_r+0xb6>
   d93c0:	d101      	bne.n	d93c6 <_strtol_r+0xae>
   d93c2:	4564      	cmp	r4, ip
   d93c4:	dc03      	bgt.n	d93ce <_strtol_r+0xb6>
   d93c6:	fb03 4000 	mla	r0, r3, r0, r4
   d93ca:	2701      	movs	r7, #1
   d93cc:	e001      	b.n	d93d2 <_strtol_r+0xba>
   d93ce:	f04f 37ff 	mov.w	r7, #4294967295
   d93d2:	f815 4b01 	ldrb.w	r4, [r5], #1
   d93d6:	e7d7      	b.n	d9388 <_strtol_r+0x70>
   d93d8:	1c7b      	adds	r3, r7, #1
   d93da:	d10c      	bne.n	d93f6 <_strtol_r+0xde>
   d93dc:	2e00      	cmp	r6, #0
   d93de:	f04f 0322 	mov.w	r3, #34	; 0x22
   d93e2:	bf14      	ite	ne
   d93e4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d93e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d93ec:	f8c8 3000 	str.w	r3, [r8]
   d93f0:	b92a      	cbnz	r2, d93fe <_strtol_r+0xe6>
   d93f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d93f6:	b106      	cbz	r6, d93fa <_strtol_r+0xe2>
   d93f8:	4240      	negs	r0, r0
   d93fa:	b172      	cbz	r2, d941a <_strtol_r+0x102>
   d93fc:	b107      	cbz	r7, d9400 <_strtol_r+0xe8>
   d93fe:	1e69      	subs	r1, r5, #1
   d9400:	6011      	str	r1, [r2, #0]
   d9402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9406:	2430      	movs	r4, #48	; 0x30
   d9408:	2b00      	cmp	r3, #0
   d940a:	d1b1      	bne.n	d9370 <_strtol_r+0x58>
   d940c:	2308      	movs	r3, #8
   d940e:	e7af      	b.n	d9370 <_strtol_r+0x58>
   d9410:	230a      	movs	r3, #10
   d9412:	e7ad      	b.n	d9370 <_strtol_r+0x58>
   d9414:	2c30      	cmp	r4, #48	; 0x30
   d9416:	d0a3      	beq.n	d9360 <_strtol_r+0x48>
   d9418:	e7aa      	b.n	d9370 <_strtol_r+0x58>
   d941a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d941e:	bf00      	nop
   d9420:	2003dcb0 	.word	0x2003dcb0

000d9424 <strtol>:
   d9424:	4613      	mov	r3, r2
   d9426:	460a      	mov	r2, r1
   d9428:	4601      	mov	r1, r0
   d942a:	4802      	ldr	r0, [pc, #8]	; (d9434 <strtol+0x10>)
   d942c:	6800      	ldr	r0, [r0, #0]
   d942e:	f7ff bf73 	b.w	d9318 <_strtol_r>
   d9432:	bf00      	nop
   d9434:	2003dd14 	.word	0x2003dd14

000d9438 <dynalib_user>:
   d9438:	000d4021 000d405d 000d4089 000d408d     !@..]@...@...@..
   d9448:	00000000                                ....

000d944c <_ZTVN8particle13__SPISettingsE>:
	...
   d9454:	000d40d5                                .@..

000d9458 <_ZTV6SdFile>:
	...
   d9460:	000d40c9 000d412d 000d413b 000d40cd     .@..-A..;A...@..
   d9470:	61666564 20746c75 42534d00 42534c00     default .MSB.LSB
   d9480:	50533c00 74655349 676e6974 65642073     .<SPISettings de
   d9490:	6c756166 3c003e74 53495053 69747465     fault>.<SPISetti
   d94a0:	2073676e 6c257325 73252075 444f4d20     ngs %s%lu %s MOD
   d94b0:	3e642545 53504700 696e4920 6c616974     E%d>.GPS Initial
   d94c0:	6e697a69 656c0067 74207373 206e6168     izing.less than 
   d94d0:	63353231 6c63006d 00726165 74697257     125cm.clear.Writ
   d94e0:	20676e69 61746164 206f7420 61634453     ing data to SDca
   d94f0:	0a206472 79614400 6925203a 6f4d202c     rd ..Day: %i, Mo
   d9500:	2068746e 202c6925 72616559 20692520     nth %i, Year %i 
   d9510:	6954000a 203a656d 69323025 3230253a     ..Time: %02i:%02
   d9520:	30253a69 0a206932 74616c00 66252020     i:%02i ..lat  %f
   d9530:	6f6c0a20 2520676e 610a2066 2520746c      .long %f .alt %
   d9540:	53000a66 6c657461 6574696c 6e692073     f..Satellites in
   d9550:	65697620 25203a77 000a2069 74736944      view: %i ..Dist
   d9560:	65636e61 206e6920 203a4d43 322e3025     ance in CM: %0.2
   d9570:	000a2066 73206925 6c657461 6574696c     f ..%i satellite
   d9580:	6e692073 65697620 2d2d2077 5400202d     s in view --- .T
   d9590:	3a656d69 32302520 30253a69 253a6932     ime: %02i:%02i:%
   d95a0:	20693230 202d2d2d 74616c00 6625203a     02i --- .lat: %f
   d95b0:	6f6c202c 203a676e 202c6625 3a746c61     , long: %f, alt:
   d95c0:	20662520 6c25000a 696d2075 73696c6c      %f ..%lu millis
   d95d0:	6e6f6365 74207364 6567206f 50472074     econds to get GP
   d95e0:	69662053 6f6e0078 636f6c20 6f697461     S fix.no locatio
   d95f0:	6143006e 2074276e 65636361 53207373     n.Can't access S
   d9600:	61632044 202e6472 6e206f44 7220746f     D card. Do not r
   d9610:	726f6665 2e74616d 206f4e00 64726163     eformat..No card
   d9620:	7277202c 20676e6f 70696863 6c657320     , wrong chip sel
   d9630:	20746365 2c6e6970 20726f20 20495053     ect pin, or SPI 
   d9640:	626f7270 3f6d656c 20445300 6f727265     problem?.SD erro
   d9650:	646f4372 30203a65 302c0058 6e490058     rCode: 0X.,0X.In
   d9660:	696c6176 6f662064 74616d72 6572202c     valid format, re
   d9670:	6d726f66 53207461 43002e44 74276e61     format SD..Can't
   d9680:	65706f20 6f72206e 6420746f 63657269      open root direc
   d9690:	79726f74 6f4e002e 72726520 6620726f     tory..No error f
   d96a0:	646e756f 7453002e 69747261 4420676e     ound..Starting D
   d96b0:	20617461 67676f4c 20676e69 6143000a     ata Logging ..Ca
   d96c0:	2074276e 61657263 66206574 20656c69     n't create file 
   d96d0:	656d616e 6c696600 706f2e65 4c006e65     name.file.open.L
   d96e0:	6967676f 7420676e 25203a6f 000a2073     ogging to: %s ..
   d96f0:	656e6f44 52000a20 79646165 726f6620     Done ..Ready for
   d9700:	78656e20 61642074 6c206174 0a20676f      next data log .
   d9710:	69727700 65206574 726f7272 4d000a20     .write error ..M
   d9720:	20656461 68207469 2c657265 74746120     ade it here, att
   d9730:	74706d65 54003120 53656d69 706d6174     empt 1.TimeStamp
   d9740:	6152202c 6d6f646e 74614420 69252061     , Random Data %i
   d9750:	00000a20                                 ...

000d9754 <_ZTV16Adafruit_SSD1306>:
	...
   d975c:	000d40cb 000d49ad 000d54a1 000d7b39     .@...I...T..9{..
   d976c:	000d4d6d 000d51a1 000d4bf5 000d4a81     mM...Q...K...J..
   d977c:	000d5261 000d52f7 000d532f 000d534b     aR...R../S..KS..

000d978c <_ZTV12Adafruit_GFX>:
	...
   d979c:	000d54a1 000d7b39 000d40a5 000d51a1     .T..9{...@...Q..
   d97ac:	000d52c1 000d52dd 000d5261 000d52f7     .R...R..aR...R..
   d97bc:	000d532f 000d534b                       /S..KS..

000d97c4 <_ZL4font>:
   d97c4:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   d97d4:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   d97e4:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   d97f4:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   d9804:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   d9814:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   d9824:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   d9834:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   d9844:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   d9854:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   d9864:	00000000 5f000000 07000000 14000700     ......._........
   d9874:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   d9884:	00502056 00030708 41221c00 22410000     V P......."A..A"
   d9894:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   d98a4:	08080800 00000808 20006060 02040810     ........``. ....
   d98b4:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   d98c4:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   d98d4:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   d98e4:	00001e29 00000014 00003440 22140800     ).......@4....."
   d98f4:	14141441 41001414 02081422 06095901     A......A"....Y..
   d9904:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   d9914:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   d9924:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   d9934:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   d9944:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   d9954:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   d9964:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   d9974:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   d9984:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   d9994:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   d99a4:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   d99b4:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   d99c4:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   d99d4:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   d99e4:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   d99f4:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   d9a04:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   d9a14:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   d9a24:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   d9a34:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   d9a44:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   d9a54:	41795555 78545421 54552141 54204078     UUyA!TTxA!UTx@ T
   d9a64:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   d9a74:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   d9a84:	45010042 29f0407c f0f02924 f0282528     B..E|@.)$)..(%(.
   d9a94:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   d9aa4:	32494949 48484832 484a3232 413a3048     III22HHH22JHH0:A
   d9ab4:	3a7a2141 78204042 a0a09d00 4444397d     A!z:B@ x....}9DD
   d9ac4:	403d3944 3c3d4040 2424ff24 43497e48     D9=@@@=<$.$$H~IC
   d9ad4:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   d9ae4:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   d9af4:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   d9b04:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   d9b14:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   d9b24:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   d9b34:	005500aa aa55aaaa 0000aa55 1000ff00     ..U...U.U.......
   d9b44:	00ff1010 ff141414 ff101000 1010ff00     ................
   d9b54:	14f010f0 00fc1414 00f71414 ff0000ff     ................
   d9b64:	1414ff00 14fc04f4 1f101714 101f1010     ................
   d9b74:	1414141f 1010001f 0000f010 101f0000     ................
   d9b84:	1f101010 10101010 000010f0 1010ff00     ................
   d9b94:	10101010 ff101010 00000010 000014ff     ................
   d9ba4:	00ff00ff 17101f00 04fc0000 171414f4     ................
   d9bb4:	14141710 00f404f4 f700ff00 14141414     ................
   d9bc4:	f7141414 1414f700 10141714 1f101f10     ................
   d9bd4:	f4141414 f0101014 0000f010 001f101f     ................
   d9be4:	141f0000 fc000000 f0000014 1010f010     ................
   d9bf4:	14ff10ff 14ff1414 1f101010 00000000     ................
   d9c04:	ffff10f0 f0ffffff f0f0f0f0 00ffffff     ................
   d9c14:	00000000 0f0fffff 380f0f0f 44384444     ...........8DD8D
   d9c24:	3e2a2a7c 02027e14 7e020606 63027e02     |**>.~.....~.~.c
   d9c34:	63414955 3c444438 207e4004 0206201e     UIAc8DD<.@~ . ..
   d9c44:	9902027e 99a5e7a5 2a492a1c 01724c1c     ~........*I*.Lr.
   d9c54:	4a304c72 30304d4d 30487848 465a62bc     rL0JMM00HxH0.bZF
   d9c64:	49493e3d 017e0049 2a7e0101 2a2a2a2a     =>III.~...~*****
   d9c74:	445f4444 4a514044 44404044 0040514a     DD_DD@QJD@@DJQ@.
   d9c84:	0301ff00 00ff80e0 6b080800 1236086b     ...........kk.6.
   d9c94:	06362436 060f090f 18180000 10000000     6$6.............
   d9ca4:	40300010 000101ff 1e01011f 171d1900     ..0@............
   d9cb4:	3c3c0012 00003c3c 47000000 434d5250     ..<<<<.....GPRMC
   d9cc4:	524e4700 4700434d 41474750 474e4700     .GNRMC.GPGGA.GNG
   d9cd4:	4e004147 454e4e00 454e4500 45534500     GA.N.NNE.ENE.ESE
   d9ce4:	45535300 53005300 57005753 57005753     .SSE.S.SSW.WSW.W
   d9cf4:	4e00574e 0000574e                       NW.NNW..

000d9cfc <_ZTVN5spark13EthernetClassE>:
	...
   d9d04:	000d7813 000d7809 000d77ff 000d77f5     .x...x...w...w..
   d9d14:	000d77e9 000d77dd 000d77d1 000d77c9     .w...w...w...w..
   d9d24:	000d77bf 000d77b5 000d83fd              .w...w......

000d9d30 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9d30:	18100800 38302820 64756162 72655300     .... (08baud.Ser
   d9d40:	006c6169 69726553 00316c61 65707974     ial.Serial1.type
   d9d50:	72617000 63006d61 6900646d 6e680064     .param.cmd.id.hn
   d9d60:	74730064 66006d72 00746c69 006c766c     d.strm.filt.lvl.
   d9d70:	48646461 6c646e61 72007265 766f6d65     addHandler.remov
   d9d80:	6e614865 72656c64 756e6500 6e61486d     eHandler.enumHan
   d9d90:	72656c64 534a0073 74534e4f 6d616572     dlers.JSONStream
   d9da0:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   d9db0:	75303130 205d0020 00642500 2800202c     010u .] .%d., .(
   d9dc0:	00203a29 63005b20 2065646f 2500203d     ): . [.code = .%
   d9dd0:	65640069 6c696174 203d2073 000a0d00     i.details = ....
   d9de0:	6e6c0066 006e6600 65646f63 74656400     f.ln.fn.code.det
   d9df0:	006c6961 656e6f6e 61727400 69006563     ail.none.trace.i
   d9e00:	006f666e 6e726177 72726500 7000726f     nfo.warn.error.p
   d9e10:	63696e61 6c6c6100 25005a00 6433302b     anic.all.Z.%+03d
   d9e20:	3230253a 59250075 2d6d252d 25546425     :%02u.%Y-%m-%dT%
   d9e30:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   d9e40:	00000065                                e...

000d9e44 <_ZTV9IPAddress>:
	...
   d9e4c:	000d7dd5 000d7dc5 000d7dc7              .}...}...}..

000d9e58 <_ZTV9USBSerial>:
	...
   d9e60:	000d7ead 000d7efd 000d7f0b 000d7b39     .~...~......9{..
   d9e70:	000d7ee9 000d7eaf 000d7ec5 000d7ef7     .~...~...~...~..
   d9e80:	000d7edb 000d7ea9                       .~...~..

000d9e88 <_ZTV11USARTSerial>:
	...
   d9e90:	000d7fb9 000d8009 000d8017 000d7b39     ............9{..
   d9ea0:	000d7fcd 000d7fef 000d7fdb 000d8003     ................
   d9eb0:	000d7fbb 000d7fbf                       ........

000d9eb8 <_ZTV7TwoWire>:
	...
   d9ec0:	000d80c9 000d8113 000d80eb 000d80cb     ................
   d9ed0:	000d80f3 000d80fb 000d8103 000d810b     ................

000d9ee0 <_ZTVN5spark9MeshClassE>:
	...
   d9ee8:	000d81fd 000d81f3 000d81e9 000d81df     ................
   d9ef8:	000d81d3 000d81c7 000d81bb 000d81b3     ................
   d9f08:	000d81a9 000d819f 000d83fd              ............

000d9f14 <_ZTVN5spark9WiFiClassE>:
	...
   d9f1c:	000d8377 000d836d 000d8363 000d8319     w...m...c.......
   d9f2c:	000d8357 000d834b 000d833f 000d8337     W...K...?...7...
   d9f3c:	000d832d 000d8323 000d83fd              -...#.......

000d9f48 <_ZTVN5spark12NetworkClassE>:
	...
   d9f50:	000d8395 000d839f 000d83a9 000d83b3     ................
   d9f60:	000d83bd 000d83c9 000d83d5 000d83e1     ................
   d9f70:	000d83e9 000d83f3 000d83fd              ............

000d9f7c <_ZSt7nothrow>:
	...

000d9f7d <_ctype_>:
   d9f7d:	20202000 20202020 28282020 20282828     .         ((((( 
   d9f8d:	20202020 20202020 20202020 20202020                     
   d9f9d:	10108820 10101010 10101010 10101010      ...............
   d9fad:	04040410 04040404 10040404 10101010     ................
   d9fbd:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d9fcd:	01010101 01010101 01010101 10101010     ................
   d9fdd:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d9fed:	02020202 02020202 02020202 10101010     ................
   d9ffd:	00000020 00000000 00000000 00000000      ...............
	...

000da080 <__sf_fake_stdin>:
	...

000da0a0 <__sf_fake_stdout>:
	...

000da0c0 <__sf_fake_stderr>:
	...

000da0e0 <link_const_variable_data_end>:
   da0e0:	000d49bd 	.word	0x000d49bd
   da0e4:	000d519d 	.word	0x000d519d
   da0e8:	000d5531 	.word	0x000d5531
   da0ec:	000d5535 	.word	0x000d5535
   da0f0:	000d5539 	.word	0x000d5539
   da0f4:	000d5b61 	.word	0x000d5b61
   da0f8:	000d5b65 	.word	0x000d5b65
   da0fc:	000d5b69 	.word	0x000d5b69
   da100:	000d5b6d 	.word	0x000d5b6d
   da104:	000d6211 	.word	0x000d6211
   da108:	000d6235 	.word	0x000d6235
   da10c:	000d6239 	.word	0x000d6239
   da110:	000d655d 	.word	0x000d655d
   da114:	000d6561 	.word	0x000d6561
   da118:	000d6565 	.word	0x000d6565
   da11c:	000d6a9f 	.word	0x000d6a9f
   da120:	000d6aa3 	.word	0x000d6aa3
   da124:	000d6aa7 	.word	0x000d6aa7
   da128:	000d6b4d 	.word	0x000d6b4d
   da12c:	000d6b65 	.word	0x000d6b65
   da130:	000d72b9 	.word	0x000d72b9
   da134:	000d781d 	.word	0x000d781d
   da138:	000d7acd 	.word	0x000d7acd
   da13c:	000d7b11 	.word	0x000d7b11
   da140:	000d7c61 	.word	0x000d7c61
   da144:	000d7c71 	.word	0x000d7c71
   da148:	000d7c99 	.word	0x000d7c99
   da14c:	000d82c9 	.word	0x000d82c9
   da150:	000d8381 	.word	0x000d8381
   da154:	000d84c9 	.word	0x000d84c9
   da158:	000d86cd 	.word	0x000d86cd
   da15c:	000d8751 	.word	0x000d8751
   da160:	000d8815 	.word	0x000d8815
   da164:	000d88d9 	.word	0x000d88d9

000da168 <link_constructors_end>:
	...
