
c:/Users/benbj/Documents/IOT/BikeSafety/Ultrasonic_HC-SR04/target/1.5.2/photon/Ultrasonic_HC-SR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001da4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1dc0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080a1dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000588  20000070  20000070  00030070  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1e34  080a1e34  00021e34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1e5c  080a1e5c  00021e5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00094255  00000000  00000000  00021e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d912  00000000  00000000  000b60b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000e7d8  00000000  00000000  000c39c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ad8  00000000  00000000  000d219f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002a98  00000000  00000000  000d3c77  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022f5f  00000000  00000000  000d670f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001f1dd  00000000  00000000  000f966e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a2f97  00000000  00000000  0011884b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000aab0  00000000  00000000  001bb7e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fd0f 	bl	80a1a50 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fd14 	bl	80a1a66 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1dc4 	.word	0x080a1dc4
 80a004c:	20000070 	.word	0x20000070
 80a0050:	20000070 	.word	0x20000070
 80a0054:	200005f8 	.word	0x200005f8
 80a0058:	200005f8 	.word	0x200005f8

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fbb9 	bl	80a07d4 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1d90 	.word	0x080a1d90
 80a0084:	080a1dc0 	.word	0x080a1dc0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b811 	b.w	80a00ae <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f83d 	bl	80a010c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bb5f 	b.w	80a0758 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 ba19 	b.w	80a04d0 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <setup>:
 * Author:
 * Date:
 */float cm = 0.0;
int trigPin = D4;
int echoPin = D5;void setup() 
{
 80a00ae:	b508      	push	{r3, lr}
  Serial.begin(9600);
 80a00b0:	f000 fc90 	bl	80a09d4 <_Z16_fetch_usbserialv>
 80a00b4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00b8:	f000 fc72 	bl	80a09a0 <_ZN9USBSerial5beginEl>
  delay(500);
}void loop() 
 80a00bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */float cm = 0.0;
int trigPin = D4;
int echoPin = D5;void setup() 
{
  Serial.begin(9600);
  delay(500);
 80a00c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00c4:	f000 baf6 	b.w	80a06b4 <delay>

080a00c8 <_Z11waitForEchoiil>:
  long endTime = micros();
  float duration = endTime - startTime;
  cm = duration / 58.0;
    Serial.printf("Duration = %0.2f, Distance in CM: %0.2f \n",duration,cm);
    delay(3000);
}void waitForEcho(int pin, int value, long timeout){
 80a00c8:	b570      	push	{r4, r5, r6, lr}
 80a00ca:	4605      	mov	r5, r0
 80a00cc:	4614      	mov	r4, r2
 80a00ce:	460e      	mov	r6, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a00d0:	f000 f8a8 	bl	80a0224 <HAL_Timer_Get_Milli_Seconds>
    long giveupTime = millis() + timeout;
    while (digitalRead(pin) != value && millis() < giveupTime) {}
 80a00d4:	b2ad      	uxth	r5, r5
  float duration = endTime - startTime;
  cm = duration / 58.0;
    Serial.printf("Duration = %0.2f, Distance in CM: %0.2f \n",duration,cm);
    delay(3000);
}void waitForEcho(int pin, int value, long timeout){
    long giveupTime = millis() + timeout;
 80a00d6:	4404      	add	r4, r0
    while (digitalRead(pin) != value && millis() < giveupTime) {}
 80a00d8:	4628      	mov	r0, r5
 80a00da:	f000 fec0 	bl	80a0e5e <digitalRead>
 80a00de:	42b0      	cmp	r0, r6
 80a00e0:	d003      	beq.n	80a00ea <_Z11waitForEchoiil+0x22>
 80a00e2:	f000 f89f 	bl	80a0224 <HAL_Timer_Get_Milli_Seconds>
 80a00e6:	42a0      	cmp	r0, r4
 80a00e8:	d3f6      	bcc.n	80a00d8 <_Z11waitForEchoiil+0x10>
 80a00ea:	bd70      	pop	{r4, r5, r6, pc}

080a00ec <_Z16sendTriggerPulsei>:
}void sendTriggerPulse(int pin){
 80a00ec:	b510      	push	{r4, lr}
    digitalWrite(pin, HIGH);
 80a00ee:	b284      	uxth	r4, r0
 80a00f0:	2101      	movs	r1, #1
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	f000 fe9a 	bl	80a0e2c <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a00f8:	200a      	movs	r0, #10
 80a00fa:	f000 f883 	bl	80a0204 <HAL_Delay_Microseconds>
    delayMicroseconds(10);
    digitalWrite(pin, LOW);
 80a00fe:	4620      	mov	r0, r4
}
 80a0100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    long giveupTime = millis() + timeout;
    while (digitalRead(pin) != value && millis() < giveupTime) {}
}void sendTriggerPulse(int pin){
    digitalWrite(pin, HIGH);
    delayMicroseconds(10);
    digitalWrite(pin, LOW);
 80a0104:	2100      	movs	r1, #0
 80a0106:	f000 be91 	b.w	80a0e2c <digitalWrite>
	...

080a010c <loop>:
int echoPin = D5;void setup() 
{
  Serial.begin(9600);
  delay(500);
}void loop() 
{  sendTriggerPulse(trigPin);
 80a010c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a010e:	4b1b      	ldr	r3, [pc, #108]	; (80a017c <loop+0x70>)
  waitForEcho(echoPin, HIGH, 100);
 80a0110:	4c1b      	ldr	r4, [pc, #108]	; (80a0180 <loop+0x74>)
int echoPin = D5;void setup() 
{
  Serial.begin(9600);
  delay(500);
}void loop() 
{  sendTriggerPulse(trigPin);
 80a0112:	6818      	ldr	r0, [r3, #0]
 80a0114:	f7ff ffea 	bl	80a00ec <_Z16sendTriggerPulsei>
  waitForEcho(echoPin, HIGH, 100);
 80a0118:	2264      	movs	r2, #100	; 0x64
 80a011a:	2101      	movs	r1, #1
 80a011c:	6820      	ldr	r0, [r4, #0]
 80a011e:	f7ff ffd3 	bl	80a00c8 <_Z11waitForEchoiil>
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0122:	f000 f877 	bl	80a0214 <HAL_Timer_Get_Micro_Seconds>
  long startTime = micros();
  waitForEcho(echoPin, LOW, 100);
 80a0126:	2264      	movs	r2, #100	; 0x64
 80a0128:	2100      	movs	r1, #0
 80a012a:	4605      	mov	r5, r0
 80a012c:	6820      	ldr	r0, [r4, #0]
 80a012e:	f7ff ffcb 	bl	80a00c8 <_Z11waitForEchoiil>
 80a0132:	f000 f86f 	bl	80a0214 <HAL_Timer_Get_Micro_Seconds>
  long endTime = micros();
  float duration = endTime - startTime;
 80a0136:	1b40      	subs	r0, r0, r5
 80a0138:	f001 fad8 	bl	80a16ec <__aeabi_i2f>
  cm = duration / 58.0;
 80a013c:	4911      	ldr	r1, [pc, #68]	; (80a0184 <loop+0x78>)
{  sendTriggerPulse(trigPin);
  waitForEcho(echoPin, HIGH, 100);
  long startTime = micros();
  waitForEcho(echoPin, LOW, 100);
  long endTime = micros();
  float duration = endTime - startTime;
 80a013e:	4606      	mov	r6, r0
  cm = duration / 58.0;
 80a0140:	f001 fbdc 	bl	80a18fc <__aeabi_fdiv>
 80a0144:	4c10      	ldr	r4, [pc, #64]	; (80a0188 <loop+0x7c>)
 80a0146:	6020      	str	r0, [r4, #0]
    Serial.printf("Duration = %0.2f, Distance in CM: %0.2f \n",duration,cm);
 80a0148:	f000 fc44 	bl	80a09d4 <_Z16_fetch_usbserialv>
 80a014c:	4605      	mov	r5, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a014e:	6820      	ldr	r0, [r4, #0]
 80a0150:	f001 f9be 	bl	80a14d0 <__aeabi_f2d>
 80a0154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a0158:	4630      	mov	r0, r6
 80a015a:	f001 f9b9 	bl	80a14d0 <__aeabi_f2d>
 80a015e:	4a0b      	ldr	r2, [pc, #44]	; (80a018c <loop+0x80>)
 80a0160:	e9cd 0100 	strd	r0, r1, [sp]
 80a0164:	2100      	movs	r1, #0
 80a0166:	4628      	mov	r0, r5
 80a0168:	f000 fa52 	bl	80a0610 <_ZN5Print11printf_implEbPKcz>
    delay(3000);
 80a016c:	f640 30b8 	movw	r0, #3000	; 0xbb8
}void waitForEcho(int pin, int value, long timeout){
 80a0170:	b004      	add	sp, #16
 80a0172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  waitForEcho(echoPin, LOW, 100);
  long endTime = micros();
  float duration = endTime - startTime;
  cm = duration / 58.0;
    Serial.printf("Duration = %0.2f, Distance in CM: %0.2f \n",duration,cm);
    delay(3000);
 80a0176:	f000 ba9d 	b.w	80a06b4 <delay>
 80a017a:	bf00      	nop
 80a017c:	20000004 	.word	0x20000004
 80a0180:	20000000 	.word	0x20000000
 80a0184:	42680000 	.word	0x42680000
 80a0188:	20000074 	.word	0x20000074
 80a018c:	080a1aec 	.word	0x080a1aec

080a0190 <_GLOBAL__sub_I_cm>:
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0190:	f000 b800 	b.w	80a0194 <HAL_Pin_Map>

080a0194 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0194:	b508      	push	{r3, lr}
 80a0196:	4b02      	ldr	r3, [pc, #8]	; (80a01a0 <HAL_Pin_Map+0xc>)
 80a0198:	681b      	ldr	r3, [r3, #0]
 80a019a:	681b      	ldr	r3, [r3, #0]
 80a019c:	9301      	str	r3, [sp, #4]
 80a019e:	bd08      	pop	{r3, pc}
 80a01a0:	080601b0 	.word	0x080601b0

080a01a4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a01a4:	b508      	push	{r3, lr}
 80a01a6:	4b02      	ldr	r3, [pc, #8]	; (80a01b0 <HAL_Get_Pin_Mode+0xc>)
 80a01a8:	681b      	ldr	r3, [r3, #0]
 80a01aa:	68db      	ldr	r3, [r3, #12]
 80a01ac:	9301      	str	r3, [sp, #4]
 80a01ae:	bd08      	pop	{r3, pc}
 80a01b0:	080601b0 	.word	0x080601b0

080a01b4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a01b4:	b508      	push	{r3, lr}
 80a01b6:	4b02      	ldr	r3, [pc, #8]	; (80a01c0 <HAL_GPIO_Write+0xc>)
 80a01b8:	681b      	ldr	r3, [r3, #0]
 80a01ba:	691b      	ldr	r3, [r3, #16]
 80a01bc:	9301      	str	r3, [sp, #4]
 80a01be:	bd08      	pop	{r3, pc}
 80a01c0:	080601b0 	.word	0x080601b0

080a01c4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a01c4:	b508      	push	{r3, lr}
 80a01c6:	4b02      	ldr	r3, [pc, #8]	; (80a01d0 <HAL_GPIO_Read+0xc>)
 80a01c8:	681b      	ldr	r3, [r3, #0]
 80a01ca:	695b      	ldr	r3, [r3, #20]
 80a01cc:	9301      	str	r3, [sp, #4]
 80a01ce:	bd08      	pop	{r3, pc}
 80a01d0:	080601b0 	.word	0x080601b0

080a01d4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a01d4:	b508      	push	{r3, lr}
 80a01d6:	4b02      	ldr	r3, [pc, #8]	; (80a01e0 <HAL_SPI_Init+0xc>)
 80a01d8:	681b      	ldr	r3, [r3, #0]
 80a01da:	69db      	ldr	r3, [r3, #28]
 80a01dc:	9301      	str	r3, [sp, #4]
 80a01de:	bd08      	pop	{r3, pc}
 80a01e0:	080601b4 	.word	0x080601b4

080a01e4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a01e4:	b508      	push	{r3, lr}
 80a01e6:	4b02      	ldr	r3, [pc, #8]	; (80a01f0 <HAL_SPI_Is_Enabled+0xc>)
 80a01e8:	681b      	ldr	r3, [r3, #0]
 80a01ea:	6a1b      	ldr	r3, [r3, #32]
 80a01ec:	9301      	str	r3, [sp, #4]
 80a01ee:	bd08      	pop	{r3, pc}
 80a01f0:	080601b4 	.word	0x080601b4

080a01f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a01f4:	b508      	push	{r3, lr}
 80a01f6:	4b02      	ldr	r3, [pc, #8]	; (80a0200 <HAL_RNG_GetRandomNumber+0xc>)
 80a01f8:	681b      	ldr	r3, [r3, #0]
 80a01fa:	685b      	ldr	r3, [r3, #4]
 80a01fc:	9301      	str	r3, [sp, #4]
 80a01fe:	bd08      	pop	{r3, pc}
 80a0200:	0806019c 	.word	0x0806019c

080a0204 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0204:	b508      	push	{r3, lr}
 80a0206:	4b02      	ldr	r3, [pc, #8]	; (80a0210 <HAL_Delay_Microseconds+0xc>)
 80a0208:	681b      	ldr	r3, [r3, #0]
 80a020a:	68db      	ldr	r3, [r3, #12]
 80a020c:	9301      	str	r3, [sp, #4]
 80a020e:	bd08      	pop	{r3, pc}
 80a0210:	0806019c 	.word	0x0806019c

080a0214 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a0214:	b508      	push	{r3, lr}
 80a0216:	4b02      	ldr	r3, [pc, #8]	; (80a0220 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a0218:	681b      	ldr	r3, [r3, #0]
 80a021a:	691b      	ldr	r3, [r3, #16]
 80a021c:	9301      	str	r3, [sp, #4]
 80a021e:	bd08      	pop	{r3, pc}
 80a0220:	0806019c 	.word	0x0806019c

080a0224 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0224:	b508      	push	{r3, lr}
 80a0226:	4b02      	ldr	r3, [pc, #8]	; (80a0230 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0228:	681b      	ldr	r3, [r3, #0]
 80a022a:	695b      	ldr	r3, [r3, #20]
 80a022c:	9301      	str	r3, [sp, #4]
 80a022e:	bd08      	pop	{r3, pc}
 80a0230:	0806019c 	.word	0x0806019c

080a0234 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0234:	b508      	push	{r3, lr}
 80a0236:	4b02      	ldr	r3, [pc, #8]	; (80a0240 <os_mutex_recursive_create+0xc>)
 80a0238:	681b      	ldr	r3, [r3, #0]
 80a023a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a023c:	9301      	str	r3, [sp, #4]
 80a023e:	bd08      	pop	{r3, pc}
 80a0240:	080601d0 	.word	0x080601d0

080a0244 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0244:	b508      	push	{r3, lr}
 80a0246:	4b02      	ldr	r3, [pc, #8]	; (80a0250 <os_mutex_recursive_destroy+0xc>)
 80a0248:	681b      	ldr	r3, [r3, #0]
 80a024a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a024c:	9301      	str	r3, [sp, #4]
 80a024e:	bd08      	pop	{r3, pc}
 80a0250:	080601d0 	.word	0x080601d0

080a0254 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0254:	b508      	push	{r3, lr}
 80a0256:	4b02      	ldr	r3, [pc, #8]	; (80a0260 <HAL_USART_Init+0xc>)
 80a0258:	681b      	ldr	r3, [r3, #0]
 80a025a:	699b      	ldr	r3, [r3, #24]
 80a025c:	9301      	str	r3, [sp, #4]
 80a025e:	bd08      	pop	{r3, pc}
 80a0260:	080601c4 	.word	0x080601c4

080a0264 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0264:	b508      	push	{r3, lr}
 80a0266:	4b02      	ldr	r3, [pc, #8]	; (80a0270 <HAL_USART_Write_Data+0xc>)
 80a0268:	681b      	ldr	r3, [r3, #0]
 80a026a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a026c:	9301      	str	r3, [sp, #4]
 80a026e:	bd08      	pop	{r3, pc}
 80a0270:	080601c4 	.word	0x080601c4

080a0274 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0274:	b508      	push	{r3, lr}
 80a0276:	4b02      	ldr	r3, [pc, #8]	; (80a0280 <HAL_USART_Available_Data+0xc>)
 80a0278:	681b      	ldr	r3, [r3, #0]
 80a027a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a027c:	9301      	str	r3, [sp, #4]
 80a027e:	bd08      	pop	{r3, pc}
 80a0280:	080601c4 	.word	0x080601c4

080a0284 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0284:	b508      	push	{r3, lr}
 80a0286:	4b02      	ldr	r3, [pc, #8]	; (80a0290 <HAL_USART_Read_Data+0xc>)
 80a0288:	681b      	ldr	r3, [r3, #0]
 80a028a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a028c:	9301      	str	r3, [sp, #4]
 80a028e:	bd08      	pop	{r3, pc}
 80a0290:	080601c4 	.word	0x080601c4

080a0294 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0294:	b508      	push	{r3, lr}
 80a0296:	4b02      	ldr	r3, [pc, #8]	; (80a02a0 <HAL_USART_Peek_Data+0xc>)
 80a0298:	681b      	ldr	r3, [r3, #0]
 80a029a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a029c:	9301      	str	r3, [sp, #4]
 80a029e:	bd08      	pop	{r3, pc}
 80a02a0:	080601c4 	.word	0x080601c4

080a02a4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a02a4:	b508      	push	{r3, lr}
 80a02a6:	4b02      	ldr	r3, [pc, #8]	; (80a02b0 <HAL_USART_Flush_Data+0xc>)
 80a02a8:	681b      	ldr	r3, [r3, #0]
 80a02aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a02ac:	9301      	str	r3, [sp, #4]
 80a02ae:	bd08      	pop	{r3, pc}
 80a02b0:	080601c4 	.word	0x080601c4

080a02b4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a02b4:	b508      	push	{r3, lr}
 80a02b6:	4b02      	ldr	r3, [pc, #8]	; (80a02c0 <HAL_USART_Is_Enabled+0xc>)
 80a02b8:	681b      	ldr	r3, [r3, #0]
 80a02ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a02bc:	9301      	str	r3, [sp, #4]
 80a02be:	bd08      	pop	{r3, pc}
 80a02c0:	080601c4 	.word	0x080601c4

080a02c4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a02c4:	b508      	push	{r3, lr}
 80a02c6:	4b02      	ldr	r3, [pc, #8]	; (80a02d0 <HAL_USART_Available_Data_For_Write+0xc>)
 80a02c8:	681b      	ldr	r3, [r3, #0]
 80a02ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a02cc:	9301      	str	r3, [sp, #4]
 80a02ce:	bd08      	pop	{r3, pc}
 80a02d0:	080601c4 	.word	0x080601c4

080a02d4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a02d4:	b508      	push	{r3, lr}
 80a02d6:	4b02      	ldr	r3, [pc, #8]	; (80a02e0 <HAL_I2C_Write_Data+0xc>)
 80a02d8:	681b      	ldr	r3, [r3, #0]
 80a02da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a02dc:	9301      	str	r3, [sp, #4]
 80a02de:	bd08      	pop	{r3, pc}
 80a02e0:	080601ac 	.word	0x080601ac

080a02e4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a02e4:	b508      	push	{r3, lr}
 80a02e6:	4b02      	ldr	r3, [pc, #8]	; (80a02f0 <HAL_I2C_Available_Data+0xc>)
 80a02e8:	681b      	ldr	r3, [r3, #0]
 80a02ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a02ec:	9301      	str	r3, [sp, #4]
 80a02ee:	bd08      	pop	{r3, pc}
 80a02f0:	080601ac 	.word	0x080601ac

080a02f4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a02f4:	b508      	push	{r3, lr}
 80a02f6:	4b02      	ldr	r3, [pc, #8]	; (80a0300 <HAL_I2C_Read_Data+0xc>)
 80a02f8:	681b      	ldr	r3, [r3, #0]
 80a02fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a02fc:	9301      	str	r3, [sp, #4]
 80a02fe:	bd08      	pop	{r3, pc}
 80a0300:	080601ac 	.word	0x080601ac

080a0304 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0304:	b508      	push	{r3, lr}
 80a0306:	4b02      	ldr	r3, [pc, #8]	; (80a0310 <HAL_I2C_Peek_Data+0xc>)
 80a0308:	681b      	ldr	r3, [r3, #0]
 80a030a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a030c:	9301      	str	r3, [sp, #4]
 80a030e:	bd08      	pop	{r3, pc}
 80a0310:	080601ac 	.word	0x080601ac

080a0314 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0314:	b508      	push	{r3, lr}
 80a0316:	4b02      	ldr	r3, [pc, #8]	; (80a0320 <HAL_I2C_Flush_Data+0xc>)
 80a0318:	681b      	ldr	r3, [r3, #0]
 80a031a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a031c:	9301      	str	r3, [sp, #4]
 80a031e:	bd08      	pop	{r3, pc}
 80a0320:	080601ac 	.word	0x080601ac

080a0324 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0324:	b508      	push	{r3, lr}
 80a0326:	4b02      	ldr	r3, [pc, #8]	; (80a0330 <HAL_I2C_Is_Enabled+0xc>)
 80a0328:	681b      	ldr	r3, [r3, #0]
 80a032a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a032c:	9301      	str	r3, [sp, #4]
 80a032e:	bd08      	pop	{r3, pc}
 80a0330:	080601ac 	.word	0x080601ac

080a0334 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a0334:	b508      	push	{r3, lr}
 80a0336:	4b03      	ldr	r3, [pc, #12]	; (80a0344 <HAL_I2C_Init+0x10>)
 80a0338:	681b      	ldr	r3, [r3, #0]
 80a033a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a033e:	9301      	str	r3, [sp, #4]
 80a0340:	bd08      	pop	{r3, pc}
 80a0342:	0000      	.short	0x0000
 80a0344:	080601ac 	.word	0x080601ac

080a0348 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0348:	b508      	push	{r3, lr}
 80a034a:	4b02      	ldr	r3, [pc, #8]	; (80a0354 <HAL_USB_USART_Init+0xc>)
 80a034c:	681b      	ldr	r3, [r3, #0]
 80a034e:	681b      	ldr	r3, [r3, #0]
 80a0350:	9301      	str	r3, [sp, #4]
 80a0352:	bd08      	pop	{r3, pc}
 80a0354:	080601d8 	.word	0x080601d8

080a0358 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0358:	b508      	push	{r3, lr}
 80a035a:	4b02      	ldr	r3, [pc, #8]	; (80a0364 <HAL_USB_USART_Begin+0xc>)
 80a035c:	681b      	ldr	r3, [r3, #0]
 80a035e:	685b      	ldr	r3, [r3, #4]
 80a0360:	9301      	str	r3, [sp, #4]
 80a0362:	bd08      	pop	{r3, pc}
 80a0364:	080601d8 	.word	0x080601d8

080a0368 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0368:	b508      	push	{r3, lr}
 80a036a:	4b02      	ldr	r3, [pc, #8]	; (80a0374 <HAL_USB_USART_Available_Data+0xc>)
 80a036c:	681b      	ldr	r3, [r3, #0]
 80a036e:	691b      	ldr	r3, [r3, #16]
 80a0370:	9301      	str	r3, [sp, #4]
 80a0372:	bd08      	pop	{r3, pc}
 80a0374:	080601d8 	.word	0x080601d8

080a0378 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0378:	b508      	push	{r3, lr}
 80a037a:	4b02      	ldr	r3, [pc, #8]	; (80a0384 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a037c:	681b      	ldr	r3, [r3, #0]
 80a037e:	695b      	ldr	r3, [r3, #20]
 80a0380:	9301      	str	r3, [sp, #4]
 80a0382:	bd08      	pop	{r3, pc}
 80a0384:	080601d8 	.word	0x080601d8

080a0388 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0388:	b508      	push	{r3, lr}
 80a038a:	4b02      	ldr	r3, [pc, #8]	; (80a0394 <HAL_USB_USART_Receive_Data+0xc>)
 80a038c:	681b      	ldr	r3, [r3, #0]
 80a038e:	699b      	ldr	r3, [r3, #24]
 80a0390:	9301      	str	r3, [sp, #4]
 80a0392:	bd08      	pop	{r3, pc}
 80a0394:	080601d8 	.word	0x080601d8

080a0398 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0398:	b508      	push	{r3, lr}
 80a039a:	4b02      	ldr	r3, [pc, #8]	; (80a03a4 <HAL_USB_USART_Send_Data+0xc>)
 80a039c:	681b      	ldr	r3, [r3, #0]
 80a039e:	69db      	ldr	r3, [r3, #28]
 80a03a0:	9301      	str	r3, [sp, #4]
 80a03a2:	bd08      	pop	{r3, pc}
 80a03a4:	080601d8 	.word	0x080601d8

080a03a8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a03a8:	b508      	push	{r3, lr}
 80a03aa:	4b02      	ldr	r3, [pc, #8]	; (80a03b4 <HAL_USB_USART_Flush_Data+0xc>)
 80a03ac:	681b      	ldr	r3, [r3, #0]
 80a03ae:	6a1b      	ldr	r3, [r3, #32]
 80a03b0:	9301      	str	r3, [sp, #4]
 80a03b2:	bd08      	pop	{r3, pc}
 80a03b4:	080601d8 	.word	0x080601d8

080a03b8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a03b8:	b508      	push	{r3, lr}
 80a03ba:	4b02      	ldr	r3, [pc, #8]	; (80a03c4 <inet_gethostbyname+0xc>)
 80a03bc:	681b      	ldr	r3, [r3, #0]
 80a03be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a03c0:	9301      	str	r3, [sp, #4]
 80a03c2:	bd08      	pop	{r3, pc}
 80a03c4:	080601c0 	.word	0x080601c0

080a03c8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a03c8:	b508      	push	{r3, lr}
 80a03ca:	4b02      	ldr	r3, [pc, #8]	; (80a03d4 <set_system_mode+0xc>)
 80a03cc:	681b      	ldr	r3, [r3, #0]
 80a03ce:	685b      	ldr	r3, [r3, #4]
 80a03d0:	9301      	str	r3, [sp, #4]
 80a03d2:	bd08      	pop	{r3, pc}
 80a03d4:	080601a4 	.word	0x080601a4

080a03d8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a03d8:	b508      	push	{r3, lr}
 80a03da:	4b02      	ldr	r3, [pc, #8]	; (80a03e4 <system_delay_ms+0xc>)
 80a03dc:	681b      	ldr	r3, [r3, #0]
 80a03de:	695b      	ldr	r3, [r3, #20]
 80a03e0:	9301      	str	r3, [sp, #4]
 80a03e2:	bd08      	pop	{r3, pc}
 80a03e4:	080601a4 	.word	0x080601a4

080a03e8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a03e8:	b508      	push	{r3, lr}
 80a03ea:	4b03      	ldr	r3, [pc, #12]	; (80a03f8 <system_ctrl_set_app_request_handler+0x10>)
 80a03ec:	681b      	ldr	r3, [r3, #0]
 80a03ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a03f2:	9301      	str	r3, [sp, #4]
 80a03f4:	bd08      	pop	{r3, pc}
 80a03f6:	0000      	.short	0x0000
 80a03f8:	080601a4 	.word	0x080601a4

080a03fc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a03fc:	b508      	push	{r3, lr}
 80a03fe:	4b03      	ldr	r3, [pc, #12]	; (80a040c <system_ctrl_set_result+0x10>)
 80a0400:	681b      	ldr	r3, [r3, #0]
 80a0402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0406:	9301      	str	r3, [sp, #4]
 80a0408:	bd08      	pop	{r3, pc}
 80a040a:	0000      	.short	0x0000
 80a040c:	080601a4 	.word	0x080601a4

080a0410 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0410:	b508      	push	{r3, lr}
 80a0412:	4b02      	ldr	r3, [pc, #8]	; (80a041c <network_connect+0xc>)
 80a0414:	681b      	ldr	r3, [r3, #0]
 80a0416:	685b      	ldr	r3, [r3, #4]
 80a0418:	9301      	str	r3, [sp, #4]
 80a041a:	bd08      	pop	{r3, pc}
 80a041c:	080601c8 	.word	0x080601c8

080a0420 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0420:	b508      	push	{r3, lr}
 80a0422:	4b02      	ldr	r3, [pc, #8]	; (80a042c <network_connecting+0xc>)
 80a0424:	681b      	ldr	r3, [r3, #0]
 80a0426:	689b      	ldr	r3, [r3, #8]
 80a0428:	9301      	str	r3, [sp, #4]
 80a042a:	bd08      	pop	{r3, pc}
 80a042c:	080601c8 	.word	0x080601c8

080a0430 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0430:	b508      	push	{r3, lr}
 80a0432:	4b02      	ldr	r3, [pc, #8]	; (80a043c <network_disconnect+0xc>)
 80a0434:	681b      	ldr	r3, [r3, #0]
 80a0436:	68db      	ldr	r3, [r3, #12]
 80a0438:	9301      	str	r3, [sp, #4]
 80a043a:	bd08      	pop	{r3, pc}
 80a043c:	080601c8 	.word	0x080601c8

080a0440 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0440:	b508      	push	{r3, lr}
 80a0442:	4b02      	ldr	r3, [pc, #8]	; (80a044c <network_ready+0xc>)
 80a0444:	681b      	ldr	r3, [r3, #0]
 80a0446:	691b      	ldr	r3, [r3, #16]
 80a0448:	9301      	str	r3, [sp, #4]
 80a044a:	bd08      	pop	{r3, pc}
 80a044c:	080601c8 	.word	0x080601c8

080a0450 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0450:	b508      	push	{r3, lr}
 80a0452:	4b02      	ldr	r3, [pc, #8]	; (80a045c <network_on+0xc>)
 80a0454:	681b      	ldr	r3, [r3, #0]
 80a0456:	695b      	ldr	r3, [r3, #20]
 80a0458:	9301      	str	r3, [sp, #4]
 80a045a:	bd08      	pop	{r3, pc}
 80a045c:	080601c8 	.word	0x080601c8

080a0460 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0460:	b508      	push	{r3, lr}
 80a0462:	4b02      	ldr	r3, [pc, #8]	; (80a046c <network_off+0xc>)
 80a0464:	681b      	ldr	r3, [r3, #0]
 80a0466:	699b      	ldr	r3, [r3, #24]
 80a0468:	9301      	str	r3, [sp, #4]
 80a046a:	bd08      	pop	{r3, pc}
 80a046c:	080601c8 	.word	0x080601c8

080a0470 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0470:	b508      	push	{r3, lr}
 80a0472:	4b02      	ldr	r3, [pc, #8]	; (80a047c <network_listen+0xc>)
 80a0474:	681b      	ldr	r3, [r3, #0]
 80a0476:	69db      	ldr	r3, [r3, #28]
 80a0478:	9301      	str	r3, [sp, #4]
 80a047a:	bd08      	pop	{r3, pc}
 80a047c:	080601c8 	.word	0x080601c8

080a0480 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0480:	b508      	push	{r3, lr}
 80a0482:	4b02      	ldr	r3, [pc, #8]	; (80a048c <network_listening+0xc>)
 80a0484:	681b      	ldr	r3, [r3, #0]
 80a0486:	6a1b      	ldr	r3, [r3, #32]
 80a0488:	9301      	str	r3, [sp, #4]
 80a048a:	bd08      	pop	{r3, pc}
 80a048c:	080601c8 	.word	0x080601c8

080a0490 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0490:	b508      	push	{r3, lr}
 80a0492:	4b02      	ldr	r3, [pc, #8]	; (80a049c <network_set_listen_timeout+0xc>)
 80a0494:	681b      	ldr	r3, [r3, #0]
 80a0496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0498:	9301      	str	r3, [sp, #4]
 80a049a:	bd08      	pop	{r3, pc}
 80a049c:	080601c8 	.word	0x080601c8

080a04a0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a04a0:	b508      	push	{r3, lr}
 80a04a2:	4b02      	ldr	r3, [pc, #8]	; (80a04ac <network_get_listen_timeout+0xc>)
 80a04a4:	681b      	ldr	r3, [r3, #0]
 80a04a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a04a8:	9301      	str	r3, [sp, #4]
 80a04aa:	bd08      	pop	{r3, pc}
 80a04ac:	080601c8 	.word	0x080601c8

080a04b0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a04b0:	b508      	push	{r3, lr}
 80a04b2:	4b02      	ldr	r3, [pc, #8]	; (80a04bc <spark_set_random_seed_from_cloud_handler+0xc>)
 80a04b4:	681b      	ldr	r3, [r3, #0]
 80a04b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a04b8:	9301      	str	r3, [sp, #4]
 80a04ba:	bd08      	pop	{r3, pc}
 80a04bc:	080601cc 	.word	0x080601cc

080a04c0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a04c0:	b508      	push	{r3, lr}
 80a04c2:	4b02      	ldr	r3, [pc, #8]	; (80a04cc <malloc+0xc>)
 80a04c4:	681b      	ldr	r3, [r3, #0]
 80a04c6:	681b      	ldr	r3, [r3, #0]
 80a04c8:	9301      	str	r3, [sp, #4]
 80a04ca:	bd08      	pop	{r3, pc}
 80a04cc:	080601a0 	.word	0x080601a0

080a04d0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a04d0:	b508      	push	{r3, lr}
 80a04d2:	4b02      	ldr	r3, [pc, #8]	; (80a04dc <free+0xc>)
 80a04d4:	681b      	ldr	r3, [r3, #0]
 80a04d6:	685b      	ldr	r3, [r3, #4]
 80a04d8:	9301      	str	r3, [sp, #4]
 80a04da:	bd08      	pop	{r3, pc}
 80a04dc:	080601a0 	.word	0x080601a0

080a04e0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a04e0:	b508      	push	{r3, lr}
 80a04e2:	4b02      	ldr	r3, [pc, #8]	; (80a04ec <vsnprintf+0xc>)
 80a04e4:	681b      	ldr	r3, [r3, #0]
 80a04e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a04e8:	9301      	str	r3, [sp, #4]
 80a04ea:	bd08      	pop	{r3, pc}
 80a04ec:	080601a0 	.word	0x080601a0

080a04f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a04f0:	b570      	push	{r4, r5, r6, lr}
 80a04f2:	4604      	mov	r4, r0
 80a04f4:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a04f6:	2500      	movs	r5, #0
 80a04f8:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a04fc:	f7ff fe9a 	bl	80a0234 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a0500:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a0502:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a0504:	f7ff fe66 	bl	80a01d4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0508:	6065      	str	r5, [r4, #4]
}
 80a050a:	4620      	mov	r0, r4
 80a050c:	bd70      	pop	{r4, r5, r6, pc}

080a050e <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a050e:	7800      	ldrb	r0, [r0, #0]
 80a0510:	f7ff be68 	b.w	80a01e4 <HAL_SPI_Is_Enabled>

080a0514 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0514:	b510      	push	{r4, lr}
 80a0516:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0518:	6800      	ldr	r0, [r0, #0]
 80a051a:	b118      	cbz	r0, 80a0524 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a051c:	f7ff ffd8 	bl	80a04d0 <free>
            wakeupSource_ = nullptr;
 80a0520:	2300      	movs	r3, #0
 80a0522:	6023      	str	r3, [r4, #0]
 80a0524:	bd10      	pop	{r4, pc}

080a0526 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0526:	b510      	push	{r4, lr}
 80a0528:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a052a:	f7ff fff3 	bl	80a0514 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a052e:	4620      	mov	r0, r4
 80a0530:	bd10      	pop	{r4, pc}
	...

080a0534 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0534:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0538:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a053a:	4c08      	ldr	r4, [pc, #32]	; (80a055c <_GLOBAL__sub_I_System+0x28>)
 80a053c:	2000      	movs	r0, #0
 80a053e:	6020      	str	r0, [r4, #0]
 80a0540:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0542:	71a0      	strb	r0, [r4, #6]
 80a0544:	8120      	strh	r0, [r4, #8]
 80a0546:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0548:	f7ff ff3e 	bl	80a03c8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a054c:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a054e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0552:	4a03      	ldr	r2, [pc, #12]	; (80a0560 <_GLOBAL__sub_I_System+0x2c>)
 80a0554:	4903      	ldr	r1, [pc, #12]	; (80a0564 <_GLOBAL__sub_I_System+0x30>)
 80a0556:	f000 bced 	b.w	80a0f34 <__aeabi_atexit>
 80a055a:	bf00      	nop
 80a055c:	20000078 	.word	0x20000078
 80a0560:	20000070 	.word	0x20000070
 80a0564:	080a0527 	.word	0x080a0527

080a0568 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a056a:	4606      	mov	r6, r0
 80a056c:	460d      	mov	r5, r1
 80a056e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0570:	2400      	movs	r4, #0
  while (size--) {
 80a0572:	42bd      	cmp	r5, r7
 80a0574:	d00c      	beq.n	80a0590 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0576:	6833      	ldr	r3, [r6, #0]
 80a0578:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a057c:	689b      	ldr	r3, [r3, #8]
 80a057e:	4630      	mov	r0, r6
 80a0580:	4798      	blx	r3
     if (chunk>=0)
 80a0582:	2800      	cmp	r0, #0
 80a0584:	db01      	blt.n	80a058a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0586:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0588:	e7f3      	b.n	80a0572 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a058a:	2c00      	cmp	r4, #0
 80a058c:	bf08      	it	eq
 80a058e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0590:	4620      	mov	r0, r4
 80a0592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0594 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0594:	b570      	push	{r4, r5, r6, lr}
 80a0596:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0598:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a059a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a059c:	b149      	cbz	r1, 80a05b2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a059e:	f001 fa93 	bl	80a1ac8 <strlen>
 80a05a2:	682b      	ldr	r3, [r5, #0]
 80a05a4:	4602      	mov	r2, r0
 80a05a6:	4621      	mov	r1, r4
 80a05a8:	4628      	mov	r0, r5
    }
 80a05aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a05ae:	68db      	ldr	r3, [r3, #12]
 80a05b0:	4718      	bx	r3
    }
 80a05b2:	bd70      	pop	{r4, r5, r6, pc}

080a05b4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a05b4:	6803      	ldr	r3, [r0, #0]
 80a05b6:	689b      	ldr	r3, [r3, #8]
 80a05b8:	4718      	bx	r3

080a05ba <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a05ba:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a05bc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a05be:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a05c0:	f7ff fff8 	bl	80a05b4 <_ZN5Print5printEc>
  n += print('\n');
 80a05c4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a05c6:	4604      	mov	r4, r0
  n += print('\n');
 80a05c8:	4628      	mov	r0, r5
 80a05ca:	f7ff fff3 	bl	80a05b4 <_ZN5Print5printEc>
  return n;
}
 80a05ce:	4420      	add	r0, r4
 80a05d0:	bd38      	pop	{r3, r4, r5, pc}

080a05d2 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a05d2:	2a01      	cmp	r2, #1
 80a05d4:	bf98      	it	ls
 80a05d6:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a05d8:	b530      	push	{r4, r5, lr}
 80a05da:	460b      	mov	r3, r1
 80a05dc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a05de:	2100      	movs	r1, #0
 80a05e0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a05e4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a05e8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a05ec:	fb05 3312 	mls	r3, r5, r2, r3
 80a05f0:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a05f2:	2b09      	cmp	r3, #9
 80a05f4:	bf94      	ite	ls
 80a05f6:	3330      	addls	r3, #48	; 0x30
 80a05f8:	3337      	addhi	r3, #55	; 0x37
 80a05fa:	b2db      	uxtb	r3, r3
 80a05fc:	4621      	mov	r1, r4
 80a05fe:	f804 3901 	strb.w	r3, [r4], #-1
 80a0602:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0604:	2d00      	cmp	r5, #0
 80a0606:	d1ef      	bne.n	80a05e8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0608:	f7ff ffc4 	bl	80a0594 <_ZN5Print5writeEPKc>
}
 80a060c:	b00b      	add	sp, #44	; 0x2c
 80a060e:	bd30      	pop	{r4, r5, pc}

080a0610 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a0610:	b40c      	push	{r2, r3}
 80a0612:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0616:	b087      	sub	sp, #28
 80a0618:	af00      	add	r7, sp, #0
 80a061a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a061e:	f854 9b04 	ldr.w	r9, [r4], #4
 80a0622:	4605      	mov	r5, r0
 80a0624:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a0626:	4623      	mov	r3, r4
 80a0628:	464a      	mov	r2, r9
 80a062a:	2114      	movs	r1, #20
 80a062c:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a062e:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a0630:	f7ff ff56 	bl	80a04e0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a0634:	2813      	cmp	r0, #19
 80a0636:	d805      	bhi.n	80a0644 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0638:	1d39      	adds	r1, r7, #4
 80a063a:	4628      	mov	r0, r5
 80a063c:	f7ff ffaa 	bl	80a0594 <_ZN5Print5writeEPKc>
 80a0640:	4604      	mov	r4, r0
 80a0642:	e013      	b.n	80a066c <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a0644:	f100 0308 	add.w	r3, r0, #8
 80a0648:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a064c:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a064e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a0652:	1c41      	adds	r1, r0, #1
 80a0654:	4623      	mov	r3, r4
 80a0656:	464a      	mov	r2, r9
 80a0658:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a065a:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a065c:	f7ff ff40 	bl	80a04e0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0660:	4669      	mov	r1, sp
 80a0662:	4628      	mov	r0, r5
 80a0664:	f7ff ff96 	bl	80a0594 <_ZN5Print5writeEPKc>
 80a0668:	4604      	mov	r4, r0
 80a066a:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a066c:	b11e      	cbz	r6, 80a0676 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a066e:	4628      	mov	r0, r5
 80a0670:	f7ff ffa3 	bl	80a05ba <_ZN5Print7printlnEv>
 80a0674:	4404      	add	r4, r0
    return n;
}
 80a0676:	4620      	mov	r0, r4
 80a0678:	371c      	adds	r7, #28
 80a067a:	46bd      	mov	sp, r7
 80a067c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0680:	b002      	add	sp, #8
 80a0682:	4770      	bx	lr

080a0684 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0684:	2300      	movs	r3, #0
 80a0686:	461a      	mov	r2, r3
 80a0688:	4619      	mov	r1, r3
 80a068a:	6840      	ldr	r0, [r0, #4]
 80a068c:	f7ff bee0 	b.w	80a0450 <network_on>

080a0690 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0690:	4a01      	ldr	r2, [pc, #4]	; (80a0698 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0692:	4b02      	ldr	r3, [pc, #8]	; (80a069c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0694:	601a      	str	r2, [r3, #0]
 80a0696:	4770      	bx	lr
 80a0698:	080a1b8c 	.word	0x080a1b8c
 80a069c:	20000084 	.word	0x20000084

080a06a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a06a0:	4b02      	ldr	r3, [pc, #8]	; (80a06ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a06a2:	681a      	ldr	r2, [r3, #0]
 80a06a4:	4b02      	ldr	r3, [pc, #8]	; (80a06b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a06a6:	601a      	str	r2, [r3, #0]
 80a06a8:	4770      	bx	lr
 80a06aa:	bf00      	nop
 80a06ac:	20000008 	.word	0x20000008
 80a06b0:	20000088 	.word	0x20000088

080a06b4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a06b4:	2100      	movs	r1, #0
 80a06b6:	f7ff be8f 	b.w	80a03d8 <system_delay_ms>

080a06ba <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a06ba:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a06bc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a06be:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a06c0:	b113      	cbz	r3, 80a06c8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a06c2:	2203      	movs	r2, #3
 80a06c4:	4601      	mov	r1, r0
 80a06c6:	4798      	blx	r3
    }
 80a06c8:	4620      	mov	r0, r4
 80a06ca:	bd10      	pop	{r4, pc}

080a06cc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a06cc:	b510      	push	{r4, lr}
 80a06ce:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a06d0:	f7ff fff3 	bl	80a06ba <_ZNSt14_Function_baseD1Ev>
 80a06d4:	4620      	mov	r0, r4
 80a06d6:	bd10      	pop	{r4, pc}

080a06d8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a06d8:	4803      	ldr	r0, [pc, #12]	; (80a06e8 <_GLOBAL__sub_I_RGB+0x10>)
 80a06da:	2300      	movs	r3, #0
 80a06dc:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a06de:	4a03      	ldr	r2, [pc, #12]	; (80a06ec <_GLOBAL__sub_I_RGB+0x14>)
 80a06e0:	4903      	ldr	r1, [pc, #12]	; (80a06f0 <_GLOBAL__sub_I_RGB+0x18>)
 80a06e2:	f000 bc27 	b.w	80a0f34 <__aeabi_atexit>
 80a06e6:	bf00      	nop
 80a06e8:	2000008c 	.word	0x2000008c
 80a06ec:	20000070 	.word	0x20000070
 80a06f0:	080a06cd 	.word	0x080a06cd

080a06f4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a06f4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a06f6:	4b14      	ldr	r3, [pc, #80]	; (80a0748 <serialEventRun+0x54>)
 80a06f8:	b133      	cbz	r3, 80a0708 <serialEventRun+0x14>
 80a06fa:	f000 f96b 	bl	80a09d4 <_Z16_fetch_usbserialv>
 80a06fe:	6803      	ldr	r3, [r0, #0]
 80a0700:	691b      	ldr	r3, [r3, #16]
 80a0702:	4798      	blx	r3
 80a0704:	2800      	cmp	r0, #0
 80a0706:	dc16      	bgt.n	80a0736 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0708:	4b10      	ldr	r3, [pc, #64]	; (80a074c <serialEventRun+0x58>)
 80a070a:	b133      	cbz	r3, 80a071a <serialEventRun+0x26>
 80a070c:	f000 fa20 	bl	80a0b50 <_Z22__fetch_global_Serial1v>
 80a0710:	6803      	ldr	r3, [r0, #0]
 80a0712:	691b      	ldr	r3, [r3, #16]
 80a0714:	4798      	blx	r3
 80a0716:	2800      	cmp	r0, #0
 80a0718:	dc10      	bgt.n	80a073c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a071a:	4b0d      	ldr	r3, [pc, #52]	; (80a0750 <serialEventRun+0x5c>)
 80a071c:	b10b      	cbz	r3, 80a0722 <serialEventRun+0x2e>
 80a071e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0722:	4b0c      	ldr	r3, [pc, #48]	; (80a0754 <serialEventRun+0x60>)
 80a0724:	b17b      	cbz	r3, 80a0746 <serialEventRun+0x52>
 80a0726:	f000 f991 	bl	80a0a4c <_Z17_fetch_usbserial1v>
 80a072a:	6803      	ldr	r3, [r0, #0]
 80a072c:	691b      	ldr	r3, [r3, #16]
 80a072e:	4798      	blx	r3
 80a0730:	2800      	cmp	r0, #0
 80a0732:	dc06      	bgt.n	80a0742 <serialEventRun+0x4e>
 80a0734:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0736:	f3af 8000 	nop.w
 80a073a:	e7e5      	b.n	80a0708 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a073c:	f3af 8000 	nop.w
 80a0740:	e7eb      	b.n	80a071a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0742:	f3af 8000 	nop.w
 80a0746:	bd08      	pop	{r3, pc}
	...

080a0758 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0758:	b508      	push	{r3, lr}
	serialEventRun();
 80a075a:	f7ff ffcb 	bl	80a06f4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a075e:	f7ff fd61 	bl	80a0224 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0762:	4b01      	ldr	r3, [pc, #4]	; (80a0768 <_post_loop+0x10>)
 80a0764:	6018      	str	r0, [r3, #0]
 80a0766:	bd08      	pop	{r3, pc}
 80a0768:	20000520 	.word	0x20000520

080a076c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a076c:	4802      	ldr	r0, [pc, #8]	; (80a0778 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a076e:	4a03      	ldr	r2, [pc, #12]	; (80a077c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0770:	4903      	ldr	r1, [pc, #12]	; (80a0780 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0772:	1a12      	subs	r2, r2, r0
 80a0774:	f001 b96c 	b.w	80a1a50 <memcpy>
 80a0778:	40024000 	.word	0x40024000
 80a077c:	40024004 	.word	0x40024004
 80a0780:	080a1dc0 	.word	0x080a1dc0

080a0784 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0784:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0786:	2300      	movs	r3, #0
 80a0788:	9300      	str	r3, [sp, #0]
 80a078a:	461a      	mov	r2, r3
 80a078c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0790:	f7ff fe34 	bl	80a03fc <system_ctrl_set_result>
}
 80a0794:	b003      	add	sp, #12
 80a0796:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a079c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a079c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a079e:	8843      	ldrh	r3, [r0, #2]
 80a07a0:	2b0a      	cmp	r3, #10
 80a07a2:	d008      	beq.n	80a07b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a07a4:	2b50      	cmp	r3, #80	; 0x50
 80a07a6:	d109      	bne.n	80a07bc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a07a8:	4b09      	ldr	r3, [pc, #36]	; (80a07d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a07aa:	681b      	ldr	r3, [r3, #0]
 80a07ac:	b13b      	cbz	r3, 80a07be <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a07ae:	b003      	add	sp, #12
 80a07b0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a07b4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a07b6:	f7ff ffe5 	bl	80a0784 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a07ba:	e006      	b.n	80a07ca <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a07bc:	2300      	movs	r3, #0
 80a07be:	9300      	str	r3, [sp, #0]
 80a07c0:	461a      	mov	r2, r3
 80a07c2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a07c6:	f7ff fe19 	bl	80a03fc <system_ctrl_set_result>
        break;
    }
}
 80a07ca:	b003      	add	sp, #12
 80a07cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80a07d0:	2000009c 	.word	0x2000009c

080a07d4 <module_user_init_hook>:

void module_user_init_hook()
{
 80a07d4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a07d6:	4c10      	ldr	r4, [pc, #64]	; (80a0818 <module_user_init_hook+0x44>)
 80a07d8:	4d10      	ldr	r5, [pc, #64]	; (80a081c <module_user_init_hook+0x48>)
 80a07da:	6823      	ldr	r3, [r4, #0]
 80a07dc:	42ab      	cmp	r3, r5
 80a07de:	4b10      	ldr	r3, [pc, #64]	; (80a0820 <module_user_init_hook+0x4c>)
 80a07e0:	bf0c      	ite	eq
 80a07e2:	2201      	moveq	r2, #1
 80a07e4:	2200      	movne	r2, #0
 80a07e6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a07e8:	d002      	beq.n	80a07f0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a07ea:	f7ff ffbf 	bl	80a076c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a07ee:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a07f0:	f7ff fd00 	bl	80a01f4 <HAL_RNG_GetRandomNumber>
 80a07f4:	4604      	mov	r4, r0
    srand(seed);
 80a07f6:	f001 f93f 	bl	80a1a78 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a07fa:	4b0a      	ldr	r3, [pc, #40]	; (80a0824 <module_user_init_hook+0x50>)
 80a07fc:	b113      	cbz	r3, 80a0804 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a07fe:	4620      	mov	r0, r4
 80a0800:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0804:	2100      	movs	r1, #0
 80a0806:	4807      	ldr	r0, [pc, #28]	; (80a0824 <module_user_init_hook+0x50>)
 80a0808:	f7ff fe52 	bl	80a04b0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a080c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0810:	2100      	movs	r1, #0
 80a0812:	4805      	ldr	r0, [pc, #20]	; (80a0828 <module_user_init_hook+0x54>)
 80a0814:	f7ff bde8 	b.w	80a03e8 <system_ctrl_set_app_request_handler>
 80a0818:	40024000 	.word	0x40024000
 80a081c:	9a271c1e 	.word	0x9a271c1e
 80a0820:	200000a0 	.word	0x200000a0
 80a0824:	00000000 	.word	0x00000000
 80a0828:	080a079d 	.word	0x080a079d

080a082c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a082c:	4770      	bx	lr

080a082e <_ZN9IPAddressD0Ev>:
 80a082e:	b510      	push	{r4, lr}
 80a0830:	4604      	mov	r4, r0
 80a0832:	2118      	movs	r1, #24
 80a0834:	f000 fb8c 	bl	80a0f50 <_ZdlPvj>
 80a0838:	4620      	mov	r0, r4
 80a083a:	bd10      	pop	{r4, pc}

080a083c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a083c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a083e:	460f      	mov	r7, r1
 80a0840:	f100 0608 	add.w	r6, r0, #8
 80a0844:	1d05      	adds	r5, r0, #4
 80a0846:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a0848:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a084c:	220a      	movs	r2, #10
 80a084e:	4638      	mov	r0, r7
 80a0850:	f7ff febf 	bl	80a05d2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0854:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0856:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0858:	d007      	beq.n	80a086a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a085a:	2c00      	cmp	r4, #0
 80a085c:	d0f4      	beq.n	80a0848 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a085e:	212e      	movs	r1, #46	; 0x2e
 80a0860:	4638      	mov	r0, r7
 80a0862:	f7ff fea7 	bl	80a05b4 <_ZN5Print5printEc>
 80a0866:	4404      	add	r4, r0
 80a0868:	e7ee      	b.n	80a0848 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a086a:	4620      	mov	r0, r4
 80a086c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0870 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0870:	b510      	push	{r4, lr}
 80a0872:	4604      	mov	r4, r0
 80a0874:	4b04      	ldr	r3, [pc, #16]	; (80a0888 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0876:	2211      	movs	r2, #17
 80a0878:	f840 3b04 	str.w	r3, [r0], #4
 80a087c:	2100      	movs	r1, #0
 80a087e:	f001 f8f2 	bl	80a1a66 <memset>
{
    clear();
}
 80a0882:	4620      	mov	r0, r4
 80a0884:	bd10      	pop	{r4, pc}
 80a0886:	bf00      	nop
 80a0888:	080a1c2c 	.word	0x080a1c2c

080a088c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a088c:	4603      	mov	r3, r0
 80a088e:	4a07      	ldr	r2, [pc, #28]	; (80a08ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0890:	b510      	push	{r4, lr}
 80a0892:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0896:	f101 0210 	add.w	r2, r1, #16
 80a089a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a089e:	4291      	cmp	r1, r2
 80a08a0:	f843 4b04 	str.w	r4, [r3], #4
 80a08a4:	d1f9      	bne.n	80a089a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a08a6:	780a      	ldrb	r2, [r1, #0]
 80a08a8:	701a      	strb	r2, [r3, #0]
}
 80a08aa:	bd10      	pop	{r4, pc}
 80a08ac:	080a1c2c 	.word	0x080a1c2c

080a08b0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a08b0:	4a02      	ldr	r2, [pc, #8]	; (80a08bc <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a08b2:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a08b4:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a08b6:	2204      	movs	r2, #4
 80a08b8:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a08ba:	4770      	bx	lr
 80a08bc:	080a1c2c 	.word	0x080a1c2c

080a08c0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a08c0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a08c2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a08c6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a08ca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a08ce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a08d2:	2304      	movs	r3, #4
 80a08d4:	6041      	str	r1, [r0, #4]
 80a08d6:	7503      	strb	r3, [r0, #20]
 80a08d8:	bd10      	pop	{r4, pc}
	...

080a08dc <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a08dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a08de:	4d04      	ldr	r5, [pc, #16]	; (80a08f0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a08e0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a08e2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a08e6:	9500      	str	r5, [sp, #0]
 80a08e8:	f7ff ffea 	bl	80a08c0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a08ec:	b003      	add	sp, #12
 80a08ee:	bd30      	pop	{r4, r5, pc}
 80a08f0:	080a1c2c 	.word	0x080a1c2c

080a08f4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a08f4:	7441      	strb	r1, [r0, #17]
 80a08f6:	4770      	bx	lr

080a08f8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a08f8:	4770      	bx	lr

080a08fa <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a08fa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a08fc:	2100      	movs	r1, #0
 80a08fe:	7c00      	ldrb	r0, [r0, #16]
 80a0900:	f7ff fd42 	bl	80a0388 <HAL_USB_USART_Receive_Data>
}
 80a0904:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0908:	bf28      	it	cs
 80a090a:	f04f 30ff 	movcs.w	r0, #4294967295
 80a090e:	bd08      	pop	{r3, pc}

080a0910 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0910:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0912:	2101      	movs	r1, #1
 80a0914:	7c00      	ldrb	r0, [r0, #16]
 80a0916:	f7ff fd37 	bl	80a0388 <HAL_USB_USART_Receive_Data>
}
 80a091a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a091e:	bf28      	it	cs
 80a0920:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0924:	bd08      	pop	{r3, pc}

080a0926 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a0926:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0928:	7c00      	ldrb	r0, [r0, #16]
 80a092a:	f7ff fd25 	bl	80a0378 <HAL_USB_USART_Available_Data_For_Write>
}
 80a092e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0932:	bd08      	pop	{r3, pc}

080a0934 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a0934:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0936:	7c00      	ldrb	r0, [r0, #16]
 80a0938:	f7ff fd16 	bl	80a0368 <HAL_USB_USART_Available_Data>
}
 80a093c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0940:	bd08      	pop	{r3, pc}

080a0942 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0942:	7c00      	ldrb	r0, [r0, #16]
 80a0944:	f7ff bd30 	b.w	80a03a8 <HAL_USB_USART_Flush_Data>

080a0948 <_ZN9USBSerialD0Ev>:
 80a0948:	b510      	push	{r4, lr}
 80a094a:	4604      	mov	r4, r0
 80a094c:	2114      	movs	r1, #20
 80a094e:	f000 faff 	bl	80a0f50 <_ZdlPvj>
 80a0952:	4620      	mov	r0, r4
 80a0954:	bd10      	pop	{r4, pc}

080a0956 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0956:	b538      	push	{r3, r4, r5, lr}
 80a0958:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a095a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a095c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a095e:	f7ff fd0b 	bl	80a0378 <HAL_USB_USART_Available_Data_For_Write>
 80a0962:	2800      	cmp	r0, #0
 80a0964:	dc01      	bgt.n	80a096a <_ZN9USBSerial5writeEh+0x14>
 80a0966:	7c60      	ldrb	r0, [r4, #17]
 80a0968:	b128      	cbz	r0, 80a0976 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a096a:	4629      	mov	r1, r5
 80a096c:	7c20      	ldrb	r0, [r4, #16]
 80a096e:	f7ff fd13 	bl	80a0398 <HAL_USB_USART_Send_Data>
 80a0972:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a0976:	bd38      	pop	{r3, r4, r5, pc}

080a0978 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0978:	b510      	push	{r4, lr}
 80a097a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a097c:	2300      	movs	r3, #0
 80a097e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0980:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0984:	60a3      	str	r3, [r4, #8]
 80a0986:	4b05      	ldr	r3, [pc, #20]	; (80a099c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0988:	4608      	mov	r0, r1
 80a098a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a098c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a098e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0990:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0992:	4611      	mov	r1, r2
 80a0994:	f7ff fcd8 	bl	80a0348 <HAL_USB_USART_Init>
}
 80a0998:	4620      	mov	r0, r4
 80a099a:	bd10      	pop	{r4, pc}
 80a099c:	080a1c40 	.word	0x080a1c40

080a09a0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a09a0:	2200      	movs	r2, #0
 80a09a2:	7c00      	ldrb	r0, [r0, #16]
 80a09a4:	f7ff bcd8 	b.w	80a0358 <HAL_USB_USART_Begin>

080a09a8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a09a8:	b510      	push	{r4, lr}
 80a09aa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a09ac:	2214      	movs	r2, #20
 80a09ae:	2100      	movs	r1, #0
 80a09b0:	f001 f859 	bl	80a1a66 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a09b4:	4b05      	ldr	r3, [pc, #20]	; (80a09cc <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a09b6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a09b8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a09ba:	4b05      	ldr	r3, [pc, #20]	; (80a09d0 <_Z19acquireSerialBufferv+0x28>)
 80a09bc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a09be:	f240 1301 	movw	r3, #257	; 0x101
 80a09c2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a09c4:	2381      	movs	r3, #129	; 0x81
 80a09c6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a09c8:	bd10      	pop	{r4, pc}
 80a09ca:	bf00      	nop
 80a09cc:	20000129 	.word	0x20000129
 80a09d0:	200000a8 	.word	0x200000a8

080a09d4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a09d4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a09d6:	4d0e      	ldr	r5, [pc, #56]	; (80a0a10 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a09d8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a09da:	a801      	add	r0, sp, #4
 80a09dc:	f7ff ffe4 	bl	80a09a8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a09e0:	6829      	ldr	r1, [r5, #0]
 80a09e2:	f011 0401 	ands.w	r4, r1, #1
 80a09e6:	d110      	bne.n	80a0a0a <_Z16_fetch_usbserialv+0x36>
 80a09e8:	4628      	mov	r0, r5
 80a09ea:	f7ff fb58 	bl	80a009e <__cxa_guard_acquire>
 80a09ee:	b160      	cbz	r0, 80a0a0a <_Z16_fetch_usbserialv+0x36>
 80a09f0:	aa01      	add	r2, sp, #4
 80a09f2:	4621      	mov	r1, r4
 80a09f4:	4807      	ldr	r0, [pc, #28]	; (80a0a14 <_Z16_fetch_usbserialv+0x40>)
 80a09f6:	f7ff ffbf 	bl	80a0978 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a09fa:	4628      	mov	r0, r5
 80a09fc:	f7ff fb54 	bl	80a00a8 <__cxa_guard_release>
 80a0a00:	4a05      	ldr	r2, [pc, #20]	; (80a0a18 <_Z16_fetch_usbserialv+0x44>)
 80a0a02:	4906      	ldr	r1, [pc, #24]	; (80a0a1c <_Z16_fetch_usbserialv+0x48>)
 80a0a04:	4803      	ldr	r0, [pc, #12]	; (80a0a14 <_Z16_fetch_usbserialv+0x40>)
 80a0a06:	f000 fa95 	bl	80a0f34 <__aeabi_atexit>
	return _usbserial;
}
 80a0a0a:	4802      	ldr	r0, [pc, #8]	; (80a0a14 <_Z16_fetch_usbserialv+0x40>)
 80a0a0c:	b007      	add	sp, #28
 80a0a0e:	bd30      	pop	{r4, r5, pc}
 80a0a10:	200000a4 	.word	0x200000a4
 80a0a14:	2000022c 	.word	0x2000022c
 80a0a18:	20000070 	.word	0x20000070
 80a0a1c:	080a08f9 	.word	0x080a08f9

080a0a20 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0a20:	b510      	push	{r4, lr}
 80a0a22:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0a24:	2214      	movs	r2, #20
 80a0a26:	2100      	movs	r1, #0
 80a0a28:	f001 f81d 	bl	80a1a66 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0a2c:	4b05      	ldr	r3, [pc, #20]	; (80a0a44 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0a2e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0a30:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0a32:	4b05      	ldr	r3, [pc, #20]	; (80a0a48 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0a34:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0a36:	f240 1301 	movw	r3, #257	; 0x101
 80a0a3a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0a3c:	2381      	movs	r3, #129	; 0x81
 80a0a3e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0a40:	bd10      	pop	{r4, pc}
 80a0a42:	bf00      	nop
 80a0a44:	200002dc 	.word	0x200002dc
 80a0a48:	20000244 	.word	0x20000244

080a0a4c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0a4c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0a4e:	4c0e      	ldr	r4, [pc, #56]	; (80a0a88 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0a50:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0a52:	a801      	add	r0, sp, #4
 80a0a54:	f7ff ffe4 	bl	80a0a20 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0a58:	6823      	ldr	r3, [r4, #0]
 80a0a5a:	07db      	lsls	r3, r3, #31
 80a0a5c:	d410      	bmi.n	80a0a80 <_Z17_fetch_usbserial1v+0x34>
 80a0a5e:	4620      	mov	r0, r4
 80a0a60:	f7ff fb1d 	bl	80a009e <__cxa_guard_acquire>
 80a0a64:	b160      	cbz	r0, 80a0a80 <_Z17_fetch_usbserial1v+0x34>
 80a0a66:	aa01      	add	r2, sp, #4
 80a0a68:	2101      	movs	r1, #1
 80a0a6a:	4808      	ldr	r0, [pc, #32]	; (80a0a8c <_Z17_fetch_usbserial1v+0x40>)
 80a0a6c:	f7ff ff84 	bl	80a0978 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0a70:	4620      	mov	r0, r4
 80a0a72:	f7ff fb19 	bl	80a00a8 <__cxa_guard_release>
 80a0a76:	4a06      	ldr	r2, [pc, #24]	; (80a0a90 <_Z17_fetch_usbserial1v+0x44>)
 80a0a78:	4906      	ldr	r1, [pc, #24]	; (80a0a94 <_Z17_fetch_usbserial1v+0x48>)
 80a0a7a:	4804      	ldr	r0, [pc, #16]	; (80a0a8c <_Z17_fetch_usbserial1v+0x40>)
 80a0a7c:	f000 fa5a 	bl	80a0f34 <__aeabi_atexit>
  return _usbserial1;
}
 80a0a80:	4802      	ldr	r0, [pc, #8]	; (80a0a8c <_Z17_fetch_usbserial1v+0x40>)
 80a0a82:	b006      	add	sp, #24
 80a0a84:	bd10      	pop	{r4, pc}
 80a0a86:	bf00      	nop
 80a0a88:	20000240 	.word	0x20000240
 80a0a8c:	200002c8 	.word	0x200002c8
 80a0a90:	20000070 	.word	0x20000070
 80a0a94:	080a08f9 	.word	0x080a08f9

080a0a98 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0a98:	4770      	bx	lr

080a0a9a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0a9a:	7441      	strb	r1, [r0, #17]
 80a0a9c:	4770      	bx	lr

080a0a9e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a0a9e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a0aa0:	7c00      	ldrb	r0, [r0, #16]
 80a0aa2:	f7ff fc0f 	bl	80a02c4 <HAL_USART_Available_Data_For_Write>
}
 80a0aa6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0aaa:	bd08      	pop	{r3, pc}

080a0aac <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0aac:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0aae:	7c00      	ldrb	r0, [r0, #16]
 80a0ab0:	f7ff fbe0 	bl	80a0274 <HAL_USART_Available_Data>
}
 80a0ab4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0ab8:	bd08      	pop	{r3, pc}

080a0aba <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0aba:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0abc:	7c00      	ldrb	r0, [r0, #16]
 80a0abe:	f7ff fbe9 	bl	80a0294 <HAL_USART_Peek_Data>
}
 80a0ac2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0ac6:	bf28      	it	cs
 80a0ac8:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0acc:	bd08      	pop	{r3, pc}

080a0ace <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0ace:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0ad0:	7c00      	ldrb	r0, [r0, #16]
 80a0ad2:	f7ff fbd7 	bl	80a0284 <HAL_USART_Read_Data>
}
 80a0ad6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0ada:	bf28      	it	cs
 80a0adc:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0ae0:	bd08      	pop	{r3, pc}

080a0ae2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0ae2:	7c00      	ldrb	r0, [r0, #16]
 80a0ae4:	f7ff bbde 	b.w	80a02a4 <HAL_USART_Flush_Data>

080a0ae8 <_ZN11USARTSerialD0Ev>:
 80a0ae8:	b510      	push	{r4, lr}
 80a0aea:	4604      	mov	r4, r0
 80a0aec:	2114      	movs	r1, #20
 80a0aee:	f000 fa2f 	bl	80a0f50 <_ZdlPvj>
 80a0af2:	4620      	mov	r0, r4
 80a0af4:	bd10      	pop	{r4, pc}

080a0af6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0af6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0af8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0afa:	4604      	mov	r4, r0
 80a0afc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0afe:	b925      	cbnz	r5, 80a0b0a <_ZN11USARTSerial5writeEh+0x14>
 80a0b00:	7c00      	ldrb	r0, [r0, #16]
 80a0b02:	f7ff fbdf 	bl	80a02c4 <HAL_USART_Available_Data_For_Write>
 80a0b06:	2800      	cmp	r0, #0
 80a0b08:	dd05      	ble.n	80a0b16 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0b0a:	4631      	mov	r1, r6
 80a0b0c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0b12:	f7ff bba7 	b.w	80a0264 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0b16:	4628      	mov	r0, r5
 80a0b18:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0b1c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0b1c:	b510      	push	{r4, lr}
 80a0b1e:	4604      	mov	r4, r0
 80a0b20:	4608      	mov	r0, r1
 80a0b22:	4611      	mov	r1, r2
 80a0b24:	2200      	movs	r2, #0
 80a0b26:	6062      	str	r2, [r4, #4]
 80a0b28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0b2c:	60a2      	str	r2, [r4, #8]
 80a0b2e:	4a05      	ldr	r2, [pc, #20]	; (80a0b44 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0b30:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0b32:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0b34:	2201      	movs	r2, #1
 80a0b36:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0b38:	461a      	mov	r2, r3
 80a0b3a:	f7ff fb8b 	bl	80a0254 <HAL_USART_Init>
}
 80a0b3e:	4620      	mov	r0, r4
 80a0b40:	bd10      	pop	{r4, pc}
 80a0b42:	bf00      	nop
 80a0b44:	080a1c70 	.word	0x080a1c70

080a0b48 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a0b48:	7c00      	ldrb	r0, [r0, #16]
 80a0b4a:	f7ff bbb3 	b.w	80a02b4 <HAL_USART_Is_Enabled>
	...

080a0b50 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0b50:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0b52:	4d0c      	ldr	r5, [pc, #48]	; (80a0b84 <_Z22__fetch_global_Serial1v+0x34>)
 80a0b54:	6829      	ldr	r1, [r5, #0]
 80a0b56:	f011 0401 	ands.w	r4, r1, #1
 80a0b5a:	d111      	bne.n	80a0b80 <_Z22__fetch_global_Serial1v+0x30>
 80a0b5c:	4628      	mov	r0, r5
 80a0b5e:	f7ff fa9e 	bl	80a009e <__cxa_guard_acquire>
 80a0b62:	b168      	cbz	r0, 80a0b80 <_Z22__fetch_global_Serial1v+0x30>
 80a0b64:	4a08      	ldr	r2, [pc, #32]	; (80a0b88 <_Z22__fetch_global_Serial1v+0x38>)
 80a0b66:	4621      	mov	r1, r4
 80a0b68:	4b08      	ldr	r3, [pc, #32]	; (80a0b8c <_Z22__fetch_global_Serial1v+0x3c>)
 80a0b6a:	4809      	ldr	r0, [pc, #36]	; (80a0b90 <_Z22__fetch_global_Serial1v+0x40>)
 80a0b6c:	f7ff ffd6 	bl	80a0b1c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0b70:	4628      	mov	r0, r5
 80a0b72:	f7ff fa99 	bl	80a00a8 <__cxa_guard_release>
 80a0b76:	4a07      	ldr	r2, [pc, #28]	; (80a0b94 <_Z22__fetch_global_Serial1v+0x44>)
 80a0b78:	4907      	ldr	r1, [pc, #28]	; (80a0b98 <_Z22__fetch_global_Serial1v+0x48>)
 80a0b7a:	4805      	ldr	r0, [pc, #20]	; (80a0b90 <_Z22__fetch_global_Serial1v+0x40>)
 80a0b7c:	f000 f9da 	bl	80a0f34 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0b80:	4803      	ldr	r0, [pc, #12]	; (80a0b90 <_Z22__fetch_global_Serial1v+0x40>)
 80a0b82:	bd38      	pop	{r3, r4, r5, pc}
 80a0b84:	20000478 	.word	0x20000478
 80a0b88:	2000047c 	.word	0x2000047c
 80a0b8c:	200003f4 	.word	0x200003f4
 80a0b90:	200003e0 	.word	0x200003e0
 80a0b94:	20000070 	.word	0x20000070
 80a0b98:	080a0a99 	.word	0x080a0a99

080a0b9c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a0b9c:	4770      	bx	lr

080a0b9e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0ba0:	4606      	mov	r6, r0
 80a0ba2:	4615      	mov	r5, r2
 80a0ba4:	460c      	mov	r4, r1
 80a0ba6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0ba8:	42bc      	cmp	r4, r7
 80a0baa:	d006      	beq.n	80a0bba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0bac:	6833      	ldr	r3, [r6, #0]
 80a0bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0bb2:	689b      	ldr	r3, [r3, #8]
 80a0bb4:	4630      	mov	r0, r6
 80a0bb6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0bb8:	e7f6      	b.n	80a0ba8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0bba:	4628      	mov	r0, r5
 80a0bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0bbe <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0bbe:	2200      	movs	r2, #0
 80a0bc0:	7c00      	ldrb	r0, [r0, #16]
 80a0bc2:	f7ff bb87 	b.w	80a02d4 <HAL_I2C_Write_Data>

080a0bc6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0bc6:	2100      	movs	r1, #0
 80a0bc8:	7c00      	ldrb	r0, [r0, #16]
 80a0bca:	f7ff bb8b 	b.w	80a02e4 <HAL_I2C_Available_Data>

080a0bce <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0bce:	2100      	movs	r1, #0
 80a0bd0:	7c00      	ldrb	r0, [r0, #16]
 80a0bd2:	f7ff bb8f 	b.w	80a02f4 <HAL_I2C_Read_Data>

080a0bd6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0bd6:	2100      	movs	r1, #0
 80a0bd8:	7c00      	ldrb	r0, [r0, #16]
 80a0bda:	f7ff bb93 	b.w	80a0304 <HAL_I2C_Peek_Data>

080a0bde <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0bde:	2100      	movs	r1, #0
 80a0be0:	7c00      	ldrb	r0, [r0, #16]
 80a0be2:	f7ff bb97 	b.w	80a0314 <HAL_I2C_Flush_Data>

080a0be6 <_ZN7TwoWireD0Ev>:
 80a0be6:	b510      	push	{r4, lr}
 80a0be8:	4604      	mov	r4, r0
 80a0bea:	2114      	movs	r1, #20
 80a0bec:	f000 f9b0 	bl	80a0f50 <_ZdlPvj>
 80a0bf0:	4620      	mov	r0, r4
 80a0bf2:	bd10      	pop	{r4, pc}

080a0bf4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a0bf4:	b510      	push	{r4, lr}
 80a0bf6:	4604      	mov	r4, r0
 80a0bf8:	2300      	movs	r3, #0
 80a0bfa:	6063      	str	r3, [r4, #4]
 80a0bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0c00:	60a3      	str	r3, [r4, #8]
 80a0c02:	4b04      	ldr	r3, [pc, #16]	; (80a0c14 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a0c04:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a0c06:	4608      	mov	r0, r1
 80a0c08:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a0c0a:	4611      	mov	r1, r2
 80a0c0c:	f7ff fb92 	bl	80a0334 <HAL_I2C_Init>
}
 80a0c10:	4620      	mov	r0, r4
 80a0c12:	bd10      	pop	{r4, pc}
 80a0c14:	080a1ca0 	.word	0x080a1ca0

080a0c18 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0c18:	2100      	movs	r1, #0
 80a0c1a:	7c00      	ldrb	r0, [r0, #16]
 80a0c1c:	f7ff bb82 	b.w	80a0324 <HAL_I2C_Is_Enabled>

080a0c20 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0c20:	2200      	movs	r2, #0
 80a0c22:	4611      	mov	r1, r2
 80a0c24:	6840      	ldr	r0, [r0, #4]
 80a0c26:	f7ff bc0b 	b.w	80a0440 <network_ready>

080a0c2a <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0c2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0c2c:	4616      	mov	r6, r2
 80a0c2e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0c30:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0c32:	460f      	mov	r7, r1
 80a0c34:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0c36:	2100      	movs	r1, #0
 80a0c38:	a803      	add	r0, sp, #12
 80a0c3a:	f000 ff14 	bl	80a1a66 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0c3e:	4630      	mov	r0, r6
 80a0c40:	f000 ff42 	bl	80a1ac8 <strlen>
 80a0c44:	2500      	movs	r5, #0
 80a0c46:	9500      	str	r5, [sp, #0]
 80a0c48:	b281      	uxth	r1, r0
 80a0c4a:	687b      	ldr	r3, [r7, #4]
 80a0c4c:	aa03      	add	r2, sp, #12
 80a0c4e:	4630      	mov	r0, r6
 80a0c50:	f7ff fbb2 	bl	80a03b8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0c54:	b120      	cbz	r0, 80a0c60 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a0c56:	4629      	mov	r1, r5
 80a0c58:	4620      	mov	r0, r4
 80a0c5a:	f7ff fe29 	bl	80a08b0 <_ZN9IPAddressC1Em>
 80a0c5e:	e003      	b.n	80a0c68 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a0c60:	a903      	add	r1, sp, #12
 80a0c62:	4620      	mov	r0, r4
 80a0c64:	f7ff fe12 	bl	80a088c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a0c68:	4620      	mov	r0, r4
 80a0c6a:	b009      	add	sp, #36	; 0x24
 80a0c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0c6e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a0c6e:	2200      	movs	r2, #0
 80a0c70:	4611      	mov	r1, r2
 80a0c72:	6840      	ldr	r0, [r0, #4]
 80a0c74:	f7ff bc04 	b.w	80a0480 <network_listening>

080a0c78 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a0c78:	2200      	movs	r2, #0
 80a0c7a:	4611      	mov	r1, r2
 80a0c7c:	6840      	ldr	r0, [r0, #4]
 80a0c7e:	f7ff bc0f 	b.w	80a04a0 <network_get_listen_timeout>

080a0c82 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0c82:	2200      	movs	r2, #0
 80a0c84:	6840      	ldr	r0, [r0, #4]
 80a0c86:	f7ff bc03 	b.w	80a0490 <network_set_listen_timeout>

080a0c8a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0c8a:	2200      	movs	r2, #0
 80a0c8c:	f081 0101 	eor.w	r1, r1, #1
 80a0c90:	6840      	ldr	r0, [r0, #4]
 80a0c92:	f7ff bbed 	b.w	80a0470 <network_listen>

080a0c96 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0c96:	2300      	movs	r3, #0
 80a0c98:	461a      	mov	r2, r3
 80a0c9a:	4619      	mov	r1, r3
 80a0c9c:	6840      	ldr	r0, [r0, #4]
 80a0c9e:	f7ff bbdf 	b.w	80a0460 <network_off>

080a0ca2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0ca2:	2200      	movs	r2, #0
 80a0ca4:	4611      	mov	r1, r2
 80a0ca6:	6840      	ldr	r0, [r0, #4]
 80a0ca8:	f7ff bbba 	b.w	80a0420 <network_connecting>

080a0cac <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0cac:	2200      	movs	r2, #0
 80a0cae:	2102      	movs	r1, #2
 80a0cb0:	6840      	ldr	r0, [r0, #4]
 80a0cb2:	f7ff bbbd 	b.w	80a0430 <network_disconnect>

080a0cb6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0cb6:	2300      	movs	r3, #0
 80a0cb8:	461a      	mov	r2, r3
 80a0cba:	6840      	ldr	r0, [r0, #4]
 80a0cbc:	f7ff bba8 	b.w	80a0410 <network_connect>

080a0cc0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0cc0:	4b02      	ldr	r3, [pc, #8]	; (80a0ccc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0cc2:	2204      	movs	r2, #4
 80a0cc4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0cc6:	4a02      	ldr	r2, [pc, #8]	; (80a0cd0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0cc8:	601a      	str	r2, [r3, #0]
 80a0cca:	4770      	bx	lr
 80a0ccc:	20000500 	.word	0x20000500
 80a0cd0:	080a1cc8 	.word	0x080a1cc8

080a0cd4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0cd4:	2300      	movs	r3, #0
 80a0cd6:	461a      	mov	r2, r3
 80a0cd8:	6840      	ldr	r0, [r0, #4]
 80a0cda:	f7ff bb99 	b.w	80a0410 <network_connect>

080a0cde <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0cde:	2200      	movs	r2, #0
 80a0ce0:	2102      	movs	r1, #2
 80a0ce2:	6840      	ldr	r0, [r0, #4]
 80a0ce4:	f7ff bba4 	b.w	80a0430 <network_disconnect>

080a0ce8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0ce8:	2200      	movs	r2, #0
 80a0cea:	4611      	mov	r1, r2
 80a0cec:	6840      	ldr	r0, [r0, #4]
 80a0cee:	f7ff bb97 	b.w	80a0420 <network_connecting>

080a0cf2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0cf2:	2200      	movs	r2, #0
 80a0cf4:	4611      	mov	r1, r2
 80a0cf6:	6840      	ldr	r0, [r0, #4]
 80a0cf8:	f7ff bba2 	b.w	80a0440 <network_ready>

080a0cfc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0cfc:	2300      	movs	r3, #0
 80a0cfe:	461a      	mov	r2, r3
 80a0d00:	4619      	mov	r1, r3
 80a0d02:	6840      	ldr	r0, [r0, #4]
 80a0d04:	f7ff bba4 	b.w	80a0450 <network_on>

080a0d08 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0d08:	2300      	movs	r3, #0
 80a0d0a:	461a      	mov	r2, r3
 80a0d0c:	4619      	mov	r1, r3
 80a0d0e:	6840      	ldr	r0, [r0, #4]
 80a0d10:	f7ff bba6 	b.w	80a0460 <network_off>

080a0d14 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0d14:	2200      	movs	r2, #0
 80a0d16:	f081 0101 	eor.w	r1, r1, #1
 80a0d1a:	6840      	ldr	r0, [r0, #4]
 80a0d1c:	f7ff bba8 	b.w	80a0470 <network_listen>

080a0d20 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0d20:	2200      	movs	r2, #0
 80a0d22:	6840      	ldr	r0, [r0, #4]
 80a0d24:	f7ff bbb4 	b.w	80a0490 <network_set_listen_timeout>

080a0d28 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0d28:	2200      	movs	r2, #0
 80a0d2a:	4611      	mov	r1, r2
 80a0d2c:	6840      	ldr	r0, [r0, #4]
 80a0d2e:	f7ff bbb7 	b.w	80a04a0 <network_get_listen_timeout>

080a0d32 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0d32:	2200      	movs	r2, #0
 80a0d34:	4611      	mov	r1, r2
 80a0d36:	6840      	ldr	r0, [r0, #4]
 80a0d38:	f7ff bba2 	b.w	80a0480 <network_listening>

080a0d3c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0d3c:	b570      	push	{r4, r5, r6, lr}
 80a0d3e:	4616      	mov	r6, r2
 80a0d40:	b08e      	sub	sp, #56	; 0x38
 80a0d42:	4604      	mov	r4, r0
    IPAddress addr;
 80a0d44:	a808      	add	r0, sp, #32
 80a0d46:	f7ff fd93 	bl	80a0870 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0d4a:	2211      	movs	r2, #17
 80a0d4c:	2100      	movs	r1, #0
 80a0d4e:	a803      	add	r0, sp, #12
 80a0d50:	f000 fe89 	bl	80a1a66 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0d54:	4630      	mov	r0, r6
 80a0d56:	f000 feb7 	bl	80a1ac8 <strlen>
 80a0d5a:	2500      	movs	r5, #0
 80a0d5c:	4b0a      	ldr	r3, [pc, #40]	; (80a0d88 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0d5e:	9500      	str	r5, [sp, #0]
 80a0d60:	b281      	uxth	r1, r0
 80a0d62:	685b      	ldr	r3, [r3, #4]
 80a0d64:	aa03      	add	r2, sp, #12
 80a0d66:	4630      	mov	r0, r6
 80a0d68:	f7ff fb26 	bl	80a03b8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0d6c:	b120      	cbz	r0, 80a0d78 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0d6e:	4629      	mov	r1, r5
 80a0d70:	4620      	mov	r0, r4
 80a0d72:	f7ff fd9d 	bl	80a08b0 <_ZN9IPAddressC1Em>
 80a0d76:	e003      	b.n	80a0d80 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0d78:	a903      	add	r1, sp, #12
 80a0d7a:	4620      	mov	r0, r4
 80a0d7c:	f7ff fd86 	bl	80a088c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0d80:	4620      	mov	r0, r4
 80a0d82:	b00e      	add	sp, #56	; 0x38
 80a0d84:	bd70      	pop	{r4, r5, r6, pc}
 80a0d86:	bf00      	nop
 80a0d88:	20000500 	.word	0x20000500

080a0d8c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a0d8c:	4b02      	ldr	r3, [pc, #8]	; (80a0d98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0d8e:	4a03      	ldr	r2, [pc, #12]	; (80a0d9c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0d90:	601a      	str	r2, [r3, #0]
 80a0d92:	2200      	movs	r2, #0
 80a0d94:	605a      	str	r2, [r3, #4]
 80a0d96:	4770      	bx	lr
 80a0d98:	20000508 	.word	0x20000508
 80a0d9c:	080a1cfc 	.word	0x080a1cfc

080a0da0 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a0da0:	b510      	push	{r4, lr}
 80a0da2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0da4:	6880      	ldr	r0, [r0, #8]
 80a0da6:	b108      	cbz	r0, 80a0dac <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a0da8:	f7ff fa4c 	bl	80a0244 <os_mutex_recursive_destroy>
 80a0dac:	4620      	mov	r0, r4
 80a0dae:	bd10      	pop	{r4, pc}

080a0db0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a0db0:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a0db2:	4e1a      	ldr	r6, [pc, #104]	; (80a0e1c <pinAvailable+0x6c>)
 80a0db4:	4604      	mov	r4, r0
 80a0db6:	6831      	ldr	r1, [r6, #0]
 80a0db8:	f011 0501 	ands.w	r5, r1, #1
 80a0dbc:	d10f      	bne.n	80a0dde <pinAvailable+0x2e>
 80a0dbe:	4630      	mov	r0, r6
 80a0dc0:	f7ff f96d 	bl	80a009e <__cxa_guard_acquire>
 80a0dc4:	b158      	cbz	r0, 80a0dde <pinAvailable+0x2e>
 80a0dc6:	4629      	mov	r1, r5
 80a0dc8:	4815      	ldr	r0, [pc, #84]	; (80a0e20 <pinAvailable+0x70>)
 80a0dca:	f7ff fb91 	bl	80a04f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0dce:	4630      	mov	r0, r6
 80a0dd0:	f7ff f96a 	bl	80a00a8 <__cxa_guard_release>
 80a0dd4:	4a13      	ldr	r2, [pc, #76]	; (80a0e24 <pinAvailable+0x74>)
 80a0dd6:	4914      	ldr	r1, [pc, #80]	; (80a0e28 <pinAvailable+0x78>)
 80a0dd8:	4811      	ldr	r0, [pc, #68]	; (80a0e20 <pinAvailable+0x70>)
 80a0dda:	f000 f8ab 	bl	80a0f34 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a0dde:	4810      	ldr	r0, [pc, #64]	; (80a0e20 <pinAvailable+0x70>)
 80a0de0:	f7ff fb95 	bl	80a050e <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a0de4:	b128      	cbz	r0, 80a0df2 <pinAvailable+0x42>
 80a0de6:	f1a4 030d 	sub.w	r3, r4, #13
 80a0dea:	2b02      	cmp	r3, #2
 80a0dec:	d801      	bhi.n	80a0df2 <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a0dee:	2000      	movs	r0, #0
 80a0df0:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a0df2:	f000 f879 	bl	80a0ee8 <_Z19__fetch_global_Wirev>
 80a0df6:	f7ff ff0f 	bl	80a0c18 <_ZN7TwoWire9isEnabledEv>
 80a0dfa:	b108      	cbz	r0, 80a0e00 <pinAvailable+0x50>
 80a0dfc:	2c01      	cmp	r4, #1
 80a0dfe:	d9f6      	bls.n	80a0dee <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a0e00:	f7ff fea6 	bl	80a0b50 <_Z22__fetch_global_Serial1v>
 80a0e04:	f7ff fea0 	bl	80a0b48 <_ZN11USARTSerial9isEnabledEv>
 80a0e08:	b118      	cbz	r0, 80a0e12 <pinAvailable+0x62>
 80a0e0a:	f1a4 0312 	sub.w	r3, r4, #18
 80a0e0e:	2b01      	cmp	r3, #1
 80a0e10:	d9ed      	bls.n	80a0dee <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a0e12:	2c17      	cmp	r4, #23
 80a0e14:	bf8c      	ite	hi
 80a0e16:	2000      	movhi	r0, #0
 80a0e18:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a0e1a:	bd70      	pop	{r4, r5, r6, pc}
 80a0e1c:	20000510 	.word	0x20000510
 80a0e20:	20000514 	.word	0x20000514
 80a0e24:	20000070 	.word	0x20000070
 80a0e28:	080a0da1 	.word	0x080a0da1

080a0e2c <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a0e2c:	b538      	push	{r3, r4, r5, lr}
 80a0e2e:	4604      	mov	r4, r0
 80a0e30:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0e32:	f7ff f9b7 	bl	80a01a4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a0e36:	28ff      	cmp	r0, #255	; 0xff
 80a0e38:	d010      	beq.n	80a0e5c <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a0e3a:	2806      	cmp	r0, #6
 80a0e3c:	d804      	bhi.n	80a0e48 <digitalWrite+0x1c>
 80a0e3e:	234d      	movs	r3, #77	; 0x4d
 80a0e40:	fa23 f000 	lsr.w	r0, r3, r0
 80a0e44:	07c3      	lsls	r3, r0, #31
 80a0e46:	d409      	bmi.n	80a0e5c <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a0e48:	4620      	mov	r0, r4
 80a0e4a:	f7ff ffb1 	bl	80a0db0 <pinAvailable>
 80a0e4e:	b128      	cbz	r0, 80a0e5c <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0e50:	4629      	mov	r1, r5
 80a0e52:	4620      	mov	r0, r4
}
 80a0e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0e58:	f7ff b9ac 	b.w	80a01b4 <HAL_GPIO_Write>
 80a0e5c:	bd38      	pop	{r3, r4, r5, pc}

080a0e5e <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a0e5e:	b510      	push	{r4, lr}
 80a0e60:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0e62:	f7ff f99f 	bl	80a01a4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a0e66:	3804      	subs	r0, #4
 80a0e68:	b2c0      	uxtb	r0, r0
 80a0e6a:	2801      	cmp	r0, #1
 80a0e6c:	d908      	bls.n	80a0e80 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a0e6e:	4620      	mov	r0, r4
 80a0e70:	f7ff ff9e 	bl	80a0db0 <pinAvailable>
 80a0e74:	b120      	cbz	r0, 80a0e80 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a0e76:	4620      	mov	r0, r4
}
 80a0e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a0e7c:	f7ff b9a2 	b.w	80a01c4 <HAL_GPIO_Read>
}
 80a0e80:	2000      	movs	r0, #0
 80a0e82:	bd10      	pop	{r4, pc}

080a0e84 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0e84:	b513      	push	{r0, r1, r4, lr}
 80a0e86:	4c08      	ldr	r4, [pc, #32]	; (80a0ea8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0e88:	2300      	movs	r3, #0
 80a0e8a:	461a      	mov	r2, r3
 80a0e8c:	4619      	mov	r1, r3
 80a0e8e:	9300      	str	r3, [sp, #0]
 80a0e90:	4620      	mov	r0, r4
 80a0e92:	f7ff fd23 	bl	80a08dc <_ZN9IPAddressC1Ehhhh>
 80a0e96:	4620      	mov	r0, r4
 80a0e98:	4a04      	ldr	r2, [pc, #16]	; (80a0eac <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0e9a:	4905      	ldr	r1, [pc, #20]	; (80a0eb0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0e9c:	b002      	add	sp, #8
 80a0e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0ea2:	f000 b847 	b.w	80a0f34 <__aeabi_atexit>
 80a0ea6:	bf00      	nop
 80a0ea8:	20000524 	.word	0x20000524
 80a0eac:	20000070 	.word	0x20000070
 80a0eb0:	080a082d 	.word	0x080a082d

080a0eb4 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a0eb4:	b570      	push	{r4, r5, r6, lr}
 80a0eb6:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0eb8:	2514      	movs	r5, #20
 80a0eba:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0ebc:	4e09      	ldr	r6, [pc, #36]	; (80a0ee4 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0ebe:	2100      	movs	r1, #0
 80a0ec0:	f000 fdd1 	bl	80a1a66 <memset>
 80a0ec4:	8025      	strh	r5, [r4, #0]
 80a0ec6:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0ec8:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0eca:	60a5      	str	r5, [r4, #8]
 80a0ecc:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0ece:	4628      	mov	r0, r5
 80a0ed0:	f000 f840 	bl	80a0f54 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0ed4:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0ed6:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0ed8:	4628      	mov	r0, r5
 80a0eda:	f000 f83b 	bl	80a0f54 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0ede:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a0ee0:	4620      	mov	r0, r4
 80a0ee2:	bd70      	pop	{r4, r5, r6, pc}
 80a0ee4:	080a1d28 	.word	0x080a1d28

080a0ee8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a0ee8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0eea:	4d0e      	ldr	r5, [pc, #56]	; (80a0f24 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a0eec:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0eee:	6829      	ldr	r1, [r5, #0]
 80a0ef0:	f011 0401 	ands.w	r4, r1, #1
 80a0ef4:	d113      	bne.n	80a0f1e <_Z19__fetch_global_Wirev+0x36>
 80a0ef6:	4628      	mov	r0, r5
 80a0ef8:	f7ff f8d1 	bl	80a009e <__cxa_guard_acquire>
 80a0efc:	b178      	cbz	r0, 80a0f1e <_Z19__fetch_global_Wirev+0x36>
 80a0efe:	a801      	add	r0, sp, #4
 80a0f00:	f7ff ffd8 	bl	80a0eb4 <_Z17acquireWireBufferv>
 80a0f04:	aa01      	add	r2, sp, #4
 80a0f06:	4621      	mov	r1, r4
 80a0f08:	4807      	ldr	r0, [pc, #28]	; (80a0f28 <_Z19__fetch_global_Wirev+0x40>)
 80a0f0a:	f7ff fe73 	bl	80a0bf4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a0f0e:	4628      	mov	r0, r5
 80a0f10:	f7ff f8ca 	bl	80a00a8 <__cxa_guard_release>
 80a0f14:	4a05      	ldr	r2, [pc, #20]	; (80a0f2c <_Z19__fetch_global_Wirev+0x44>)
 80a0f16:	4906      	ldr	r1, [pc, #24]	; (80a0f30 <_Z19__fetch_global_Wirev+0x48>)
 80a0f18:	4803      	ldr	r0, [pc, #12]	; (80a0f28 <_Z19__fetch_global_Wirev+0x40>)
 80a0f1a:	f000 f80b 	bl	80a0f34 <__aeabi_atexit>
	return wire;
}
 80a0f1e:	4802      	ldr	r0, [pc, #8]	; (80a0f28 <_Z19__fetch_global_Wirev+0x40>)
 80a0f20:	b007      	add	sp, #28
 80a0f22:	bd30      	pop	{r4, r5, pc}
 80a0f24:	2000053c 	.word	0x2000053c
 80a0f28:	20000540 	.word	0x20000540
 80a0f2c:	20000070 	.word	0x20000070
 80a0f30:	080a0b9d 	.word	0x080a0b9d

080a0f34 <__aeabi_atexit>:
 80a0f34:	460b      	mov	r3, r1
 80a0f36:	4601      	mov	r1, r0
 80a0f38:	4618      	mov	r0, r3
 80a0f3a:	f000 bd7b 	b.w	80a1a34 <__cxa_atexit>
	...

080a0f40 <_ZSt15get_new_handlerv>:
 80a0f40:	4b02      	ldr	r3, [pc, #8]	; (80a0f4c <_ZSt15get_new_handlerv+0xc>)
 80a0f42:	6818      	ldr	r0, [r3, #0]
 80a0f44:	f3bf 8f5f 	dmb	sy
 80a0f48:	4770      	bx	lr
 80a0f4a:	bf00      	nop
 80a0f4c:	20000554 	.word	0x20000554

080a0f50 <_ZdlPvj>:
 80a0f50:	f7ff b8a3 	b.w	80a009a <_ZdlPv>

080a0f54 <_ZnajRKSt9nothrow_t>:
 80a0f54:	f000 b800 	b.w	80a0f58 <_ZnwjRKSt9nothrow_t>

080a0f58 <_ZnwjRKSt9nothrow_t>:
 80a0f58:	b510      	push	{r4, lr}
 80a0f5a:	2800      	cmp	r0, #0
 80a0f5c:	bf14      	ite	ne
 80a0f5e:	4604      	movne	r4, r0
 80a0f60:	2401      	moveq	r4, #1
 80a0f62:	4620      	mov	r0, r4
 80a0f64:	f7ff faac 	bl	80a04c0 <malloc>
 80a0f68:	b920      	cbnz	r0, 80a0f74 <_ZnwjRKSt9nothrow_t+0x1c>
 80a0f6a:	f7ff ffe9 	bl	80a0f40 <_ZSt15get_new_handlerv>
 80a0f6e:	b108      	cbz	r0, 80a0f74 <_ZnwjRKSt9nothrow_t+0x1c>
 80a0f70:	4780      	blx	r0
 80a0f72:	e7f6      	b.n	80a0f62 <_ZnwjRKSt9nothrow_t+0xa>
 80a0f74:	bd10      	pop	{r4, pc}
	...

080a0f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0f78:	4b18      	ldr	r3, [pc, #96]	; (80a0fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0f7a:	681a      	ldr	r2, [r3, #0]
 80a0f7c:	07d1      	lsls	r1, r2, #31
 80a0f7e:	bf5c      	itt	pl
 80a0f80:	2201      	movpl	r2, #1
 80a0f82:	601a      	strpl	r2, [r3, #0]
 80a0f84:	4b16      	ldr	r3, [pc, #88]	; (80a0fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0f86:	681a      	ldr	r2, [r3, #0]
 80a0f88:	07d2      	lsls	r2, r2, #31
 80a0f8a:	bf5c      	itt	pl
 80a0f8c:	2201      	movpl	r2, #1
 80a0f8e:	601a      	strpl	r2, [r3, #0]
 80a0f90:	4b14      	ldr	r3, [pc, #80]	; (80a0fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0f92:	681a      	ldr	r2, [r3, #0]
 80a0f94:	07d0      	lsls	r0, r2, #31
 80a0f96:	bf5c      	itt	pl
 80a0f98:	2201      	movpl	r2, #1
 80a0f9a:	601a      	strpl	r2, [r3, #0]
 80a0f9c:	4b12      	ldr	r3, [pc, #72]	; (80a0fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0f9e:	681a      	ldr	r2, [r3, #0]
 80a0fa0:	07d1      	lsls	r1, r2, #31
 80a0fa2:	bf5c      	itt	pl
 80a0fa4:	2201      	movpl	r2, #1
 80a0fa6:	601a      	strpl	r2, [r3, #0]
 80a0fa8:	4b10      	ldr	r3, [pc, #64]	; (80a0fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0faa:	681a      	ldr	r2, [r3, #0]
 80a0fac:	07d2      	lsls	r2, r2, #31
 80a0fae:	bf5c      	itt	pl
 80a0fb0:	2201      	movpl	r2, #1
 80a0fb2:	601a      	strpl	r2, [r3, #0]
 80a0fb4:	4b0e      	ldr	r3, [pc, #56]	; (80a0ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0fb6:	681a      	ldr	r2, [r3, #0]
 80a0fb8:	07d0      	lsls	r0, r2, #31
 80a0fba:	bf5c      	itt	pl
 80a0fbc:	2201      	movpl	r2, #1
 80a0fbe:	601a      	strpl	r2, [r3, #0]
 80a0fc0:	4b0c      	ldr	r3, [pc, #48]	; (80a0ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0fc2:	681a      	ldr	r2, [r3, #0]
 80a0fc4:	07d1      	lsls	r1, r2, #31
 80a0fc6:	bf5c      	itt	pl
 80a0fc8:	2201      	movpl	r2, #1
 80a0fca:	601a      	strpl	r2, [r3, #0]
 80a0fcc:	4b0a      	ldr	r3, [pc, #40]	; (80a0ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0fce:	681a      	ldr	r2, [r3, #0]
 80a0fd0:	07d2      	lsls	r2, r2, #31
 80a0fd2:	bf5c      	itt	pl
 80a0fd4:	2201      	movpl	r2, #1
 80a0fd6:	601a      	strpl	r2, [r3, #0]
 80a0fd8:	4770      	bx	lr
 80a0fda:	bf00      	nop
 80a0fdc:	20000574 	.word	0x20000574
 80a0fe0:	20000570 	.word	0x20000570
 80a0fe4:	2000056c 	.word	0x2000056c
 80a0fe8:	20000568 	.word	0x20000568
 80a0fec:	20000564 	.word	0x20000564
 80a0ff0:	20000560 	.word	0x20000560
 80a0ff4:	2000055c 	.word	0x2000055c
 80a0ff8:	20000558 	.word	0x20000558

080a0ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a0ffc:	4b24      	ldr	r3, [pc, #144]	; (80a1090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a0ffe:	681a      	ldr	r2, [r3, #0]
 80a1000:	07d0      	lsls	r0, r2, #31
 80a1002:	bf5c      	itt	pl
 80a1004:	2201      	movpl	r2, #1
 80a1006:	601a      	strpl	r2, [r3, #0]
 80a1008:	4b22      	ldr	r3, [pc, #136]	; (80a1094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a100a:	681a      	ldr	r2, [r3, #0]
 80a100c:	07d1      	lsls	r1, r2, #31
 80a100e:	bf5c      	itt	pl
 80a1010:	2201      	movpl	r2, #1
 80a1012:	601a      	strpl	r2, [r3, #0]
 80a1014:	4b20      	ldr	r3, [pc, #128]	; (80a1098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1016:	681a      	ldr	r2, [r3, #0]
 80a1018:	07d2      	lsls	r2, r2, #31
 80a101a:	bf5c      	itt	pl
 80a101c:	2201      	movpl	r2, #1
 80a101e:	601a      	strpl	r2, [r3, #0]
 80a1020:	4b1e      	ldr	r3, [pc, #120]	; (80a109c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1022:	681a      	ldr	r2, [r3, #0]
 80a1024:	07d0      	lsls	r0, r2, #31
 80a1026:	bf5c      	itt	pl
 80a1028:	2201      	movpl	r2, #1
 80a102a:	601a      	strpl	r2, [r3, #0]
 80a102c:	4b1c      	ldr	r3, [pc, #112]	; (80a10a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a102e:	681a      	ldr	r2, [r3, #0]
 80a1030:	07d1      	lsls	r1, r2, #31
 80a1032:	bf5c      	itt	pl
 80a1034:	2201      	movpl	r2, #1
 80a1036:	601a      	strpl	r2, [r3, #0]
 80a1038:	4b1a      	ldr	r3, [pc, #104]	; (80a10a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a103a:	681a      	ldr	r2, [r3, #0]
 80a103c:	07d2      	lsls	r2, r2, #31
 80a103e:	bf5c      	itt	pl
 80a1040:	2201      	movpl	r2, #1
 80a1042:	601a      	strpl	r2, [r3, #0]
 80a1044:	4b18      	ldr	r3, [pc, #96]	; (80a10a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1046:	681a      	ldr	r2, [r3, #0]
 80a1048:	07d0      	lsls	r0, r2, #31
 80a104a:	bf5c      	itt	pl
 80a104c:	2201      	movpl	r2, #1
 80a104e:	601a      	strpl	r2, [r3, #0]
 80a1050:	4b16      	ldr	r3, [pc, #88]	; (80a10ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1052:	681a      	ldr	r2, [r3, #0]
 80a1054:	07d1      	lsls	r1, r2, #31
 80a1056:	bf5c      	itt	pl
 80a1058:	2201      	movpl	r2, #1
 80a105a:	601a      	strpl	r2, [r3, #0]
 80a105c:	4b14      	ldr	r3, [pc, #80]	; (80a10b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a105e:	681a      	ldr	r2, [r3, #0]
 80a1060:	07d2      	lsls	r2, r2, #31
 80a1062:	bf5c      	itt	pl
 80a1064:	2201      	movpl	r2, #1
 80a1066:	601a      	strpl	r2, [r3, #0]
 80a1068:	4b12      	ldr	r3, [pc, #72]	; (80a10b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a106a:	681a      	ldr	r2, [r3, #0]
 80a106c:	07d0      	lsls	r0, r2, #31
 80a106e:	bf5c      	itt	pl
 80a1070:	2201      	movpl	r2, #1
 80a1072:	601a      	strpl	r2, [r3, #0]
 80a1074:	4b10      	ldr	r3, [pc, #64]	; (80a10b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1076:	681a      	ldr	r2, [r3, #0]
 80a1078:	07d1      	lsls	r1, r2, #31
 80a107a:	bf5c      	itt	pl
 80a107c:	2201      	movpl	r2, #1
 80a107e:	601a      	strpl	r2, [r3, #0]
 80a1080:	4b0e      	ldr	r3, [pc, #56]	; (80a10bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1082:	681a      	ldr	r2, [r3, #0]
 80a1084:	07d2      	lsls	r2, r2, #31
 80a1086:	bf5c      	itt	pl
 80a1088:	2201      	movpl	r2, #1
 80a108a:	601a      	strpl	r2, [r3, #0]
 80a108c:	4770      	bx	lr
 80a108e:	bf00      	nop
 80a1090:	200005a4 	.word	0x200005a4
 80a1094:	200005a0 	.word	0x200005a0
 80a1098:	2000059c 	.word	0x2000059c
 80a109c:	20000598 	.word	0x20000598
 80a10a0:	20000594 	.word	0x20000594
 80a10a4:	20000590 	.word	0x20000590
 80a10a8:	2000058c 	.word	0x2000058c
 80a10ac:	20000588 	.word	0x20000588
 80a10b0:	20000584 	.word	0x20000584
 80a10b4:	20000580 	.word	0x20000580
 80a10b8:	2000057c 	.word	0x2000057c
 80a10bc:	20000578 	.word	0x20000578

080a10c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a10c0:	4b24      	ldr	r3, [pc, #144]	; (80a1154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a10c2:	681a      	ldr	r2, [r3, #0]
 80a10c4:	07d0      	lsls	r0, r2, #31
 80a10c6:	bf5c      	itt	pl
 80a10c8:	2201      	movpl	r2, #1
 80a10ca:	601a      	strpl	r2, [r3, #0]
 80a10cc:	4b22      	ldr	r3, [pc, #136]	; (80a1158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a10ce:	681a      	ldr	r2, [r3, #0]
 80a10d0:	07d1      	lsls	r1, r2, #31
 80a10d2:	bf5c      	itt	pl
 80a10d4:	2201      	movpl	r2, #1
 80a10d6:	601a      	strpl	r2, [r3, #0]
 80a10d8:	4b20      	ldr	r3, [pc, #128]	; (80a115c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a10da:	681a      	ldr	r2, [r3, #0]
 80a10dc:	07d2      	lsls	r2, r2, #31
 80a10de:	bf5c      	itt	pl
 80a10e0:	2201      	movpl	r2, #1
 80a10e2:	601a      	strpl	r2, [r3, #0]
 80a10e4:	4b1e      	ldr	r3, [pc, #120]	; (80a1160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a10e6:	681a      	ldr	r2, [r3, #0]
 80a10e8:	07d0      	lsls	r0, r2, #31
 80a10ea:	bf5c      	itt	pl
 80a10ec:	2201      	movpl	r2, #1
 80a10ee:	601a      	strpl	r2, [r3, #0]
 80a10f0:	4b1c      	ldr	r3, [pc, #112]	; (80a1164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a10f2:	681a      	ldr	r2, [r3, #0]
 80a10f4:	07d1      	lsls	r1, r2, #31
 80a10f6:	bf5c      	itt	pl
 80a10f8:	2201      	movpl	r2, #1
 80a10fa:	601a      	strpl	r2, [r3, #0]
 80a10fc:	4b1a      	ldr	r3, [pc, #104]	; (80a1168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a10fe:	681a      	ldr	r2, [r3, #0]
 80a1100:	07d2      	lsls	r2, r2, #31
 80a1102:	bf5c      	itt	pl
 80a1104:	2201      	movpl	r2, #1
 80a1106:	601a      	strpl	r2, [r3, #0]
 80a1108:	4b18      	ldr	r3, [pc, #96]	; (80a116c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a110a:	681a      	ldr	r2, [r3, #0]
 80a110c:	07d0      	lsls	r0, r2, #31
 80a110e:	bf5c      	itt	pl
 80a1110:	2201      	movpl	r2, #1
 80a1112:	601a      	strpl	r2, [r3, #0]
 80a1114:	4b16      	ldr	r3, [pc, #88]	; (80a1170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1116:	681a      	ldr	r2, [r3, #0]
 80a1118:	07d1      	lsls	r1, r2, #31
 80a111a:	bf5c      	itt	pl
 80a111c:	2201      	movpl	r2, #1
 80a111e:	601a      	strpl	r2, [r3, #0]
 80a1120:	4b14      	ldr	r3, [pc, #80]	; (80a1174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1122:	681a      	ldr	r2, [r3, #0]
 80a1124:	07d2      	lsls	r2, r2, #31
 80a1126:	bf5c      	itt	pl
 80a1128:	2201      	movpl	r2, #1
 80a112a:	601a      	strpl	r2, [r3, #0]
 80a112c:	4b12      	ldr	r3, [pc, #72]	; (80a1178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a112e:	681a      	ldr	r2, [r3, #0]
 80a1130:	07d0      	lsls	r0, r2, #31
 80a1132:	bf5c      	itt	pl
 80a1134:	2201      	movpl	r2, #1
 80a1136:	601a      	strpl	r2, [r3, #0]
 80a1138:	4b10      	ldr	r3, [pc, #64]	; (80a117c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a113a:	681a      	ldr	r2, [r3, #0]
 80a113c:	07d1      	lsls	r1, r2, #31
 80a113e:	bf5c      	itt	pl
 80a1140:	2201      	movpl	r2, #1
 80a1142:	601a      	strpl	r2, [r3, #0]
 80a1144:	4b0e      	ldr	r3, [pc, #56]	; (80a1180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1146:	681a      	ldr	r2, [r3, #0]
 80a1148:	07d2      	lsls	r2, r2, #31
 80a114a:	bf5c      	itt	pl
 80a114c:	2201      	movpl	r2, #1
 80a114e:	601a      	strpl	r2, [r3, #0]
 80a1150:	4770      	bx	lr
 80a1152:	bf00      	nop
 80a1154:	200005d4 	.word	0x200005d4
 80a1158:	200005d0 	.word	0x200005d0
 80a115c:	200005cc 	.word	0x200005cc
 80a1160:	200005c8 	.word	0x200005c8
 80a1164:	200005c4 	.word	0x200005c4
 80a1168:	200005c0 	.word	0x200005c0
 80a116c:	200005bc 	.word	0x200005bc
 80a1170:	200005b8 	.word	0x200005b8
 80a1174:	200005b4 	.word	0x200005b4
 80a1178:	200005b0 	.word	0x200005b0
 80a117c:	200005ac 	.word	0x200005ac
 80a1180:	200005a8 	.word	0x200005a8

080a1184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1184:	4b18      	ldr	r3, [pc, #96]	; (80a11e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1186:	681a      	ldr	r2, [r3, #0]
 80a1188:	07d1      	lsls	r1, r2, #31
 80a118a:	bf5c      	itt	pl
 80a118c:	2201      	movpl	r2, #1
 80a118e:	601a      	strpl	r2, [r3, #0]
 80a1190:	4b16      	ldr	r3, [pc, #88]	; (80a11ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1192:	681a      	ldr	r2, [r3, #0]
 80a1194:	07d2      	lsls	r2, r2, #31
 80a1196:	bf5c      	itt	pl
 80a1198:	2201      	movpl	r2, #1
 80a119a:	601a      	strpl	r2, [r3, #0]
 80a119c:	4b14      	ldr	r3, [pc, #80]	; (80a11f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a119e:	681a      	ldr	r2, [r3, #0]
 80a11a0:	07d0      	lsls	r0, r2, #31
 80a11a2:	bf5c      	itt	pl
 80a11a4:	2201      	movpl	r2, #1
 80a11a6:	601a      	strpl	r2, [r3, #0]
 80a11a8:	4b12      	ldr	r3, [pc, #72]	; (80a11f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a11aa:	681a      	ldr	r2, [r3, #0]
 80a11ac:	07d1      	lsls	r1, r2, #31
 80a11ae:	bf5c      	itt	pl
 80a11b0:	2201      	movpl	r2, #1
 80a11b2:	601a      	strpl	r2, [r3, #0]
 80a11b4:	4b10      	ldr	r3, [pc, #64]	; (80a11f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a11b6:	681a      	ldr	r2, [r3, #0]
 80a11b8:	07d2      	lsls	r2, r2, #31
 80a11ba:	bf5c      	itt	pl
 80a11bc:	2201      	movpl	r2, #1
 80a11be:	601a      	strpl	r2, [r3, #0]
 80a11c0:	4b0e      	ldr	r3, [pc, #56]	; (80a11fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a11c2:	681a      	ldr	r2, [r3, #0]
 80a11c4:	07d0      	lsls	r0, r2, #31
 80a11c6:	bf5c      	itt	pl
 80a11c8:	2201      	movpl	r2, #1
 80a11ca:	601a      	strpl	r2, [r3, #0]
 80a11cc:	4b0c      	ldr	r3, [pc, #48]	; (80a1200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a11ce:	681a      	ldr	r2, [r3, #0]
 80a11d0:	07d1      	lsls	r1, r2, #31
 80a11d2:	bf5c      	itt	pl
 80a11d4:	2201      	movpl	r2, #1
 80a11d6:	601a      	strpl	r2, [r3, #0]
 80a11d8:	4b0a      	ldr	r3, [pc, #40]	; (80a1204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a11da:	681a      	ldr	r2, [r3, #0]
 80a11dc:	07d2      	lsls	r2, r2, #31
 80a11de:	bf5c      	itt	pl
 80a11e0:	2201      	movpl	r2, #1
 80a11e2:	601a      	strpl	r2, [r3, #0]
 80a11e4:	4770      	bx	lr
 80a11e6:	bf00      	nop
 80a11e8:	200005f4 	.word	0x200005f4
 80a11ec:	200005f0 	.word	0x200005f0
 80a11f0:	200005ec 	.word	0x200005ec
 80a11f4:	200005e8 	.word	0x200005e8
 80a11f8:	200005e4 	.word	0x200005e4
 80a11fc:	200005e0 	.word	0x200005e0
 80a1200:	200005dc 	.word	0x200005dc
 80a1204:	200005d8 	.word	0x200005d8

080a1208 <__aeabi_drsub>:
 80a1208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a120c:	e002      	b.n	80a1214 <__adddf3>
 80a120e:	bf00      	nop

080a1210 <__aeabi_dsub>:
 80a1210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1214 <__adddf3>:
 80a1214:	b530      	push	{r4, r5, lr}
 80a1216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a121a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a121e:	ea94 0f05 	teq	r4, r5
 80a1222:	bf08      	it	eq
 80a1224:	ea90 0f02 	teqeq	r0, r2
 80a1228:	bf1f      	itttt	ne
 80a122a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a122e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a123a:	f000 80e2 	beq.w	80a1402 <__adddf3+0x1ee>
 80a123e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1246:	bfb8      	it	lt
 80a1248:	426d      	neglt	r5, r5
 80a124a:	dd0c      	ble.n	80a1266 <__adddf3+0x52>
 80a124c:	442c      	add	r4, r5
 80a124e:	ea80 0202 	eor.w	r2, r0, r2
 80a1252:	ea81 0303 	eor.w	r3, r1, r3
 80a1256:	ea82 0000 	eor.w	r0, r2, r0
 80a125a:	ea83 0101 	eor.w	r1, r3, r1
 80a125e:	ea80 0202 	eor.w	r2, r0, r2
 80a1262:	ea81 0303 	eor.w	r3, r1, r3
 80a1266:	2d36      	cmp	r5, #54	; 0x36
 80a1268:	bf88      	it	hi
 80a126a:	bd30      	pophi	{r4, r5, pc}
 80a126c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a127c:	d002      	beq.n	80a1284 <__adddf3+0x70>
 80a127e:	4240      	negs	r0, r0
 80a1280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a128c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1290:	d002      	beq.n	80a1298 <__adddf3+0x84>
 80a1292:	4252      	negs	r2, r2
 80a1294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1298:	ea94 0f05 	teq	r4, r5
 80a129c:	f000 80a7 	beq.w	80a13ee <__adddf3+0x1da>
 80a12a0:	f1a4 0401 	sub.w	r4, r4, #1
 80a12a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80a12a8:	db0d      	blt.n	80a12c6 <__adddf3+0xb2>
 80a12aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a12ae:	fa22 f205 	lsr.w	r2, r2, r5
 80a12b2:	1880      	adds	r0, r0, r2
 80a12b4:	f141 0100 	adc.w	r1, r1, #0
 80a12b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80a12bc:	1880      	adds	r0, r0, r2
 80a12be:	fa43 f305 	asr.w	r3, r3, r5
 80a12c2:	4159      	adcs	r1, r3
 80a12c4:	e00e      	b.n	80a12e4 <__adddf3+0xd0>
 80a12c6:	f1a5 0520 	sub.w	r5, r5, #32
 80a12ca:	f10e 0e20 	add.w	lr, lr, #32
 80a12ce:	2a01      	cmp	r2, #1
 80a12d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a12d4:	bf28      	it	cs
 80a12d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a12da:	fa43 f305 	asr.w	r3, r3, r5
 80a12de:	18c0      	adds	r0, r0, r3
 80a12e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a12e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a12e8:	d507      	bpl.n	80a12fa <__adddf3+0xe6>
 80a12ea:	f04f 0e00 	mov.w	lr, #0
 80a12ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80a12f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a12f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80a12fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a12fe:	d31b      	bcc.n	80a1338 <__adddf3+0x124>
 80a1300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1304:	d30c      	bcc.n	80a1320 <__adddf3+0x10c>
 80a1306:	0849      	lsrs	r1, r1, #1
 80a1308:	ea5f 0030 	movs.w	r0, r0, rrx
 80a130c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1310:	f104 0401 	add.w	r4, r4, #1
 80a1314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a131c:	f080 809a 	bcs.w	80a1454 <__adddf3+0x240>
 80a1320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1324:	bf08      	it	eq
 80a1326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a132a:	f150 0000 	adcs.w	r0, r0, #0
 80a132e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1332:	ea41 0105 	orr.w	r1, r1, r5
 80a1336:	bd30      	pop	{r4, r5, pc}
 80a1338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a133c:	4140      	adcs	r0, r0
 80a133e:	eb41 0101 	adc.w	r1, r1, r1
 80a1342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1346:	f1a4 0401 	sub.w	r4, r4, #1
 80a134a:	d1e9      	bne.n	80a1320 <__adddf3+0x10c>
 80a134c:	f091 0f00 	teq	r1, #0
 80a1350:	bf04      	itt	eq
 80a1352:	4601      	moveq	r1, r0
 80a1354:	2000      	moveq	r0, #0
 80a1356:	fab1 f381 	clz	r3, r1
 80a135a:	bf08      	it	eq
 80a135c:	3320      	addeq	r3, #32
 80a135e:	f1a3 030b 	sub.w	r3, r3, #11
 80a1362:	f1b3 0220 	subs.w	r2, r3, #32
 80a1366:	da0c      	bge.n	80a1382 <__adddf3+0x16e>
 80a1368:	320c      	adds	r2, #12
 80a136a:	dd08      	ble.n	80a137e <__adddf3+0x16a>
 80a136c:	f102 0c14 	add.w	ip, r2, #20
 80a1370:	f1c2 020c 	rsb	r2, r2, #12
 80a1374:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1378:	fa21 f102 	lsr.w	r1, r1, r2
 80a137c:	e00c      	b.n	80a1398 <__adddf3+0x184>
 80a137e:	f102 0214 	add.w	r2, r2, #20
 80a1382:	bfd8      	it	le
 80a1384:	f1c2 0c20 	rsble	ip, r2, #32
 80a1388:	fa01 f102 	lsl.w	r1, r1, r2
 80a138c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1390:	bfdc      	itt	le
 80a1392:	ea41 010c 	orrle.w	r1, r1, ip
 80a1396:	4090      	lslle	r0, r2
 80a1398:	1ae4      	subs	r4, r4, r3
 80a139a:	bfa2      	ittt	ge
 80a139c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a13a0:	4329      	orrge	r1, r5
 80a13a2:	bd30      	popge	{r4, r5, pc}
 80a13a4:	ea6f 0404 	mvn.w	r4, r4
 80a13a8:	3c1f      	subs	r4, #31
 80a13aa:	da1c      	bge.n	80a13e6 <__adddf3+0x1d2>
 80a13ac:	340c      	adds	r4, #12
 80a13ae:	dc0e      	bgt.n	80a13ce <__adddf3+0x1ba>
 80a13b0:	f104 0414 	add.w	r4, r4, #20
 80a13b4:	f1c4 0220 	rsb	r2, r4, #32
 80a13b8:	fa20 f004 	lsr.w	r0, r0, r4
 80a13bc:	fa01 f302 	lsl.w	r3, r1, r2
 80a13c0:	ea40 0003 	orr.w	r0, r0, r3
 80a13c4:	fa21 f304 	lsr.w	r3, r1, r4
 80a13c8:	ea45 0103 	orr.w	r1, r5, r3
 80a13cc:	bd30      	pop	{r4, r5, pc}
 80a13ce:	f1c4 040c 	rsb	r4, r4, #12
 80a13d2:	f1c4 0220 	rsb	r2, r4, #32
 80a13d6:	fa20 f002 	lsr.w	r0, r0, r2
 80a13da:	fa01 f304 	lsl.w	r3, r1, r4
 80a13de:	ea40 0003 	orr.w	r0, r0, r3
 80a13e2:	4629      	mov	r1, r5
 80a13e4:	bd30      	pop	{r4, r5, pc}
 80a13e6:	fa21 f004 	lsr.w	r0, r1, r4
 80a13ea:	4629      	mov	r1, r5
 80a13ec:	bd30      	pop	{r4, r5, pc}
 80a13ee:	f094 0f00 	teq	r4, #0
 80a13f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a13f6:	bf06      	itte	eq
 80a13f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a13fc:	3401      	addeq	r4, #1
 80a13fe:	3d01      	subne	r5, #1
 80a1400:	e74e      	b.n	80a12a0 <__adddf3+0x8c>
 80a1402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1406:	bf18      	it	ne
 80a1408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a140c:	d029      	beq.n	80a1462 <__adddf3+0x24e>
 80a140e:	ea94 0f05 	teq	r4, r5
 80a1412:	bf08      	it	eq
 80a1414:	ea90 0f02 	teqeq	r0, r2
 80a1418:	d005      	beq.n	80a1426 <__adddf3+0x212>
 80a141a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a141e:	bf04      	itt	eq
 80a1420:	4619      	moveq	r1, r3
 80a1422:	4610      	moveq	r0, r2
 80a1424:	bd30      	pop	{r4, r5, pc}
 80a1426:	ea91 0f03 	teq	r1, r3
 80a142a:	bf1e      	ittt	ne
 80a142c:	2100      	movne	r1, #0
 80a142e:	2000      	movne	r0, #0
 80a1430:	bd30      	popne	{r4, r5, pc}
 80a1432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1436:	d105      	bne.n	80a1444 <__adddf3+0x230>
 80a1438:	0040      	lsls	r0, r0, #1
 80a143a:	4149      	adcs	r1, r1
 80a143c:	bf28      	it	cs
 80a143e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1442:	bd30      	pop	{r4, r5, pc}
 80a1444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1448:	bf3c      	itt	cc
 80a144a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a144e:	bd30      	popcc	{r4, r5, pc}
 80a1450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a145c:	f04f 0000 	mov.w	r0, #0
 80a1460:	bd30      	pop	{r4, r5, pc}
 80a1462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1466:	bf1a      	itte	ne
 80a1468:	4619      	movne	r1, r3
 80a146a:	4610      	movne	r0, r2
 80a146c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1470:	bf1c      	itt	ne
 80a1472:	460b      	movne	r3, r1
 80a1474:	4602      	movne	r2, r0
 80a1476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a147a:	bf06      	itte	eq
 80a147c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1480:	ea91 0f03 	teqeq	r1, r3
 80a1484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1488:	bd30      	pop	{r4, r5, pc}
 80a148a:	bf00      	nop

080a148c <__aeabi_ui2d>:
 80a148c:	f090 0f00 	teq	r0, #0
 80a1490:	bf04      	itt	eq
 80a1492:	2100      	moveq	r1, #0
 80a1494:	4770      	bxeq	lr
 80a1496:	b530      	push	{r4, r5, lr}
 80a1498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a149c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a14a0:	f04f 0500 	mov.w	r5, #0
 80a14a4:	f04f 0100 	mov.w	r1, #0
 80a14a8:	e750      	b.n	80a134c <__adddf3+0x138>
 80a14aa:	bf00      	nop

080a14ac <__aeabi_i2d>:
 80a14ac:	f090 0f00 	teq	r0, #0
 80a14b0:	bf04      	itt	eq
 80a14b2:	2100      	moveq	r1, #0
 80a14b4:	4770      	bxeq	lr
 80a14b6:	b530      	push	{r4, r5, lr}
 80a14b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a14bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a14c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a14c4:	bf48      	it	mi
 80a14c6:	4240      	negmi	r0, r0
 80a14c8:	f04f 0100 	mov.w	r1, #0
 80a14cc:	e73e      	b.n	80a134c <__adddf3+0x138>
 80a14ce:	bf00      	nop

080a14d0 <__aeabi_f2d>:
 80a14d0:	0042      	lsls	r2, r0, #1
 80a14d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a14d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a14da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a14de:	bf1f      	itttt	ne
 80a14e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a14e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a14e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a14ec:	4770      	bxne	lr
 80a14ee:	f092 0f00 	teq	r2, #0
 80a14f2:	bf14      	ite	ne
 80a14f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a14f8:	4770      	bxeq	lr
 80a14fa:	b530      	push	{r4, r5, lr}
 80a14fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1508:	e720      	b.n	80a134c <__adddf3+0x138>
 80a150a:	bf00      	nop

080a150c <__aeabi_ul2d>:
 80a150c:	ea50 0201 	orrs.w	r2, r0, r1
 80a1510:	bf08      	it	eq
 80a1512:	4770      	bxeq	lr
 80a1514:	b530      	push	{r4, r5, lr}
 80a1516:	f04f 0500 	mov.w	r5, #0
 80a151a:	e00a      	b.n	80a1532 <__aeabi_l2d+0x16>

080a151c <__aeabi_l2d>:
 80a151c:	ea50 0201 	orrs.w	r2, r0, r1
 80a1520:	bf08      	it	eq
 80a1522:	4770      	bxeq	lr
 80a1524:	b530      	push	{r4, r5, lr}
 80a1526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a152a:	d502      	bpl.n	80a1532 <__aeabi_l2d+0x16>
 80a152c:	4240      	negs	r0, r0
 80a152e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a153a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a153e:	f43f aedc 	beq.w	80a12fa <__adddf3+0xe6>
 80a1542:	f04f 0203 	mov.w	r2, #3
 80a1546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a154a:	bf18      	it	ne
 80a154c:	3203      	addne	r2, #3
 80a154e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1552:	bf18      	it	ne
 80a1554:	3203      	addne	r2, #3
 80a1556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a155a:	f1c2 0320 	rsb	r3, r2, #32
 80a155e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1562:	fa20 f002 	lsr.w	r0, r0, r2
 80a1566:	fa01 fe03 	lsl.w	lr, r1, r3
 80a156a:	ea40 000e 	orr.w	r0, r0, lr
 80a156e:	fa21 f102 	lsr.w	r1, r1, r2
 80a1572:	4414      	add	r4, r2
 80a1574:	e6c1      	b.n	80a12fa <__adddf3+0xe6>
 80a1576:	bf00      	nop

080a1578 <__aeabi_frsub>:
 80a1578:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a157c:	e002      	b.n	80a1584 <__addsf3>
 80a157e:	bf00      	nop

080a1580 <__aeabi_fsub>:
 80a1580:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a1584 <__addsf3>:
 80a1584:	0042      	lsls	r2, r0, #1
 80a1586:	bf1f      	itttt	ne
 80a1588:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a158c:	ea92 0f03 	teqne	r2, r3
 80a1590:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a1594:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a1598:	d06a      	beq.n	80a1670 <__addsf3+0xec>
 80a159a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a159e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a15a2:	bfc1      	itttt	gt
 80a15a4:	18d2      	addgt	r2, r2, r3
 80a15a6:	4041      	eorgt	r1, r0
 80a15a8:	4048      	eorgt	r0, r1
 80a15aa:	4041      	eorgt	r1, r0
 80a15ac:	bfb8      	it	lt
 80a15ae:	425b      	neglt	r3, r3
 80a15b0:	2b19      	cmp	r3, #25
 80a15b2:	bf88      	it	hi
 80a15b4:	4770      	bxhi	lr
 80a15b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a15ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a15be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a15c2:	bf18      	it	ne
 80a15c4:	4240      	negne	r0, r0
 80a15c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a15ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a15ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a15d2:	bf18      	it	ne
 80a15d4:	4249      	negne	r1, r1
 80a15d6:	ea92 0f03 	teq	r2, r3
 80a15da:	d03f      	beq.n	80a165c <__addsf3+0xd8>
 80a15dc:	f1a2 0201 	sub.w	r2, r2, #1
 80a15e0:	fa41 fc03 	asr.w	ip, r1, r3
 80a15e4:	eb10 000c 	adds.w	r0, r0, ip
 80a15e8:	f1c3 0320 	rsb	r3, r3, #32
 80a15ec:	fa01 f103 	lsl.w	r1, r1, r3
 80a15f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a15f4:	d502      	bpl.n	80a15fc <__addsf3+0x78>
 80a15f6:	4249      	negs	r1, r1
 80a15f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a15fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a1600:	d313      	bcc.n	80a162a <__addsf3+0xa6>
 80a1602:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a1606:	d306      	bcc.n	80a1616 <__addsf3+0x92>
 80a1608:	0840      	lsrs	r0, r0, #1
 80a160a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a160e:	f102 0201 	add.w	r2, r2, #1
 80a1612:	2afe      	cmp	r2, #254	; 0xfe
 80a1614:	d251      	bcs.n	80a16ba <__addsf3+0x136>
 80a1616:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a161a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a161e:	bf08      	it	eq
 80a1620:	f020 0001 	biceq.w	r0, r0, #1
 80a1624:	ea40 0003 	orr.w	r0, r0, r3
 80a1628:	4770      	bx	lr
 80a162a:	0049      	lsls	r1, r1, #1
 80a162c:	eb40 0000 	adc.w	r0, r0, r0
 80a1630:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a1634:	f1a2 0201 	sub.w	r2, r2, #1
 80a1638:	d1ed      	bne.n	80a1616 <__addsf3+0x92>
 80a163a:	fab0 fc80 	clz	ip, r0
 80a163e:	f1ac 0c08 	sub.w	ip, ip, #8
 80a1642:	ebb2 020c 	subs.w	r2, r2, ip
 80a1646:	fa00 f00c 	lsl.w	r0, r0, ip
 80a164a:	bfaa      	itet	ge
 80a164c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a1650:	4252      	neglt	r2, r2
 80a1652:	4318      	orrge	r0, r3
 80a1654:	bfbc      	itt	lt
 80a1656:	40d0      	lsrlt	r0, r2
 80a1658:	4318      	orrlt	r0, r3
 80a165a:	4770      	bx	lr
 80a165c:	f092 0f00 	teq	r2, #0
 80a1660:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a1664:	bf06      	itte	eq
 80a1666:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a166a:	3201      	addeq	r2, #1
 80a166c:	3b01      	subne	r3, #1
 80a166e:	e7b5      	b.n	80a15dc <__addsf3+0x58>
 80a1670:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a1674:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a1678:	bf18      	it	ne
 80a167a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a167e:	d021      	beq.n	80a16c4 <__addsf3+0x140>
 80a1680:	ea92 0f03 	teq	r2, r3
 80a1684:	d004      	beq.n	80a1690 <__addsf3+0x10c>
 80a1686:	f092 0f00 	teq	r2, #0
 80a168a:	bf08      	it	eq
 80a168c:	4608      	moveq	r0, r1
 80a168e:	4770      	bx	lr
 80a1690:	ea90 0f01 	teq	r0, r1
 80a1694:	bf1c      	itt	ne
 80a1696:	2000      	movne	r0, #0
 80a1698:	4770      	bxne	lr
 80a169a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a169e:	d104      	bne.n	80a16aa <__addsf3+0x126>
 80a16a0:	0040      	lsls	r0, r0, #1
 80a16a2:	bf28      	it	cs
 80a16a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a16a8:	4770      	bx	lr
 80a16aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a16ae:	bf3c      	itt	cc
 80a16b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a16b4:	4770      	bxcc	lr
 80a16b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a16ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a16be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a16c2:	4770      	bx	lr
 80a16c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a16c8:	bf16      	itet	ne
 80a16ca:	4608      	movne	r0, r1
 80a16cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a16d0:	4601      	movne	r1, r0
 80a16d2:	0242      	lsls	r2, r0, #9
 80a16d4:	bf06      	itte	eq
 80a16d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a16da:	ea90 0f01 	teqeq	r0, r1
 80a16de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a16e2:	4770      	bx	lr

080a16e4 <__aeabi_ui2f>:
 80a16e4:	f04f 0300 	mov.w	r3, #0
 80a16e8:	e004      	b.n	80a16f4 <__aeabi_i2f+0x8>
 80a16ea:	bf00      	nop

080a16ec <__aeabi_i2f>:
 80a16ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a16f0:	bf48      	it	mi
 80a16f2:	4240      	negmi	r0, r0
 80a16f4:	ea5f 0c00 	movs.w	ip, r0
 80a16f8:	bf08      	it	eq
 80a16fa:	4770      	bxeq	lr
 80a16fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a1700:	4601      	mov	r1, r0
 80a1702:	f04f 0000 	mov.w	r0, #0
 80a1706:	e01c      	b.n	80a1742 <__aeabi_l2f+0x2a>

080a1708 <__aeabi_ul2f>:
 80a1708:	ea50 0201 	orrs.w	r2, r0, r1
 80a170c:	bf08      	it	eq
 80a170e:	4770      	bxeq	lr
 80a1710:	f04f 0300 	mov.w	r3, #0
 80a1714:	e00a      	b.n	80a172c <__aeabi_l2f+0x14>
 80a1716:	bf00      	nop

080a1718 <__aeabi_l2f>:
 80a1718:	ea50 0201 	orrs.w	r2, r0, r1
 80a171c:	bf08      	it	eq
 80a171e:	4770      	bxeq	lr
 80a1720:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a1724:	d502      	bpl.n	80a172c <__aeabi_l2f+0x14>
 80a1726:	4240      	negs	r0, r0
 80a1728:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a172c:	ea5f 0c01 	movs.w	ip, r1
 80a1730:	bf02      	ittt	eq
 80a1732:	4684      	moveq	ip, r0
 80a1734:	4601      	moveq	r1, r0
 80a1736:	2000      	moveq	r0, #0
 80a1738:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a173c:	bf08      	it	eq
 80a173e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a1742:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a1746:	fabc f28c 	clz	r2, ip
 80a174a:	3a08      	subs	r2, #8
 80a174c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a1750:	db10      	blt.n	80a1774 <__aeabi_l2f+0x5c>
 80a1752:	fa01 fc02 	lsl.w	ip, r1, r2
 80a1756:	4463      	add	r3, ip
 80a1758:	fa00 fc02 	lsl.w	ip, r0, r2
 80a175c:	f1c2 0220 	rsb	r2, r2, #32
 80a1760:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1764:	fa20 f202 	lsr.w	r2, r0, r2
 80a1768:	eb43 0002 	adc.w	r0, r3, r2
 80a176c:	bf08      	it	eq
 80a176e:	f020 0001 	biceq.w	r0, r0, #1
 80a1772:	4770      	bx	lr
 80a1774:	f102 0220 	add.w	r2, r2, #32
 80a1778:	fa01 fc02 	lsl.w	ip, r1, r2
 80a177c:	f1c2 0220 	rsb	r2, r2, #32
 80a1780:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a1784:	fa21 f202 	lsr.w	r2, r1, r2
 80a1788:	eb43 0002 	adc.w	r0, r3, r2
 80a178c:	bf08      	it	eq
 80a178e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a1792:	4770      	bx	lr

080a1794 <__aeabi_fmul>:
 80a1794:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1798:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a179c:	bf1e      	ittt	ne
 80a179e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a17a2:	ea92 0f0c 	teqne	r2, ip
 80a17a6:	ea93 0f0c 	teqne	r3, ip
 80a17aa:	d06f      	beq.n	80a188c <__aeabi_fmul+0xf8>
 80a17ac:	441a      	add	r2, r3
 80a17ae:	ea80 0c01 	eor.w	ip, r0, r1
 80a17b2:	0240      	lsls	r0, r0, #9
 80a17b4:	bf18      	it	ne
 80a17b6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a17ba:	d01e      	beq.n	80a17fa <__aeabi_fmul+0x66>
 80a17bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a17c0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a17c4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a17c8:	fba0 3101 	umull	r3, r1, r0, r1
 80a17cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a17d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a17d4:	bf3e      	ittt	cc
 80a17d6:	0049      	lslcc	r1, r1, #1
 80a17d8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a17dc:	005b      	lslcc	r3, r3, #1
 80a17de:	ea40 0001 	orr.w	r0, r0, r1
 80a17e2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a17e6:	2afd      	cmp	r2, #253	; 0xfd
 80a17e8:	d81d      	bhi.n	80a1826 <__aeabi_fmul+0x92>
 80a17ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a17ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a17f2:	bf08      	it	eq
 80a17f4:	f020 0001 	biceq.w	r0, r0, #1
 80a17f8:	4770      	bx	lr
 80a17fa:	f090 0f00 	teq	r0, #0
 80a17fe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a1802:	bf08      	it	eq
 80a1804:	0249      	lsleq	r1, r1, #9
 80a1806:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a180a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a180e:	3a7f      	subs	r2, #127	; 0x7f
 80a1810:	bfc2      	ittt	gt
 80a1812:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a1816:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a181a:	4770      	bxgt	lr
 80a181c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1820:	f04f 0300 	mov.w	r3, #0
 80a1824:	3a01      	subs	r2, #1
 80a1826:	dc5d      	bgt.n	80a18e4 <__aeabi_fmul+0x150>
 80a1828:	f112 0f19 	cmn.w	r2, #25
 80a182c:	bfdc      	itt	le
 80a182e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a1832:	4770      	bxle	lr
 80a1834:	f1c2 0200 	rsb	r2, r2, #0
 80a1838:	0041      	lsls	r1, r0, #1
 80a183a:	fa21 f102 	lsr.w	r1, r1, r2
 80a183e:	f1c2 0220 	rsb	r2, r2, #32
 80a1842:	fa00 fc02 	lsl.w	ip, r0, r2
 80a1846:	ea5f 0031 	movs.w	r0, r1, rrx
 80a184a:	f140 0000 	adc.w	r0, r0, #0
 80a184e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a1852:	bf08      	it	eq
 80a1854:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a1858:	4770      	bx	lr
 80a185a:	f092 0f00 	teq	r2, #0
 80a185e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a1862:	bf02      	ittt	eq
 80a1864:	0040      	lsleq	r0, r0, #1
 80a1866:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a186a:	3a01      	subeq	r2, #1
 80a186c:	d0f9      	beq.n	80a1862 <__aeabi_fmul+0xce>
 80a186e:	ea40 000c 	orr.w	r0, r0, ip
 80a1872:	f093 0f00 	teq	r3, #0
 80a1876:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a187a:	bf02      	ittt	eq
 80a187c:	0049      	lsleq	r1, r1, #1
 80a187e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a1882:	3b01      	subeq	r3, #1
 80a1884:	d0f9      	beq.n	80a187a <__aeabi_fmul+0xe6>
 80a1886:	ea41 010c 	orr.w	r1, r1, ip
 80a188a:	e78f      	b.n	80a17ac <__aeabi_fmul+0x18>
 80a188c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a1890:	ea92 0f0c 	teq	r2, ip
 80a1894:	bf18      	it	ne
 80a1896:	ea93 0f0c 	teqne	r3, ip
 80a189a:	d00a      	beq.n	80a18b2 <__aeabi_fmul+0x11e>
 80a189c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a18a0:	bf18      	it	ne
 80a18a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a18a6:	d1d8      	bne.n	80a185a <__aeabi_fmul+0xc6>
 80a18a8:	ea80 0001 	eor.w	r0, r0, r1
 80a18ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a18b0:	4770      	bx	lr
 80a18b2:	f090 0f00 	teq	r0, #0
 80a18b6:	bf17      	itett	ne
 80a18b8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a18bc:	4608      	moveq	r0, r1
 80a18be:	f091 0f00 	teqne	r1, #0
 80a18c2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a18c6:	d014      	beq.n	80a18f2 <__aeabi_fmul+0x15e>
 80a18c8:	ea92 0f0c 	teq	r2, ip
 80a18cc:	d101      	bne.n	80a18d2 <__aeabi_fmul+0x13e>
 80a18ce:	0242      	lsls	r2, r0, #9
 80a18d0:	d10f      	bne.n	80a18f2 <__aeabi_fmul+0x15e>
 80a18d2:	ea93 0f0c 	teq	r3, ip
 80a18d6:	d103      	bne.n	80a18e0 <__aeabi_fmul+0x14c>
 80a18d8:	024b      	lsls	r3, r1, #9
 80a18da:	bf18      	it	ne
 80a18dc:	4608      	movne	r0, r1
 80a18de:	d108      	bne.n	80a18f2 <__aeabi_fmul+0x15e>
 80a18e0:	ea80 0001 	eor.w	r0, r0, r1
 80a18e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a18e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a18ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a18f0:	4770      	bx	lr
 80a18f2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a18f6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a18fa:	4770      	bx	lr

080a18fc <__aeabi_fdiv>:
 80a18fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1900:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a1904:	bf1e      	ittt	ne
 80a1906:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a190a:	ea92 0f0c 	teqne	r2, ip
 80a190e:	ea93 0f0c 	teqne	r3, ip
 80a1912:	d069      	beq.n	80a19e8 <__aeabi_fdiv+0xec>
 80a1914:	eba2 0203 	sub.w	r2, r2, r3
 80a1918:	ea80 0c01 	eor.w	ip, r0, r1
 80a191c:	0249      	lsls	r1, r1, #9
 80a191e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a1922:	d037      	beq.n	80a1994 <__aeabi_fdiv+0x98>
 80a1924:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a1928:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a192c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a1930:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a1934:	428b      	cmp	r3, r1
 80a1936:	bf38      	it	cc
 80a1938:	005b      	lslcc	r3, r3, #1
 80a193a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a193e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a1942:	428b      	cmp	r3, r1
 80a1944:	bf24      	itt	cs
 80a1946:	1a5b      	subcs	r3, r3, r1
 80a1948:	ea40 000c 	orrcs.w	r0, r0, ip
 80a194c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a1950:	bf24      	itt	cs
 80a1952:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a1956:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a195a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a195e:	bf24      	itt	cs
 80a1960:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a1964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a1968:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a196c:	bf24      	itt	cs
 80a196e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a1972:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a1976:	011b      	lsls	r3, r3, #4
 80a1978:	bf18      	it	ne
 80a197a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a197e:	d1e0      	bne.n	80a1942 <__aeabi_fdiv+0x46>
 80a1980:	2afd      	cmp	r2, #253	; 0xfd
 80a1982:	f63f af50 	bhi.w	80a1826 <__aeabi_fmul+0x92>
 80a1986:	428b      	cmp	r3, r1
 80a1988:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a198c:	bf08      	it	eq
 80a198e:	f020 0001 	biceq.w	r0, r0, #1
 80a1992:	4770      	bx	lr
 80a1994:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a1998:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a199c:	327f      	adds	r2, #127	; 0x7f
 80a199e:	bfc2      	ittt	gt
 80a19a0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a19a4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a19a8:	4770      	bxgt	lr
 80a19aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a19ae:	f04f 0300 	mov.w	r3, #0
 80a19b2:	3a01      	subs	r2, #1
 80a19b4:	e737      	b.n	80a1826 <__aeabi_fmul+0x92>
 80a19b6:	f092 0f00 	teq	r2, #0
 80a19ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a19be:	bf02      	ittt	eq
 80a19c0:	0040      	lsleq	r0, r0, #1
 80a19c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a19c6:	3a01      	subeq	r2, #1
 80a19c8:	d0f9      	beq.n	80a19be <__aeabi_fdiv+0xc2>
 80a19ca:	ea40 000c 	orr.w	r0, r0, ip
 80a19ce:	f093 0f00 	teq	r3, #0
 80a19d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a19d6:	bf02      	ittt	eq
 80a19d8:	0049      	lsleq	r1, r1, #1
 80a19da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a19de:	3b01      	subeq	r3, #1
 80a19e0:	d0f9      	beq.n	80a19d6 <__aeabi_fdiv+0xda>
 80a19e2:	ea41 010c 	orr.w	r1, r1, ip
 80a19e6:	e795      	b.n	80a1914 <__aeabi_fdiv+0x18>
 80a19e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a19ec:	ea92 0f0c 	teq	r2, ip
 80a19f0:	d108      	bne.n	80a1a04 <__aeabi_fdiv+0x108>
 80a19f2:	0242      	lsls	r2, r0, #9
 80a19f4:	f47f af7d 	bne.w	80a18f2 <__aeabi_fmul+0x15e>
 80a19f8:	ea93 0f0c 	teq	r3, ip
 80a19fc:	f47f af70 	bne.w	80a18e0 <__aeabi_fmul+0x14c>
 80a1a00:	4608      	mov	r0, r1
 80a1a02:	e776      	b.n	80a18f2 <__aeabi_fmul+0x15e>
 80a1a04:	ea93 0f0c 	teq	r3, ip
 80a1a08:	d104      	bne.n	80a1a14 <__aeabi_fdiv+0x118>
 80a1a0a:	024b      	lsls	r3, r1, #9
 80a1a0c:	f43f af4c 	beq.w	80a18a8 <__aeabi_fmul+0x114>
 80a1a10:	4608      	mov	r0, r1
 80a1a12:	e76e      	b.n	80a18f2 <__aeabi_fmul+0x15e>
 80a1a14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a1a18:	bf18      	it	ne
 80a1a1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a1a1e:	d1ca      	bne.n	80a19b6 <__aeabi_fdiv+0xba>
 80a1a20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a1a24:	f47f af5c 	bne.w	80a18e0 <__aeabi_fmul+0x14c>
 80a1a28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a1a2c:	f47f af3c 	bne.w	80a18a8 <__aeabi_fmul+0x114>
 80a1a30:	e75f      	b.n	80a18f2 <__aeabi_fmul+0x15e>
 80a1a32:	bf00      	nop

080a1a34 <__cxa_atexit>:
 80a1a34:	b510      	push	{r4, lr}
 80a1a36:	4c05      	ldr	r4, [pc, #20]	; (80a1a4c <__cxa_atexit+0x18>)
 80a1a38:	4613      	mov	r3, r2
 80a1a3a:	b12c      	cbz	r4, 80a1a48 <__cxa_atexit+0x14>
 80a1a3c:	460a      	mov	r2, r1
 80a1a3e:	4601      	mov	r1, r0
 80a1a40:	2002      	movs	r0, #2
 80a1a42:	f3af 8000 	nop.w
 80a1a46:	bd10      	pop	{r4, pc}
 80a1a48:	4620      	mov	r0, r4
 80a1a4a:	bd10      	pop	{r4, pc}
 80a1a4c:	00000000 	.word	0x00000000

080a1a50 <memcpy>:
 80a1a50:	b510      	push	{r4, lr}
 80a1a52:	1e43      	subs	r3, r0, #1
 80a1a54:	440a      	add	r2, r1
 80a1a56:	4291      	cmp	r1, r2
 80a1a58:	d004      	beq.n	80a1a64 <memcpy+0x14>
 80a1a5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1a5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1a62:	e7f8      	b.n	80a1a56 <memcpy+0x6>
 80a1a64:	bd10      	pop	{r4, pc}

080a1a66 <memset>:
 80a1a66:	4603      	mov	r3, r0
 80a1a68:	4402      	add	r2, r0
 80a1a6a:	4293      	cmp	r3, r2
 80a1a6c:	d002      	beq.n	80a1a74 <memset+0xe>
 80a1a6e:	f803 1b01 	strb.w	r1, [r3], #1
 80a1a72:	e7fa      	b.n	80a1a6a <memset+0x4>
 80a1a74:	4770      	bx	lr
	...

080a1a78 <srand>:
 80a1a78:	b538      	push	{r3, r4, r5, lr}
 80a1a7a:	4b12      	ldr	r3, [pc, #72]	; (80a1ac4 <srand+0x4c>)
 80a1a7c:	4605      	mov	r5, r0
 80a1a7e:	681c      	ldr	r4, [r3, #0]
 80a1a80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1a82:	b9d3      	cbnz	r3, 80a1aba <srand+0x42>
 80a1a84:	2018      	movs	r0, #24
 80a1a86:	f7fe fd1b 	bl	80a04c0 <malloc>
 80a1a8a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1a8e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1a90:	8003      	strh	r3, [r0, #0]
 80a1a92:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1a96:	8043      	strh	r3, [r0, #2]
 80a1a98:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1a9c:	8083      	strh	r3, [r0, #4]
 80a1a9e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1aa2:	80c3      	strh	r3, [r0, #6]
 80a1aa4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1aa8:	8103      	strh	r3, [r0, #8]
 80a1aaa:	2305      	movs	r3, #5
 80a1aac:	8143      	strh	r3, [r0, #10]
 80a1aae:	230b      	movs	r3, #11
 80a1ab0:	8183      	strh	r3, [r0, #12]
 80a1ab2:	2201      	movs	r2, #1
 80a1ab4:	2300      	movs	r3, #0
 80a1ab6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1aba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1abc:	2200      	movs	r2, #0
 80a1abe:	611d      	str	r5, [r3, #16]
 80a1ac0:	615a      	str	r2, [r3, #20]
 80a1ac2:	bd38      	pop	{r3, r4, r5, pc}
 80a1ac4:	2000006c 	.word	0x2000006c

080a1ac8 <strlen>:
 80a1ac8:	4603      	mov	r3, r0
 80a1aca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1ace:	2a00      	cmp	r2, #0
 80a1ad0:	d1fb      	bne.n	80a1aca <strlen+0x2>
 80a1ad2:	1a18      	subs	r0, r3, r0
 80a1ad4:	3801      	subs	r0, #1
 80a1ad6:	4770      	bx	lr

080a1ad8 <dynalib_user>:
 80a1ad8:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1ae8:	0000 0000 7544 6172 6974 6e6f 3d20 2520     ....Duration = %
 80a1af8:	2e30 6632 202c 6944 7473 6e61 6563 6920     0.2f, Distance i
 80a1b08:	206e 4d43 203a 3025 322e 2066 000a 6162     n CM: %0.2f ..ba
 80a1b18:	6475 5300 7265 6169 006c 5355 5342 7265     ud.Serial.USBSer
 80a1b28:	6169 316c 7400 7079 0065 6170 6172 006d     ial1.type.param.
 80a1b38:	6d63 0064 6469 6800 646e 7300 7274 006d     cmd.id.hnd.strm.
 80a1b48:	6966 746c 6c00 6c76 6100 6464 6148 646e     filt.lvl.addHand
 80a1b58:	656c 0072 6572 6f6d 6576 6148 646e 656c     ler.removeHandle
 80a1b68:	0072 6e65 6d75 6148 646e 656c 7372 4a00     r.enumHandlers.J
 80a1b78:	4f53 534e 7274 6165 4c6d 676f 6148 646e     SONStreamLogHand
 80a1b88:	656c 0072 7061 0070 3025 3031 2075 5d00     ler.app.%010u .]
 80a1b98:	0020 6425 2c00 0020 2928 203a 2000 005b      .%d., .(): . [.
 80a1ba8:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
 80a1bb8:	736c 3d20 0020 0a0d 6600 6c00 006e 6e66     ls = ....f.ln.fn
 80a1bc8:	6300 646f 0065 6564 6174 6c69 6e00 6e6f     .code.detail.non
 80a1bd8:	0065 7274 6361 0065 6e69 6f66 7700 7261     e.trace.info.war
 80a1be8:	006e 7265 6f72 0072 6170 696e 0063 6c61     n.error.panic.al
 80a1bf8:	006c 005a 2b25 3330 3a64 3025 7532 2500     l.Z.%+03d:%02u.%
 80a1c08:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
 80a1c18:	7a25 6100 6373 6974 656d 0000               %z.asctime..

080a1c24 <_ZTV9IPAddress>:
	...
 80a1c2c:	083d 080a 082d 080a 082f 080a               =...-.../...

080a1c38 <_ZTV9USBSerial>:
	...
 80a1c40:	08f9 080a 0949 080a 0957 080a 0569 080a     ....I...W...i...
 80a1c50:	0935 080a 08fb 080a 0911 080a 0943 080a     5...........C...
 80a1c60:	0927 080a 08f5 080a                         '.......

080a1c68 <_ZTV11USARTSerial>:
	...
 80a1c70:	0a99 080a 0ae9 080a 0af7 080a 0569 080a     ............i...
 80a1c80:	0aad 080a 0acf 080a 0abb 080a 0ae3 080a     ................
 80a1c90:	0a9b 080a 0a9f 080a                         ........

080a1c98 <_ZTV7TwoWire>:
	...
 80a1ca0:	0b9d 080a 0be7 080a 0bbf 080a 0b9f 080a     ................
 80a1cb0:	0bc7 080a 0bcf 080a 0bd7 080a 0bdf 080a     ................

080a1cc0 <_ZTVN5spark9WiFiClassE>:
	...
 80a1cc8:	0cb7 080a 0cad 080a 0ca3 080a 0c21 080a     ............!...
 80a1cd8:	0685 080a 0c97 080a 0c8b 080a 0c83 080a     ................
 80a1ce8:	0c79 080a 0c6f 080a 0c2b 080a               y...o...+...

080a1cf4 <_ZTVN5spark12NetworkClassE>:
	...
 80a1cfc:	0cd5 080a 0cdf 080a 0ce9 080a 0cf3 080a     ................
 80a1d0c:	0cfd 080a 0d09 080a 0d15 080a 0d21 080a     ............!...
 80a1d1c:	0d29 080a 0d33 080a 0d3d 080a               )...3...=...

080a1d28 <_ZSt7nothrow>:
 80a1d28:	0000 0000                                   ....

080a1d2c <__sf_fake_stdin>:
	...

080a1d4c <__sf_fake_stdout>:
	...

080a1d6c <__sf_fake_stderr>:
	...
 80a1d8c:	0043                                        C.

080a1d8e <link_const_variable_data_end>:
	...

080a1d90 <link_constructors_location>:
 80a1d90:	080a0191 	.word	0x080a0191
 80a1d94:	080a0535 	.word	0x080a0535
 80a1d98:	080a0691 	.word	0x080a0691
 80a1d9c:	080a06a1 	.word	0x080a06a1
 80a1da0:	080a06d9 	.word	0x080a06d9
 80a1da4:	080a0cc1 	.word	0x080a0cc1
 80a1da8:	080a0d8d 	.word	0x080a0d8d
 80a1dac:	080a0e85 	.word	0x080a0e85
 80a1db0:	080a0f79 	.word	0x080a0f79
 80a1db4:	080a0ffd 	.word	0x080a0ffd
 80a1db8:	080a10c1 	.word	0x080a10c1
 80a1dbc:	080a1185 	.word	0x080a1185
