
c:/Users/Benja/Documents/IOT/BikeSafety/GPS/GPSTrial/target/1.5.2/argon/GPSTrial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002700  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6720  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e2a0  000d6724  0001e2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004e4  2003e30c  2003e30c  0002e30c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6790  000d6790  00026790  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d67b8  000d67b8  000267b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000cf166  00000000  00000000  000267bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f459  00000000  00000000  000f5922  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001c7ab  00000000  00000000  00104d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002060  00000000  00000000  00121526  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003e30  00000000  00000000  00123586  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032f19  00000000  00000000  001273b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00025a9e  00000000  00000000  0015a2cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001064b9  00000000  00000000  0017fd6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c27c  00000000  00000000  00286228  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 f823 	bl	d607c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 f828 	bl	d6092 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e2a0 	.word	0x2003e2a0
   d404c:	000d6724 	.word	0x000d6724
   d4050:	2003e30c 	.word	0x2003e30c
   d4054:	2003e30c 	.word	0x2003e30c
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f000 ff45 	bl	d4eec <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d6714 	.word	0x000d6714
   d4084:	000d66cc 	.word	0x000d66cc

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b814 	b.w	d40b4 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f8d5 	bl	d423c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f000 beeb 	b.w	d4e70 <_post_loop>

000d409a <_ZdlPv>:
   d409a:	f000 bd81 	b.w	d4ba0 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bd7f 	b.w	d4ba0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:
bool gettingFix = false;

float lat,lon,alt;

void setup()
{
   d40b4:	b508      	push	{r3, lr}
	Serial.begin(9600);
   d40b6:	f001 f819 	bl	d50ec <_Z16_fetch_usbserialv>
   d40ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40be:	f001 f809 	bl	d50d4 <_ZN9USBSerial5beginEl>

	// The GPS module initialization
	Serial1.begin(9600);
   d40c2:	f001 f899 	bl	d51f8 <_Z22__fetch_global_Serial1v>
   d40c6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ca:	f001 f891 	bl	d51f0 <_ZN11USARTSerial5beginEm>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40ce:	f000 fc33 	bl	d4938 <HAL_Timer_Get_Milli_Seconds>
    startFix = millis();
   d40d2:	4b03      	ldr	r3, [pc, #12]	; (d40e0 <setup+0x2c>)
   d40d4:	6018      	str	r0, [r3, #0]
    gettingFix = true;
   d40d6:	4b03      	ldr	r3, [pc, #12]	; (d40e4 <setup+0x30>)
   d40d8:	2201      	movs	r2, #1
   d40da:	701a      	strb	r2, [r3, #0]
   d40dc:	bd08      	pop	{r3, pc}
   d40de:	bf00      	nop
   d40e0:	2003e3ec 	.word	0x2003e3ec
   d40e4:	2003e3e8 	.word	0x2003e3e8

000d40e8 <_Z11displayInfov>:
		}
	}

}

void displayInfo() {
   d40e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	float lat,lon,alt;
	uint8_t hr,mn,se;
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d40ec:	4c4a      	ldr	r4, [pc, #296]	; (d4218 <_Z11displayInfov+0x130>)
		}
	}

}

void displayInfo() {
   d40ee:	b0a6      	sub	sp, #152	; 0x98
   d40f0:	f000 fc22 	bl	d4938 <HAL_Timer_Get_Milli_Seconds>
	float lat,lon,alt;
	uint8_t hr,mn,se;
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d40f4:	6823      	ldr	r3, [r4, #0]
   d40f6:	1ac0      	subs	r0, r0, r3
   d40f8:	f241 3387 	movw	r3, #4999	; 0x1387
   d40fc:	4298      	cmp	r0, r3
   d40fe:	f240 8088 	bls.w	d4212 <_Z11displayInfov+0x12a>
   d4102:	f8df a134 	ldr.w	sl, [pc, #308]	; d4238 <_Z11displayInfov+0x150>
   d4106:	4d45      	ldr	r5, [pc, #276]	; (d421c <_Z11displayInfov+0x134>)
   d4108:	f000 fc16 	bl	d4938 <HAL_Timer_Get_Milli_Seconds>
		lastSerial = millis();

		char buf[128];
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
   d410c:	f89a 3000 	ldrb.w	r3, [sl]

void displayInfo() {
	float lat,lon,alt;
	uint8_t hr,mn,se;
	if (millis() - lastSerial >= SERIAL_PERIOD) {
		lastSerial = millis();
   d4110:	6020      	str	r0, [r4, #0]

		char buf[128];
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
   d4112:	b143      	cbz	r3, d4126 <_Z11displayInfov+0x3e>
   d4114:	f000 fc10 	bl	d4938 <HAL_Timer_Get_Milli_Seconds>
   d4118:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
   d411c:	1ac0      	subs	r0, r0, r3
   d411e:	f242 730f 	movw	r3, #9999	; 0x270f
   d4122:	4298      	cmp	r0, r3
   d4124:	d90e      	bls.n	d4144 <_Z11displayInfov+0x5c>
				unsigned long elapsed = millis() - startFix;
				Serial.printlnf("%lu milliseconds to get GPS fix", elapsed);
			}
		}
		else {
			strcpy(buf, "no location");
   d4126:	493e      	ldr	r1, [pc, #248]	; (d4220 <_Z11displayInfov+0x138>)
   d4128:	a806      	add	r0, sp, #24
   d412a:	f001 ffed 	bl	d6108 <strcpy>
			if (!gettingFix) {
   d412e:	782b      	ldrb	r3, [r5, #0]
   d4130:	2b00      	cmp	r3, #0
   d4132:	d16e      	bne.n	d4212 <_Z11displayInfov+0x12a>
				gettingFix = true;
   d4134:	4b39      	ldr	r3, [pc, #228]	; (d421c <_Z11displayInfov+0x134>)
   d4136:	2201      	movs	r2, #1
   d4138:	701a      	strb	r2, [r3, #0]
   d413a:	f000 fbfd 	bl	d4938 <HAL_Timer_Get_Milli_Seconds>
				startFix = millis();
   d413e:	4b39      	ldr	r3, [pc, #228]	; (d4224 <_Z11displayInfov+0x13c>)
   d4140:	6018      	str	r0, [r3, #0]
			}
		}
	}
   d4142:	e066      	b.n	d4212 <_Z11displayInfov+0x12a>
	if (millis() - lastSerial >= SERIAL_PERIOD) {
		lastSerial = millis();

		char buf[128];
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
			lat = gps.location.lat();
   d4144:	4650      	mov	r0, sl
   d4146:	f000 f98b 	bl	d4460 <_ZN15TinyGPSLocation3latEv>
   d414a:	ec51 0b10 	vmov	r0, r1, d0
   d414e:	f001 ff33 	bl	d5fb8 <__aeabi_d2f>
   d4152:	4606      	mov	r6, r0
			lon = gps.location.lng(); 
   d4154:	4650      	mov	r0, sl
   d4156:	f000 f9ab 	bl	d44b0 <_ZN15TinyGPSLocation3lngEv>
   d415a:	ec51 0b10 	vmov	r0, r1, d0
   d415e:	f001 ff2b 	bl	d5fb8 <__aeabi_d2f>
   friend class TinyGPSPlus;
public:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }
   d4162:	2300      	movs	r3, #0
   d4164:	f88a 3079 	strb.w	r3, [sl, #121]	; 0x79
   d4168:	4607      	mov	r7, r0
			alt = gps.altitude.meters();
   d416a:	f8da 0080 	ldr.w	r0, [sl, #128]	; 0x80
   d416e:	f001 fcab 	bl	d5ac8 <__aeabi_i2d>
   d4172:	2200      	movs	r2, #0
   d4174:	4b2c      	ldr	r3, [pc, #176]	; (d4228 <_Z11displayInfov+0x140>)
   d4176:	f001 fe37 	bl	d5de8 <__aeabi_ddiv>
   d417a:	f001 ff1d 	bl	d5fb8 <__aeabi_d2f>
   d417e:	4680      	mov	r8, r0
			hr = gps.time.hour();
   d4180:	f10a 0048 	add.w	r0, sl, #72	; 0x48
   d4184:	f000 f9e0 	bl	d4548 <_ZN11TinyGPSTime4hourEv>
   d4188:	4604      	mov	r4, r0
			mn = gps.time.minute();
   d418a:	f10a 0048 	add.w	r0, sl, #72	; 0x48
   d418e:	f000 f9e5 	bl	d455c <_ZN11TinyGPSTime6minuteEv>
   d4192:	4681      	mov	r9, r0
			se = gps.time.second();
   d4194:	f10a 0048 	add.w	r0, sl, #72	; 0x48
   d4198:	f000 f9ee 	bl	d4578 <_ZN11TinyGPSTime6secondEv>

			if(hr > 7) {
   d419c:	2c07      	cmp	r4, #7
			lat = gps.location.lat();
			lon = gps.location.lng(); 
			alt = gps.altitude.meters();
			hr = gps.time.hour();
			mn = gps.time.minute();
			se = gps.time.second();
   d419e:	4682      	mov	sl, r0

			if(hr > 7) {
   d41a0:	d901      	bls.n	d41a6 <_Z11displayInfov+0xbe>
				hr = hr + UTC_offset;
   d41a2:	3c06      	subs	r4, #6
   d41a4:	e000      	b.n	d41a8 <_Z11displayInfov+0xc0>
			}
			else {
				hr = hr + 24 + UTC_offset;
   d41a6:	3412      	adds	r4, #18
   d41a8:	b2e4      	uxtb	r4, r4
			}
			Serial.printf("Time: %02i:%02i:%02i --- ",hr,mn,se);
   d41aa:	f000 ff9f 	bl	d50ec <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d41ae:	4623      	mov	r3, r4
   d41b0:	4a1e      	ldr	r2, [pc, #120]	; (d422c <_Z11displayInfov+0x144>)
   d41b2:	2100      	movs	r1, #0
   d41b4:	e88d 0600 	stmia.w	sp, {r9, sl}
   d41b8:	f000 fddb 	bl	d4d72 <_ZN5Print11printf_implEbPKcz>
			Serial.printf("lat: %f, long: %f, alt: %f \n", lat,lon,alt);
   d41bc:	f000 ff96 	bl	d50ec <_Z16_fetch_usbserialv>
   d41c0:	4604      	mov	r4, r0
   d41c2:	4640      	mov	r0, r8
   d41c4:	f001 fc92 	bl	d5aec <__aeabi_f2d>
   d41c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d41cc:	4638      	mov	r0, r7
   d41ce:	f001 fc8d 	bl	d5aec <__aeabi_f2d>
   d41d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d41d6:	4630      	mov	r0, r6
   d41d8:	f001 fc88 	bl	d5aec <__aeabi_f2d>
   d41dc:	4a14      	ldr	r2, [pc, #80]	; (d4230 <_Z11displayInfov+0x148>)
   d41de:	e9cd 0100 	strd	r0, r1, [sp]
   d41e2:	2100      	movs	r1, #0
   d41e4:	4620      	mov	r0, r4
   d41e6:	f000 fdc4 	bl	d4d72 <_ZN5Print11printf_implEbPKcz>
			if (gettingFix) {
   d41ea:	782b      	ldrb	r3, [r5, #0]
   d41ec:	b18b      	cbz	r3, d4212 <_Z11displayInfov+0x12a>
				gettingFix = false;
   d41ee:	4b0b      	ldr	r3, [pc, #44]	; (d421c <_Z11displayInfov+0x134>)
   d41f0:	2200      	movs	r2, #0
   d41f2:	701a      	strb	r2, [r3, #0]
   d41f4:	f000 fba0 	bl	d4938 <HAL_Timer_Get_Milli_Seconds>
				unsigned long elapsed = millis() - startFix;
   d41f8:	4b0a      	ldr	r3, [pc, #40]	; (d4224 <_Z11displayInfov+0x13c>)
   d41fa:	681c      	ldr	r4, [r3, #0]
   d41fc:	1b04      	subs	r4, r0, r4
				Serial.printlnf("%lu milliseconds to get GPS fix", elapsed);
   d41fe:	f000 ff75 	bl	d50ec <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4202:	4a0c      	ldr	r2, [pc, #48]	; (d4234 <_Z11displayInfov+0x14c>)
   d4204:	4623      	mov	r3, r4
   d4206:	2101      	movs	r1, #1
				gettingFix = true;
				startFix = millis();
			}
		}
	}
   d4208:	b026      	add	sp, #152	; 0x98
   d420a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d420e:	f000 bdb0 	b.w	d4d72 <_ZN5Print11printf_implEbPKcz>
   d4212:	b026      	add	sp, #152	; 0x98
   d4214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4218:	2003e3f0 	.word	0x2003e3f0
   d421c:	2003e3e8 	.word	0x2003e3e8
   d4220:	000d62db 	.word	0x000d62db
   d4224:	2003e3ec 	.word	0x2003e3ec
   d4228:	40590000 	.word	0x40590000
   d422c:	000d6284 	.word	0x000d6284
   d4230:	000d629e 	.word	0x000d629e
   d4234:	000d62bb 	.word	0x000d62bb
   d4238:	2003e310 	.word	0x2003e310

000d423c <loop>:
    gettingFix = true;

}

void loop()
{
   d423c:	b508      	push	{r3, lr}
	while (Serial1.available() > 0) {
   d423e:	f000 ffdb 	bl	d51f8 <_Z22__fetch_global_Serial1v>
   d4242:	6803      	ldr	r3, [r0, #0]
   d4244:	691b      	ldr	r3, [r3, #16]
   d4246:	4798      	blx	r3
   d4248:	2800      	cmp	r0, #0
   d424a:	dd0d      	ble.n	d4268 <loop+0x2c>
		if (gps.encode(Serial1.read())) {
   d424c:	f000 ffd4 	bl	d51f8 <_Z22__fetch_global_Serial1v>
   d4250:	6803      	ldr	r3, [r0, #0]
   d4252:	695b      	ldr	r3, [r3, #20]
   d4254:	4798      	blx	r3
   d4256:	b2c1      	uxtb	r1, r0
   d4258:	4804      	ldr	r0, [pc, #16]	; (d426c <loop+0x30>)
   d425a:	f000 faf3 	bl	d4844 <_ZN11TinyGPSPlus6encodeEc>
   d425e:	2800      	cmp	r0, #0
   d4260:	d0ed      	beq.n	d423e <loop+0x2>
			displayInfo();
   d4262:	f7ff ff41 	bl	d40e8 <_Z11displayInfov>
   d4266:	e7ea      	b.n	d423e <loop+0x2>
   d4268:	bd08      	pop	{r3, pc}
   d426a:	bf00      	nop
   d426c:	2003e310 	.word	0x2003e310

000d4270 <_GLOBAL__sub_I_gps>:
				gettingFix = true;
				startFix = millis();
			}
		}
	}
   d4270:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4272:	f000 fb51 	bl	d4918 <HAL_Pin_Map>
 * GPS Module Connections
 * GPS Unit Rx connects to Argon Pin D9  (UART1_TX)
 * GPS Unit Tx connects to Argon Pin D10 (UART1_RX)
*/

SYSTEM_THREAD(ENABLED);
   d4276:	2001      	movs	r0, #1
   d4278:	2100      	movs	r1, #0
   d427a:	f000 fc15 	bl	d4aa8 <system_thread_set_state>
const unsigned long PUBLISH_PERIOD = 120000;
const unsigned long SERIAL_PERIOD = 5000;
const unsigned long MAX_GPS_AGE_MS = 10000; // GPS location must be newer than this to be considered valid

// The TinyGPS++ object
TinyGPSPlus gps;
   d427e:	4802      	ldr	r0, [pc, #8]	; (d4288 <_GLOBAL__sub_I_gps+0x18>)
				gettingFix = true;
				startFix = millis();
			}
		}
	}
   d4280:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
const unsigned long PUBLISH_PERIOD = 120000;
const unsigned long SERIAL_PERIOD = 5000;
const unsigned long MAX_GPS_AGE_MS = 10000; // GPS location must be newer than this to be considered valid

// The TinyGPS++ object
TinyGPSPlus gps;
   d4284:	f000 b818 	b.w	d42b8 <_ZN11TinyGPSPlusC1Ev>
   d4288:	2003e310 	.word	0x2003e310

000d428c <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d428c:	f000 bb44 	b.w	d4918 <HAL_Pin_Map>

000d4290 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d4290:	f000 bb42 	b.w	d4918 <HAL_Pin_Map>

000d4294 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4294:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4296:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4298:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d429a:	b113      	cbz	r3, d42a2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d429c:	2203      	movs	r2, #3
   d429e:	4601      	mov	r1, r0
   d42a0:	4798      	blx	r3
    }
   d42a2:	4620      	mov	r0, r4
   d42a4:	bd10      	pop	{r4, pc}
	...

000d42a8 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d42a8:	4b02      	ldr	r3, [pc, #8]	; (d42b4 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
   d42aa:	2201      	movs	r2, #1
   d42ac:	701a      	strb	r2, [r3, #0]
   d42ae:	f000 bb33 	b.w	d4918 <HAL_Pin_Map>
   d42b2:	bf00      	nop
   d42b4:	2003e3f4 	.word	0x2003e3f4

000d42b8 <_ZN11TinyGPSPlusC1Ev>:
   const RawDegrees &rawLat()     { updated = false; return rawLatData; }
   const RawDegrees &rawLng()     { updated = false; return rawLngData; }
   double lat();
   double lng();

   TinyGPSLocation() : valid(false), updated(false)
   d42b8:	2200      	movs	r2, #0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d42ba:	2102      	movs	r1, #2
   d42bc:	7002      	strb	r2, [r0, #0]
   d42be:	7042      	strb	r2, [r0, #1]
{
   uint16_t deg;
   uint32_t billionths;
   bool negative;
public:
   RawDegrees() : deg(0), billionths(0), negative(false)
   d42c0:	8082      	strh	r2, [r0, #4]
   d42c2:	6082      	str	r2, [r0, #8]
   d42c4:	7302      	strb	r2, [r0, #12]
   d42c6:	8202      	strh	r2, [r0, #16]
   d42c8:	6142      	str	r2, [r0, #20]
   d42ca:	7602      	strb	r2, [r0, #24]
   d42cc:	8382      	strh	r2, [r0, #28]
   d42ce:	6202      	str	r2, [r0, #32]
   d42d0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d42d4:	8502      	strh	r2, [r0, #40]	; 0x28
   d42d6:	62c2      	str	r2, [r0, #44]	; 0x2c
   d42d8:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   uint32_t value()           { updated = false; return date; }
   uint16_t year();
   uint8_t month();
   uint8_t day();

   TinyGPSDate() : valid(false), updated(false), date(0)
   d42dc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
   d42e0:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
   d42e4:	63c2      	str	r2, [r0, #60]	; 0x3c
   uint8_t hour();
   uint8_t minute();
   uint8_t second();
   uint8_t centisecond();

   TinyGPSTime() : valid(false), updated(false), time(0)
   d42e6:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
   d42ea:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
   d42ee:	64c2      	str	r2, [r0, #76]	; 0x4c
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d42f0:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
   d42f4:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
   d42f8:	6602      	str	r2, [r0, #96]	; 0x60
   d42fa:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
   d42fe:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
   d4302:	6702      	str	r2, [r0, #112]	; 0x70
   d4304:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
   d4308:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
   d430c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }

   TinyGPSInteger() : valid(false), updated(false), val(0)
   d4310:	f880 2088 	strb.w	r2, [r0, #136]	; 0x88
   d4314:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
   d4318:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d431c:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
   d4320:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
   d4324:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d4328:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
   d432c:	f880 20a9 	strb.w	r2, [r0, #169]	; 0xa9
   d4330:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
   d4334:	f880 20ba 	strb.w	r2, [r0, #186]	; 0xba
   d4338:	f880 20bb 	strb.w	r2, [r0, #187]	; 0xbb
   d433c:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
   d4340:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
   d4344:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   d4348:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
   d434c:	f8c0 20cc 	str.w	r2, [r0, #204]	; 0xcc
   d4350:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   d4354:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
{
  term[0] = '\0';
   d4358:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
   d435c:	4770      	bx	lr

000d435e <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d435e:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d4362:	2b05      	cmp	r3, #5
   d4364:	d802      	bhi.n	d436c <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d4366:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d436a:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d436c:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d4370:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d4372:	bf94      	ite	ls
   d4374:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d4378:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d437c:	4770      	bx	lr

000d437e <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d437e:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d4380:	7805      	ldrb	r5, [r0, #0]
}

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d4382:	4604      	mov	r4, r0
  bool negative = *term == '-';
  if (negative) ++term;
   d4384:	2d2d      	cmp	r5, #45	; 0x2d
   d4386:	bf08      	it	eq
   d4388:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d438a:	4620      	mov	r0, r4
   d438c:	f001 fe64 	bl	d6058 <atol>
   d4390:	2364      	movs	r3, #100	; 0x64
   d4392:	4358      	muls	r0, r3
   d4394:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d4396:	f814 3b01 	ldrb.w	r3, [r4], #1
   d439a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d439e:	2909      	cmp	r1, #9
   d43a0:	d9f8      	bls.n	d4394 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d43a2:	2b2e      	cmp	r3, #46	; 0x2e
   d43a4:	d10b      	bne.n	d43be <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d43a6:	7853      	ldrb	r3, [r2, #1]
   d43a8:	3b30      	subs	r3, #48	; 0x30
   d43aa:	2b09      	cmp	r3, #9
   d43ac:	d807      	bhi.n	d43be <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d43ae:	210a      	movs	r1, #10
   d43b0:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d43b4:	7893      	ldrb	r3, [r2, #2]
   d43b6:	3b30      	subs	r3, #48	; 0x30
   d43b8:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d43ba:	bf98      	it	ls
   d43bc:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d43be:	2d2d      	cmp	r5, #45	; 0x2d
   d43c0:	bf08      	it	eq
   d43c2:	4240      	negeq	r0, r0
}
   d43c4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d43c8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d43c8:	b538      	push	{r3, r4, r5, lr}
   d43ca:	4604      	mov	r4, r0
   d43cc:	460d      	mov	r5, r1
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d43ce:	f001 fe43 	bl	d6058 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d43d2:	2364      	movs	r3, #100	; 0x64
   d43d4:	fbb0 f2f3 	udiv	r2, r0, r3
   d43d8:	fb03 0012 	mls	r0, r3, r2, r0
   d43dc:	4b11      	ldr	r3, [pc, #68]	; (d4424 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d43de:	802a      	strh	r2, [r5, #0]
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
  uint32_t leftOfDecimal = (uint32_t)atol(term);
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d43e0:	4343      	muls	r3, r0
   d43e2:	4620      	mov	r0, r4

  deg.deg = (int16_t)(leftOfDecimal / 100);

  while (isdigit(*term))
   d43e4:	7802      	ldrb	r2, [r0, #0]
   d43e6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   d43ea:	2909      	cmp	r1, #9
   d43ec:	4604      	mov	r4, r0
   d43ee:	f100 0001 	add.w	r0, r0, #1
   d43f2:	d9f7      	bls.n	d43e4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d43f4:	2a2e      	cmp	r2, #46	; 0x2e
   d43f6:	d10b      	bne.n	d4410 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
   d43f8:	490a      	ldr	r1, [pc, #40]	; (d4424 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d43fa:	200a      	movs	r0, #10

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d43fc:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   d4400:	3a30      	subs	r2, #48	; 0x30
   d4402:	2a09      	cmp	r2, #9
   d4404:	d804      	bhi.n	d4410 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
    {
      multiplier /= 10;
   d4406:	fbb1 f1f0 	udiv	r1, r1, r0
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d440a:	fb01 3302 	mla	r3, r1, r2, r3

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d440e:	e7f5      	b.n	d43fc <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    {
      multiplier /= 10;
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d4410:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4414:	3301      	adds	r3, #1
   d4416:	2203      	movs	r2, #3
   d4418:	fbb3 f3f2 	udiv	r3, r3, r2
   d441c:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d441e:	2300      	movs	r3, #0
   d4420:	722b      	strb	r3, [r5, #8]
   d4422:	bd38      	pop	{r3, r4, r5, pc}
   d4424:	00989680 	.word	0x00989680

000d4428 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d4428:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d442a:	4603      	mov	r3, r0
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d442c:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d442e:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d4432:	6042      	str	r2, [r0, #4]
   d4434:	685a      	ldr	r2, [r3, #4]
   d4436:	6082      	str	r2, [r0, #8]
   d4438:	7a1b      	ldrb	r3, [r3, #8]
   d443a:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d443c:	4603      	mov	r3, r0
   d443e:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d4442:	6102      	str	r2, [r0, #16]
   d4444:	685a      	ldr	r2, [r3, #4]
   d4446:	6142      	str	r2, [r0, #20]
   d4448:	7a1b      	ldrb	r3, [r3, #8]
   d444a:	7603      	strb	r3, [r0, #24]
   d444c:	f000 fa74 	bl	d4938 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d4450:	2301      	movs	r3, #1

void TinyGPSLocation::commit()
{
   rawLatData = rawNewLatData;
   rawLngData = rawNewLngData;
   lastCommitTime = millis();
   d4452:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d4454:	7063      	strb	r3, [r4, #1]
   d4456:	7023      	strb	r3, [r4, #0]
   d4458:	bd10      	pop	{r4, pc}
   d445a:	0000      	movs	r0, r0
   d445c:	0000      	movs	r0, r0
	...

000d4460 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d4460:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d4462:	2300      	movs	r3, #0
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d4464:	4604      	mov	r4, r0
   updated = false;
   d4466:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d4468:	6880      	ldr	r0, [r0, #8]
   d446a:	f001 fb1d 	bl	d5aa8 <__aeabi_ui2d>
   d446e:	a30e      	add	r3, pc, #56	; (adr r3, d44a8 <_ZN15TinyGPSLocation3latEv+0x48>)
   d4470:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4474:	f001 fcb8 	bl	d5de8 <__aeabi_ddiv>
   d4478:	4606      	mov	r6, r0
   d447a:	88a0      	ldrh	r0, [r4, #4]
   d447c:	460f      	mov	r7, r1
   d447e:	f001 fb23 	bl	d5ac8 <__aeabi_i2d>
   d4482:	460b      	mov	r3, r1
   d4484:	4602      	mov	r2, r0
   d4486:	4639      	mov	r1, r7
   d4488:	4630      	mov	r0, r6
   d448a:	f001 f9d1 	bl	d5830 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d448e:	7b23      	ldrb	r3, [r4, #12]
   d4490:	b11b      	cbz	r3, d449a <_ZN15TinyGPSLocation3latEv+0x3a>
   d4492:	4602      	mov	r2, r0
   d4494:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d4498:	e001      	b.n	d449e <_ZN15TinyGPSLocation3latEv+0x3e>
   d449a:	4602      	mov	r2, r0
   d449c:	460b      	mov	r3, r1
}
   d449e:	ec43 2b10 	vmov	d0, r2, r3
   d44a2:	bdd0      	pop	{r4, r6, r7, pc}
   d44a4:	f3af 8000 	nop.w
   d44a8:	00000000 	.word	0x00000000
   d44ac:	41cdcd65 	.word	0x41cdcd65

000d44b0 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d44b0:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d44b2:	2300      	movs	r3, #0
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   return rawLatData.negative ? -ret : ret;
}

double TinyGPSLocation::lng()
{
   d44b4:	4604      	mov	r4, r0
   updated = false;
   d44b6:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d44b8:	6940      	ldr	r0, [r0, #20]
   d44ba:	f001 faf5 	bl	d5aa8 <__aeabi_ui2d>
   d44be:	a30e      	add	r3, pc, #56	; (adr r3, d44f8 <_ZN15TinyGPSLocation3lngEv+0x48>)
   d44c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44c4:	f001 fc90 	bl	d5de8 <__aeabi_ddiv>
   d44c8:	4606      	mov	r6, r0
   d44ca:	8a20      	ldrh	r0, [r4, #16]
   d44cc:	460f      	mov	r7, r1
   d44ce:	f001 fafb 	bl	d5ac8 <__aeabi_i2d>
   d44d2:	460b      	mov	r3, r1
   d44d4:	4602      	mov	r2, r0
   d44d6:	4639      	mov	r1, r7
   d44d8:	4630      	mov	r0, r6
   d44da:	f001 f9a9 	bl	d5830 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d44de:	7e23      	ldrb	r3, [r4, #24]
   d44e0:	b11b      	cbz	r3, d44ea <_ZN15TinyGPSLocation3lngEv+0x3a>
   d44e2:	4602      	mov	r2, r0
   d44e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d44e8:	e001      	b.n	d44ee <_ZN15TinyGPSLocation3lngEv+0x3e>
   d44ea:	4602      	mov	r2, r0
   d44ec:	460b      	mov	r3, r1
}
   d44ee:	ec43 2b10 	vmov	d0, r2, r3
   d44f2:	bdd0      	pop	{r4, r6, r7, pc}
   d44f4:	f3af 8000 	nop.w
   d44f8:	00000000 	.word	0x00000000
   d44fc:	41cdcd65 	.word	0x41cdcd65

000d4500 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d4500:	b510      	push	{r4, lr}
   date = newDate;
   d4502:	6883      	ldr	r3, [r0, #8]
   d4504:	6043      	str	r3, [r0, #4]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
   d4506:	4604      	mov	r4, r0
   d4508:	f000 fa16 	bl	d4938 <HAL_Timer_Get_Milli_Seconds>
   date = newDate;
   lastCommitTime = millis();
   valid = updated = true;
   d450c:	2301      	movs	r3, #1
}

void TinyGPSDate::commit()
{
   date = newDate;
   lastCommitTime = millis();
   d450e:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d4510:	7063      	strb	r3, [r4, #1]
   d4512:	7023      	strb	r3, [r4, #0]
   d4514:	bd10      	pop	{r4, pc}

000d4516 <_ZN11TinyGPSTime6commitEv>:
}

void TinyGPSTime::commit()
{
   d4516:	b510      	push	{r4, lr}
   time = newTime;
   d4518:	6883      	ldr	r3, [r0, #8]
   d451a:	6043      	str	r3, [r0, #4]
   lastCommitTime = millis();
   valid = updated = true;
}

void TinyGPSTime::commit()
{
   d451c:	4604      	mov	r4, r0
   d451e:	f000 fa0b 	bl	d4938 <HAL_Timer_Get_Milli_Seconds>
   time = newTime;
   lastCommitTime = millis();
   valid = updated = true;
   d4522:	2301      	movs	r3, #1
}

void TinyGPSTime::commit()
{
   time = newTime;
   lastCommitTime = millis();
   d4524:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d4526:	7063      	strb	r3, [r4, #1]
   d4528:	7023      	strb	r3, [r4, #0]
   d452a:	bd10      	pop	{r4, pc}

000d452c <_ZN11TinyGPSTime7setTimeEPKc>:
}

void TinyGPSTime::setTime(const char *term)
{
   d452c:	b510      	push	{r4, lr}
   d452e:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d4530:	4608      	mov	r0, r1
   d4532:	f7ff ff24 	bl	d437e <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d4536:	60a0      	str	r0, [r4, #8]
   d4538:	bd10      	pop	{r4, pc}

000d453a <_ZN11TinyGPSDate7setDateEPKc>:
}

void TinyGPSDate::setDate(const char *term)
{
   d453a:	b510      	push	{r4, lr}
   d453c:	4604      	mov	r4, r0
   newDate = atol(term);
   d453e:	4608      	mov	r0, r1
   d4540:	f001 fd8a 	bl	d6058 <atol>
   d4544:	60a0      	str	r0, [r4, #8]
   d4546:	bd10      	pop	{r4, pc}

000d4548 <_ZN11TinyGPSTime4hourEv>:
   return date / 10000;
}

uint8_t TinyGPSTime::hour()
{
   updated = false;
   d4548:	2300      	movs	r3, #0
   d454a:	7043      	strb	r3, [r0, #1]
   return time / 1000000;
   d454c:	6843      	ldr	r3, [r0, #4]
   d454e:	4802      	ldr	r0, [pc, #8]	; (d4558 <_ZN11TinyGPSTime4hourEv+0x10>)
   d4550:	fbb3 f0f0 	udiv	r0, r3, r0
}
   d4554:	b2c0      	uxtb	r0, r0
   d4556:	4770      	bx	lr
   d4558:	000f4240 	.word	0x000f4240

000d455c <_ZN11TinyGPSTime6minuteEv>:

uint8_t TinyGPSTime::minute()
{
   updated = false;
   d455c:	2300      	movs	r3, #0
   d455e:	7043      	strb	r3, [r0, #1]
   return (time / 10000) % 100;
   d4560:	6843      	ldr	r3, [r0, #4]
   d4562:	f242 7010 	movw	r0, #10000	; 0x2710
   d4566:	fbb3 f3f0 	udiv	r3, r3, r0
   d456a:	2064      	movs	r0, #100	; 0x64
   d456c:	fbb3 f2f0 	udiv	r2, r3, r0
   d4570:	fb00 3012 	mls	r0, r0, r2, r3
}
   d4574:	b2c0      	uxtb	r0, r0
   d4576:	4770      	bx	lr

000d4578 <_ZN11TinyGPSTime6secondEv>:

uint8_t TinyGPSTime::second()
{
   updated = false;
   d4578:	2300      	movs	r3, #0
   d457a:	7043      	strb	r3, [r0, #1]
   return (time / 100) % 100;
   d457c:	6843      	ldr	r3, [r0, #4]
   d457e:	2064      	movs	r0, #100	; 0x64
   d4580:	fbb3 f3f0 	udiv	r3, r3, r0
   d4584:	fbb3 f2f0 	udiv	r2, r3, r0
   d4588:	fb00 3012 	mls	r0, r0, r2, r3
}
   d458c:	b2c0      	uxtb	r0, r0
   d458e:	4770      	bx	lr

000d4590 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d4590:	b510      	push	{r4, lr}
   val = newval;
   d4592:	68c3      	ldr	r3, [r0, #12]
   d4594:	6083      	str	r3, [r0, #8]
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d4596:	4604      	mov	r4, r0
   d4598:	f000 f9ce 	bl	d4938 <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d459c:	2301      	movs	r3, #1
}

void TinyGPSDecimal::commit()
{
   val = newval;
   lastCommitTime = millis();
   d459e:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d45a0:	7063      	strb	r3, [r4, #1]
   d45a2:	7023      	strb	r3, [r4, #0]
   d45a4:	bd10      	pop	{r4, pc}

000d45a6 <_ZN14TinyGPSDecimal3setEPKc>:
}

void TinyGPSDecimal::set(const char *term)
{
   d45a6:	b510      	push	{r4, lr}
   d45a8:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d45aa:	4608      	mov	r0, r1
   d45ac:	f7ff fee7 	bl	d437e <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d45b0:	60e0      	str	r0, [r4, #12]
   d45b2:	bd10      	pop	{r4, pc}

000d45b4 <_ZN14TinyGPSInteger6commitEv>:
}

void TinyGPSInteger::commit()
{
   d45b4:	b510      	push	{r4, lr}
   val = newval;
   d45b6:	68c3      	ldr	r3, [r0, #12]
   d45b8:	6083      	str	r3, [r0, #8]
{
   newval = TinyGPSPlus::parseDecimal(term);
}

void TinyGPSInteger::commit()
{
   d45ba:	4604      	mov	r4, r0
   d45bc:	f000 f9bc 	bl	d4938 <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d45c0:	2301      	movs	r3, #1
}

void TinyGPSInteger::commit()
{
   val = newval;
   lastCommitTime = millis();
   d45c2:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d45c4:	7063      	strb	r3, [r4, #1]
   d45c6:	7023      	strb	r3, [r4, #0]
   d45c8:	bd10      	pop	{r4, pc}

000d45ca <_ZN14TinyGPSInteger3setEPKc>:
}

void TinyGPSInteger::set(const char *term)
{
   d45ca:	b510      	push	{r4, lr}
   d45cc:	4604      	mov	r4, r0
   newval = atol(term);
   d45ce:	4608      	mov	r0, r1
   d45d0:	f001 fd42 	bl	d6058 <atol>
   d45d4:	60e0      	str	r0, [r4, #12]
   d45d6:	bd10      	pop	{r4, pc}

000d45d8 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d45d8:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d45da:	4601      	mov	r1, r0
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d45dc:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d45de:	3010      	adds	r0, #16
   d45e0:	f001 fd92 	bl	d6108 <strcpy>
   d45e4:	f000 f9a8 	bl	d4938 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d45e8:	2301      	movs	r3, #1
}

void TinyGPSCustom::commit()
{
   strcpy(this->buffer, this->stagingBuffer);
   lastCommitTime = millis();
   d45ea:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d45ec:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   d45f0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d45f4:	bd10      	pop	{r4, pc}

000d45f6 <_ZN13TinyGPSCustom3setEPKc>:
}

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d45f6:	2210      	movs	r2, #16
   d45f8:	f001 bd96 	b.w	d6128 <strncpy>

000d45fc <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d45fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d45fe:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d4602:	4604      	mov	r4, r0
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d4604:	2d00      	cmp	r5, #0
   d4606:	d067      	beq.n	d46d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xdc>
  {
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d4608:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
   d460c:	f7ff fea7 	bl	d435e <_ZN11TinyGPSPlus7fromHexEc>
   d4610:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
   d4614:	4602      	mov	r2, r0
   d4616:	4620      	mov	r0, r4
   d4618:	f7ff fea1 	bl	d435e <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d461c:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   d4620:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   d4624:	b2c0      	uxtb	r0, r0
   d4626:	4283      	cmp	r3, r0
   d4628:	d14f      	bne.n	d46ca <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xce>
    {
      passedChecksumCount++;
   d462a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   d462e:	3301      	adds	r3, #1
   d4630:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
   d4634:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d4638:	b123      	cbz	r3, d4644 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x48>
        ++sentencesWithFixCount;
   d463a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d463e:	3301      	adds	r3, #1
   d4640:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

      switch(curSentenceType)
   d4644:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   d4648:	b1b3      	cbz	r3, d4678 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7c>
   d464a:	2b01      	cmp	r3, #1
   d464c:	d12a      	bne.n	d46a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa8>
      {
      case GPS_SENTENCE_GPRMC:
        date.commit();
   d464e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4652:	f7ff ff55 	bl	d4500 <_ZN11TinyGPSDate6commitEv>
        time.commit();
   d4656:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d465a:	f7ff ff5c 	bl	d4516 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d465e:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d4662:	b1fb      	cbz	r3, d46a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa8>
        {
           location.commit();
   d4664:	4620      	mov	r0, r4
   d4666:	f7ff fedf 	bl	d4428 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
   d466a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d466e:	f7ff ff8f 	bl	d4590 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
   d4672:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4676:	e013      	b.n	d46a0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa4>
        }
        break;
      case GPS_SENTENCE_GPGGA:
        time.commit();
   d4678:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d467c:	f7ff ff4b 	bl	d4516 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d4680:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d4684:	b133      	cbz	r3, d4694 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x98>
        {
          location.commit();
   d4686:	4620      	mov	r0, r4
   d4688:	f7ff fece 	bl	d4428 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
   d468c:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d4690:	f7ff ff7e 	bl	d4590 <_ZN14TinyGPSDecimal6commitEv>
        }
        satellites.commit();
   d4694:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d4698:	f7ff ff8c 	bl	d45b4 <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
   d469c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d46a0:	f7ff ff76 	bl	d4590 <_ZN14TinyGPSDecimal6commitEv>
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d46a4:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d46a8:	2e00      	cmp	r6, #0
   d46aa:	f000 80c5 	beq.w	d4838 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d46ae:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d46b2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d46b4:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d46b6:	f001 fd1d 	bl	d60f4 <strcmp>
   d46ba:	2800      	cmp	r0, #0
   d46bc:	f040 80bc 	bne.w	d4838 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
         p->commit();
   d46c0:	4630      	mov	r0, r6
   d46c2:	f7ff ff89 	bl	d45d8 <_ZN13TinyGPSCustom6commitEv>
        hdop.commit();
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d46c6:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d46c8:	e7ee      	b.n	d46a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xac>
      return true;
    }

    else
    {
      ++failedChecksumCount;
   d46ca:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   d46ce:	3301      	adds	r3, #1
   d46d0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    }

    return false;
   d46d4:	2500      	movs	r5, #0
   d46d6:	e0af      	b.n	d4838 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0)
   d46d8:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
   d46dc:	bb2a      	cbnz	r2, d472a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x12e>
  {
    if (!strcmp(term, _GPRMCterm))
   d46de:	f100 07aa 	add.w	r7, r0, #170	; 0xaa
   d46e2:	4956      	ldr	r1, [pc, #344]	; (d483c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>)
   d46e4:	4638      	mov	r0, r7
   d46e6:	f001 fd05 	bl	d60f4 <strcmp>
   d46ea:	b908      	cbnz	r0, d46f0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d46ec:	2301      	movs	r3, #1
   d46ee:	e008      	b.n	d4702 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x106>
    else if (!strcmp(term, _GPGGAterm))
   d46f0:	4953      	ldr	r1, [pc, #332]	; (d4840 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x244>)
   d46f2:	4638      	mov	r0, r7
   d46f4:	f001 fcfe 	bl	d60f4 <strcmp>
   d46f8:	b910      	cbnz	r0, d4700 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x104>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d46fa:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
   d46fe:	e002      	b.n	d4706 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10a>
    else
      curSentenceType = GPS_SENTENCE_OTHER;
   d4700:	2302      	movs	r3, #2
   d4702:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d4706:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   d470a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d470e:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d4712:	2e00      	cmp	r6, #0
   d4714:	f000 8090 	beq.w	d4838 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d4718:	4639      	mov	r1, r7
   d471a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d471c:	f001 fcea 	bl	d60f4 <strcmp>
   d4720:	2800      	cmp	r0, #0
   d4722:	f280 8085 	bge.w	d4830 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x234>
   d4726:	6b33      	ldr	r3, [r6, #48]	; 0x30
   d4728:	e7ef      	b.n	d470a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10e>
       customCandidates = NULL;

    return false;
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d472a:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
   d472e:	2902      	cmp	r1, #2
   d4730:	d066      	beq.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   d4732:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
   d4736:	2b00      	cmp	r3, #0
   d4738:	d062      	beq.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    switch(COMBINE(curSentenceType, curTermNumber))
   d473a:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d473e:	3a01      	subs	r2, #1
   d4740:	2a28      	cmp	r2, #40	; 0x28
   d4742:	d85d      	bhi.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   d4744:	e8df f002 	tbb	[pc, r2]
   d4748:	2a232015 	.word	0x2a232015
   d474c:	534d4631 	.word	0x534d4631
   d4750:	5c5c5c57 	.word	0x5c5c5c57
   d4754:	5c5c5c5c 	.word	0x5c5c5c5c
   d4758:	5c5c5c5c 	.word	0x5c5c5c5c
   d475c:	5c5c5c5c 	.word	0x5c5c5c5c
   d4760:	5c5c5c5c 	.word	0x5c5c5c5c
   d4764:	5c5c5c5c 	.word	0x5c5c5c5c
   d4768:	23201b15 	.word	0x23201b15
   d476c:	3c38312a 	.word	0x3c38312a
   d4770:	40          	.byte	0x40
   d4771:	00          	.byte	0x00
  {
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
      time.setTime(term);
   d4772:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d4776:	3048      	adds	r0, #72	; 0x48
   d4778:	f7ff fed8 	bl	d452c <_ZN11TinyGPSTime7setTimeEPKc>
      break;
   d477c:	e040      	b.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      sentenceHasFix = term[0] == 'A';
   d477e:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d4782:	4243      	negs	r3, r0
   d4784:	4143      	adcs	r3, r0
   d4786:	e029      	b.n	d47dc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1e0>
   valid = updated = true;
}

void TinyGPSLocation::setLatitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d4788:	f100 011c 	add.w	r1, r0, #28
   d478c:	e008      	b.n	d47a0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
      location.setLatitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
      location.rawNewLatData.negative = term[0] == 'S';
   d478e:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d4792:	424b      	negs	r3, r1
   d4794:	414b      	adcs	r3, r1
   d4796:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      break;
   d479a:	e031      	b.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
}

void TinyGPSLocation::setLongitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d479c:	f100 0128 	add.w	r1, r0, #40	; 0x28
   d47a0:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
   d47a4:	f7ff fe10 	bl	d43c8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
   d47a8:	e02a      	b.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
      location.setLongitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
      location.rawNewLngData.negative = term[0] == 'W';
   d47aa:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d47ae:	4253      	negs	r3, r2
   d47b0:	4153      	adcs	r3, r2
   d47b2:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
      break;
   d47b6:	e023      	b.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
      speed.set(term);
   d47b8:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d47bc:	3058      	adds	r0, #88	; 0x58
   d47be:	e01d      	b.n	d47fc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
      course.set(term);
   d47c0:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d47c4:	3068      	adds	r0, #104	; 0x68
   d47c6:	e019      	b.n	d47fc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
      date.setDate(term);
   d47c8:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d47cc:	3038      	adds	r0, #56	; 0x38
   d47ce:	f7ff feb4 	bl	d453a <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d47d2:	e015      	b.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      sentenceHasFix = term[0] > '0';
   d47d4:	2b30      	cmp	r3, #48	; 0x30
   d47d6:	bf94      	ite	ls
   d47d8:	2300      	movls	r3, #0
   d47da:	2301      	movhi	r3, #1
   d47dc:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
   d47e0:	e00e      	b.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
      satellites.set(term);
   d47e2:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d47e6:	3088      	adds	r0, #136	; 0x88
   d47e8:	f7ff feef 	bl	d45ca <_ZN14TinyGPSInteger3setEPKc>
      break;
   d47ec:	e008      	b.n	d4800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
      hdop.set(term);
   d47ee:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d47f2:	3098      	adds	r0, #152	; 0x98
   d47f4:	e002      	b.n	d47fc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
      altitude.set(term);
   d47f6:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d47fa:	3078      	adds	r0, #120	; 0x78
   d47fc:	f7ff fed3 	bl	d45a6 <_ZN14TinyGPSDecimal3setEPKc>
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4800:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
    if (p->termNumber == curTermNumber)
         p->set(term);
   d4804:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
      altitude.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d4808:	b1b6      	cbz	r6, d4838 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d480a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d480e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d4810:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d4812:	f001 fc6f 	bl	d60f4 <strcmp>
   d4816:	b978      	cbnz	r0, d4838 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d4818:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d481a:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d481e:	429a      	cmp	r2, r3
   d4820:	dc0a      	bgt.n	d4838 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
    if (p->termNumber == curTermNumber)
   d4822:	d103      	bne.n	d482c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x230>
         p->set(term);
   d4824:	4639      	mov	r1, r7
   d4826:	4630      	mov	r0, r6
   d4828:	f7ff fee5 	bl	d45f6 <_ZN13TinyGPSCustom3setEPKc>
      altitude.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d482c:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d482e:	e7eb      	b.n	d4808 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x20c>
    else
      curSentenceType = GPS_SENTENCE_OTHER;

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d4830:	d002      	beq.n	d4838 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
       customCandidates = NULL;
   d4832:	2300      	movs	r3, #0
   d4834:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    if (p->termNumber == curTermNumber)
         p->set(term);

  return false;
}
   d4838:	4628      	mov	r0, r5
   d483a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d483c:	000d62e7 	.word	0x000d62e7
   d4840:	000d62ed 	.word	0x000d62ed

000d4844 <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d4844:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d4846:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8

  switch(c)
   d484a:	2924      	cmp	r1, #36	; 0x24
// public methods
//

bool TinyGPSPlus::encode(char c)
{
  ++encodedCharCount;
   d484c:	f103 0301 	add.w	r3, r3, #1
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d4850:	4604      	mov	r4, r0
   d4852:	460d      	mov	r5, r1
  ++encodedCharCount;
   d4854:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

  switch(c)
   d4858:	d02a      	beq.n	d48b0 <_ZN11TinyGPSPlus6encodeEc+0x6c>
   d485a:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   d485e:	d804      	bhi.n	d486a <_ZN11TinyGPSPlus6encodeEc+0x26>
   d4860:	290a      	cmp	r1, #10
   d4862:	d00c      	beq.n	d487e <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d4864:	290d      	cmp	r1, #13
   d4866:	d132      	bne.n	d48ce <_ZN11TinyGPSPlus6encodeEc+0x8a>
   d4868:	e009      	b.n	d487e <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d486a:	292a      	cmp	r1, #42	; 0x2a
   d486c:	d007      	beq.n	d487e <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d486e:	292c      	cmp	r1, #44	; 0x2c
   d4870:	d12d      	bne.n	d48ce <_ZN11TinyGPSPlus6encodeEc+0x8a>
  {
  case ',': // term terminators
    parity ^= (uint8_t)c;
   d4872:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
   d4876:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d487a:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
  case '\r':
  case '\n':
  case '*':
    {
      bool isValidSentence = false;
      if (curTermOffset < sizeof(term))
   d487e:	2b0e      	cmp	r3, #14
   d4880:	f04f 0000 	mov.w	r0, #0
   d4884:	d805      	bhi.n	d4892 <_ZN11TinyGPSPlus6encodeEc+0x4e>
      {
        term[curTermOffset] = 0;
   d4886:	4423      	add	r3, r4
   d4888:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
   d488c:	4620      	mov	r0, r4
   d488e:	f7ff feb5 	bl	d45fc <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      }
      ++curTermNumber;
   d4892:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d4896:	3301      	adds	r3, #1
   d4898:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
   d489c:	2300      	movs	r3, #0
   d489e:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
   d48a2:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d48a6:	425d      	negs	r5, r3
   d48a8:	415d      	adcs	r5, r3
   d48aa:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
      return isValidSentence;
   d48ae:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d48b0:	2000      	movs	r0, #0
    parity = 0;
    curSentenceType = GPS_SENTENCE_OTHER;
   d48b2:	2302      	movs	r3, #2
      return isValidSentence;
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d48b4:	f884 00bb 	strb.w	r0, [r4, #187]	; 0xbb
   d48b8:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
    parity = 0;
   d48bc:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
   d48c0:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    isChecksumTerm = false;
   d48c4:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
    sentenceHasFix = false;
   d48c8:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    return false;
   d48cc:	bd38      	pop	{r3, r4, r5, pc}

  default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
   d48ce:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d48d0:	bf9f      	itttt	ls
   d48d2:	1c5a      	addls	r2, r3, #1
   d48d4:	191b      	addls	r3, r3, r4
   d48d6:	f884 20bb 	strbls.w	r2, [r4, #187]	; 0xbb
   d48da:	f883 50aa 	strbls.w	r5, [r3, #170]	; 0xaa
    if (!isChecksumTerm)
   d48de:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
   d48e2:	b928      	cbnz	r0, d48f0 <_ZN11TinyGPSPlus6encodeEc+0xac>
      parity ^= c;
   d48e4:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
   d48e8:	404d      	eors	r5, r1
   d48ea:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
   d48ee:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d48f0:	2000      	movs	r0, #0
  }

  return false;
}
   d48f2:	bd38      	pop	{r3, r4, r5, pc}

000d48f4 <_GLOBAL__sub_I__ZN11TinyGPSPlusC2Ev>:
   d48f4:	f000 b810 	b.w	d4918 <HAL_Pin_Map>

000d48f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <netdb_freeaddrinfo+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	689b      	ldr	r3, [r3, #8]
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030268 	.word	0x00030268

000d4908 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <netdb_getaddrinfo+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	68db      	ldr	r3, [r3, #12]
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030268 	.word	0x00030268

000d4918 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <HAL_Pin_Map+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	681b      	ldr	r3, [r3, #0]
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	0003022c 	.word	0x0003022c

000d4928 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <HAL_RNG_GetRandomNumber+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	685b      	ldr	r3, [r3, #4]
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030218 	.word	0x00030218

000d4938 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	695b      	ldr	r3, [r3, #20]
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030218 	.word	0x00030218

000d4948 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <os_thread_is_current+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	689b      	ldr	r3, [r3, #8]
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030248 	.word	0x00030248

000d4958 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <os_thread_join+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	691b      	ldr	r3, [r3, #16]
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030248 	.word	0x00030248

000d4968 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <os_thread_cleanup+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	695b      	ldr	r3, [r3, #20]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030248 	.word	0x00030248

000d4978 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <os_mutex_recursive_create+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	00030248 	.word	0x00030248

000d4988 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <os_mutex_recursive_destroy+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	00030248 	.word	0x00030248

000d4998 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <inet_inet_ntop+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	695b      	ldr	r3, [r3, #20]
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	00030264 	.word	0x00030264

000d49a8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <HAL_USART_Init+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	681b      	ldr	r3, [r3, #0]
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	0003023c 	.word	0x0003023c

000d49b8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <HAL_USART_Write_Data+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	68db      	ldr	r3, [r3, #12]
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	0003023c 	.word	0x0003023c

000d49c8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <HAL_USART_Available_Data+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	691b      	ldr	r3, [r3, #16]
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	0003023c 	.word	0x0003023c

000d49d8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <HAL_USART_Read_Data+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	695b      	ldr	r3, [r3, #20]
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	0003023c 	.word	0x0003023c

000d49e8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <HAL_USART_Peek_Data+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	699b      	ldr	r3, [r3, #24]
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	0003023c 	.word	0x0003023c

000d49f8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <HAL_USART_Flush_Data+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	69db      	ldr	r3, [r3, #28]
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	0003023c 	.word	0x0003023c

000d4a08 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <HAL_USART_Available_Data_For_Write+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	0003023c 	.word	0x0003023c

000d4a18 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <HAL_USART_BeginConfig+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	0003023c 	.word	0x0003023c

000d4a28 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <HAL_USB_USART_Init+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	681b      	ldr	r3, [r3, #0]
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	0003024c 	.word	0x0003024c

000d4a38 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <HAL_USB_USART_Begin+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	685b      	ldr	r3, [r3, #4]
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	0003024c 	.word	0x0003024c

000d4a48 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <HAL_USB_USART_Available_Data+0xc>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	691b      	ldr	r3, [r3, #16]
   d4a50:	9301      	str	r3, [sp, #4]
   d4a52:	bd08      	pop	{r3, pc}
   d4a54:	0003024c 	.word	0x0003024c

000d4a58 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4a58:	b508      	push	{r3, lr}
   d4a5a:	4b02      	ldr	r3, [pc, #8]	; (d4a64 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	695b      	ldr	r3, [r3, #20]
   d4a60:	9301      	str	r3, [sp, #4]
   d4a62:	bd08      	pop	{r3, pc}
   d4a64:	0003024c 	.word	0x0003024c

000d4a68 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4a68:	b508      	push	{r3, lr}
   d4a6a:	4b02      	ldr	r3, [pc, #8]	; (d4a74 <HAL_USB_USART_Receive_Data+0xc>)
   d4a6c:	681b      	ldr	r3, [r3, #0]
   d4a6e:	699b      	ldr	r3, [r3, #24]
   d4a70:	9301      	str	r3, [sp, #4]
   d4a72:	bd08      	pop	{r3, pc}
   d4a74:	0003024c 	.word	0x0003024c

000d4a78 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4a78:	b508      	push	{r3, lr}
   d4a7a:	4b02      	ldr	r3, [pc, #8]	; (d4a84 <HAL_USB_USART_Send_Data+0xc>)
   d4a7c:	681b      	ldr	r3, [r3, #0]
   d4a7e:	69db      	ldr	r3, [r3, #28]
   d4a80:	9301      	str	r3, [sp, #4]
   d4a82:	bd08      	pop	{r3, pc}
   d4a84:	0003024c 	.word	0x0003024c

000d4a88 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4a88:	b508      	push	{r3, lr}
   d4a8a:	4b02      	ldr	r3, [pc, #8]	; (d4a94 <HAL_USB_USART_Flush_Data+0xc>)
   d4a8c:	681b      	ldr	r3, [r3, #0]
   d4a8e:	6a1b      	ldr	r3, [r3, #32]
   d4a90:	9301      	str	r3, [sp, #4]
   d4a92:	bd08      	pop	{r3, pc}
   d4a94:	0003024c 	.word	0x0003024c

000d4a98 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4a98:	b508      	push	{r3, lr}
   d4a9a:	4b02      	ldr	r3, [pc, #8]	; (d4aa4 <set_system_mode+0xc>)
   d4a9c:	681b      	ldr	r3, [r3, #0]
   d4a9e:	685b      	ldr	r3, [r3, #4]
   d4aa0:	9301      	str	r3, [sp, #4]
   d4aa2:	bd08      	pop	{r3, pc}
   d4aa4:	00030220 	.word	0x00030220

000d4aa8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4aa8:	b508      	push	{r3, lr}
   d4aaa:	4b02      	ldr	r3, [pc, #8]	; (d4ab4 <system_thread_set_state+0xc>)
   d4aac:	681b      	ldr	r3, [r3, #0]
   d4aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ab0:	9301      	str	r3, [sp, #4]
   d4ab2:	bd08      	pop	{r3, pc}
   d4ab4:	00030220 	.word	0x00030220

000d4ab8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4ab8:	b508      	push	{r3, lr}
   d4aba:	4b03      	ldr	r3, [pc, #12]	; (d4ac8 <system_ctrl_set_app_request_handler+0x10>)
   d4abc:	681b      	ldr	r3, [r3, #0]
   d4abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4ac2:	9301      	str	r3, [sp, #4]
   d4ac4:	bd08      	pop	{r3, pc}
   d4ac6:	0000      	.short	0x0000
   d4ac8:	00030220 	.word	0x00030220

000d4acc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4acc:	b508      	push	{r3, lr}
   d4ace:	4b03      	ldr	r3, [pc, #12]	; (d4adc <system_ctrl_set_result+0x10>)
   d4ad0:	681b      	ldr	r3, [r3, #0]
   d4ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4ad6:	9301      	str	r3, [sp, #4]
   d4ad8:	bd08      	pop	{r3, pc}
   d4ada:	0000      	.short	0x0000
   d4adc:	00030220 	.word	0x00030220

000d4ae0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <network_connect+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	685b      	ldr	r3, [r3, #4]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	00030240 	.word	0x00030240

000d4af0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <network_connecting+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	689b      	ldr	r3, [r3, #8]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	00030240 	.word	0x00030240

000d4b00 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <network_disconnect+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	68db      	ldr	r3, [r3, #12]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	00030240 	.word	0x00030240

000d4b10 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <network_ready+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	691b      	ldr	r3, [r3, #16]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030240 	.word	0x00030240

000d4b20 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <network_on+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	695b      	ldr	r3, [r3, #20]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	00030240 	.word	0x00030240

000d4b30 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <network_off+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	699b      	ldr	r3, [r3, #24]
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	00030240 	.word	0x00030240

000d4b40 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <network_listen+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	69db      	ldr	r3, [r3, #28]
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	00030240 	.word	0x00030240

000d4b50 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <network_listening+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	6a1b      	ldr	r3, [r3, #32]
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	00030240 	.word	0x00030240

000d4b60 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <network_set_listen_timeout+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	00030240 	.word	0x00030240

000d4b70 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <network_get_listen_timeout+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	00030240 	.word	0x00030240

000d4b80 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	00030244 	.word	0x00030244

000d4b90 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <malloc+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	681b      	ldr	r3, [r3, #0]
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	0003021c 	.word	0x0003021c

000d4ba0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <free+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	685b      	ldr	r3, [r3, #4]
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	0003021c 	.word	0x0003021c

000d4bb0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <vsnprintf+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	0003021c 	.word	0x0003021c

000d4bc0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4bc0:	2200      	movs	r2, #0
   d4bc2:	4611      	mov	r1, r2
   d4bc4:	6840      	ldr	r0, [r0, #4]
   d4bc6:	f7ff bfc3 	b.w	d4b50 <network_listening>

000d4bca <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4bca:	2200      	movs	r2, #0
   d4bcc:	4611      	mov	r1, r2
   d4bce:	6840      	ldr	r0, [r0, #4]
   d4bd0:	f7ff bfce 	b.w	d4b70 <network_get_listen_timeout>

000d4bd4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4bd4:	2200      	movs	r2, #0
   d4bd6:	6840      	ldr	r0, [r0, #4]
   d4bd8:	f7ff bfc2 	b.w	d4b60 <network_set_listen_timeout>

000d4bdc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4bdc:	2200      	movs	r2, #0
   d4bde:	f081 0101 	eor.w	r1, r1, #1
   d4be2:	6840      	ldr	r0, [r0, #4]
   d4be4:	f7ff bfac 	b.w	d4b40 <network_listen>

000d4be8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4be8:	2300      	movs	r3, #0
   d4bea:	461a      	mov	r2, r3
   d4bec:	4619      	mov	r1, r3
   d4bee:	6840      	ldr	r0, [r0, #4]
   d4bf0:	f7ff bf9e 	b.w	d4b30 <network_off>

000d4bf4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4bf4:	2300      	movs	r3, #0
   d4bf6:	461a      	mov	r2, r3
   d4bf8:	4619      	mov	r1, r3
   d4bfa:	6840      	ldr	r0, [r0, #4]
   d4bfc:	f7ff bf90 	b.w	d4b20 <network_on>

000d4c00 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4c00:	2200      	movs	r2, #0
   d4c02:	4611      	mov	r1, r2
   d4c04:	6840      	ldr	r0, [r0, #4]
   d4c06:	f7ff bf83 	b.w	d4b10 <network_ready>

000d4c0a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4c0a:	2200      	movs	r2, #0
   d4c0c:	4611      	mov	r1, r2
   d4c0e:	6840      	ldr	r0, [r0, #4]
   d4c10:	f7ff bf6e 	b.w	d4af0 <network_connecting>

000d4c14 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4c14:	2200      	movs	r2, #0
   d4c16:	2102      	movs	r1, #2
   d4c18:	6840      	ldr	r0, [r0, #4]
   d4c1a:	f7ff bf71 	b.w	d4b00 <network_disconnect>

000d4c1e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4c1e:	2300      	movs	r3, #0
   d4c20:	461a      	mov	r2, r3
   d4c22:	6840      	ldr	r0, [r0, #4]
   d4c24:	f7ff bf5c 	b.w	d4ae0 <network_connect>

000d4c28 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4c28:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4c2a:	2203      	movs	r2, #3
   d4c2c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4c2e:	4a02      	ldr	r2, [pc, #8]	; (d4c38 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4c30:	601a      	str	r2, [r3, #0]
   d4c32:	4770      	bx	lr
   d4c34:	2003e3f8 	.word	0x2003e3f8
   d4c38:	000d6320 	.word	0x000d6320

000d4c3c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4c3c:	b510      	push	{r4, lr}
   d4c3e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4c40:	6800      	ldr	r0, [r0, #0]
   d4c42:	b118      	cbz	r0, d4c4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4c44:	f7ff ffac 	bl	d4ba0 <free>
            wakeupSource_ = nullptr;
   d4c48:	2300      	movs	r3, #0
   d4c4a:	6023      	str	r3, [r4, #0]
   d4c4c:	bd10      	pop	{r4, pc}

000d4c4e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4c4e:	b510      	push	{r4, lr}
   d4c50:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4c52:	f7ff fff3 	bl	d4c3c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4c56:	4620      	mov	r0, r4
   d4c58:	bd10      	pop	{r4, pc}
	...

000d4c5c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4c5c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4c5e:	4c09      	ldr	r4, [pc, #36]	; (d4c84 <_GLOBAL__sub_I_System+0x28>)
   d4c60:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4c62:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4c66:	6020      	str	r0, [r4, #0]
   d4c68:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4c6a:	71a0      	strb	r0, [r4, #6]
   d4c6c:	8120      	strh	r0, [r4, #8]
   d4c6e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4c70:	f7ff ff12 	bl	d4a98 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4c74:	4620      	mov	r0, r4
   d4c76:	4a04      	ldr	r2, [pc, #16]	; (d4c88 <_GLOBAL__sub_I_System+0x2c>)
   d4c78:	4904      	ldr	r1, [pc, #16]	; (d4c8c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4c7e:	f000 bc81 	b.w	d5584 <__aeabi_atexit>
   d4c82:	bf00      	nop
   d4c84:	2003e400 	.word	0x2003e400
   d4c88:	2003e30c 	.word	0x2003e30c
   d4c8c:	000d4c4f 	.word	0x000d4c4f

000d4c90 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4c90:	b510      	push	{r4, lr}
   d4c92:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4c94:	6800      	ldr	r0, [r0, #0]
   d4c96:	b108      	cbz	r0, d4c9c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4c98:	f7ff fe76 	bl	d4988 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4c9c:	4620      	mov	r0, r4
   d4c9e:	bd10      	pop	{r4, pc}

000d4ca0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4ca0:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4ca2:	4c06      	ldr	r4, [pc, #24]	; (d4cbc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4ca4:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4ca6:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4ca8:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4caa:	f7ff fe65 	bl	d4978 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4cae:	4620      	mov	r0, r4
   d4cb0:	4a03      	ldr	r2, [pc, #12]	; (d4cc0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4cb2:	4904      	ldr	r1, [pc, #16]	; (d4cc4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4cb8:	f000 bc64 	b.w	d5584 <__aeabi_atexit>
   d4cbc:	2003e40c 	.word	0x2003e40c
   d4cc0:	2003e30c 	.word	0x2003e30c
   d4cc4:	000d4c91 	.word	0x000d4c91

000d4cc8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4cca:	4606      	mov	r6, r0
   d4ccc:	460d      	mov	r5, r1
   d4cce:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4cd0:	2400      	movs	r4, #0
  while (size--) {
   d4cd2:	42bd      	cmp	r5, r7
   d4cd4:	d00c      	beq.n	d4cf0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4cd6:	6833      	ldr	r3, [r6, #0]
   d4cd8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4cdc:	689b      	ldr	r3, [r3, #8]
   d4cde:	4630      	mov	r0, r6
   d4ce0:	4798      	blx	r3
     if (chunk>=0)
   d4ce2:	2800      	cmp	r0, #0
   d4ce4:	db01      	blt.n	d4cea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4ce6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4ce8:	e7f3      	b.n	d4cd2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4cea:	2c00      	cmp	r4, #0
   d4cec:	bf08      	it	eq
   d4cee:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4cf0:	4620      	mov	r0, r4
   d4cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4cf4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4cf4:	b570      	push	{r4, r5, r6, lr}
   d4cf6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4cf8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4cfa:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4cfc:	b149      	cbz	r1, d4d12 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4cfe:	f001 fa0b 	bl	d6118 <strlen>
   d4d02:	682b      	ldr	r3, [r5, #0]
   d4d04:	4602      	mov	r2, r0
   d4d06:	4621      	mov	r1, r4
   d4d08:	4628      	mov	r0, r5
   d4d0a:	68db      	ldr	r3, [r3, #12]
    }
   d4d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4d10:	4718      	bx	r3
    }
   d4d12:	bd70      	pop	{r4, r5, r6, pc}

000d4d14 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4d14:	6803      	ldr	r3, [r0, #0]
   d4d16:	689b      	ldr	r3, [r3, #8]
   d4d18:	4718      	bx	r3

000d4d1a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4d1a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4d1c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4d1e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4d20:	f7ff fff8 	bl	d4d14 <_ZN5Print5printEc>
  n += print('\n');
   d4d24:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4d26:	4604      	mov	r4, r0
  n += print('\n');
   d4d28:	4628      	mov	r0, r5
   d4d2a:	f7ff fff3 	bl	d4d14 <_ZN5Print5printEc>
  return n;
}
   d4d2e:	4420      	add	r0, r4
   d4d30:	bd38      	pop	{r3, r4, r5, pc}

000d4d32 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4d32:	b530      	push	{r4, r5, lr}
   d4d34:	b08b      	sub	sp, #44	; 0x2c
   d4d36:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4d38:	2100      	movs	r1, #0
   d4d3a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4d3e:	2a01      	cmp	r2, #1
   d4d40:	bf98      	it	ls
   d4d42:	220a      	movls	r2, #10
   d4d44:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4d48:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4d4c:	fb05 3312 	mls	r3, r5, r2, r3
   d4d50:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4d54:	2b09      	cmp	r3, #9
   d4d56:	bf94      	ite	ls
   d4d58:	3330      	addls	r3, #48	; 0x30
   d4d5a:	3337      	addhi	r3, #55	; 0x37
   d4d5c:	b2db      	uxtb	r3, r3
   d4d5e:	4621      	mov	r1, r4
   d4d60:	f804 3901 	strb.w	r3, [r4], #-1
   d4d64:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4d66:	2d00      	cmp	r5, #0
   d4d68:	d1ee      	bne.n	d4d48 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4d6a:	f7ff ffc3 	bl	d4cf4 <_ZN5Print5writeEPKc>
}
   d4d6e:	b00b      	add	sp, #44	; 0x2c
   d4d70:	bd30      	pop	{r4, r5, pc}

000d4d72 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4d72:	b40c      	push	{r2, r3}
   d4d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4d78:	b087      	sub	sp, #28
   d4d7a:	af00      	add	r7, sp, #0
   d4d7c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d4d80:	4605      	mov	r5, r0
   d4d82:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4d86:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4d88:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d4d8a:	4623      	mov	r3, r4
   d4d8c:	464a      	mov	r2, r9
   d4d8e:	2114      	movs	r1, #20
   d4d90:	1d38      	adds	r0, r7, #4
   d4d92:	f7ff ff0d 	bl	d4bb0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4d96:	2813      	cmp	r0, #19
   d4d98:	d805      	bhi.n	d4da6 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4d9a:	1d39      	adds	r1, r7, #4
   d4d9c:	4628      	mov	r0, r5
   d4d9e:	f7ff ffa9 	bl	d4cf4 <_ZN5Print5writeEPKc>
   d4da2:	4604      	mov	r4, r0
   d4da4:	e013      	b.n	d4dce <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4da6:	f100 0308 	add.w	r3, r0, #8
   d4daa:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d4dae:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4db0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d4db4:	1c41      	adds	r1, r0, #1
   d4db6:	4623      	mov	r3, r4
   d4db8:	464a      	mov	r2, r9
   d4dba:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d4dbc:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d4dbe:	f7ff fef7 	bl	d4bb0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4dc2:	4669      	mov	r1, sp
   d4dc4:	4628      	mov	r0, r5
   d4dc6:	f7ff ff95 	bl	d4cf4 <_ZN5Print5writeEPKc>
   d4dca:	4604      	mov	r4, r0
   d4dcc:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d4dce:	b11e      	cbz	r6, d4dd8 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d4dd0:	4628      	mov	r0, r5
   d4dd2:	f7ff ffa2 	bl	d4d1a <_ZN5Print7printlnEv>
   d4dd6:	4404      	add	r4, r0
    return n;
}
   d4dd8:	4620      	mov	r0, r4
   d4dda:	371c      	adds	r7, #28
   d4ddc:	46bd      	mov	sp, r7
   d4dde:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4de2:	b002      	add	sp, #8
   d4de4:	4770      	bx	lr
	...

000d4de8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4de8:	4b01      	ldr	r3, [pc, #4]	; (d4df0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4dea:	4a02      	ldr	r2, [pc, #8]	; (d4df4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4dec:	601a      	str	r2, [r3, #0]
   d4dee:	4770      	bx	lr
   d4df0:	2003e410 	.word	0x2003e410
   d4df4:	000d63bf 	.word	0x000d63bf

000d4df8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4df8:	4b02      	ldr	r3, [pc, #8]	; (d4e04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4dfa:	681a      	ldr	r2, [r3, #0]
   d4dfc:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4dfe:	601a      	str	r2, [r3, #0]
   d4e00:	4770      	bx	lr
   d4e02:	bf00      	nop
   d4e04:	2003e2a0 	.word	0x2003e2a0
   d4e08:	2003e414 	.word	0x2003e414

000d4e0c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4e0c:	b510      	push	{r4, lr}
   d4e0e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e10:	f7ff fa40 	bl	d4294 <_ZNSt14_Function_baseD1Ev>
   d4e14:	4620      	mov	r0, r4
   d4e16:	bd10      	pop	{r4, pc}

000d4e18 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e18:	4803      	ldr	r0, [pc, #12]	; (d4e28 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4e1a:	4a04      	ldr	r2, [pc, #16]	; (d4e2c <_GLOBAL__sub_I_RGB+0x14>)
   d4e1c:	4904      	ldr	r1, [pc, #16]	; (d4e30 <_GLOBAL__sub_I_RGB+0x18>)
   d4e1e:	2300      	movs	r3, #0
   d4e20:	6083      	str	r3, [r0, #8]
   d4e22:	f000 bbaf 	b.w	d5584 <__aeabi_atexit>
   d4e26:	bf00      	nop
   d4e28:	2003e418 	.word	0x2003e418
   d4e2c:	2003e30c 	.word	0x2003e30c
   d4e30:	000d4e0d 	.word	0x000d4e0d

000d4e34 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4e34:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4e36:	4b0c      	ldr	r3, [pc, #48]	; (d4e68 <serialEventRun+0x34>)
   d4e38:	b133      	cbz	r3, d4e48 <serialEventRun+0x14>
   d4e3a:	f000 f957 	bl	d50ec <_Z16_fetch_usbserialv>
   d4e3e:	6803      	ldr	r3, [r0, #0]
   d4e40:	691b      	ldr	r3, [r3, #16]
   d4e42:	4798      	blx	r3
   d4e44:	2800      	cmp	r0, #0
   d4e46:	dc09      	bgt.n	d4e5c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4e48:	4b08      	ldr	r3, [pc, #32]	; (d4e6c <serialEventRun+0x38>)
   d4e4a:	b163      	cbz	r3, d4e66 <serialEventRun+0x32>
   d4e4c:	f000 f9d4 	bl	d51f8 <_Z22__fetch_global_Serial1v>
   d4e50:	6803      	ldr	r3, [r0, #0]
   d4e52:	691b      	ldr	r3, [r3, #16]
   d4e54:	4798      	blx	r3
   d4e56:	2800      	cmp	r0, #0
   d4e58:	dc03      	bgt.n	d4e62 <serialEventRun+0x2e>
   d4e5a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4e5c:	f3af 8000 	nop.w
   d4e60:	e7f2      	b.n	d4e48 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4e62:	f3af 8000 	nop.w
   d4e66:	bd08      	pop	{r3, pc}
	...

000d4e70 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4e70:	b508      	push	{r3, lr}
	serialEventRun();
   d4e72:	f7ff ffdf 	bl	d4e34 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4e76:	f7ff fd5f 	bl	d4938 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4e7a:	4b01      	ldr	r3, [pc, #4]	; (d4e80 <_post_loop+0x10>)
   d4e7c:	6018      	str	r0, [r3, #0]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	2003e74c 	.word	0x2003e74c

000d4e84 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4e84:	4802      	ldr	r0, [pc, #8]	; (d4e90 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4e86:	4a03      	ldr	r2, [pc, #12]	; (d4e94 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4e88:	4903      	ldr	r1, [pc, #12]	; (d4e98 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4e8a:	1a12      	subs	r2, r2, r0
   d4e8c:	f001 b8f6 	b.w	d607c <memcpy>
   d4e90:	2003f400 	.word	0x2003f400
   d4e94:	2003f404 	.word	0x2003f404
   d4e98:	000d6720 	.word	0x000d6720

000d4e9c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4e9c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4e9e:	2300      	movs	r3, #0
   d4ea0:	9300      	str	r3, [sp, #0]
   d4ea2:	461a      	mov	r2, r3
   d4ea4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4ea8:	f7ff fe10 	bl	d4acc <system_ctrl_set_result>
}
   d4eac:	b003      	add	sp, #12
   d4eae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4eb4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4eb4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4eb6:	8843      	ldrh	r3, [r0, #2]
   d4eb8:	2b0a      	cmp	r3, #10
   d4eba:	d008      	beq.n	d4ece <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4ebc:	2b50      	cmp	r3, #80	; 0x50
   d4ebe:	d109      	bne.n	d4ed4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4ec0:	4b09      	ldr	r3, [pc, #36]	; (d4ee8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4ec2:	681b      	ldr	r3, [r3, #0]
   d4ec4:	b13b      	cbz	r3, d4ed6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4ec6:	b003      	add	sp, #12
   d4ec8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4ecc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4ece:	f7ff ffe5 	bl	d4e9c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4ed2:	e006      	b.n	d4ee2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4ed4:	2300      	movs	r3, #0
   d4ed6:	9300      	str	r3, [sp, #0]
   d4ed8:	461a      	mov	r2, r3
   d4eda:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4ede:	f7ff fdf5 	bl	d4acc <system_ctrl_set_result>
        break;
    }
}
   d4ee2:	b003      	add	sp, #12
   d4ee4:	f85d fb04 	ldr.w	pc, [sp], #4
   d4ee8:	2003e428 	.word	0x2003e428

000d4eec <module_user_init_hook>:

void module_user_init_hook()
{
   d4eec:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4eee:	4c10      	ldr	r4, [pc, #64]	; (d4f30 <module_user_init_hook+0x44>)
   d4ef0:	4d10      	ldr	r5, [pc, #64]	; (d4f34 <module_user_init_hook+0x48>)
   d4ef2:	6823      	ldr	r3, [r4, #0]
   d4ef4:	42ab      	cmp	r3, r5
   d4ef6:	4b10      	ldr	r3, [pc, #64]	; (d4f38 <module_user_init_hook+0x4c>)
   d4ef8:	bf0c      	ite	eq
   d4efa:	2201      	moveq	r2, #1
   d4efc:	2200      	movne	r2, #0
   d4efe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4f00:	d002      	beq.n	d4f08 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4f02:	f7ff ffbf 	bl	d4e84 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4f06:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4f08:	f7ff fd0e 	bl	d4928 <HAL_RNG_GetRandomNumber>
   d4f0c:	4604      	mov	r4, r0
    srand(seed);
   d4f0e:	f001 f8c9 	bl	d60a4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4f12:	4b0a      	ldr	r3, [pc, #40]	; (d4f3c <module_user_init_hook+0x50>)
   d4f14:	b113      	cbz	r3, d4f1c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4f16:	4620      	mov	r0, r4
   d4f18:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4f1c:	2100      	movs	r1, #0
   d4f1e:	4807      	ldr	r0, [pc, #28]	; (d4f3c <module_user_init_hook+0x50>)
   d4f20:	f7ff fe2e 	bl	d4b80 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4f24:	2100      	movs	r1, #0
   d4f26:	4806      	ldr	r0, [pc, #24]	; (d4f40 <module_user_init_hook+0x54>)
}
   d4f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4f2c:	f7ff bdc4 	b.w	d4ab8 <system_ctrl_set_app_request_handler>
   d4f30:	2003f400 	.word	0x2003f400
   d4f34:	9a271c1e 	.word	0x9a271c1e
   d4f38:	2003e42c 	.word	0x2003e42c
   d4f3c:	00000000 	.word	0x00000000
   d4f40:	000d4eb5 	.word	0x000d4eb5

000d4f44 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4f44:	4770      	bx	lr

000d4f46 <_ZN9IPAddressD0Ev>:
   d4f46:	b510      	push	{r4, lr}
   d4f48:	2118      	movs	r1, #24
   d4f4a:	4604      	mov	r4, r0
   d4f4c:	f000 fb1f 	bl	d558e <_ZdlPvj>
   d4f50:	4620      	mov	r0, r4
   d4f52:	bd10      	pop	{r4, pc}

000d4f54 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4f54:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4f56:	7d03      	ldrb	r3, [r0, #20]
   d4f58:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4f5a:	b08d      	sub	sp, #52	; 0x34
   d4f5c:	460e      	mov	r6, r1
   d4f5e:	f100 0704 	add.w	r7, r0, #4
   d4f62:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4f66:	d002      	beq.n	d4f6e <_ZNK9IPAddress7printToER5Print+0x1a>
   d4f68:	f100 0508 	add.w	r5, r0, #8
   d4f6c:	e018      	b.n	d4fa0 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4f6e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4f70:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4f72:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4f76:	232f      	movs	r3, #47	; 0x2f
   d4f78:	462a      	mov	r2, r5
   d4f7a:	200a      	movs	r0, #10
   d4f7c:	f7ff fd0c 	bl	d4998 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4f80:	4628      	mov	r0, r5
   d4f82:	f001 f8c9 	bl	d6118 <strlen>
   d4f86:	6833      	ldr	r3, [r6, #0]
   d4f88:	4602      	mov	r2, r0
   d4f8a:	68db      	ldr	r3, [r3, #12]
   d4f8c:	4629      	mov	r1, r5
   d4f8e:	4630      	mov	r0, r6
   d4f90:	4798      	blx	r3
   d4f92:	e00f      	b.n	d4fb4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4f94:	b124      	cbz	r4, d4fa0 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4f96:	212e      	movs	r1, #46	; 0x2e
   d4f98:	4630      	mov	r0, r6
   d4f9a:	f7ff febb 	bl	d4d14 <_ZN5Print5printEc>
   d4f9e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4fa0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4fa4:	220a      	movs	r2, #10
   d4fa6:	4630      	mov	r0, r6
   d4fa8:	f7ff fec3 	bl	d4d32 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4fac:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4fae:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4fb0:	d1f0      	bne.n	d4f94 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4fb2:	4620      	mov	r0, r4
    }
    return n;
}
   d4fb4:	b00d      	add	sp, #52	; 0x34
   d4fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4fb8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4fb8:	b510      	push	{r4, lr}
   d4fba:	4b05      	ldr	r3, [pc, #20]	; (d4fd0 <_ZN9IPAddressC1Ev+0x18>)
   d4fbc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4fbe:	2211      	movs	r2, #17
   d4fc0:	f840 3b04 	str.w	r3, [r0], #4
   d4fc4:	2100      	movs	r1, #0
   d4fc6:	f001 f864 	bl	d6092 <memset>
{
    clear();
}
   d4fca:	4620      	mov	r0, r4
   d4fcc:	bd10      	pop	{r4, pc}
   d4fce:	bf00      	nop
   d4fd0:	000d6460 	.word	0x000d6460

000d4fd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4fd4:	4603      	mov	r3, r0
   d4fd6:	4a07      	ldr	r2, [pc, #28]	; (d4ff4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4fd8:	b510      	push	{r4, lr}
   d4fda:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4fde:	f101 0210 	add.w	r2, r1, #16
   d4fe2:	f851 4b04 	ldr.w	r4, [r1], #4
   d4fe6:	f843 4b04 	str.w	r4, [r3], #4
   d4fea:	4291      	cmp	r1, r2
   d4fec:	d1f9      	bne.n	d4fe2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4fee:	780a      	ldrb	r2, [r1, #0]
   d4ff0:	701a      	strb	r2, [r3, #0]
}
   d4ff2:	bd10      	pop	{r4, pc}
   d4ff4:	000d6460 	.word	0x000d6460

000d4ff8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4ff8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4ffa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4ffe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5002:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5006:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d500a:	2304      	movs	r3, #4
   d500c:	6041      	str	r1, [r0, #4]
   d500e:	7503      	strb	r3, [r0, #20]
   d5010:	bd10      	pop	{r4, pc}

000d5012 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5012:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5014:	780d      	ldrb	r5, [r1, #0]
   d5016:	788b      	ldrb	r3, [r1, #2]
   d5018:	784a      	ldrb	r2, [r1, #1]
   d501a:	78c9      	ldrb	r1, [r1, #3]
   d501c:	9100      	str	r1, [sp, #0]
   d501e:	4629      	mov	r1, r5
   d5020:	f7ff ffea 	bl	d4ff8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5024:	b003      	add	sp, #12
   d5026:	bd30      	pop	{r4, r5, pc}

000d5028 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5028:	7441      	strb	r1, [r0, #17]
   d502a:	4770      	bx	lr

000d502c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d502c:	4770      	bx	lr

000d502e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d502e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5030:	2100      	movs	r1, #0
   d5032:	7c00      	ldrb	r0, [r0, #16]
   d5034:	f7ff fd18 	bl	d4a68 <HAL_USB_USART_Receive_Data>
}
   d5038:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d503c:	bf28      	it	cs
   d503e:	f04f 30ff 	movcs.w	r0, #4294967295
   d5042:	bd08      	pop	{r3, pc}

000d5044 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5044:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5046:	2101      	movs	r1, #1
   d5048:	7c00      	ldrb	r0, [r0, #16]
   d504a:	f7ff fd0d 	bl	d4a68 <HAL_USB_USART_Receive_Data>
}
   d504e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5052:	bf28      	it	cs
   d5054:	f04f 30ff 	movcs.w	r0, #4294967295
   d5058:	bd08      	pop	{r3, pc}

000d505a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d505a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d505c:	7c00      	ldrb	r0, [r0, #16]
   d505e:	f7ff fcfb 	bl	d4a58 <HAL_USB_USART_Available_Data_For_Write>
}
   d5062:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5066:	bd08      	pop	{r3, pc}

000d5068 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5068:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d506a:	7c00      	ldrb	r0, [r0, #16]
   d506c:	f7ff fcec 	bl	d4a48 <HAL_USB_USART_Available_Data>
}
   d5070:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5074:	bd08      	pop	{r3, pc}

000d5076 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5076:	7c00      	ldrb	r0, [r0, #16]
   d5078:	f7ff bd06 	b.w	d4a88 <HAL_USB_USART_Flush_Data>

000d507c <_ZN9USBSerialD0Ev>:
   d507c:	b510      	push	{r4, lr}
   d507e:	2114      	movs	r1, #20
   d5080:	4604      	mov	r4, r0
   d5082:	f000 fa84 	bl	d558e <_ZdlPvj>
   d5086:	4620      	mov	r0, r4
   d5088:	bd10      	pop	{r4, pc}

000d508a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d508a:	b538      	push	{r3, r4, r5, lr}
   d508c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d508e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5090:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5092:	f7ff fce1 	bl	d4a58 <HAL_USB_USART_Available_Data_For_Write>
   d5096:	2800      	cmp	r0, #0
   d5098:	dc01      	bgt.n	d509e <_ZN9USBSerial5writeEh+0x14>
   d509a:	7c60      	ldrb	r0, [r4, #17]
   d509c:	b128      	cbz	r0, d50aa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d509e:	4629      	mov	r1, r5
   d50a0:	7c20      	ldrb	r0, [r4, #16]
   d50a2:	f7ff fce9 	bl	d4a78 <HAL_USB_USART_Send_Data>
   d50a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d50aa:	bd38      	pop	{r3, r4, r5, pc}

000d50ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d50ac:	b510      	push	{r4, lr}
   d50ae:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d50b0:	2300      	movs	r3, #0
   d50b2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d50b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d50b8:	60a3      	str	r3, [r4, #8]
   d50ba:	4b05      	ldr	r3, [pc, #20]	; (d50d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d50bc:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d50be:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d50c0:	4608      	mov	r0, r1
{
  _serial = serial;
   d50c2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d50c4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d50c6:	4611      	mov	r1, r2
   d50c8:	f7ff fcae 	bl	d4a28 <HAL_USB_USART_Init>
}
   d50cc:	4620      	mov	r0, r4
   d50ce:	bd10      	pop	{r4, pc}
   d50d0:	000d6474 	.word	0x000d6474

000d50d4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d50d4:	2200      	movs	r2, #0
   d50d6:	7c00      	ldrb	r0, [r0, #16]
   d50d8:	f7ff bcae 	b.w	d4a38 <HAL_USB_USART_Begin>

000d50dc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d50dc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d50de:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d50e0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d50e2:	2100      	movs	r1, #0
   d50e4:	f000 ffd5 	bl	d6092 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d50e8:	4620      	mov	r0, r4
   d50ea:	bd10      	pop	{r4, pc}

000d50ec <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d50ec:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d50ee:	4d0e      	ldr	r5, [pc, #56]	; (d5128 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d50f0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d50f2:	a801      	add	r0, sp, #4
   d50f4:	f7ff fff2 	bl	d50dc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d50f8:	6829      	ldr	r1, [r5, #0]
   d50fa:	f011 0401 	ands.w	r4, r1, #1
   d50fe:	d110      	bne.n	d5122 <_Z16_fetch_usbserialv+0x36>
   d5100:	4628      	mov	r0, r5
   d5102:	f7fe ffce 	bl	d40a2 <__cxa_guard_acquire>
   d5106:	b160      	cbz	r0, d5122 <_Z16_fetch_usbserialv+0x36>
   d5108:	aa01      	add	r2, sp, #4
   d510a:	4621      	mov	r1, r4
   d510c:	4807      	ldr	r0, [pc, #28]	; (d512c <_Z16_fetch_usbserialv+0x40>)
   d510e:	f7ff ffcd 	bl	d50ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5112:	4628      	mov	r0, r5
   d5114:	f7fe ffca 	bl	d40ac <__cxa_guard_release>
   d5118:	4a05      	ldr	r2, [pc, #20]	; (d5130 <_Z16_fetch_usbserialv+0x44>)
   d511a:	4906      	ldr	r1, [pc, #24]	; (d5134 <_Z16_fetch_usbserialv+0x48>)
   d511c:	4803      	ldr	r0, [pc, #12]	; (d512c <_Z16_fetch_usbserialv+0x40>)
   d511e:	f000 fa31 	bl	d5584 <__aeabi_atexit>
	return _usbserial;
}
   d5122:	4802      	ldr	r0, [pc, #8]	; (d512c <_Z16_fetch_usbserialv+0x40>)
   d5124:	b007      	add	sp, #28
   d5126:	bd30      	pop	{r4, r5, pc}
   d5128:	2003e430 	.word	0x2003e430
   d512c:	2003e434 	.word	0x2003e434
   d5130:	2003e30c 	.word	0x2003e30c
   d5134:	000d502d 	.word	0x000d502d

000d5138 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5138:	4770      	bx	lr

000d513a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d513a:	7441      	strb	r1, [r0, #17]
   d513c:	4770      	bx	lr

000d513e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d513e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5140:	7c00      	ldrb	r0, [r0, #16]
   d5142:	f7ff fc61 	bl	d4a08 <HAL_USART_Available_Data_For_Write>
}
   d5146:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d514a:	bd08      	pop	{r3, pc}

000d514c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d514c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d514e:	7c00      	ldrb	r0, [r0, #16]
   d5150:	f7ff fc3a 	bl	d49c8 <HAL_USART_Available_Data>
}
   d5154:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5158:	bd08      	pop	{r3, pc}

000d515a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d515a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d515c:	7c00      	ldrb	r0, [r0, #16]
   d515e:	f7ff fc43 	bl	d49e8 <HAL_USART_Peek_Data>
}
   d5162:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5166:	bf28      	it	cs
   d5168:	f04f 30ff 	movcs.w	r0, #4294967295
   d516c:	bd08      	pop	{r3, pc}

000d516e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d516e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5170:	7c00      	ldrb	r0, [r0, #16]
   d5172:	f7ff fc31 	bl	d49d8 <HAL_USART_Read_Data>
}
   d5176:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d517a:	bf28      	it	cs
   d517c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5180:	bd08      	pop	{r3, pc}

000d5182 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5182:	7c00      	ldrb	r0, [r0, #16]
   d5184:	f7ff bc38 	b.w	d49f8 <HAL_USART_Flush_Data>

000d5188 <_ZN11USARTSerialD0Ev>:
   d5188:	b510      	push	{r4, lr}
   d518a:	2114      	movs	r1, #20
   d518c:	4604      	mov	r4, r0
   d518e:	f000 f9fe 	bl	d558e <_ZdlPvj>
   d5192:	4620      	mov	r0, r4
   d5194:	bd10      	pop	{r4, pc}

000d5196 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5196:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5198:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d519a:	4604      	mov	r4, r0
   d519c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d519e:	b925      	cbnz	r5, d51aa <_ZN11USARTSerial5writeEh+0x14>
   d51a0:	7c00      	ldrb	r0, [r0, #16]
   d51a2:	f7ff fc31 	bl	d4a08 <HAL_USART_Available_Data_For_Write>
   d51a6:	2800      	cmp	r0, #0
   d51a8:	dd05      	ble.n	d51b6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d51aa:	4631      	mov	r1, r6
   d51ac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d51ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d51b2:	f7ff bc01 	b.w	d49b8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d51b6:	4628      	mov	r0, r5
   d51b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d51bc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d51bc:	b510      	push	{r4, lr}
   d51be:	4604      	mov	r4, r0
   d51c0:	4608      	mov	r0, r1
   d51c2:	4611      	mov	r1, r2
   d51c4:	2200      	movs	r2, #0
   d51c6:	6062      	str	r2, [r4, #4]
   d51c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d51cc:	60a2      	str	r2, [r4, #8]
   d51ce:	4a05      	ldr	r2, [pc, #20]	; (d51e4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d51d0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d51d2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d51d4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d51d6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d51d8:	461a      	mov	r2, r3
   d51da:	f7ff fbe5 	bl	d49a8 <HAL_USART_Init>
}
   d51de:	4620      	mov	r0, r4
   d51e0:	bd10      	pop	{r4, pc}
   d51e2:	bf00      	nop
   d51e4:	000d64a4 	.word	0x000d64a4

000d51e8 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d51e8:	2300      	movs	r3, #0
   d51ea:	7c00      	ldrb	r0, [r0, #16]
   d51ec:	f7ff bc14 	b.w	d4a18 <HAL_USART_BeginConfig>

000d51f0 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d51f0:	2200      	movs	r2, #0
   d51f2:	f7ff bff9 	b.w	d51e8 <_ZN11USARTSerial5beginEmm>
	...

000d51f8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d51f8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d51fa:	4d0c      	ldr	r5, [pc, #48]	; (d522c <_Z22__fetch_global_Serial1v+0x34>)
   d51fc:	6829      	ldr	r1, [r5, #0]
   d51fe:	f011 0401 	ands.w	r4, r1, #1
   d5202:	d111      	bne.n	d5228 <_Z22__fetch_global_Serial1v+0x30>
   d5204:	4628      	mov	r0, r5
   d5206:	f7fe ff4c 	bl	d40a2 <__cxa_guard_acquire>
   d520a:	b168      	cbz	r0, d5228 <_Z22__fetch_global_Serial1v+0x30>
   d520c:	4a08      	ldr	r2, [pc, #32]	; (d5230 <_Z22__fetch_global_Serial1v+0x38>)
   d520e:	4b09      	ldr	r3, [pc, #36]	; (d5234 <_Z22__fetch_global_Serial1v+0x3c>)
   d5210:	4809      	ldr	r0, [pc, #36]	; (d5238 <_Z22__fetch_global_Serial1v+0x40>)
   d5212:	4621      	mov	r1, r4
   d5214:	f7ff ffd2 	bl	d51bc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5218:	4628      	mov	r0, r5
   d521a:	f7fe ff47 	bl	d40ac <__cxa_guard_release>
   d521e:	4a07      	ldr	r2, [pc, #28]	; (d523c <_Z22__fetch_global_Serial1v+0x44>)
   d5220:	4907      	ldr	r1, [pc, #28]	; (d5240 <_Z22__fetch_global_Serial1v+0x48>)
   d5222:	4805      	ldr	r0, [pc, #20]	; (d5238 <_Z22__fetch_global_Serial1v+0x40>)
   d5224:	f000 f9ae 	bl	d5584 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5228:	4803      	ldr	r0, [pc, #12]	; (d5238 <_Z22__fetch_global_Serial1v+0x40>)
   d522a:	bd38      	pop	{r3, r4, r5, pc}
   d522c:	2003e4e0 	.word	0x2003e4e0
   d5230:	2003e4e4 	.word	0x2003e4e4
   d5234:	2003e45c 	.word	0x2003e45c
   d5238:	2003e448 	.word	0x2003e448
   d523c:	2003e30c 	.word	0x2003e30c
   d5240:	000d5139 	.word	0x000d5139

000d5244 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5244:	2200      	movs	r2, #0
   d5246:	4611      	mov	r1, r2
   d5248:	6840      	ldr	r0, [r0, #4]
   d524a:	f7ff bc81 	b.w	d4b50 <network_listening>

000d524e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d524e:	2200      	movs	r2, #0
   d5250:	4611      	mov	r1, r2
   d5252:	6840      	ldr	r0, [r0, #4]
   d5254:	f7ff bc8c 	b.w	d4b70 <network_get_listen_timeout>

000d5258 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5258:	2200      	movs	r2, #0
   d525a:	6840      	ldr	r0, [r0, #4]
   d525c:	f7ff bc80 	b.w	d4b60 <network_set_listen_timeout>

000d5260 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5260:	2200      	movs	r2, #0
   d5262:	f081 0101 	eor.w	r1, r1, #1
   d5266:	6840      	ldr	r0, [r0, #4]
   d5268:	f7ff bc6a 	b.w	d4b40 <network_listen>

000d526c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d526c:	2300      	movs	r3, #0
   d526e:	461a      	mov	r2, r3
   d5270:	2101      	movs	r1, #1
   d5272:	6840      	ldr	r0, [r0, #4]
   d5274:	f7ff bc5c 	b.w	d4b30 <network_off>

000d5278 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5278:	2300      	movs	r3, #0
   d527a:	461a      	mov	r2, r3
   d527c:	4619      	mov	r1, r3
   d527e:	6840      	ldr	r0, [r0, #4]
   d5280:	f7ff bc4e 	b.w	d4b20 <network_on>

000d5284 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5284:	2200      	movs	r2, #0
   d5286:	4611      	mov	r1, r2
   d5288:	6840      	ldr	r0, [r0, #4]
   d528a:	f7ff bc41 	b.w	d4b10 <network_ready>

000d528e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d528e:	2200      	movs	r2, #0
   d5290:	4611      	mov	r1, r2
   d5292:	6840      	ldr	r0, [r0, #4]
   d5294:	f7ff bc2c 	b.w	d4af0 <network_connecting>

000d5298 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5298:	2200      	movs	r2, #0
   d529a:	2102      	movs	r1, #2
   d529c:	6840      	ldr	r0, [r0, #4]
   d529e:	f7ff bc2f 	b.w	d4b00 <network_disconnect>

000d52a2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d52a2:	2300      	movs	r3, #0
   d52a4:	461a      	mov	r2, r3
   d52a6:	6840      	ldr	r0, [r0, #4]
   d52a8:	f7ff bc1a 	b.w	d4ae0 <network_connect>

000d52ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d52ac:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d52ae:	4605      	mov	r5, r0
   d52b0:	b188      	cbz	r0, d52d6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d52b2:	6804      	ldr	r4, [r0, #0]
   d52b4:	b14c      	cbz	r4, d52ca <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d52b6:	68a3      	ldr	r3, [r4, #8]
   d52b8:	b11b      	cbz	r3, d52c2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d52ba:	2203      	movs	r2, #3
   d52bc:	4621      	mov	r1, r4
   d52be:	4620      	mov	r0, r4
   d52c0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d52c2:	2110      	movs	r1, #16
   d52c4:	4620      	mov	r0, r4
   d52c6:	f000 f962 	bl	d558e <_ZdlPvj>
   d52ca:	4628      	mov	r0, r5
   d52cc:	2114      	movs	r1, #20
      }
   d52ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d52d2:	f000 b95c 	b.w	d558e <_ZdlPvj>
   d52d6:	bd38      	pop	{r3, r4, r5, pc}

000d52d8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d52d8:	b110      	cbz	r0, d52e0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d52da:	6803      	ldr	r3, [r0, #0]
   d52dc:	685b      	ldr	r3, [r3, #4]
   d52de:	4718      	bx	r3
   d52e0:	4770      	bx	lr

000d52e2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d52e2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d52e4:	6803      	ldr	r3, [r0, #0]
   d52e6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d52e8:	b1bb      	cbz	r3, d531a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d52ea:	6858      	ldr	r0, [r3, #4]
   d52ec:	f7ff fb2c 	bl	d4948 <os_thread_is_current>
   d52f0:	b978      	cbnz	r0, d5312 <_ZN6ThreadD1Ev+0x30>
   d52f2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d52f4:	7c5a      	ldrb	r2, [r3, #17]
   d52f6:	b912      	cbnz	r2, d52fe <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d52f8:	6858      	ldr	r0, [r3, #4]
   d52fa:	f7ff fb2d 	bl	d4958 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d52fe:	6823      	ldr	r3, [r4, #0]
   d5300:	6858      	ldr	r0, [r3, #4]
   d5302:	f7ff fb31 	bl	d4968 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5306:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5308:	2300      	movs	r3, #0
   d530a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d530c:	b128      	cbz	r0, d531a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d530e:	f7ff ffcd 	bl	d52ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5312:	6820      	ldr	r0, [r4, #0]
   d5314:	b108      	cbz	r0, d531a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5316:	f7ff ffc9 	bl	d52ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d531a:	4620      	mov	r0, r4
   d531c:	bd10      	pop	{r4, pc}

000d531e <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d531e:	b538      	push	{r3, r4, r5, lr}
   d5320:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5322:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5326:	b108      	cbz	r0, d532c <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5328:	f7fe feb9 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d532c:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5330:	b108      	cbz	r0, d5336 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5332:	f7ff fb29 	bl	d4988 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5336:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d533a:	b135      	cbz	r5, d534a <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d533c:	4628      	mov	r0, r5
   d533e:	f7ff ffd0 	bl	d52e2 <_ZN6ThreadD1Ev>
   d5342:	2104      	movs	r1, #4
   d5344:	4628      	mov	r0, r5
   d5346:	f000 f922 	bl	d558e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d534a:	6820      	ldr	r0, [r4, #0]
   d534c:	b108      	cbz	r0, d5352 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d534e:	f7ff ffc3 	bl	d52d8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5352:	4620      	mov	r0, r4
   d5354:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5358 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5358:	b510      	push	{r4, lr}
   d535a:	4b04      	ldr	r3, [pc, #16]	; (d536c <_ZN5spark9MeshClassD1Ev+0x14>)
   d535c:	4604      	mov	r4, r0
   d535e:	f840 3b08 	str.w	r3, [r0], #8
   d5362:	f7ff ffdc 	bl	d531e <_ZN5spark11MeshPublishD1Ev>
   d5366:	4620      	mov	r0, r4
   d5368:	bd10      	pop	{r4, pc}
   d536a:	bf00      	nop
   d536c:	000d64d4 	.word	0x000d64d4

000d5370 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5370:	b538      	push	{r3, r4, r5, lr}
   d5372:	4c0e      	ldr	r4, [pc, #56]	; (d53ac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5374:	4b0e      	ldr	r3, [pc, #56]	; (d53b0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5376:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5378:	2500      	movs	r5, #0
   d537a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d537c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5380:	6063      	str	r3, [r4, #4]
   d5382:	60a5      	str	r5, [r4, #8]
   d5384:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5388:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d538c:	f7ff faf4 	bl	d4978 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5390:	4b08      	ldr	r3, [pc, #32]	; (d53b4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5392:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5396:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d539a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d539c:	4620      	mov	r0, r4
   d539e:	4a06      	ldr	r2, [pc, #24]	; (d53b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d53a0:	4906      	ldr	r1, [pc, #24]	; (d53bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d53a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d53a6:	f000 b8ed 	b.w	d5584 <__aeabi_atexit>
   d53aa:	bf00      	nop
   d53ac:	2003e568 	.word	0x2003e568
   d53b0:	000d653c 	.word	0x000d653c
   d53b4:	000d64d4 	.word	0x000d64d4
   d53b8:	2003e30c 	.word	0x2003e30c
   d53bc:	000d5359 	.word	0x000d5359

000d53c0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d53c0:	2200      	movs	r2, #0
   d53c2:	4611      	mov	r1, r2
   d53c4:	6840      	ldr	r0, [r0, #4]
   d53c6:	f7ff bba3 	b.w	d4b10 <network_ready>

000d53ca <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d53ca:	2200      	movs	r2, #0
   d53cc:	4611      	mov	r1, r2
   d53ce:	6840      	ldr	r0, [r0, #4]
   d53d0:	f7ff bbbe 	b.w	d4b50 <network_listening>

000d53d4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d53d4:	2200      	movs	r2, #0
   d53d6:	4611      	mov	r1, r2
   d53d8:	6840      	ldr	r0, [r0, #4]
   d53da:	f7ff bbc9 	b.w	d4b70 <network_get_listen_timeout>

000d53de <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d53de:	2200      	movs	r2, #0
   d53e0:	6840      	ldr	r0, [r0, #4]
   d53e2:	f7ff bbbd 	b.w	d4b60 <network_set_listen_timeout>

000d53e6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d53e6:	2200      	movs	r2, #0
   d53e8:	f081 0101 	eor.w	r1, r1, #1
   d53ec:	6840      	ldr	r0, [r0, #4]
   d53ee:	f7ff bba7 	b.w	d4b40 <network_listen>

000d53f2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d53f2:	2300      	movs	r3, #0
   d53f4:	461a      	mov	r2, r3
   d53f6:	4619      	mov	r1, r3
   d53f8:	6840      	ldr	r0, [r0, #4]
   d53fa:	f7ff bb99 	b.w	d4b30 <network_off>

000d53fe <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d53fe:	2300      	movs	r3, #0
   d5400:	461a      	mov	r2, r3
   d5402:	4619      	mov	r1, r3
   d5404:	6840      	ldr	r0, [r0, #4]
   d5406:	f7ff bb8b 	b.w	d4b20 <network_on>

000d540a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d540a:	2200      	movs	r2, #0
   d540c:	4611      	mov	r1, r2
   d540e:	6840      	ldr	r0, [r0, #4]
   d5410:	f7ff bb6e 	b.w	d4af0 <network_connecting>

000d5414 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5414:	2200      	movs	r2, #0
   d5416:	2102      	movs	r1, #2
   d5418:	6840      	ldr	r0, [r0, #4]
   d541a:	f7ff bb71 	b.w	d4b00 <network_disconnect>

000d541e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d541e:	2300      	movs	r3, #0
   d5420:	461a      	mov	r2, r3
   d5422:	6840      	ldr	r0, [r0, #4]
   d5424:	f7ff bb5c 	b.w	d4ae0 <network_connect>

000d5428 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5428:	4b02      	ldr	r3, [pc, #8]	; (d5434 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d542a:	2204      	movs	r2, #4
   d542c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d542e:	4a02      	ldr	r2, [pc, #8]	; (d5438 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5430:	601a      	str	r2, [r3, #0]
   d5432:	4770      	bx	lr
   d5434:	2003e73c 	.word	0x2003e73c
   d5438:	000d6508 	.word	0x000d6508

000d543c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d543c:	2300      	movs	r3, #0
   d543e:	461a      	mov	r2, r3
   d5440:	6840      	ldr	r0, [r0, #4]
   d5442:	f7ff bb4d 	b.w	d4ae0 <network_connect>

000d5446 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5446:	2200      	movs	r2, #0
   d5448:	2102      	movs	r1, #2
   d544a:	6840      	ldr	r0, [r0, #4]
   d544c:	f7ff bb58 	b.w	d4b00 <network_disconnect>

000d5450 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5450:	2200      	movs	r2, #0
   d5452:	4611      	mov	r1, r2
   d5454:	6840      	ldr	r0, [r0, #4]
   d5456:	f7ff bb4b 	b.w	d4af0 <network_connecting>

000d545a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d545a:	2200      	movs	r2, #0
   d545c:	4611      	mov	r1, r2
   d545e:	6840      	ldr	r0, [r0, #4]
   d5460:	f7ff bb56 	b.w	d4b10 <network_ready>

000d5464 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5464:	2300      	movs	r3, #0
   d5466:	461a      	mov	r2, r3
   d5468:	4619      	mov	r1, r3
   d546a:	6840      	ldr	r0, [r0, #4]
   d546c:	f7ff bb58 	b.w	d4b20 <network_on>

000d5470 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5470:	2300      	movs	r3, #0
   d5472:	461a      	mov	r2, r3
   d5474:	4619      	mov	r1, r3
   d5476:	6840      	ldr	r0, [r0, #4]
   d5478:	f7ff bb5a 	b.w	d4b30 <network_off>

000d547c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d547c:	2200      	movs	r2, #0
   d547e:	f081 0101 	eor.w	r1, r1, #1
   d5482:	6840      	ldr	r0, [r0, #4]
   d5484:	f7ff bb5c 	b.w	d4b40 <network_listen>

000d5488 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5488:	2200      	movs	r2, #0
   d548a:	6840      	ldr	r0, [r0, #4]
   d548c:	f7ff bb68 	b.w	d4b60 <network_set_listen_timeout>

000d5490 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5490:	2200      	movs	r2, #0
   d5492:	4611      	mov	r1, r2
   d5494:	6840      	ldr	r0, [r0, #4]
   d5496:	f7ff bb6b 	b.w	d4b70 <network_get_listen_timeout>

000d549a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d549a:	2200      	movs	r2, #0
   d549c:	4611      	mov	r1, r2
   d549e:	6840      	ldr	r0, [r0, #4]
   d54a0:	f7ff bb56 	b.w	d4b50 <network_listening>

000d54a4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d54a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d54a8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d54aa:	b095      	sub	sp, #84	; 0x54
   d54ac:	4616      	mov	r6, r2
   d54ae:	460d      	mov	r5, r1
   d54b0:	4607      	mov	r7, r0
    IPAddress addr;
   d54b2:	f7ff fd81 	bl	d4fb8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d54b6:	4621      	mov	r1, r4
   d54b8:	2220      	movs	r2, #32
   d54ba:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d54bc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d54be:	f000 fde8 	bl	d6092 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d54c2:	2340      	movs	r3, #64	; 0x40
   d54c4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d54c6:	4621      	mov	r1, r4
   d54c8:	466b      	mov	r3, sp
   d54ca:	aa0c      	add	r2, sp, #48	; 0x30
   d54cc:	4630      	mov	r0, r6
   d54ce:	f7ff fa1b 	bl	d4908 <netdb_getaddrinfo>
    if (!r) {
   d54d2:	4604      	mov	r4, r0
   d54d4:	2800      	cmp	r0, #0
   d54d6:	d144      	bne.n	d5562 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d54d8:	4602      	mov	r2, r0
   d54da:	2101      	movs	r1, #1
   d54dc:	6868      	ldr	r0, [r5, #4]
   d54de:	f7ff fb17 	bl	d4b10 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d54e2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d54e4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d54e6:	4622      	mov	r2, r4
   d54e8:	6868      	ldr	r0, [r5, #4]
   d54ea:	f7ff fb11 	bl	d4b10 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d54ee:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d54f0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d54f2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d54f4:	2e00      	cmp	r6, #0
   d54f6:	d034      	beq.n	d5562 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d54f8:	2900      	cmp	r1, #0
   d54fa:	d132      	bne.n	d5562 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d54fc:	6873      	ldr	r3, [r6, #4]
   d54fe:	2b02      	cmp	r3, #2
   d5500:	d002      	beq.n	d5508 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5502:	2b0a      	cmp	r3, #10
   d5504:	d009      	beq.n	d551a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5506:	e02a      	b.n	d555e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5508:	f1b8 0f00 	cmp.w	r8, #0
   d550c:	d027      	beq.n	d555e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d550e:	6971      	ldr	r1, [r6, #20]
   d5510:	4638      	mov	r0, r7
   d5512:	3104      	adds	r1, #4
   d5514:	f7ff fd7d 	bl	d5012 <_ZN9IPAddressaSEPKh>
   d5518:	e020      	b.n	d555c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d551a:	f1b9 0f00 	cmp.w	r9, #0
   d551e:	d01e      	beq.n	d555e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5520:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5522:	2211      	movs	r2, #17
   d5524:	a801      	add	r0, sp, #4
   d5526:	f000 fdb4 	bl	d6092 <memset>
                    a.v = 6;
   d552a:	2306      	movs	r3, #6
   d552c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5530:	ad01      	add	r5, sp, #4
   d5532:	f104 0308 	add.w	r3, r4, #8
   d5536:	3418      	adds	r4, #24
   d5538:	6818      	ldr	r0, [r3, #0]
   d553a:	6859      	ldr	r1, [r3, #4]
   d553c:	462a      	mov	r2, r5
   d553e:	c203      	stmia	r2!, {r0, r1}
   d5540:	3308      	adds	r3, #8
   d5542:	42a3      	cmp	r3, r4
   d5544:	4615      	mov	r5, r2
   d5546:	d1f7      	bne.n	d5538 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5548:	a901      	add	r1, sp, #4
   d554a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d554c:	ad07      	add	r5, sp, #28
   d554e:	f7ff fd41 	bl	d4fd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5554:	1d3c      	adds	r4, r7, #4
   d5556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5558:	682b      	ldr	r3, [r5, #0]
   d555a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d555c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d555e:	69f6      	ldr	r6, [r6, #28]
   d5560:	e7c8      	b.n	d54f4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5562:	9800      	ldr	r0, [sp, #0]
   d5564:	f7ff f9c8 	bl	d48f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5568:	4638      	mov	r0, r7
   d556a:	b015      	add	sp, #84	; 0x54
   d556c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5570 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5570:	4b02      	ldr	r3, [pc, #8]	; (d557c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5572:	4a03      	ldr	r2, [pc, #12]	; (d5580 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5574:	601a      	str	r2, [r3, #0]
   d5576:	2200      	movs	r2, #0
   d5578:	605a      	str	r2, [r3, #4]
   d557a:	4770      	bx	lr
   d557c:	2003e744 	.word	0x2003e744
   d5580:	000d653c 	.word	0x000d653c

000d5584 <__aeabi_atexit>:
   d5584:	460b      	mov	r3, r1
   d5586:	4601      	mov	r1, r0
   d5588:	4618      	mov	r0, r3
   d558a:	f000 bd69 	b.w	d6060 <__cxa_atexit>

000d558e <_ZdlPvj>:
   d558e:	f7fe bd84 	b.w	d409a <_ZdlPv>
	...

000d5594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5594:	4b18      	ldr	r3, [pc, #96]	; (d55f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5596:	681a      	ldr	r2, [r3, #0]
   d5598:	07d1      	lsls	r1, r2, #31
   d559a:	bf5c      	itt	pl
   d559c:	2201      	movpl	r2, #1
   d559e:	601a      	strpl	r2, [r3, #0]
   d55a0:	4b16      	ldr	r3, [pc, #88]	; (d55fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d55a2:	681a      	ldr	r2, [r3, #0]
   d55a4:	07d2      	lsls	r2, r2, #31
   d55a6:	bf5c      	itt	pl
   d55a8:	2201      	movpl	r2, #1
   d55aa:	601a      	strpl	r2, [r3, #0]
   d55ac:	4b14      	ldr	r3, [pc, #80]	; (d5600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d55ae:	681a      	ldr	r2, [r3, #0]
   d55b0:	07d0      	lsls	r0, r2, #31
   d55b2:	bf5c      	itt	pl
   d55b4:	2201      	movpl	r2, #1
   d55b6:	601a      	strpl	r2, [r3, #0]
   d55b8:	4b12      	ldr	r3, [pc, #72]	; (d5604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d55ba:	681a      	ldr	r2, [r3, #0]
   d55bc:	07d1      	lsls	r1, r2, #31
   d55be:	bf5c      	itt	pl
   d55c0:	2201      	movpl	r2, #1
   d55c2:	601a      	strpl	r2, [r3, #0]
   d55c4:	4b10      	ldr	r3, [pc, #64]	; (d5608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d55c6:	681a      	ldr	r2, [r3, #0]
   d55c8:	07d2      	lsls	r2, r2, #31
   d55ca:	bf5c      	itt	pl
   d55cc:	2201      	movpl	r2, #1
   d55ce:	601a      	strpl	r2, [r3, #0]
   d55d0:	4b0e      	ldr	r3, [pc, #56]	; (d560c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d55d2:	681a      	ldr	r2, [r3, #0]
   d55d4:	07d0      	lsls	r0, r2, #31
   d55d6:	bf5c      	itt	pl
   d55d8:	2201      	movpl	r2, #1
   d55da:	601a      	strpl	r2, [r3, #0]
   d55dc:	4b0c      	ldr	r3, [pc, #48]	; (d5610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d55de:	681a      	ldr	r2, [r3, #0]
   d55e0:	07d1      	lsls	r1, r2, #31
   d55e2:	bf5c      	itt	pl
   d55e4:	2201      	movpl	r2, #1
   d55e6:	601a      	strpl	r2, [r3, #0]
   d55e8:	4b0a      	ldr	r3, [pc, #40]	; (d5614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d55ea:	681a      	ldr	r2, [r3, #0]
   d55ec:	07d2      	lsls	r2, r2, #31
   d55ee:	bf5c      	itt	pl
   d55f0:	2201      	movpl	r2, #1
   d55f2:	601a      	strpl	r2, [r3, #0]
   d55f4:	4770      	bx	lr
   d55f6:	bf00      	nop
   d55f8:	2003e76c 	.word	0x2003e76c
   d55fc:	2003e768 	.word	0x2003e768
   d5600:	2003e764 	.word	0x2003e764
   d5604:	2003e760 	.word	0x2003e760
   d5608:	2003e75c 	.word	0x2003e75c
   d560c:	2003e758 	.word	0x2003e758
   d5610:	2003e754 	.word	0x2003e754
   d5614:	2003e750 	.word	0x2003e750

000d5618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5618:	4b24      	ldr	r3, [pc, #144]	; (d56ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d561a:	681a      	ldr	r2, [r3, #0]
   d561c:	07d0      	lsls	r0, r2, #31
   d561e:	bf5c      	itt	pl
   d5620:	2201      	movpl	r2, #1
   d5622:	601a      	strpl	r2, [r3, #0]
   d5624:	4b22      	ldr	r3, [pc, #136]	; (d56b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5626:	681a      	ldr	r2, [r3, #0]
   d5628:	07d1      	lsls	r1, r2, #31
   d562a:	bf5c      	itt	pl
   d562c:	2201      	movpl	r2, #1
   d562e:	601a      	strpl	r2, [r3, #0]
   d5630:	4b20      	ldr	r3, [pc, #128]	; (d56b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5632:	681a      	ldr	r2, [r3, #0]
   d5634:	07d2      	lsls	r2, r2, #31
   d5636:	bf5c      	itt	pl
   d5638:	2201      	movpl	r2, #1
   d563a:	601a      	strpl	r2, [r3, #0]
   d563c:	4b1e      	ldr	r3, [pc, #120]	; (d56b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d563e:	681a      	ldr	r2, [r3, #0]
   d5640:	07d0      	lsls	r0, r2, #31
   d5642:	bf5c      	itt	pl
   d5644:	2201      	movpl	r2, #1
   d5646:	601a      	strpl	r2, [r3, #0]
   d5648:	4b1c      	ldr	r3, [pc, #112]	; (d56bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d564a:	681a      	ldr	r2, [r3, #0]
   d564c:	07d1      	lsls	r1, r2, #31
   d564e:	bf5c      	itt	pl
   d5650:	2201      	movpl	r2, #1
   d5652:	601a      	strpl	r2, [r3, #0]
   d5654:	4b1a      	ldr	r3, [pc, #104]	; (d56c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5656:	681a      	ldr	r2, [r3, #0]
   d5658:	07d2      	lsls	r2, r2, #31
   d565a:	bf5c      	itt	pl
   d565c:	2201      	movpl	r2, #1
   d565e:	601a      	strpl	r2, [r3, #0]
   d5660:	4b18      	ldr	r3, [pc, #96]	; (d56c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5662:	681a      	ldr	r2, [r3, #0]
   d5664:	07d0      	lsls	r0, r2, #31
   d5666:	bf5c      	itt	pl
   d5668:	2201      	movpl	r2, #1
   d566a:	601a      	strpl	r2, [r3, #0]
   d566c:	4b16      	ldr	r3, [pc, #88]	; (d56c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d566e:	681a      	ldr	r2, [r3, #0]
   d5670:	07d1      	lsls	r1, r2, #31
   d5672:	bf5c      	itt	pl
   d5674:	2201      	movpl	r2, #1
   d5676:	601a      	strpl	r2, [r3, #0]
   d5678:	4b14      	ldr	r3, [pc, #80]	; (d56cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d567a:	681a      	ldr	r2, [r3, #0]
   d567c:	07d2      	lsls	r2, r2, #31
   d567e:	bf5c      	itt	pl
   d5680:	2201      	movpl	r2, #1
   d5682:	601a      	strpl	r2, [r3, #0]
   d5684:	4b12      	ldr	r3, [pc, #72]	; (d56d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5686:	681a      	ldr	r2, [r3, #0]
   d5688:	07d0      	lsls	r0, r2, #31
   d568a:	bf5c      	itt	pl
   d568c:	2201      	movpl	r2, #1
   d568e:	601a      	strpl	r2, [r3, #0]
   d5690:	4b10      	ldr	r3, [pc, #64]	; (d56d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5692:	681a      	ldr	r2, [r3, #0]
   d5694:	07d1      	lsls	r1, r2, #31
   d5696:	bf5c      	itt	pl
   d5698:	2201      	movpl	r2, #1
   d569a:	601a      	strpl	r2, [r3, #0]
   d569c:	4b0e      	ldr	r3, [pc, #56]	; (d56d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d569e:	681a      	ldr	r2, [r3, #0]
   d56a0:	07d2      	lsls	r2, r2, #31
   d56a2:	bf5c      	itt	pl
   d56a4:	2201      	movpl	r2, #1
   d56a6:	601a      	strpl	r2, [r3, #0]
   d56a8:	4770      	bx	lr
   d56aa:	bf00      	nop
   d56ac:	2003e79c 	.word	0x2003e79c
   d56b0:	2003e798 	.word	0x2003e798
   d56b4:	2003e794 	.word	0x2003e794
   d56b8:	2003e790 	.word	0x2003e790
   d56bc:	2003e78c 	.word	0x2003e78c
   d56c0:	2003e788 	.word	0x2003e788
   d56c4:	2003e784 	.word	0x2003e784
   d56c8:	2003e780 	.word	0x2003e780
   d56cc:	2003e77c 	.word	0x2003e77c
   d56d0:	2003e778 	.word	0x2003e778
   d56d4:	2003e774 	.word	0x2003e774
   d56d8:	2003e770 	.word	0x2003e770

000d56dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d56dc:	4b24      	ldr	r3, [pc, #144]	; (d5770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d56de:	681a      	ldr	r2, [r3, #0]
   d56e0:	07d0      	lsls	r0, r2, #31
   d56e2:	bf5c      	itt	pl
   d56e4:	2201      	movpl	r2, #1
   d56e6:	601a      	strpl	r2, [r3, #0]
   d56e8:	4b22      	ldr	r3, [pc, #136]	; (d5774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d56ea:	681a      	ldr	r2, [r3, #0]
   d56ec:	07d1      	lsls	r1, r2, #31
   d56ee:	bf5c      	itt	pl
   d56f0:	2201      	movpl	r2, #1
   d56f2:	601a      	strpl	r2, [r3, #0]
   d56f4:	4b20      	ldr	r3, [pc, #128]	; (d5778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d56f6:	681a      	ldr	r2, [r3, #0]
   d56f8:	07d2      	lsls	r2, r2, #31
   d56fa:	bf5c      	itt	pl
   d56fc:	2201      	movpl	r2, #1
   d56fe:	601a      	strpl	r2, [r3, #0]
   d5700:	4b1e      	ldr	r3, [pc, #120]	; (d577c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5702:	681a      	ldr	r2, [r3, #0]
   d5704:	07d0      	lsls	r0, r2, #31
   d5706:	bf5c      	itt	pl
   d5708:	2201      	movpl	r2, #1
   d570a:	601a      	strpl	r2, [r3, #0]
   d570c:	4b1c      	ldr	r3, [pc, #112]	; (d5780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d570e:	681a      	ldr	r2, [r3, #0]
   d5710:	07d1      	lsls	r1, r2, #31
   d5712:	bf5c      	itt	pl
   d5714:	2201      	movpl	r2, #1
   d5716:	601a      	strpl	r2, [r3, #0]
   d5718:	4b1a      	ldr	r3, [pc, #104]	; (d5784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d571a:	681a      	ldr	r2, [r3, #0]
   d571c:	07d2      	lsls	r2, r2, #31
   d571e:	bf5c      	itt	pl
   d5720:	2201      	movpl	r2, #1
   d5722:	601a      	strpl	r2, [r3, #0]
   d5724:	4b18      	ldr	r3, [pc, #96]	; (d5788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5726:	681a      	ldr	r2, [r3, #0]
   d5728:	07d0      	lsls	r0, r2, #31
   d572a:	bf5c      	itt	pl
   d572c:	2201      	movpl	r2, #1
   d572e:	601a      	strpl	r2, [r3, #0]
   d5730:	4b16      	ldr	r3, [pc, #88]	; (d578c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5732:	681a      	ldr	r2, [r3, #0]
   d5734:	07d1      	lsls	r1, r2, #31
   d5736:	bf5c      	itt	pl
   d5738:	2201      	movpl	r2, #1
   d573a:	601a      	strpl	r2, [r3, #0]
   d573c:	4b14      	ldr	r3, [pc, #80]	; (d5790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d573e:	681a      	ldr	r2, [r3, #0]
   d5740:	07d2      	lsls	r2, r2, #31
   d5742:	bf5c      	itt	pl
   d5744:	2201      	movpl	r2, #1
   d5746:	601a      	strpl	r2, [r3, #0]
   d5748:	4b12      	ldr	r3, [pc, #72]	; (d5794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d574a:	681a      	ldr	r2, [r3, #0]
   d574c:	07d0      	lsls	r0, r2, #31
   d574e:	bf5c      	itt	pl
   d5750:	2201      	movpl	r2, #1
   d5752:	601a      	strpl	r2, [r3, #0]
   d5754:	4b10      	ldr	r3, [pc, #64]	; (d5798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5756:	681a      	ldr	r2, [r3, #0]
   d5758:	07d1      	lsls	r1, r2, #31
   d575a:	bf5c      	itt	pl
   d575c:	2201      	movpl	r2, #1
   d575e:	601a      	strpl	r2, [r3, #0]
   d5760:	4b0e      	ldr	r3, [pc, #56]	; (d579c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5762:	681a      	ldr	r2, [r3, #0]
   d5764:	07d2      	lsls	r2, r2, #31
   d5766:	bf5c      	itt	pl
   d5768:	2201      	movpl	r2, #1
   d576a:	601a      	strpl	r2, [r3, #0]
   d576c:	4770      	bx	lr
   d576e:	bf00      	nop
   d5770:	2003e7cc 	.word	0x2003e7cc
   d5774:	2003e7c8 	.word	0x2003e7c8
   d5778:	2003e7c4 	.word	0x2003e7c4
   d577c:	2003e7c0 	.word	0x2003e7c0
   d5780:	2003e7bc 	.word	0x2003e7bc
   d5784:	2003e7b8 	.word	0x2003e7b8
   d5788:	2003e7b4 	.word	0x2003e7b4
   d578c:	2003e7b0 	.word	0x2003e7b0
   d5790:	2003e7ac 	.word	0x2003e7ac
   d5794:	2003e7a8 	.word	0x2003e7a8
   d5798:	2003e7a4 	.word	0x2003e7a4
   d579c:	2003e7a0 	.word	0x2003e7a0

000d57a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d57a0:	4b18      	ldr	r3, [pc, #96]	; (d5804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d57a2:	681a      	ldr	r2, [r3, #0]
   d57a4:	07d1      	lsls	r1, r2, #31
   d57a6:	bf5c      	itt	pl
   d57a8:	2201      	movpl	r2, #1
   d57aa:	601a      	strpl	r2, [r3, #0]
   d57ac:	4b16      	ldr	r3, [pc, #88]	; (d5808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d57ae:	681a      	ldr	r2, [r3, #0]
   d57b0:	07d2      	lsls	r2, r2, #31
   d57b2:	bf5c      	itt	pl
   d57b4:	2201      	movpl	r2, #1
   d57b6:	601a      	strpl	r2, [r3, #0]
   d57b8:	4b14      	ldr	r3, [pc, #80]	; (d580c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d57ba:	681a      	ldr	r2, [r3, #0]
   d57bc:	07d0      	lsls	r0, r2, #31
   d57be:	bf5c      	itt	pl
   d57c0:	2201      	movpl	r2, #1
   d57c2:	601a      	strpl	r2, [r3, #0]
   d57c4:	4b12      	ldr	r3, [pc, #72]	; (d5810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d57c6:	681a      	ldr	r2, [r3, #0]
   d57c8:	07d1      	lsls	r1, r2, #31
   d57ca:	bf5c      	itt	pl
   d57cc:	2201      	movpl	r2, #1
   d57ce:	601a      	strpl	r2, [r3, #0]
   d57d0:	4b10      	ldr	r3, [pc, #64]	; (d5814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d57d2:	681a      	ldr	r2, [r3, #0]
   d57d4:	07d2      	lsls	r2, r2, #31
   d57d6:	bf5c      	itt	pl
   d57d8:	2201      	movpl	r2, #1
   d57da:	601a      	strpl	r2, [r3, #0]
   d57dc:	4b0e      	ldr	r3, [pc, #56]	; (d5818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d57de:	681a      	ldr	r2, [r3, #0]
   d57e0:	07d0      	lsls	r0, r2, #31
   d57e2:	bf5c      	itt	pl
   d57e4:	2201      	movpl	r2, #1
   d57e6:	601a      	strpl	r2, [r3, #0]
   d57e8:	4b0c      	ldr	r3, [pc, #48]	; (d581c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d57ea:	681a      	ldr	r2, [r3, #0]
   d57ec:	07d1      	lsls	r1, r2, #31
   d57ee:	bf5c      	itt	pl
   d57f0:	2201      	movpl	r2, #1
   d57f2:	601a      	strpl	r2, [r3, #0]
   d57f4:	4b0a      	ldr	r3, [pc, #40]	; (d5820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d57f6:	681a      	ldr	r2, [r3, #0]
   d57f8:	07d2      	lsls	r2, r2, #31
   d57fa:	bf5c      	itt	pl
   d57fc:	2201      	movpl	r2, #1
   d57fe:	601a      	strpl	r2, [r3, #0]
   d5800:	4770      	bx	lr
   d5802:	bf00      	nop
   d5804:	2003e7ec 	.word	0x2003e7ec
   d5808:	2003e7e8 	.word	0x2003e7e8
   d580c:	2003e7e4 	.word	0x2003e7e4
   d5810:	2003e7e0 	.word	0x2003e7e0
   d5814:	2003e7dc 	.word	0x2003e7dc
   d5818:	2003e7d8 	.word	0x2003e7d8
   d581c:	2003e7d4 	.word	0x2003e7d4
   d5820:	2003e7d0 	.word	0x2003e7d0

000d5824 <__aeabi_drsub>:
   d5824:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5828:	e002      	b.n	d5830 <__adddf3>
   d582a:	bf00      	nop

000d582c <__aeabi_dsub>:
   d582c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5830 <__adddf3>:
   d5830:	b530      	push	{r4, r5, lr}
   d5832:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5836:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d583a:	ea94 0f05 	teq	r4, r5
   d583e:	bf08      	it	eq
   d5840:	ea90 0f02 	teqeq	r0, r2
   d5844:	bf1f      	itttt	ne
   d5846:	ea54 0c00 	orrsne.w	ip, r4, r0
   d584a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d584e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5852:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5856:	f000 80e2 	beq.w	d5a1e <__adddf3+0x1ee>
   d585a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d585e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5862:	bfb8      	it	lt
   d5864:	426d      	neglt	r5, r5
   d5866:	dd0c      	ble.n	d5882 <__adddf3+0x52>
   d5868:	442c      	add	r4, r5
   d586a:	ea80 0202 	eor.w	r2, r0, r2
   d586e:	ea81 0303 	eor.w	r3, r1, r3
   d5872:	ea82 0000 	eor.w	r0, r2, r0
   d5876:	ea83 0101 	eor.w	r1, r3, r1
   d587a:	ea80 0202 	eor.w	r2, r0, r2
   d587e:	ea81 0303 	eor.w	r3, r1, r3
   d5882:	2d36      	cmp	r5, #54	; 0x36
   d5884:	bf88      	it	hi
   d5886:	bd30      	pophi	{r4, r5, pc}
   d5888:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d588c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5890:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5894:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5898:	d002      	beq.n	d58a0 <__adddf3+0x70>
   d589a:	4240      	negs	r0, r0
   d589c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d58a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d58a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d58a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d58ac:	d002      	beq.n	d58b4 <__adddf3+0x84>
   d58ae:	4252      	negs	r2, r2
   d58b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d58b4:	ea94 0f05 	teq	r4, r5
   d58b8:	f000 80a7 	beq.w	d5a0a <__adddf3+0x1da>
   d58bc:	f1a4 0401 	sub.w	r4, r4, #1
   d58c0:	f1d5 0e20 	rsbs	lr, r5, #32
   d58c4:	db0d      	blt.n	d58e2 <__adddf3+0xb2>
   d58c6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d58ca:	fa22 f205 	lsr.w	r2, r2, r5
   d58ce:	1880      	adds	r0, r0, r2
   d58d0:	f141 0100 	adc.w	r1, r1, #0
   d58d4:	fa03 f20e 	lsl.w	r2, r3, lr
   d58d8:	1880      	adds	r0, r0, r2
   d58da:	fa43 f305 	asr.w	r3, r3, r5
   d58de:	4159      	adcs	r1, r3
   d58e0:	e00e      	b.n	d5900 <__adddf3+0xd0>
   d58e2:	f1a5 0520 	sub.w	r5, r5, #32
   d58e6:	f10e 0e20 	add.w	lr, lr, #32
   d58ea:	2a01      	cmp	r2, #1
   d58ec:	fa03 fc0e 	lsl.w	ip, r3, lr
   d58f0:	bf28      	it	cs
   d58f2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d58f6:	fa43 f305 	asr.w	r3, r3, r5
   d58fa:	18c0      	adds	r0, r0, r3
   d58fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5900:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5904:	d507      	bpl.n	d5916 <__adddf3+0xe6>
   d5906:	f04f 0e00 	mov.w	lr, #0
   d590a:	f1dc 0c00 	rsbs	ip, ip, #0
   d590e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5912:	eb6e 0101 	sbc.w	r1, lr, r1
   d5916:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d591a:	d31b      	bcc.n	d5954 <__adddf3+0x124>
   d591c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5920:	d30c      	bcc.n	d593c <__adddf3+0x10c>
   d5922:	0849      	lsrs	r1, r1, #1
   d5924:	ea5f 0030 	movs.w	r0, r0, rrx
   d5928:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d592c:	f104 0401 	add.w	r4, r4, #1
   d5930:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5934:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5938:	f080 809a 	bcs.w	d5a70 <__adddf3+0x240>
   d593c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5940:	bf08      	it	eq
   d5942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5946:	f150 0000 	adcs.w	r0, r0, #0
   d594a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d594e:	ea41 0105 	orr.w	r1, r1, r5
   d5952:	bd30      	pop	{r4, r5, pc}
   d5954:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5958:	4140      	adcs	r0, r0
   d595a:	eb41 0101 	adc.w	r1, r1, r1
   d595e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5962:	f1a4 0401 	sub.w	r4, r4, #1
   d5966:	d1e9      	bne.n	d593c <__adddf3+0x10c>
   d5968:	f091 0f00 	teq	r1, #0
   d596c:	bf04      	itt	eq
   d596e:	4601      	moveq	r1, r0
   d5970:	2000      	moveq	r0, #0
   d5972:	fab1 f381 	clz	r3, r1
   d5976:	bf08      	it	eq
   d5978:	3320      	addeq	r3, #32
   d597a:	f1a3 030b 	sub.w	r3, r3, #11
   d597e:	f1b3 0220 	subs.w	r2, r3, #32
   d5982:	da0c      	bge.n	d599e <__adddf3+0x16e>
   d5984:	320c      	adds	r2, #12
   d5986:	dd08      	ble.n	d599a <__adddf3+0x16a>
   d5988:	f102 0c14 	add.w	ip, r2, #20
   d598c:	f1c2 020c 	rsb	r2, r2, #12
   d5990:	fa01 f00c 	lsl.w	r0, r1, ip
   d5994:	fa21 f102 	lsr.w	r1, r1, r2
   d5998:	e00c      	b.n	d59b4 <__adddf3+0x184>
   d599a:	f102 0214 	add.w	r2, r2, #20
   d599e:	bfd8      	it	le
   d59a0:	f1c2 0c20 	rsble	ip, r2, #32
   d59a4:	fa01 f102 	lsl.w	r1, r1, r2
   d59a8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d59ac:	bfdc      	itt	le
   d59ae:	ea41 010c 	orrle.w	r1, r1, ip
   d59b2:	4090      	lslle	r0, r2
   d59b4:	1ae4      	subs	r4, r4, r3
   d59b6:	bfa2      	ittt	ge
   d59b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d59bc:	4329      	orrge	r1, r5
   d59be:	bd30      	popge	{r4, r5, pc}
   d59c0:	ea6f 0404 	mvn.w	r4, r4
   d59c4:	3c1f      	subs	r4, #31
   d59c6:	da1c      	bge.n	d5a02 <__adddf3+0x1d2>
   d59c8:	340c      	adds	r4, #12
   d59ca:	dc0e      	bgt.n	d59ea <__adddf3+0x1ba>
   d59cc:	f104 0414 	add.w	r4, r4, #20
   d59d0:	f1c4 0220 	rsb	r2, r4, #32
   d59d4:	fa20 f004 	lsr.w	r0, r0, r4
   d59d8:	fa01 f302 	lsl.w	r3, r1, r2
   d59dc:	ea40 0003 	orr.w	r0, r0, r3
   d59e0:	fa21 f304 	lsr.w	r3, r1, r4
   d59e4:	ea45 0103 	orr.w	r1, r5, r3
   d59e8:	bd30      	pop	{r4, r5, pc}
   d59ea:	f1c4 040c 	rsb	r4, r4, #12
   d59ee:	f1c4 0220 	rsb	r2, r4, #32
   d59f2:	fa20 f002 	lsr.w	r0, r0, r2
   d59f6:	fa01 f304 	lsl.w	r3, r1, r4
   d59fa:	ea40 0003 	orr.w	r0, r0, r3
   d59fe:	4629      	mov	r1, r5
   d5a00:	bd30      	pop	{r4, r5, pc}
   d5a02:	fa21 f004 	lsr.w	r0, r1, r4
   d5a06:	4629      	mov	r1, r5
   d5a08:	bd30      	pop	{r4, r5, pc}
   d5a0a:	f094 0f00 	teq	r4, #0
   d5a0e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5a12:	bf06      	itte	eq
   d5a14:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5a18:	3401      	addeq	r4, #1
   d5a1a:	3d01      	subne	r5, #1
   d5a1c:	e74e      	b.n	d58bc <__adddf3+0x8c>
   d5a1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5a22:	bf18      	it	ne
   d5a24:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5a28:	d029      	beq.n	d5a7e <__adddf3+0x24e>
   d5a2a:	ea94 0f05 	teq	r4, r5
   d5a2e:	bf08      	it	eq
   d5a30:	ea90 0f02 	teqeq	r0, r2
   d5a34:	d005      	beq.n	d5a42 <__adddf3+0x212>
   d5a36:	ea54 0c00 	orrs.w	ip, r4, r0
   d5a3a:	bf04      	itt	eq
   d5a3c:	4619      	moveq	r1, r3
   d5a3e:	4610      	moveq	r0, r2
   d5a40:	bd30      	pop	{r4, r5, pc}
   d5a42:	ea91 0f03 	teq	r1, r3
   d5a46:	bf1e      	ittt	ne
   d5a48:	2100      	movne	r1, #0
   d5a4a:	2000      	movne	r0, #0
   d5a4c:	bd30      	popne	{r4, r5, pc}
   d5a4e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5a52:	d105      	bne.n	d5a60 <__adddf3+0x230>
   d5a54:	0040      	lsls	r0, r0, #1
   d5a56:	4149      	adcs	r1, r1
   d5a58:	bf28      	it	cs
   d5a5a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5a5e:	bd30      	pop	{r4, r5, pc}
   d5a60:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5a64:	bf3c      	itt	cc
   d5a66:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5a6a:	bd30      	popcc	{r4, r5, pc}
   d5a6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5a70:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5a74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5a78:	f04f 0000 	mov.w	r0, #0
   d5a7c:	bd30      	pop	{r4, r5, pc}
   d5a7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5a82:	bf1a      	itte	ne
   d5a84:	4619      	movne	r1, r3
   d5a86:	4610      	movne	r0, r2
   d5a88:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5a8c:	bf1c      	itt	ne
   d5a8e:	460b      	movne	r3, r1
   d5a90:	4602      	movne	r2, r0
   d5a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5a96:	bf06      	itte	eq
   d5a98:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5a9c:	ea91 0f03 	teqeq	r1, r3
   d5aa0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5aa4:	bd30      	pop	{r4, r5, pc}
   d5aa6:	bf00      	nop

000d5aa8 <__aeabi_ui2d>:
   d5aa8:	f090 0f00 	teq	r0, #0
   d5aac:	bf04      	itt	eq
   d5aae:	2100      	moveq	r1, #0
   d5ab0:	4770      	bxeq	lr
   d5ab2:	b530      	push	{r4, r5, lr}
   d5ab4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5ab8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5abc:	f04f 0500 	mov.w	r5, #0
   d5ac0:	f04f 0100 	mov.w	r1, #0
   d5ac4:	e750      	b.n	d5968 <__adddf3+0x138>
   d5ac6:	bf00      	nop

000d5ac8 <__aeabi_i2d>:
   d5ac8:	f090 0f00 	teq	r0, #0
   d5acc:	bf04      	itt	eq
   d5ace:	2100      	moveq	r1, #0
   d5ad0:	4770      	bxeq	lr
   d5ad2:	b530      	push	{r4, r5, lr}
   d5ad4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5ad8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5adc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5ae0:	bf48      	it	mi
   d5ae2:	4240      	negmi	r0, r0
   d5ae4:	f04f 0100 	mov.w	r1, #0
   d5ae8:	e73e      	b.n	d5968 <__adddf3+0x138>
   d5aea:	bf00      	nop

000d5aec <__aeabi_f2d>:
   d5aec:	0042      	lsls	r2, r0, #1
   d5aee:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5af2:	ea4f 0131 	mov.w	r1, r1, rrx
   d5af6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5afa:	bf1f      	itttt	ne
   d5afc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5b00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5b04:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5b08:	4770      	bxne	lr
   d5b0a:	f092 0f00 	teq	r2, #0
   d5b0e:	bf14      	ite	ne
   d5b10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5b14:	4770      	bxeq	lr
   d5b16:	b530      	push	{r4, r5, lr}
   d5b18:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5b1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5b20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5b24:	e720      	b.n	d5968 <__adddf3+0x138>
   d5b26:	bf00      	nop

000d5b28 <__aeabi_ul2d>:
   d5b28:	ea50 0201 	orrs.w	r2, r0, r1
   d5b2c:	bf08      	it	eq
   d5b2e:	4770      	bxeq	lr
   d5b30:	b530      	push	{r4, r5, lr}
   d5b32:	f04f 0500 	mov.w	r5, #0
   d5b36:	e00a      	b.n	d5b4e <__aeabi_l2d+0x16>

000d5b38 <__aeabi_l2d>:
   d5b38:	ea50 0201 	orrs.w	r2, r0, r1
   d5b3c:	bf08      	it	eq
   d5b3e:	4770      	bxeq	lr
   d5b40:	b530      	push	{r4, r5, lr}
   d5b42:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5b46:	d502      	bpl.n	d5b4e <__aeabi_l2d+0x16>
   d5b48:	4240      	negs	r0, r0
   d5b4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5b4e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5b52:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5b56:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5b5a:	f43f aedc 	beq.w	d5916 <__adddf3+0xe6>
   d5b5e:	f04f 0203 	mov.w	r2, #3
   d5b62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5b66:	bf18      	it	ne
   d5b68:	3203      	addne	r2, #3
   d5b6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5b6e:	bf18      	it	ne
   d5b70:	3203      	addne	r2, #3
   d5b72:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5b76:	f1c2 0320 	rsb	r3, r2, #32
   d5b7a:	fa00 fc03 	lsl.w	ip, r0, r3
   d5b7e:	fa20 f002 	lsr.w	r0, r0, r2
   d5b82:	fa01 fe03 	lsl.w	lr, r1, r3
   d5b86:	ea40 000e 	orr.w	r0, r0, lr
   d5b8a:	fa21 f102 	lsr.w	r1, r1, r2
   d5b8e:	4414      	add	r4, r2
   d5b90:	e6c1      	b.n	d5916 <__adddf3+0xe6>
   d5b92:	bf00      	nop

000d5b94 <__aeabi_dmul>:
   d5b94:	b570      	push	{r4, r5, r6, lr}
   d5b96:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5b9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5b9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5ba2:	bf1d      	ittte	ne
   d5ba4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5ba8:	ea94 0f0c 	teqne	r4, ip
   d5bac:	ea95 0f0c 	teqne	r5, ip
   d5bb0:	f000 f8de 	bleq	d5d70 <__aeabi_dmul+0x1dc>
   d5bb4:	442c      	add	r4, r5
   d5bb6:	ea81 0603 	eor.w	r6, r1, r3
   d5bba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5bbe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5bc2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5bc6:	bf18      	it	ne
   d5bc8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5bcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5bd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5bd4:	d038      	beq.n	d5c48 <__aeabi_dmul+0xb4>
   d5bd6:	fba0 ce02 	umull	ip, lr, r0, r2
   d5bda:	f04f 0500 	mov.w	r5, #0
   d5bde:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5be2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5be6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5bea:	f04f 0600 	mov.w	r6, #0
   d5bee:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5bf2:	f09c 0f00 	teq	ip, #0
   d5bf6:	bf18      	it	ne
   d5bf8:	f04e 0e01 	orrne.w	lr, lr, #1
   d5bfc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5c00:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5c04:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5c08:	d204      	bcs.n	d5c14 <__aeabi_dmul+0x80>
   d5c0a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5c0e:	416d      	adcs	r5, r5
   d5c10:	eb46 0606 	adc.w	r6, r6, r6
   d5c14:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5c18:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5c1c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5c20:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5c24:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5c28:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5c2c:	bf88      	it	hi
   d5c2e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5c32:	d81e      	bhi.n	d5c72 <__aeabi_dmul+0xde>
   d5c34:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5c38:	bf08      	it	eq
   d5c3a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5c3e:	f150 0000 	adcs.w	r0, r0, #0
   d5c42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5c46:	bd70      	pop	{r4, r5, r6, pc}
   d5c48:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5c4c:	ea46 0101 	orr.w	r1, r6, r1
   d5c50:	ea40 0002 	orr.w	r0, r0, r2
   d5c54:	ea81 0103 	eor.w	r1, r1, r3
   d5c58:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5c5c:	bfc2      	ittt	gt
   d5c5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5c62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5c66:	bd70      	popgt	{r4, r5, r6, pc}
   d5c68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5c6c:	f04f 0e00 	mov.w	lr, #0
   d5c70:	3c01      	subs	r4, #1
   d5c72:	f300 80ab 	bgt.w	d5dcc <__aeabi_dmul+0x238>
   d5c76:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5c7a:	bfde      	ittt	le
   d5c7c:	2000      	movle	r0, #0
   d5c7e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5c82:	bd70      	pople	{r4, r5, r6, pc}
   d5c84:	f1c4 0400 	rsb	r4, r4, #0
   d5c88:	3c20      	subs	r4, #32
   d5c8a:	da35      	bge.n	d5cf8 <__aeabi_dmul+0x164>
   d5c8c:	340c      	adds	r4, #12
   d5c8e:	dc1b      	bgt.n	d5cc8 <__aeabi_dmul+0x134>
   d5c90:	f104 0414 	add.w	r4, r4, #20
   d5c94:	f1c4 0520 	rsb	r5, r4, #32
   d5c98:	fa00 f305 	lsl.w	r3, r0, r5
   d5c9c:	fa20 f004 	lsr.w	r0, r0, r4
   d5ca0:	fa01 f205 	lsl.w	r2, r1, r5
   d5ca4:	ea40 0002 	orr.w	r0, r0, r2
   d5ca8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5cac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5cb0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5cb4:	fa21 f604 	lsr.w	r6, r1, r4
   d5cb8:	eb42 0106 	adc.w	r1, r2, r6
   d5cbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5cc0:	bf08      	it	eq
   d5cc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5cc6:	bd70      	pop	{r4, r5, r6, pc}
   d5cc8:	f1c4 040c 	rsb	r4, r4, #12
   d5ccc:	f1c4 0520 	rsb	r5, r4, #32
   d5cd0:	fa00 f304 	lsl.w	r3, r0, r4
   d5cd4:	fa20 f005 	lsr.w	r0, r0, r5
   d5cd8:	fa01 f204 	lsl.w	r2, r1, r4
   d5cdc:	ea40 0002 	orr.w	r0, r0, r2
   d5ce0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5ce4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5ce8:	f141 0100 	adc.w	r1, r1, #0
   d5cec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5cf0:	bf08      	it	eq
   d5cf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5cf6:	bd70      	pop	{r4, r5, r6, pc}
   d5cf8:	f1c4 0520 	rsb	r5, r4, #32
   d5cfc:	fa00 f205 	lsl.w	r2, r0, r5
   d5d00:	ea4e 0e02 	orr.w	lr, lr, r2
   d5d04:	fa20 f304 	lsr.w	r3, r0, r4
   d5d08:	fa01 f205 	lsl.w	r2, r1, r5
   d5d0c:	ea43 0302 	orr.w	r3, r3, r2
   d5d10:	fa21 f004 	lsr.w	r0, r1, r4
   d5d14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5d18:	fa21 f204 	lsr.w	r2, r1, r4
   d5d1c:	ea20 0002 	bic.w	r0, r0, r2
   d5d20:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5d24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5d28:	bf08      	it	eq
   d5d2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5d2e:	bd70      	pop	{r4, r5, r6, pc}
   d5d30:	f094 0f00 	teq	r4, #0
   d5d34:	d10f      	bne.n	d5d56 <__aeabi_dmul+0x1c2>
   d5d36:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5d3a:	0040      	lsls	r0, r0, #1
   d5d3c:	eb41 0101 	adc.w	r1, r1, r1
   d5d40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5d44:	bf08      	it	eq
   d5d46:	3c01      	subeq	r4, #1
   d5d48:	d0f7      	beq.n	d5d3a <__aeabi_dmul+0x1a6>
   d5d4a:	ea41 0106 	orr.w	r1, r1, r6
   d5d4e:	f095 0f00 	teq	r5, #0
   d5d52:	bf18      	it	ne
   d5d54:	4770      	bxne	lr
   d5d56:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5d5a:	0052      	lsls	r2, r2, #1
   d5d5c:	eb43 0303 	adc.w	r3, r3, r3
   d5d60:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5d64:	bf08      	it	eq
   d5d66:	3d01      	subeq	r5, #1
   d5d68:	d0f7      	beq.n	d5d5a <__aeabi_dmul+0x1c6>
   d5d6a:	ea43 0306 	orr.w	r3, r3, r6
   d5d6e:	4770      	bx	lr
   d5d70:	ea94 0f0c 	teq	r4, ip
   d5d74:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5d78:	bf18      	it	ne
   d5d7a:	ea95 0f0c 	teqne	r5, ip
   d5d7e:	d00c      	beq.n	d5d9a <__aeabi_dmul+0x206>
   d5d80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5d84:	bf18      	it	ne
   d5d86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5d8a:	d1d1      	bne.n	d5d30 <__aeabi_dmul+0x19c>
   d5d8c:	ea81 0103 	eor.w	r1, r1, r3
   d5d90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5d94:	f04f 0000 	mov.w	r0, #0
   d5d98:	bd70      	pop	{r4, r5, r6, pc}
   d5d9a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5d9e:	bf06      	itte	eq
   d5da0:	4610      	moveq	r0, r2
   d5da2:	4619      	moveq	r1, r3
   d5da4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5da8:	d019      	beq.n	d5dde <__aeabi_dmul+0x24a>
   d5daa:	ea94 0f0c 	teq	r4, ip
   d5dae:	d102      	bne.n	d5db6 <__aeabi_dmul+0x222>
   d5db0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5db4:	d113      	bne.n	d5dde <__aeabi_dmul+0x24a>
   d5db6:	ea95 0f0c 	teq	r5, ip
   d5dba:	d105      	bne.n	d5dc8 <__aeabi_dmul+0x234>
   d5dbc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5dc0:	bf1c      	itt	ne
   d5dc2:	4610      	movne	r0, r2
   d5dc4:	4619      	movne	r1, r3
   d5dc6:	d10a      	bne.n	d5dde <__aeabi_dmul+0x24a>
   d5dc8:	ea81 0103 	eor.w	r1, r1, r3
   d5dcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5dd0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5dd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5dd8:	f04f 0000 	mov.w	r0, #0
   d5ddc:	bd70      	pop	{r4, r5, r6, pc}
   d5dde:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5de2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5de6:	bd70      	pop	{r4, r5, r6, pc}

000d5de8 <__aeabi_ddiv>:
   d5de8:	b570      	push	{r4, r5, r6, lr}
   d5dea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5dee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5df2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5df6:	bf1d      	ittte	ne
   d5df8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5dfc:	ea94 0f0c 	teqne	r4, ip
   d5e00:	ea95 0f0c 	teqne	r5, ip
   d5e04:	f000 f8a7 	bleq	d5f56 <__aeabi_ddiv+0x16e>
   d5e08:	eba4 0405 	sub.w	r4, r4, r5
   d5e0c:	ea81 0e03 	eor.w	lr, r1, r3
   d5e10:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5e14:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5e18:	f000 8088 	beq.w	d5f2c <__aeabi_ddiv+0x144>
   d5e1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5e20:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5e24:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5e28:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5e2c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5e30:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5e34:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5e38:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5e3c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5e40:	429d      	cmp	r5, r3
   d5e42:	bf08      	it	eq
   d5e44:	4296      	cmpeq	r6, r2
   d5e46:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5e4a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5e4e:	d202      	bcs.n	d5e56 <__aeabi_ddiv+0x6e>
   d5e50:	085b      	lsrs	r3, r3, #1
   d5e52:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e56:	1ab6      	subs	r6, r6, r2
   d5e58:	eb65 0503 	sbc.w	r5, r5, r3
   d5e5c:	085b      	lsrs	r3, r3, #1
   d5e5e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e62:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5e66:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5e6a:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e72:	bf22      	ittt	cs
   d5e74:	1ab6      	subcs	r6, r6, r2
   d5e76:	4675      	movcs	r5, lr
   d5e78:	ea40 000c 	orrcs.w	r0, r0, ip
   d5e7c:	085b      	lsrs	r3, r3, #1
   d5e7e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e82:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e86:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e8a:	bf22      	ittt	cs
   d5e8c:	1ab6      	subcs	r6, r6, r2
   d5e8e:	4675      	movcs	r5, lr
   d5e90:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5e94:	085b      	lsrs	r3, r3, #1
   d5e96:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e9a:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5ea2:	bf22      	ittt	cs
   d5ea4:	1ab6      	subcs	r6, r6, r2
   d5ea6:	4675      	movcs	r5, lr
   d5ea8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5eac:	085b      	lsrs	r3, r3, #1
   d5eae:	ea4f 0232 	mov.w	r2, r2, rrx
   d5eb2:	ebb6 0e02 	subs.w	lr, r6, r2
   d5eb6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5eba:	bf22      	ittt	cs
   d5ebc:	1ab6      	subcs	r6, r6, r2
   d5ebe:	4675      	movcs	r5, lr
   d5ec0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5ec4:	ea55 0e06 	orrs.w	lr, r5, r6
   d5ec8:	d018      	beq.n	d5efc <__aeabi_ddiv+0x114>
   d5eca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5ece:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5ed2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5ed6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5eda:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5ede:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5ee2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5ee6:	d1c0      	bne.n	d5e6a <__aeabi_ddiv+0x82>
   d5ee8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5eec:	d10b      	bne.n	d5f06 <__aeabi_ddiv+0x11e>
   d5eee:	ea41 0100 	orr.w	r1, r1, r0
   d5ef2:	f04f 0000 	mov.w	r0, #0
   d5ef6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5efa:	e7b6      	b.n	d5e6a <__aeabi_ddiv+0x82>
   d5efc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5f00:	bf04      	itt	eq
   d5f02:	4301      	orreq	r1, r0
   d5f04:	2000      	moveq	r0, #0
   d5f06:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5f0a:	bf88      	it	hi
   d5f0c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5f10:	f63f aeaf 	bhi.w	d5c72 <__aeabi_dmul+0xde>
   d5f14:	ebb5 0c03 	subs.w	ip, r5, r3
   d5f18:	bf04      	itt	eq
   d5f1a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5f1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5f22:	f150 0000 	adcs.w	r0, r0, #0
   d5f26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5f2a:	bd70      	pop	{r4, r5, r6, pc}
   d5f2c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5f30:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5f34:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5f38:	bfc2      	ittt	gt
   d5f3a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5f3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5f42:	bd70      	popgt	{r4, r5, r6, pc}
   d5f44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5f48:	f04f 0e00 	mov.w	lr, #0
   d5f4c:	3c01      	subs	r4, #1
   d5f4e:	e690      	b.n	d5c72 <__aeabi_dmul+0xde>
   d5f50:	ea45 0e06 	orr.w	lr, r5, r6
   d5f54:	e68d      	b.n	d5c72 <__aeabi_dmul+0xde>
   d5f56:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5f5a:	ea94 0f0c 	teq	r4, ip
   d5f5e:	bf08      	it	eq
   d5f60:	ea95 0f0c 	teqeq	r5, ip
   d5f64:	f43f af3b 	beq.w	d5dde <__aeabi_dmul+0x24a>
   d5f68:	ea94 0f0c 	teq	r4, ip
   d5f6c:	d10a      	bne.n	d5f84 <__aeabi_ddiv+0x19c>
   d5f6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5f72:	f47f af34 	bne.w	d5dde <__aeabi_dmul+0x24a>
   d5f76:	ea95 0f0c 	teq	r5, ip
   d5f7a:	f47f af25 	bne.w	d5dc8 <__aeabi_dmul+0x234>
   d5f7e:	4610      	mov	r0, r2
   d5f80:	4619      	mov	r1, r3
   d5f82:	e72c      	b.n	d5dde <__aeabi_dmul+0x24a>
   d5f84:	ea95 0f0c 	teq	r5, ip
   d5f88:	d106      	bne.n	d5f98 <__aeabi_ddiv+0x1b0>
   d5f8a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5f8e:	f43f aefd 	beq.w	d5d8c <__aeabi_dmul+0x1f8>
   d5f92:	4610      	mov	r0, r2
   d5f94:	4619      	mov	r1, r3
   d5f96:	e722      	b.n	d5dde <__aeabi_dmul+0x24a>
   d5f98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5f9c:	bf18      	it	ne
   d5f9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5fa2:	f47f aec5 	bne.w	d5d30 <__aeabi_dmul+0x19c>
   d5fa6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5faa:	f47f af0d 	bne.w	d5dc8 <__aeabi_dmul+0x234>
   d5fae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5fb2:	f47f aeeb 	bne.w	d5d8c <__aeabi_dmul+0x1f8>
   d5fb6:	e712      	b.n	d5dde <__aeabi_dmul+0x24a>

000d5fb8 <__aeabi_d2f>:
   d5fb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5fbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d5fc0:	bf24      	itt	cs
   d5fc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d5fc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d5fca:	d90d      	bls.n	d5fe8 <__aeabi_d2f+0x30>
   d5fcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d5fd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d5fd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d5fd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d5fdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d5fe0:	bf08      	it	eq
   d5fe2:	f020 0001 	biceq.w	r0, r0, #1
   d5fe6:	4770      	bx	lr
   d5fe8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d5fec:	d121      	bne.n	d6032 <__aeabi_d2f+0x7a>
   d5fee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d5ff2:	bfbc      	itt	lt
   d5ff4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d5ff8:	4770      	bxlt	lr
   d5ffa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5ffe:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6002:	f1c2 0218 	rsb	r2, r2, #24
   d6006:	f1c2 0c20 	rsb	ip, r2, #32
   d600a:	fa10 f30c 	lsls.w	r3, r0, ip
   d600e:	fa20 f002 	lsr.w	r0, r0, r2
   d6012:	bf18      	it	ne
   d6014:	f040 0001 	orrne.w	r0, r0, #1
   d6018:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d601c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6020:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6024:	ea40 000c 	orr.w	r0, r0, ip
   d6028:	fa23 f302 	lsr.w	r3, r3, r2
   d602c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6030:	e7cc      	b.n	d5fcc <__aeabi_d2f+0x14>
   d6032:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6036:	d107      	bne.n	d6048 <__aeabi_d2f+0x90>
   d6038:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d603c:	bf1e      	ittt	ne
   d603e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6042:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6046:	4770      	bxne	lr
   d6048:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d604c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6050:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6054:	4770      	bx	lr
   d6056:	bf00      	nop

000d6058 <atol>:
   d6058:	220a      	movs	r2, #10
   d605a:	2100      	movs	r1, #0
   d605c:	f000 b8fe 	b.w	d625c <strtol>

000d6060 <__cxa_atexit>:
   d6060:	b510      	push	{r4, lr}
   d6062:	4c05      	ldr	r4, [pc, #20]	; (d6078 <__cxa_atexit+0x18>)
   d6064:	4613      	mov	r3, r2
   d6066:	b12c      	cbz	r4, d6074 <__cxa_atexit+0x14>
   d6068:	460a      	mov	r2, r1
   d606a:	4601      	mov	r1, r0
   d606c:	2002      	movs	r0, #2
   d606e:	f3af 8000 	nop.w
   d6072:	bd10      	pop	{r4, pc}
   d6074:	4620      	mov	r0, r4
   d6076:	bd10      	pop	{r4, pc}
   d6078:	00000000 	.word	0x00000000

000d607c <memcpy>:
   d607c:	b510      	push	{r4, lr}
   d607e:	1e43      	subs	r3, r0, #1
   d6080:	440a      	add	r2, r1
   d6082:	4291      	cmp	r1, r2
   d6084:	d004      	beq.n	d6090 <memcpy+0x14>
   d6086:	f811 4b01 	ldrb.w	r4, [r1], #1
   d608a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d608e:	e7f8      	b.n	d6082 <memcpy+0x6>
   d6090:	bd10      	pop	{r4, pc}

000d6092 <memset>:
   d6092:	4402      	add	r2, r0
   d6094:	4603      	mov	r3, r0
   d6096:	4293      	cmp	r3, r2
   d6098:	d002      	beq.n	d60a0 <memset+0xe>
   d609a:	f803 1b01 	strb.w	r1, [r3], #1
   d609e:	e7fa      	b.n	d6096 <memset+0x4>
   d60a0:	4770      	bx	lr
	...

000d60a4 <srand>:
   d60a4:	b538      	push	{r3, r4, r5, lr}
   d60a6:	4b12      	ldr	r3, [pc, #72]	; (d60f0 <srand+0x4c>)
   d60a8:	681c      	ldr	r4, [r3, #0]
   d60aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d60ac:	4605      	mov	r5, r0
   d60ae:	b9d3      	cbnz	r3, d60e6 <srand+0x42>
   d60b0:	2018      	movs	r0, #24
   d60b2:	f7fe fd6d 	bl	d4b90 <malloc>
   d60b6:	f243 330e 	movw	r3, #13070	; 0x330e
   d60ba:	63a0      	str	r0, [r4, #56]	; 0x38
   d60bc:	8003      	strh	r3, [r0, #0]
   d60be:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d60c2:	8043      	strh	r3, [r0, #2]
   d60c4:	f241 2334 	movw	r3, #4660	; 0x1234
   d60c8:	8083      	strh	r3, [r0, #4]
   d60ca:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d60ce:	80c3      	strh	r3, [r0, #6]
   d60d0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d60d4:	8103      	strh	r3, [r0, #8]
   d60d6:	2305      	movs	r3, #5
   d60d8:	8143      	strh	r3, [r0, #10]
   d60da:	230b      	movs	r3, #11
   d60dc:	8183      	strh	r3, [r0, #12]
   d60de:	2201      	movs	r2, #1
   d60e0:	2300      	movs	r3, #0
   d60e2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d60e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d60e8:	2200      	movs	r2, #0
   d60ea:	611d      	str	r5, [r3, #16]
   d60ec:	615a      	str	r2, [r3, #20]
   d60ee:	bd38      	pop	{r3, r4, r5, pc}
   d60f0:	2003e308 	.word	0x2003e308

000d60f4 <strcmp>:
   d60f4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d60f8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d60fc:	2a01      	cmp	r2, #1
   d60fe:	bf28      	it	cs
   d6100:	429a      	cmpcs	r2, r3
   d6102:	d0f7      	beq.n	d60f4 <strcmp>
   d6104:	1ad0      	subs	r0, r2, r3
   d6106:	4770      	bx	lr

000d6108 <strcpy>:
   d6108:	4603      	mov	r3, r0
   d610a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d610e:	f803 2b01 	strb.w	r2, [r3], #1
   d6112:	2a00      	cmp	r2, #0
   d6114:	d1f9      	bne.n	d610a <strcpy+0x2>
   d6116:	4770      	bx	lr

000d6118 <strlen>:
   d6118:	4603      	mov	r3, r0
   d611a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d611e:	2a00      	cmp	r2, #0
   d6120:	d1fb      	bne.n	d611a <strlen+0x2>
   d6122:	1a18      	subs	r0, r3, r0
   d6124:	3801      	subs	r0, #1
   d6126:	4770      	bx	lr

000d6128 <strncpy>:
   d6128:	b510      	push	{r4, lr}
   d612a:	4603      	mov	r3, r0
   d612c:	b142      	cbz	r2, d6140 <strncpy+0x18>
   d612e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6132:	f803 4b01 	strb.w	r4, [r3], #1
   d6136:	3a01      	subs	r2, #1
   d6138:	2c00      	cmp	r4, #0
   d613a:	d1f7      	bne.n	d612c <strncpy+0x4>
   d613c:	441a      	add	r2, r3
   d613e:	e000      	b.n	d6142 <strncpy+0x1a>
   d6140:	bd10      	pop	{r4, pc}
   d6142:	4293      	cmp	r3, r2
   d6144:	d002      	beq.n	d614c <strncpy+0x24>
   d6146:	f803 4b01 	strb.w	r4, [r3], #1
   d614a:	e7fa      	b.n	d6142 <strncpy+0x1a>
   d614c:	bd10      	pop	{r4, pc}
	...

000d6150 <_strtol_r>:
   d6150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6154:	4680      	mov	r8, r0
   d6156:	4840      	ldr	r0, [pc, #256]	; (d6258 <_strtol_r+0x108>)
   d6158:	f8d0 9000 	ldr.w	r9, [r0]
   d615c:	460f      	mov	r7, r1
   d615e:	463d      	mov	r5, r7
   d6160:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6164:	eb09 0004 	add.w	r0, r9, r4
   d6168:	7840      	ldrb	r0, [r0, #1]
   d616a:	f000 0008 	and.w	r0, r0, #8
   d616e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d6172:	b108      	cbz	r0, d6178 <_strtol_r+0x28>
   d6174:	462f      	mov	r7, r5
   d6176:	e7f2      	b.n	d615e <_strtol_r+0xe>
   d6178:	2c2d      	cmp	r4, #45	; 0x2d
   d617a:	d103      	bne.n	d6184 <_strtol_r+0x34>
   d617c:	1cbd      	adds	r5, r7, #2
   d617e:	787c      	ldrb	r4, [r7, #1]
   d6180:	2601      	movs	r6, #1
   d6182:	e003      	b.n	d618c <_strtol_r+0x3c>
   d6184:	2c2b      	cmp	r4, #43	; 0x2b
   d6186:	bf04      	itt	eq
   d6188:	787c      	ldrbeq	r4, [r7, #1]
   d618a:	1cbd      	addeq	r5, r7, #2
   d618c:	b113      	cbz	r3, d6194 <_strtol_r+0x44>
   d618e:	2b10      	cmp	r3, #16
   d6190:	d10a      	bne.n	d61a8 <_strtol_r+0x58>
   d6192:	e05b      	b.n	d624c <_strtol_r+0xfc>
   d6194:	2c30      	cmp	r4, #48	; 0x30
   d6196:	d157      	bne.n	d6248 <_strtol_r+0xf8>
   d6198:	7828      	ldrb	r0, [r5, #0]
   d619a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d619e:	2858      	cmp	r0, #88	; 0x58
   d61a0:	d14d      	bne.n	d623e <_strtol_r+0xee>
   d61a2:	786c      	ldrb	r4, [r5, #1]
   d61a4:	2310      	movs	r3, #16
   d61a6:	3502      	adds	r5, #2
   d61a8:	2e00      	cmp	r6, #0
   d61aa:	bf14      	ite	ne
   d61ac:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d61b0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d61b4:	2700      	movs	r7, #0
   d61b6:	fbbc faf3 	udiv	sl, ip, r3
   d61ba:	4638      	mov	r0, r7
   d61bc:	fb03 cc1a 	mls	ip, r3, sl, ip
   d61c0:	eb09 0e04 	add.w	lr, r9, r4
   d61c4:	f89e e001 	ldrb.w	lr, [lr, #1]
   d61c8:	f01e 0f04 	tst.w	lr, #4
   d61cc:	d001      	beq.n	d61d2 <_strtol_r+0x82>
   d61ce:	3c30      	subs	r4, #48	; 0x30
   d61d0:	e00b      	b.n	d61ea <_strtol_r+0x9a>
   d61d2:	f01e 0e03 	ands.w	lr, lr, #3
   d61d6:	d01b      	beq.n	d6210 <_strtol_r+0xc0>
   d61d8:	f1be 0f01 	cmp.w	lr, #1
   d61dc:	bf0c      	ite	eq
   d61de:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d61e2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d61e6:	ebce 0404 	rsb	r4, lr, r4
   d61ea:	42a3      	cmp	r3, r4
   d61ec:	dd10      	ble.n	d6210 <_strtol_r+0xc0>
   d61ee:	f1b7 3fff 	cmp.w	r7, #4294967295
   d61f2:	d00a      	beq.n	d620a <_strtol_r+0xba>
   d61f4:	4550      	cmp	r0, sl
   d61f6:	d806      	bhi.n	d6206 <_strtol_r+0xb6>
   d61f8:	d101      	bne.n	d61fe <_strtol_r+0xae>
   d61fa:	4564      	cmp	r4, ip
   d61fc:	dc03      	bgt.n	d6206 <_strtol_r+0xb6>
   d61fe:	fb03 4000 	mla	r0, r3, r0, r4
   d6202:	2701      	movs	r7, #1
   d6204:	e001      	b.n	d620a <_strtol_r+0xba>
   d6206:	f04f 37ff 	mov.w	r7, #4294967295
   d620a:	f815 4b01 	ldrb.w	r4, [r5], #1
   d620e:	e7d7      	b.n	d61c0 <_strtol_r+0x70>
   d6210:	1c7b      	adds	r3, r7, #1
   d6212:	d10c      	bne.n	d622e <_strtol_r+0xde>
   d6214:	2e00      	cmp	r6, #0
   d6216:	f04f 0322 	mov.w	r3, #34	; 0x22
   d621a:	bf14      	ite	ne
   d621c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d6220:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6224:	f8c8 3000 	str.w	r3, [r8]
   d6228:	b92a      	cbnz	r2, d6236 <_strtol_r+0xe6>
   d622a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d622e:	b106      	cbz	r6, d6232 <_strtol_r+0xe2>
   d6230:	4240      	negs	r0, r0
   d6232:	b172      	cbz	r2, d6252 <_strtol_r+0x102>
   d6234:	b107      	cbz	r7, d6238 <_strtol_r+0xe8>
   d6236:	1e69      	subs	r1, r5, #1
   d6238:	6011      	str	r1, [r2, #0]
   d623a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d623e:	2430      	movs	r4, #48	; 0x30
   d6240:	2b00      	cmp	r3, #0
   d6242:	d1b1      	bne.n	d61a8 <_strtol_r+0x58>
   d6244:	2308      	movs	r3, #8
   d6246:	e7af      	b.n	d61a8 <_strtol_r+0x58>
   d6248:	230a      	movs	r3, #10
   d624a:	e7ad      	b.n	d61a8 <_strtol_r+0x58>
   d624c:	2c30      	cmp	r4, #48	; 0x30
   d624e:	d0a3      	beq.n	d6198 <_strtol_r+0x48>
   d6250:	e7aa      	b.n	d61a8 <_strtol_r+0x58>
   d6252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6256:	bf00      	nop
   d6258:	2003e2a4 	.word	0x2003e2a4

000d625c <strtol>:
   d625c:	4613      	mov	r3, r2
   d625e:	460a      	mov	r2, r1
   d6260:	4601      	mov	r1, r0
   d6262:	4802      	ldr	r0, [pc, #8]	; (d626c <strtol+0x10>)
   d6264:	6800      	ldr	r0, [r0, #0]
   d6266:	f7ff bf73 	b.w	d6150 <_strtol_r>
   d626a:	bf00      	nop
   d626c:	2003e308 	.word	0x2003e308

000d6270 <dynalib_user>:
   d6270:	000d4021 000d405d 000d4089 000d408d     !@..]@...@...@..
   d6280:	00000000 656d6954 3025203a 253a6932     ....Time: %02i:%
   d6290:	3a693230 69323025 2d2d2d20 616c0020     02i:%02i --- .la
   d62a0:	25203a74 6c202c66 3a676e6f 2c662520     t: %f, long: %f,
   d62b0:	746c6120 6625203a 25000a20 6d20756c      alt: %f ..%lu m
   d62c0:	696c6c69 6f636573 2073646e 67206f74     illiseconds to g
   d62d0:	47207465 66205350 6e007869 6f6c206f     et GPS fix.no lo
   d62e0:	69746163 47006e6f 434d5250 47504700     cation.GPRMC.GPG
   d62f0:	4e004147 454e4e00 454e4500 45534500     GA.N.NNE.ENE.ESE
   d6300:	45535300 53005300 57005753 57005753     .SSE.S.SSW.WSW.W
   d6310:	4e00574e 0000574e                       NW.NNW..

000d6318 <_ZTVN5spark13EthernetClassE>:
	...
   d6320:	000d4c1f 000d4c15 000d4c0b 000d4c01     .L...L...L...L..
   d6330:	000d4bf5 000d4be9 000d4bdd 000d4bd5     .K...K...K...K..
   d6340:	000d4bcb 000d4bc1 000d54a5 64756162     .K...K...T..baud
   d6350:	72655300 006c6169 69726553 00316c61     .Serial.Serial1.
   d6360:	65707974 72617000 63006d61 6900646d     type.param.cmd.i
   d6370:	6e680064 74730064 66006d72 00746c69     d.hnd.strm.filt.
   d6380:	006c766c 48646461 6c646e61 72007265     lvl.addHandler.r
   d6390:	766f6d65 6e614865 72656c64 756e6500     emoveHandler.enu
   d63a0:	6e61486d 72656c64 534a0073 74534e4f     mHandlers.JSONSt
   d63b0:	6d616572 48676f4c 6c646e61 61007265     reamLogHandler.a
   d63c0:	25007070 75303130 205d0020 00642500     pp.%010u .] .%d.
   d63d0:	2800202c 00203a29 63005b20 2065646f     , .(): . [.code 
   d63e0:	2500203d 65640069 6c696174 203d2073     = .%i.details = 
   d63f0:	000a0d00 6e6c0066 006e6600 65646f63     ....f.ln.fn.code
   d6400:	74656400 006c6961 656e6f6e 61727400     .detail.none.tra
   d6410:	69006563 006f666e 6e726177 72726500     ce.info.warn.err
   d6420:	7000726f 63696e61 6c6c6100 25005a00     or.panic.all.Z.%
   d6430:	6433302b 3230253a 59250075 2d6d252d     +03d:%02u.%Y-%m-
   d6440:	25546425 4d253a48 2553253a 7361007a     %dT%H:%M:%S%z.as
   d6450:	6d697463 00000065                       ctime...

000d6458 <_ZTV9IPAddress>:
	...
   d6460:	000d4f55 000d4f45 000d4f47              UO..EO..GO..

000d646c <_ZTV9USBSerial>:
	...
   d6474:	000d502d 000d507d 000d508b 000d4cc9     -P..}P...P...L..
   d6484:	000d5069 000d502f 000d5045 000d5077     iP../P..EP..wP..
   d6494:	000d505b 000d5029                       [P..)P..

000d649c <_ZTV11USARTSerial>:
	...
   d64a4:	000d5139 000d5189 000d5197 000d4cc9     9Q...Q...Q...L..
   d64b4:	000d514d 000d516f 000d515b 000d5183     MQ..oQ..[Q...Q..
   d64c4:	000d513b 000d513f                       ;Q..?Q..

000d64cc <_ZTVN5spark9MeshClassE>:
	...
   d64d4:	000d52a3 000d5299 000d528f 000d5285     .R...R...R...R..
   d64e4:	000d5279 000d526d 000d5261 000d5259     yR..mR..aR..YR..
   d64f4:	000d524f 000d5245 000d54a5              OR..ER...T..

000d6500 <_ZTVN5spark9WiFiClassE>:
	...
   d6508:	000d541f 000d5415 000d540b 000d53c1     .T...T...T...S..
   d6518:	000d53ff 000d53f3 000d53e7 000d53df     .S...S...S...S..
   d6528:	000d53d5 000d53cb 000d54a5              .S...S...T..

000d6534 <_ZTVN5spark12NetworkClassE>:
	...
   d653c:	000d543d 000d5447 000d5451 000d545b     =T..GT..QT..[T..
   d654c:	000d5465 000d5471 000d547d 000d5489     eT..qT..}T...T..
   d655c:	000d5491 000d549b 000d54a5              .T...T...T..

000d6568 <_ctype_>:
   d6568:	20202000 20202020 28282020 20282828     .         ((((( 
   d6578:	20202020 20202020 20202020 20202020                     
   d6588:	10108820 10101010 10101010 10101010      ...............
   d6598:	04040410 04040404 10040404 10101010     ................
   d65a8:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d65b8:	01010101 01010101 01010101 10101010     ................
   d65c8:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d65d8:	02020202 02020202 02020202 10101010     ................
   d65e8:	00000020 00000000 00000000 00000000      ...............
	...

000d666c <__sf_fake_stdin>:
	...

000d668c <__sf_fake_stdout>:
	...

000d66ac <__sf_fake_stderr>:
	...

000d66cc <link_const_variable_data_end>:
   d66cc:	000d4271 	.word	0x000d4271
   d66d0:	000d428d 	.word	0x000d428d
   d66d4:	000d4291 	.word	0x000d4291
   d66d8:	000d42a9 	.word	0x000d42a9
   d66dc:	000d48f5 	.word	0x000d48f5
   d66e0:	000d4c29 	.word	0x000d4c29
   d66e4:	000d4c5d 	.word	0x000d4c5d
   d66e8:	000d4ca1 	.word	0x000d4ca1
   d66ec:	000d4de9 	.word	0x000d4de9
   d66f0:	000d4df9 	.word	0x000d4df9
   d66f4:	000d4e19 	.word	0x000d4e19
   d66f8:	000d5371 	.word	0x000d5371
   d66fc:	000d5429 	.word	0x000d5429
   d6700:	000d5571 	.word	0x000d5571
   d6704:	000d5595 	.word	0x000d5595
   d6708:	000d5619 	.word	0x000d5619
   d670c:	000d56dd 	.word	0x000d56dd
   d6710:	000d57a1 	.word	0x000d57a1

000d6714 <link_constructors_end>:
	...
