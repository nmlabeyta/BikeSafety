
c:/Users/nmlab/Documents/IoT/ClassAssignments/BikeSafety/test/target/1.5.2/argon/test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003b44  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7b60  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  2003de70  000d7b64  0001de70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000908  2003dee8  2003dee8  0002dee8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7bdc  000d7bdc  00027bdc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7c04  000d7c04  00027c04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0018c801  00000000  00000000  00027c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001e33d  00000000  00000000  001b4409  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000269cf  00000000  00000000  001d2746  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002bf0  00000000  00000000  001f9115  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005310  00000000  00000000  001fbd05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004c83d  00000000  00000000  00201015  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000506eb  00000000  00000000  0024d852  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010ac74  00000000  00000000  0029df3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e0c0  00000000  00000000  003a8bb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 f9e2 	bl	d73f6 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 f9e7 	bl	d740c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003de70 	.word	0x2003de70
   d4048:	000d7b64 	.word	0x000d7b64
   d404c:	2003dee8 	.word	0x2003dee8
   d4050:	2003dee8 	.word	0x2003dee8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fbfd 	bl	d6858 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7b5c 	.word	0x000d7b5c
   d4080:	000d7ae0 	.word	0x000d7ae0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b9c8 	b.w	d4418 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f86a 	bl	d4162 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bba3 	b.w	d67dc <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f002 b937 	b.w	d6308 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f002 b935 	b.w	d6308 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d40ae:	4770      	bx	lr

000d40b0 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40b2:	4602      	mov	r2, r0
   d40b4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40b6:	7913      	ldrb	r3, [r2, #4]
   d40b8:	6895      	ldr	r5, [r2, #8]
   d40ba:	b133      	cbz	r3, d40ca <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40bc:	b93d      	cbnz	r5, d40ce <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40be:	490c      	ldr	r1, [pc, #48]	; (d40f0 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40c0:	b004      	add	sp, #16
   d40c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40c6:	f002 ba8f 	b.w	d65e8 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d40ca:	4b0a      	ldr	r3, [pc, #40]	; (d40f4 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d40cc:	e000      	b.n	d40d0 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d40ce:	4b0a      	ldr	r3, [pc, #40]	; (d40f8 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d40d0:	7b16      	ldrb	r6, [r2, #12]
   d40d2:	4c0a      	ldr	r4, [pc, #40]	; (d40fc <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d40d4:	490a      	ldr	r1, [pc, #40]	; (d4100 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40d6:	7b52      	ldrb	r2, [r2, #13]
   d40d8:	9202      	str	r2, [sp, #8]
   d40da:	2e01      	cmp	r6, #1
   d40dc:	bf08      	it	eq
   d40de:	4621      	moveq	r1, r4
   d40e0:	9101      	str	r1, [sp, #4]
   d40e2:	9500      	str	r5, [sp, #0]
   d40e4:	4a07      	ldr	r2, [pc, #28]	; (d4104 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d40e6:	2100      	movs	r1, #0
   d40e8:	f002 fac1 	bl	d666e <_ZN5Print11printf_implEbPKcz>
  }
   d40ec:	b004      	add	sp, #16
   d40ee:	bd70      	pop	{r4, r5, r6, pc}
   d40f0:	000d754b 	.word	0x000d754b
   d40f4:	000d78db 	.word	0x000d78db
   d40f8:	000d753a 	.word	0x000d753a
   d40fc:	000d7543 	.word	0x000d7543
   d4100:	000d7547 	.word	0x000d7547
   d4104:	000d7561 	.word	0x000d7561

000d4108 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4108:	3008      	adds	r0, #8
   d410a:	f000 bfe1 	b.w	d50d0 <_ZN7FatFile5writeEPKvj>

000d410e <_ZN6SdFileD0Ev>:
   d410e:	b510      	push	{r4, lr}
   d4110:	212c      	movs	r1, #44	; 0x2c
   d4112:	4604      	mov	r4, r0
   d4114:	f002 fff6 	bl	d7104 <_ZdlPvj>
   d4118:	4620      	mov	r0, r4
   d411a:	bd10      	pop	{r4, pc}

000d411c <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d411c:	b507      	push	{r0, r1, r2, lr}
   d411e:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4120:	2201      	movs	r2, #1
   d4122:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4126:	3008      	adds	r0, #8
   d4128:	4619      	mov	r1, r3
   d412a:	f000 ffd1 	bl	d50d0 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d412e:	b003      	add	sp, #12
   d4130:	f85d fb04 	ldr.w	pc, [sp], #4

000d4134 <_ZNK5spark6Logger5traceEPKcz>:
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
   d4134:	b40e      	push	{r1, r2, r3}
   d4136:	b500      	push	{lr}
   d4138:	b08c      	sub	sp, #48	; 0x30
   d413a:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d413c:	2320      	movs	r3, #32
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
   d413e:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d4142:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4144:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4148:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d414a:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d414c:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d414e:	aa04      	add	r2, sp, #16
   d4150:	2001      	movs	r0, #1
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4152:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4154:	f002 f844 	bl	d61e0 <log_message_v>
inline void spark::Logger::trace(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}
   d4158:	b00c      	add	sp, #48	; 0x30
   d415a:	f85d eb04 	ldr.w	lr, [sp], #4
   d415e:	b003      	add	sp, #12
   d4160:	4770      	bx	lr

000d4162 <loop>:
  ucam.takeSnapshot(uCamIII_SNAP_JPEG,1);
  SDwriteFunction();
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4162:	4770      	bx	lr

000d4164 <_Z8logData2v>:
      delay(2000);
      Serial.printf("Ready for next data log \n");
    }
  }
}
void logData2() {
   d4164:	b510      	push	{r4, lr}
 
  Serial.print("Writing data to SDcard \n");
   d4166:	f002 fc77 	bl	d6a58 <_Z16_fetch_usbserialv>
   d416a:	490b      	ldr	r1, [pc, #44]	; (d4198 <_Z8logData2v+0x34>)
   d416c:	f002 fa3c 	bl	d65e8 <_ZN5Print5printEPKc>
  file.print(ucam.getPicture(uCamIII_TYPE_JPEG));
   d4170:	2105      	movs	r1, #5
   d4172:	480a      	ldr	r0, [pc, #40]	; (d419c <_Z8logData2v+0x38>)
   d4174:	f001 fe82 	bl	d5e7c <_ZN12uCamIII_Base10getPictureE16uCamIII_PIC_TYPE>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4178:	1e04      	subs	r4, r0, #0
   d417a:	da05      	bge.n	d4188 <_Z8logData2v+0x24>
            t = print('-');
   d417c:	212d      	movs	r1, #45	; 0x2d
   d417e:	4808      	ldr	r0, [pc, #32]	; (d41a0 <_Z8logData2v+0x3c>)
   d4180:	f002 fa36 	bl	d65f0 <_ZN5Print5printEc>
            val = -n;
   d4184:	4261      	negs	r1, r4
   d4186:	e000      	b.n	d418a <_Z8logData2v+0x26>
        } else {
            val = n;
   d4188:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d418a:	220a      	movs	r2, #10
   d418c:	4804      	ldr	r0, [pc, #16]	; (d41a0 <_Z8logData2v+0x3c>)
}
   d418e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4192:	f002 ba4c 	b.w	d662e <_ZN5Print11printNumberEmh>
   d4196:	bf00      	nop
   d4198:	000d757f 	.word	0x000d757f
   d419c:	2003df24 	.word	0x2003df24
   d41a0:	2003def8 	.word	0x2003def8

000d41a4 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv>:
    pr->print(F("error: "));
    pr->println(msg);
    errorPrint(pr);
  }
  /** %Print any SD error code and halt. */
  void initErrorHalt() {
   d41a4:	b508      	push	{r3, lr}
   d41a6:	4604      	mov	r4, r0
    initErrorHalt(&Serial);
   d41a8:	f002 fc56 	bl	d6a58 <_Z16_fetch_usbserialv>
  /** Print error details after begin() fails.
   *
   * \param[in] pr Print destination.
   */
  void initErrorPrint(Print* pr) {
    if (cardErrorCode()) {
   d41ac:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
    pr->println(msg);
    errorPrint(pr);
  }
  /** %Print any SD error code and halt. */
  void initErrorHalt() {
    initErrorHalt(&Serial);
   d41b0:	4605      	mov	r5, r0
  /** Print error details after begin() fails.
   *
   * \param[in] pr Print destination.
   */
  void initErrorPrint(Print* pr) {
    if (cardErrorCode()) {
   d41b2:	b32b      	cbz	r3, d4200 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x5c>
      pr->println(F("Can't access SD card. Do not reformat."));
   d41b4:	491a      	ldr	r1, [pc, #104]	; (d4220 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x7c>)
   d41b6:	f002 fa38 	bl	d662a <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
   d41ba:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
   d41be:	2b20      	cmp	r3, #32
   d41c0:	d103      	bne.n	d41ca <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x26>
        pr->println(F("No card, wrong chip select pin, or SPI problem?"));
   d41c2:	4918      	ldr	r1, [pc, #96]	; (d4224 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x80>)
   d41c4:	4628      	mov	r0, r5
   d41c6:	f002 fa30 	bl	d662a <_ZN5Print7printlnEPK19__FlashStringHelper>
  }
  /** %Print any SD error code.
   * \param[in] pr Print device.
   */
  void errorPrint(Print* pr) {
    if (!cardErrorCode()) {
   d41ca:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
   d41ce:	b31b      	cbz	r3, d4218 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x74>
      return;
    }
    pr->print(F("SD errorCode: 0X"));
   d41d0:	4915      	ldr	r1, [pc, #84]	; (d4228 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x84>)
   d41d2:	4628      	mov	r0, r5
   d41d4:	f002 fa0f 	bl	d65f6 <_ZN5Print5printEPK19__FlashStringHelper>
   d41d8:	2210      	movs	r2, #16
   d41da:	f894 1460 	ldrb.w	r1, [r4, #1120]	; 0x460
   d41de:	4628      	mov	r0, r5
   d41e0:	f002 fa25 	bl	d662e <_ZN5Print11printNumberEmh>
    pr->print(cardErrorCode(), HEX);
    pr->print(F(",0X"));
   d41e4:	4911      	ldr	r1, [pc, #68]	; (d422c <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x88>)
   d41e6:	4628      	mov	r0, r5
   d41e8:	f002 fa05 	bl	d65f6 <_ZN5Print5printEPK19__FlashStringHelper>
   d41ec:	2210      	movs	r2, #16
   d41ee:	f894 1469 	ldrb.w	r1, [r4, #1129]	; 0x469
   d41f2:	4628      	mov	r0, r5
   d41f4:	f002 fa1b 	bl	d662e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d41f8:	4628      	mov	r0, r5
   d41fa:	f002 fa00 	bl	d65fe <_ZN5Print7printlnEv>
   d41fe:	e00b      	b.n	d4218 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x74>
      pr->println(F("Can't access SD card. Do not reformat."));
      if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
        pr->println(F("No card, wrong chip select pin, or SPI problem?"));
      }
      errorPrint(pr);
    } else if (vol()->fatType() == 0) {
   d4200:	79e3      	ldrb	r3, [r4, #7]
   d4202:	b90b      	cbnz	r3, d4208 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x64>
      pr->println(F("Invalid format, reformat SD."));
   d4204:	490a      	ldr	r1, [pc, #40]	; (d4230 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x8c>)
   d4206:	e005      	b.n	d4214 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x70>
    } else if (!vwd()->isOpen()) {
   d4208:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d420c:	b90b      	cbnz	r3, d4212 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x6e>
      pr->println(F("Can't open root directory."));
   d420e:	4909      	ldr	r1, [pc, #36]	; (d4234 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x90>)
   d4210:	e000      	b.n	d4214 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x70>
    } else {
      pr->println(F("No error found."));
   d4212:	4909      	ldr	r1, [pc, #36]	; (d4238 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x94>)
   d4214:	f002 fa09 	bl	d662a <_ZN5Print7printlnEPK19__FlashStringHelper>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   d4218:	f001 fef2 	bl	d6000 <os_thread_yield>
   d421c:	e7fc      	b.n	d4218 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x74>
   d421e:	bf00      	nop
   d4220:	000d7598 	.word	0x000d7598
   d4224:	000d75bf 	.word	0x000d75bf
   d4228:	000d75ef 	.word	0x000d75ef
   d422c:	000d7600 	.word	0x000d7600
   d4230:	000d7604 	.word	0x000d7604
   d4234:	000d7621 	.word	0x000d7621
   d4238:	000d763c 	.word	0x000d763c

000d423c <_ZN5Print6printfIIEEEjPKcDpT_>:
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d423c:	460a      	mov	r2, r1
   d423e:	2100      	movs	r1, #0
   d4240:	f002 ba15 	b.w	d666e <_ZN5Print11printf_implEbPKcz>

000d4244 <_Z15SDwriteFunctionv>:
  }
  // Write data header.
  file.printf("TimeStamp, Random Data %i \n");
  // Start on a multiple of the sample interval.
}
void SDwriteFunction(){
   d4244:	b570      	push	{r4, r5, r6, lr}
  // logStart=true; // use a button nomrally
if (logStart==true) {
   d4246:	4c3c      	ldr	r4, [pc, #240]	; (d4338 <_Z15SDwriteFunctionv+0xf4>)
   d4248:	7823      	ldrb	r3, [r4, #0]
  }
  // Write data header.
  file.printf("TimeStamp, Random Data %i \n");
  // Start on a multiple of the sample interval.
}
void SDwriteFunction(){
   d424a:	b08a      	sub	sp, #40	; 0x28
  // logStart=true; // use a button nomrally
if (logStart==true) {
   d424c:	2b00      	cmp	r3, #0
   d424e:	d070      	beq.n	d4332 <_Z15SDwriteFunctionv+0xee>
  Serial.printf("Starting Data Logging \n");
   d4250:	f002 fc02 	bl	d6a58 <_Z16_fetch_usbserialv>
   d4254:	4939      	ldr	r1, [pc, #228]	; (d433c <_Z15SDwriteFunctionv+0xf8>)
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d4256:	4d3a      	ldr	r5, [pc, #232]	; (d4340 <_Z15SDwriteFunctionv+0xfc>)
   d4258:	f7ff fff0 	bl	d423c <_ZN5Print6printfIIEEEjPKcDpT_>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d425c:	2600      	movs	r6, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d425e:	2300      	movs	r3, #0
   d4260:	4a37      	ldr	r2, [pc, #220]	; (d4340 <_Z15SDwriteFunctionv+0xfc>)
   d4262:	4938      	ldr	r1, [pc, #224]	; (d4344 <_Z15SDwriteFunctionv+0x100>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4264:	f88d 6004 	strb.w	r6, [sp, #4]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d4268:	a801      	add	r0, sp, #4
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d426a:	f88d 6005 	strb.w	r6, [sp, #5]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d426e:	f000 fee0 	bl	d5032 <_ZN7FatFile4openEPS_PKci>
  while (sd.exists(fileName)) {
   d4272:	b198      	cbz	r0, d429c <_Z15SDwriteFunctionv+0x58>
    if (fileName[BASE_NAME_SIZE + 1] != '9') {
   d4274:	796b      	ldrb	r3, [r5, #5]
   d4276:	2b39      	cmp	r3, #57	; 0x39
   d4278:	d002      	beq.n	d4280 <_Z15SDwriteFunctionv+0x3c>
      fileName[BASE_NAME_SIZE + 1]++;
   d427a:	3301      	adds	r3, #1
   d427c:	716b      	strb	r3, [r5, #5]
   d427e:	e7ee      	b.n	d425e <_Z15SDwriteFunctionv+0x1a>
    } else if (fileName[BASE_NAME_SIZE] != '9') {
   d4280:	792b      	ldrb	r3, [r5, #4]
   d4282:	2b39      	cmp	r3, #57	; 0x39
   d4284:	d004      	beq.n	d4290 <_Z15SDwriteFunctionv+0x4c>
      fileName[BASE_NAME_SIZE + 1] = '0';
   d4286:	2230      	movs	r2, #48	; 0x30
      fileName[BASE_NAME_SIZE]++;
   d4288:	3301      	adds	r3, #1
  Serial.printf("Starting Data Logging \n");
  while (sd.exists(fileName)) {
    if (fileName[BASE_NAME_SIZE + 1] != '9') {
      fileName[BASE_NAME_SIZE + 1]++;
    } else if (fileName[BASE_NAME_SIZE] != '9') {
      fileName[BASE_NAME_SIZE + 1] = '0';
   d428a:	716a      	strb	r2, [r5, #5]
      fileName[BASE_NAME_SIZE]++;
   d428c:	712b      	strb	r3, [r5, #4]
   d428e:	e7e6      	b.n	d425e <_Z15SDwriteFunctionv+0x1a>
    } else {
      Serial.println("Can't create file name");
   d4290:	f002 fbe2 	bl	d6a58 <_Z16_fetch_usbserialv>
   d4294:	492c      	ldr	r1, [pc, #176]	; (d4348 <_Z15SDwriteFunctionv+0x104>)
   d4296:	f002 f9be 	bl	d6616 <_ZN5Print7printlnEPKc>
   d429a:	e7fe      	b.n	d429a <_Z15SDwriteFunctionv+0x56>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d429c:	492b      	ldr	r1, [pc, #172]	; (d434c <_Z15SDwriteFunctionv+0x108>)
   d429e:	4a28      	ldr	r2, [pc, #160]	; (d4340 <_Z15SDwriteFunctionv+0xfc>)
   d42a0:	6809      	ldr	r1, [r1, #0]
   d42a2:	482b      	ldr	r0, [pc, #172]	; (d4350 <_Z15SDwriteFunctionv+0x10c>)
   d42a4:	f640 2301 	movw	r3, #2561	; 0xa01
   d42a8:	f000 fec3 	bl	d5032 <_ZN7FatFile4openEPS_PKci>
      while(1);
    }
  }
  if (!file.open(fileName, O_WRONLY | O_CREAT | O_EXCL)) {
   d42ac:	b920      	cbnz	r0, d42b8 <_Z15SDwriteFunctionv+0x74>
    Serial.println("file.open");
   d42ae:	f002 fbd3 	bl	d6a58 <_Z16_fetch_usbserialv>
   d42b2:	4928      	ldr	r1, [pc, #160]	; (d4354 <_Z15SDwriteFunctionv+0x110>)
   d42b4:	f002 f9af 	bl	d6616 <_ZN5Print7printlnEPKc>
  }
  Serial.printf("Logging to: %s \n",fileName);
   d42b8:	f002 fbce 	bl	d6a58 <_Z16_fetch_usbserialv>
   d42bc:	4b20      	ldr	r3, [pc, #128]	; (d4340 <_Z15SDwriteFunctionv+0xfc>)
   d42be:	4a26      	ldr	r2, [pc, #152]	; (d4358 <_Z15SDwriteFunctionv+0x114>)
      Serial.print(".");
      
      logData2();

      // Force data to SD and update the directory entry to avoid data loss.
      if (!file.sync() || file.getWriteError()) {
   d42c0:	4d26      	ldr	r5, [pc, #152]	; (d435c <_Z15SDwriteFunctionv+0x118>)
   d42c2:	2100      	movs	r1, #0
   d42c4:	f002 f9d3 	bl	d666e <_ZN5Print11printf_implEbPKcz>
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d42c8:	f001 fe82 	bl	d5fd0 <HAL_Timer_Get_Micro_Seconds>
  }
  if (!file.open(fileName, O_WRONLY | O_CREAT | O_EXCL)) {
    Serial.println("file.open");
  }
  Serial.printf("Logging to: %s \n",fileName);
  startTime = micros();
   d42cc:	4b24      	ldr	r3, [pc, #144]	; (d4360 <_Z15SDwriteFunctionv+0x11c>)
   d42ce:	6018      	str	r0, [r3, #0]
}
  while(logStart==true) {
   d42d0:	7823      	ldrb	r3, [r4, #0]
   d42d2:	b373      	cbz	r3, d4332 <_Z15SDwriteFunctionv+0xee>
    // for (i=0;i<100;i++) {

      // logTime = micros() - startTime;
      Serial.print(".");
   d42d4:	f002 fbc0 	bl	d6a58 <_Z16_fetch_usbserialv>
   d42d8:	4922      	ldr	r1, [pc, #136]	; (d4364 <_Z15SDwriteFunctionv+0x120>)
   d42da:	f002 f985 	bl	d65e8 <_ZN5Print5printEPKc>
      
      logData2();
   d42de:	f7ff ff41 	bl	d4164 <_Z8logData2v>

      // Force data to SD and update the directory entry to avoid data loss.
      if (!file.sync() || file.getWriteError()) {
   d42e2:	481b      	ldr	r0, [pc, #108]	; (d4350 <_Z15SDwriteFunctionv+0x10c>)
   d42e4:	f000 fe68 	bl	d4fb8 <_ZN7FatFile4syncEv>
   d42e8:	b1e8      	cbz	r0, d4326 <_Z15SDwriteFunctionv+0xe2>
   d42ea:	7a6b      	ldrb	r3, [r5, #9]
   d42ec:	07db      	lsls	r3, r3, #31
   d42ee:	d41a      	bmi.n	d4326 <_Z15SDwriteFunctionv+0xe2>
      Serial.printf("write error \n");
      }
      delay(random(100,500));
   d42f0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   d42f4:	2064      	movs	r0, #100	; 0x64
   d42f6:	f002 fcae 	bl	d6c56 <_Z6randomii>
   d42fa:	f002 fa31 	bl	d6760 <delay>
    // }
    logStart = false;   // button release
   d42fe:	2300      	movs	r3, #0
    if (logStart==false) {
      file.close();
   d4300:	4813      	ldr	r0, [pc, #76]	; (d4350 <_Z15SDwriteFunctionv+0x10c>)
      if (!file.sync() || file.getWriteError()) {
      Serial.printf("write error \n");
      }
      delay(random(100,500));
    // }
    logStart = false;   // button release
   d4302:	7023      	strb	r3, [r4, #0]
    if (logStart==false) {
      file.close();
   d4304:	f000 fe8e 	bl	d5024 <_ZN7FatFile5closeEv>
      Serial.printf("Done \n");
   d4308:	f002 fba6 	bl	d6a58 <_Z16_fetch_usbserialv>
   d430c:	4916      	ldr	r1, [pc, #88]	; (d4368 <_Z15SDwriteFunctionv+0x124>)
   d430e:	f7ff ff95 	bl	d423c <_ZN5Print6printfIIEEEjPKcDpT_>
      delay(2000);
   d4312:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4316:	f002 fa23 	bl	d6760 <delay>
      Serial.printf("Ready for next data log \n");
   d431a:	f002 fb9d 	bl	d6a58 <_Z16_fetch_usbserialv>
   d431e:	4913      	ldr	r1, [pc, #76]	; (d436c <_Z15SDwriteFunctionv+0x128>)
   d4320:	f7ff ff8c 	bl	d423c <_ZN5Print6printfIIEEEjPKcDpT_>
   d4324:	e7d4      	b.n	d42d0 <_Z15SDwriteFunctionv+0x8c>
      
      logData2();

      // Force data to SD and update the directory entry to avoid data loss.
      if (!file.sync() || file.getWriteError()) {
      Serial.printf("write error \n");
   d4326:	f002 fb97 	bl	d6a58 <_Z16_fetch_usbserialv>
   d432a:	4911      	ldr	r1, [pc, #68]	; (d4370 <_Z15SDwriteFunctionv+0x12c>)
   d432c:	f7ff ff86 	bl	d423c <_ZN5Print6printfIIEEEjPKcDpT_>
   d4330:	e7de      	b.n	d42f0 <_Z15SDwriteFunctionv+0xac>
      Serial.printf("Done \n");
      delay(2000);
      Serial.printf("Ready for next data log \n");
    }
  }
}
   d4332:	b00a      	add	sp, #40	; 0x28
   d4334:	bd70      	pop	{r4, r5, r6, pc}
   d4336:	bf00      	nop
   d4338:	2003df40 	.word	0x2003df40
   d433c:	000d764c 	.word	0x000d764c
   d4340:	2003de70 	.word	0x2003de70
   d4344:	2003e380 	.word	0x2003e380
   d4348:	000d7664 	.word	0x000d7664
   d434c:	2003e3cc 	.word	0x2003e3cc
   d4350:	2003df00 	.word	0x2003df00
   d4354:	000d767b 	.word	0x000d767b
   d4358:	000d7685 	.word	0x000d7685
   d435c:	2003def8 	.word	0x2003def8
   d4360:	2003e3c8 	.word	0x2003e3c8
   d4364:	000d761f 	.word	0x000d761f
   d4368:	000d7696 	.word	0x000d7696
   d436c:	000d769d 	.word	0x000d769d
   d4370:	000d76b7 	.word	0x000d76b7

000d4374 <_Z11SDcardSetupv>:
// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.

}
void SDcardSetup(){
   d4374:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	logStart = false;
   d4376:	4a21      	ldr	r2, [pc, #132]	; (d43fc <_Z11SDcardSetupv+0x88>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4378:	4c21      	ldr	r4, [pc, #132]	; (d4400 <_Z11SDcardSetupv+0x8c>)
   d437a:	2300      	movs	r3, #0
   d437c:	7013      	strb	r3, [r2, #0]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d437e:	4a21      	ldr	r2, [pc, #132]	; (d4404 <_Z11SDcardSetupv+0x90>)
   d4380:	9200      	str	r2, [sp, #0]
   d4382:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d4386:	4a20      	ldr	r2, [pc, #128]	; (d4408 <_Z11SDcardSetupv+0x94>)
   d4388:	f88d 3004 	strb.w	r3, [sp, #4]
   d438c:	9202      	str	r2, [sp, #8]
   d438e:	2501      	movs	r5, #1
   d4390:	f88d 300d 	strb.w	r3, [sp, #13]
   d4394:	220e      	movs	r2, #14
   d4396:	466b      	mov	r3, sp
   d4398:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d439c:	4630      	mov	r0, r6
   d439e:	f88d 500c 	strb.w	r5, [sp, #12]
   d43a2:	f001 f9dd 	bl	d5760 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d43a6:	b330      	cbz	r0, d43f6 <_Z11SDcardSetupv+0x82>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d43a8:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d43ac:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d43ae:	f000 fe39 	bl	d5024 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d43b2:	4629      	mov	r1, r5
   d43b4:	4620      	mov	r0, r4
   d43b6:	f001 f87c 	bl	d54b2 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d43ba:	4601      	mov	r1, r0
   d43bc:	b140      	cbz	r0, d43d0 <_Z11SDcardSetupv+0x5c>
   d43be:	4c10      	ldr	r4, [pc, #64]	; (d4400 <_Z11SDcardSetupv+0x8c>)
   d43c0:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   d43c4:	4621      	mov	r1, r4
   d43c6:	4628      	mov	r0, r5
   d43c8:	f000 fc57 	bl	d4c7a <_ZN7FatFile8openRootEP9FatVolume>
   d43cc:	b198      	cbz	r0, d43f6 <_Z11SDcardSetupv+0x82>
   d43ce:	e005      	b.n	d43dc <_Z11SDcardSetupv+0x68>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d43d0:	4620      	mov	r0, r4
   d43d2:	f001 f86e 	bl	d54b2 <_ZN9FatVolume4initEh>
   d43d6:	2800      	cmp	r0, #0
   d43d8:	d1f1      	bne.n	d43be <_Z11SDcardSetupv+0x4a>
   d43da:	e00c      	b.n	d43f6 <_Z11SDcardSetupv+0x82>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d43dc:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d43e0:	f013 0f70 	tst.w	r3, #112	; 0x70
   d43e4:	d007      	beq.n	d43f6 <_Z11SDcardSetupv+0x82>
      return false;
    }
    m_cwd = dir;
   d43e6:	4b09      	ldr	r3, [pc, #36]	; (d440c <_Z11SDcardSetupv+0x98>)
  if (BASE_NAME_SIZE > 6) {
    Serial.println("FILE_BASE_NAME too long");
    while(1);
  }
  // Write data header.
  file.printf("TimeStamp, Random Data %i \n");
   d43e8:	4909      	ldr	r1, [pc, #36]	; (d4410 <_Z11SDcardSetupv+0x9c>)
   d43ea:	480a      	ldr	r0, [pc, #40]	; (d4414 <_Z11SDcardSetupv+0xa0>)
   d43ec:	601d      	str	r5, [r3, #0]
   d43ee:	f7ff ff25 	bl	d423c <_ZN5Print6printfIIEEEjPKcDpT_>
  // Start on a multiple of the sample interval.
}
   d43f2:	b004      	add	sp, #16
   d43f4:	bd70      	pop	{r4, r5, r6, pc}
void SDcardSetup(){
	logStart = false;
  // Initialize at the highest speed supported by the board that is
  // not over 50 MHz. Try a lower speed if SPI errors occur.cc
  if (!sd.begin(chipSelect, SD_SCK_MHZ(50))) {
    sd.initErrorHalt();  
   d43f6:	4802      	ldr	r0, [pc, #8]	; (d4400 <_Z11SDcardSetupv+0x8c>)
   d43f8:	f7ff fed4 	bl	d41a4 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv>
   d43fc:	2003df40 	.word	0x2003df40
   d4400:	2003df44 	.word	0x2003df44
   d4404:	000d750c 	.word	0x000d750c
   d4408:	02faf080 	.word	0x02faf080
   d440c:	2003e3cc 	.word	0x2003e3cc
   d4410:	000d76c5 	.word	0x000d76c5
   d4414:	2003def8 	.word	0x2003def8

000d4418 <setup>:
// Error messages stored in flash.
#define error(msg) sd.errorHalt(msg)
//------------------------------------------------------------------------------

// setup() runs once, when the device is first turned on.
void setup() {
   d4418:	b537      	push	{r0, r1, r2, r4, r5, lr}
  Serial.begin(9600);
   d441a:	f002 fb1d 	bl	d6a58 <_Z16_fetch_usbserialv>
   d441e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4422:	f002 fb0d 	bl	d6a40 <_ZN9USBSerial5beginEl>
  : uCamIII_Base(camera, resetPin, timeout), _cameraInterface(camera) { } 
  uCamIII(serial *camera, int resetPin = -1, uint32_t timeout = 500) 
  : uCamIII_Base(*camera, resetPin, timeout), _cameraInterface(*camera) { } 

  long init(int baudrate = 9600) { 
    Log.trace("uCAMIII: %s", __FUNCTION__);
   d4426:	4d24      	ldr	r5, [pc, #144]	; (d44b8 <setup+0xa0>)
    _cameraInterface.end();
   d4428:	4c24      	ldr	r4, [pc, #144]	; (d44bc <setup+0xa4>)
  Serial1.begin(9600);
   d442a:	f002 fba1 	bl	d6b70 <_Z22__fetch_global_Serial1v>
   d442e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4432:	f002 fb93 	bl	d6b5c <_ZN11USARTSerial5beginEm>
  SDcardSetup();
   d4436:	f7ff ff9d 	bl	d4374 <_Z11SDcardSetupv>
  pinMode(D7, OUTPUT);
   d443a:	2101      	movs	r1, #1
   d443c:	2007      	movs	r0, #7
   d443e:	f002 fde9 	bl	d7014 <pinMode>
  : uCamIII_Base(camera, resetPin, timeout), _cameraInterface(camera) { } 
  uCamIII(serial *camera, int resetPin = -1, uint32_t timeout = 500) 
  : uCamIII_Base(*camera, resetPin, timeout), _cameraInterface(*camera) { } 

  long init(int baudrate = 9600) { 
    Log.trace("uCAMIII: %s", __FUNCTION__);
   d4442:	4a1f      	ldr	r2, [pc, #124]	; (d44c0 <setup+0xa8>)
   d4444:	491f      	ldr	r1, [pc, #124]	; (d44c4 <setup+0xac>)
   d4446:	4628      	mov	r0, r5
   d4448:	f7ff fe74 	bl	d4134 <_ZNK5spark6Logger5traceEPKcz>
    _cameraInterface.end();
   d444c:	69a0      	ldr	r0, [r4, #24]
   d444e:	f002 fb88 	bl	d6b62 <_ZN11USARTSerial3endEv>
    delay(100);
   d4452:	2064      	movs	r0, #100	; 0x64
   d4454:	f002 f984 	bl	d6760 <delay>
    _cameraInterface.begin(baudrate);
   d4458:	69a0      	ldr	r0, [r4, #24]
   d445a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d445e:	f002 fb7d 	bl	d6b5c <_ZN11USARTSerial5beginEm>
    _cameraInterface.setTimeout(_timeout);
   d4462:	68a1      	ldr	r1, [r4, #8]
   d4464:	69a0      	ldr	r0, [r4, #24]
   d4466:	f002 f951 	bl	d670c <_ZN6Stream10setTimeoutEm>
    delay(100);
   d446a:	2064      	movs	r0, #100	; 0x64
   d446c:	f002 f978 	bl	d6760 <delay>
    return uCamIII_Base::init();
   d4470:	4620      	mov	r0, r4
   d4472:	f001 fced 	bl	d5e50 <_ZN12uCamIII_Base4initEv>
  long              getJpegData(uint8_t *buffer, int len, uCamIII_callback callback = NULL, int package = -1);
  long              getRawData(uint8_t *buffer, int len, uCamIII_callback callback = NULL);
  void              hardReset();
  
  inline long       setImageFormat(uCamIII_IMAGE_FORMAT format = uCamIII_COMP_JPEG, uCamIII_RES resolution = uCamIII_640x480)
                    { Log.trace(__FUNCTION__); return sendCmdWithAck(uCamIII_CMD_INIT, 0x00, format, resolution, resolution); }
   d4476:	4628      	mov	r0, r5
   d4478:	4913      	ldr	r1, [pc, #76]	; (d44c8 <setup+0xb0>)
   d447a:	f7ff fe5b 	bl	d4134 <_ZNK5spark6Logger5traceEPKcz>
   d447e:	2307      	movs	r3, #7
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	9300      	str	r3, [sp, #0]
   d4484:	2200      	movs	r2, #0
   d4486:	2101      	movs	r1, #1
   d4488:	4620      	mov	r0, r4
   d448a:	f001 fc7b 	bl	d5d84 <_ZN12uCamIII_Base14sendCmdWithAckE11uCamIII_CMDhhhh>
  inline long       takeSnapshot(uCamIII_SNAP_TYPE type = uCamIII_SNAP_JPEG, uint16_t frame = 0)
                    { Log.trace(__FUNCTION__); long r = sendCmdWithAck(uCamIII_CMD_SNAPSHOT, type, frame & 0xFF, (frame >> 8) & 0xFF); delay(_timeout); return r; }
   d448e:	4628      	mov	r0, r5
   d4490:	490e      	ldr	r1, [pc, #56]	; (d44cc <setup+0xb4>)
   d4492:	f7ff fe4f 	bl	d4134 <_ZNK5spark6Logger5traceEPKcz>
   d4496:	2200      	movs	r2, #0
   d4498:	9201      	str	r2, [sp, #4]
   d449a:	9200      	str	r2, [sp, #0]
   d449c:	2301      	movs	r3, #1
   d449e:	2105      	movs	r1, #5
   d44a0:	4620      	mov	r0, r4
   d44a2:	f001 fc6f 	bl	d5d84 <_ZN12uCamIII_Base14sendCmdWithAckE11uCamIII_CMDhhhh>
   d44a6:	68a0      	ldr	r0, [r4, #8]
   d44a8:	f002 f95a 	bl	d6760 <delay>
  ucam.init(115200);
  ucam.setImageFormat(uCamIII_COMP_JPEG,uCamIII_640x480);
  ucam.takeSnapshot(uCamIII_SNAP_JPEG,1);
  SDwriteFunction();
}
   d44ac:	b003      	add	sp, #12
   d44ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  SDcardSetup();
  pinMode(D7, OUTPUT);
  ucam.init(115200);
  ucam.setImageFormat(uCamIII_COMP_JPEG,uCamIII_640x480);
  ucam.takeSnapshot(uCamIII_SNAP_JPEG,1);
  SDwriteFunction();
   d44b2:	f7ff bec7 	b.w	d4244 <_Z15SDwriteFunctionv>
   d44b6:	bf00      	nop
   d44b8:	2003e3f4 	.word	0x2003e3f4
   d44bc:	2003df24 	.word	0x2003df24
   d44c0:	000d7535 	.word	0x000d7535
   d44c4:	000d76e1 	.word	0x000d76e1
   d44c8:	000d76ed 	.word	0x000d76ed
   d44cc:	000d7528 	.word	0x000d7528

000d44d0 <_GLOBAL__sub_I_ucam>:
}
void logData2() {
 
  Serial.print("Writing data to SDcard \n");
  file.print(ucam.getPicture(uCamIII_TYPE_JPEG));
}
   d44d0:	b570      	push	{r4, r5, r6, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d44d2:	f001 fd05 	bl	d5ee0 <HAL_Pin_Map>
//---sd card libaries---//
#include <SPI.h>
#include <SdFat.h>
#include "uCAMIII.h"

uCamIII<USARTSerial> ucam(Serial1, A0, 500);                        // use HW Serial1 and A0 as reset pin for uCamIII
   d44d6:	f002 fb4b 	bl	d6b70 <_Z22__fetch_global_Serial1v>
typedef int (*uCamIII_callback)(uint8_t* buffer, int len, int id);

class uCamIII_Base {
public:
  uCamIII_Base(Stream& cameraStream, int resetPin = -1, uint32_t timeout = 500) 
  : _cameraStream(cameraStream), _resetPin(resetPin), _timeout(timeout), _imageSize(0), _packageSize(64), _packageNumber(0), _lastError(0) { } 
   d44da:	4b23      	ldr	r3, [pc, #140]	; (d4568 <_GLOBAL__sub_I_ucam+0x98>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d44dc:	4e23      	ldr	r6, [pc, #140]	; (d456c <_GLOBAL__sub_I_ucam+0x9c>)
   d44de:	6018      	str	r0, [r3, #0]
   d44e0:	2213      	movs	r2, #19
   d44e2:	605a      	str	r2, [r3, #4]
   d44e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d44e8:	609a      	str	r2, [r3, #8]
   d44ea:	2140      	movs	r1, #64	; 0x40
   d44ec:	2200      	movs	r2, #0
   d44ee:	8219      	strh	r1, [r3, #16]
   d44f0:	60da      	str	r2, [r3, #12]
   d44f2:	825a      	strh	r2, [r3, #18]
   d44f4:	751a      	strb	r2, [r3, #20]

template <class serial>
class uCamIII : public uCamIII_Base {
public:
  uCamIII(serial& camera, int resetPin = -1, uint32_t timeout = 500) 
  : uCamIII_Base(camera, resetPin, timeout), _cameraInterface(camera) { } 
   d44f6:	6198      	str	r0, [r3, #24]
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d44f8:	4b1d      	ldr	r3, [pc, #116]	; (d4570 <_GLOBAL__sub_I_ucam+0xa0>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d44fa:	2164      	movs	r1, #100	; 0x64
   d44fc:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4500:	491c      	ldr	r1, [pc, #112]	; (d4574 <_GLOBAL__sub_I_ucam+0xa4>)
   d4502:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d4506:	2101      	movs	r1, #1
   d4508:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d450c:	6831      	ldr	r1, [r6, #0]
   d450e:	71da      	strb	r2, [r3, #7]
   d4510:	f011 0501 	ands.w	r5, r1, #1
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4514:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d4518:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d451c:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d4520:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d4524:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d4528:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d452c:	461c      	mov	r4, r3
   d452e:	d10a      	bne.n	d4546 <_GLOBAL__sub_I_ucam+0x76>
   d4530:	4630      	mov	r0, r6
   d4532:	f7ff fdb4 	bl	d409e <__cxa_guard_acquire>
   d4536:	b130      	cbz	r0, d4546 <_GLOBAL__sub_I_ucam+0x76>
   d4538:	4629      	mov	r1, r5
   d453a:	480f      	ldr	r0, [pc, #60]	; (d4578 <_GLOBAL__sub_I_ucam+0xa8>)
   d453c:	f001 ff38 	bl	d63b0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4540:	4630      	mov	r0, r6
   d4542:	f7ff fdb1 	bl	d40a8 <__cxa_guard_release>
   d4546:	480d      	ldr	r0, [pc, #52]	; (d457c <_GLOBAL__sub_I_ucam+0xac>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4548:	4b0b      	ldr	r3, [pc, #44]	; (d4578 <_GLOBAL__sub_I_ucam+0xa8>)
   d454a:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d454e:	2300      	movs	r3, #0
   d4550:	7203      	strb	r3, [r0, #8]
   d4552:	7243      	strb	r3, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4554:	6043      	str	r3, [r0, #4]
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
   d4556:	4b0a      	ldr	r3, [pc, #40]	; (d4580 <_GLOBAL__sub_I_ucam+0xb0>)
   d4558:	6003      	str	r3, [r0, #0]
const int chipSelect = A5;
#define FILE_BASE_NAME "JPEG"

// Create file system object.
SdFat sd;
SdFile file;
   d455a:	4a0a      	ldr	r2, [pc, #40]	; (d4584 <_GLOBAL__sub_I_ucam+0xb4>)
   d455c:	490a      	ldr	r1, [pc, #40]	; (d4588 <_GLOBAL__sub_I_ucam+0xb8>)
}
void logData2() {
 
  Serial.print("Writing data to SDcard \n");
  file.print(ucam.getPicture(uCamIII_TYPE_JPEG));
}
   d455e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
const int chipSelect = A5;
#define FILE_BASE_NAME "JPEG"

// Create file system object.
SdFat sd;
SdFile file;
   d4562:	f002 bdc1 	b.w	d70e8 <__aeabi_atexit>
   d4566:	bf00      	nop
   d4568:	2003df24 	.word	0x2003df24
   d456c:	2003deec 	.word	0x2003deec
   d4570:	2003df44 	.word	0x2003df44
   d4574:	000d750c 	.word	0x000d750c
   d4578:	2003def0 	.word	0x2003def0
   d457c:	2003def8 	.word	0x2003def8
   d4580:	000d7518 	.word	0x000d7518
   d4584:	2003dee8 	.word	0x2003dee8
   d4588:	000d40af 	.word	0x000d40af

000d458c <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d458c:	f001 bca8 	b.w	d5ee0 <HAL_Pin_Map>

000d4590 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d4590:	f001 bca6 	b.w	d5ee0 <HAL_Pin_Map>

000d4594 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d4594:	b510      	push	{r4, lr}
   d4596:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4598:	3024      	adds	r0, #36	; 0x24
   d459a:	f000 fe7b 	bl	d5294 <_ZN8FatCache4syncEv>
   d459e:	b128      	cbz	r0, d45ac <_ZN9FatVolume9cacheSyncEv+0x18>
   d45a0:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d45a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d45a8:	f000 be74 	b.w	d5294 <_ZN8FatCache4syncEv>
  }
   d45ac:	bd10      	pop	{r4, pc}

000d45ae <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d45ae:	1e41      	subs	r1, r0, #1
   d45b0:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d45b4:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d45b6:	0843      	lsrs	r3, r0, #1
   d45b8:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d45bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d45c0:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d45c4:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d45c6:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d45c8:	d1f5      	bne.n	d45b6 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d45ca:	4770      	bx	lr

000d45cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d45cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d45d0:	7803      	ldrb	r3, [r0, #0]
   d45d2:	2b20      	cmp	r3, #32
   d45d4:	f100 0401 	add.w	r4, r0, #1
   d45d8:	d101      	bne.n	d45de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d45da:	4620      	mov	r0, r4
   d45dc:	e7f8      	b.n	d45d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d45de:	4f70      	ldr	r7, [pc, #448]	; (d47a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d45e0:	6088      	str	r0, [r1, #8]
   d45e2:	4605      	mov	r5, r0
   d45e4:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d45e6:	462e      	mov	r6, r5
   d45e8:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d45ec:	b30b      	cbz	r3, d4632 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d45ee:	2b2f      	cmp	r3, #47	; 0x2f
   d45f0:	d101      	bne.n	d45f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d45f2:	1903      	adds	r3, r0, r4
   d45f4:	e017      	b.n	d4626 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d45f6:	2b5c      	cmp	r3, #92	; 0x5c
   d45f8:	d102      	bne.n	d4600 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d45fa:	2000      	movs	r0, #0
   d45fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4600:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d4604:	b2e4      	uxtb	r4, r4
   d4606:	2c1d      	cmp	r4, #29
   d4608:	d803      	bhi.n	d4612 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d460a:	fa27 f404 	lsr.w	r4, r7, r4
   d460e:	07e4      	lsls	r4, r4, #31
   d4610:	d4f3      	bmi.n	d45fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d4612:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d4616:	2c3c      	cmp	r4, #60	; 0x3c
   d4618:	d0ef      	beq.n	d45fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d461a:	3b20      	subs	r3, #32
   d461c:	2b5e      	cmp	r3, #94	; 0x5e
   d461e:	d9e1      	bls.n	d45e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d4620:	e7eb      	b.n	d45fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d4622:	2d2f      	cmp	r5, #47	; 0x2f
   d4624:	d105      	bne.n	d4632 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d4626:	461e      	mov	r6, r3
   d4628:	f813 5b01 	ldrb.w	r5, [r3], #1
   d462c:	2d20      	cmp	r5, #32
   d462e:	d1f8      	bne.n	d4622 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d4630:	e7f9      	b.n	d4626 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d4632:	6016      	str	r6, [r2, #0]
   d4634:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d4636:	4298      	cmp	r0, r3
   d4638:	ebc0 0803 	rsb	r8, r0, r3
   d463c:	d009      	beq.n	d4652 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d463e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d4642:	2a2e      	cmp	r2, #46	; 0x2e
   d4644:	d0f7      	beq.n	d4636 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d4646:	2a20      	cmp	r2, #32
   d4648:	d0f5      	beq.n	d4636 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d464a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d464e:	dcd4      	bgt.n	d45fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d4650:	e001      	b.n	d4656 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d4652:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d4656:	f8c1 8004 	str.w	r8, [r1, #4]
   d465a:	f101 030c 	add.w	r3, r1, #12
   d465e:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d4662:	2420      	movs	r4, #32
   d4664:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d4668:	4293      	cmp	r3, r2
   d466a:	d1fb      	bne.n	d4664 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d466c:	4603      	mov	r3, r0
   d466e:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d4670:	f813 4b01 	ldrb.w	r4, [r3], #1
   d4674:	2c2e      	cmp	r4, #46	; 0x2e
   d4676:	d0fa      	beq.n	d466e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d4678:	2c20      	cmp	r4, #32
   d467a:	d0f8      	beq.n	d466e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d467c:	fab2 f482 	clz	r4, r2
   d4680:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d4682:	f108 36ff 	add.w	r6, r8, #4294967295
   d4686:	1c73      	adds	r3, r6, #1
   d4688:	d107      	bne.n	d469a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d468a:	2700      	movs	r7, #0
   d468c:	f04f 0e07 	mov.w	lr, #7
   d4690:	463d      	mov	r5, r7
   d4692:	46ba      	mov	sl, r7
   d4694:	f04f 0908 	mov.w	r9, #8
   d4698:	e009      	b.n	d46ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d469a:	5d83      	ldrb	r3, [r0, r6]
   d469c:	2b2e      	cmp	r3, #46	; 0x2e
   d469e:	d0f4      	beq.n	d468a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d46a0:	3e01      	subs	r6, #1
   d46a2:	e7f0      	b.n	d4686 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d46a4:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d46a6:	2b20      	cmp	r3, #32
   d46a8:	d104      	bne.n	d46b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d46aa:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d46ac:	3201      	adds	r2, #1
   d46ae:	4542      	cmp	r2, r8
   d46b0:	dbf8      	blt.n	d46a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d46b2:	e04b      	b.n	d474c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d46b4:	2b2e      	cmp	r3, #46	; 0x2e
   d46b6:	d102      	bne.n	d46be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d46b8:	42b2      	cmp	r2, r6
   d46ba:	d1f6      	bne.n	d46aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d46bc:	e003      	b.n	d46c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d46be:	2b22      	cmp	r3, #34	; 0x22
   d46c0:	d017      	beq.n	d46f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d46c2:	2b7c      	cmp	r3, #124	; 0x7c
   d46c4:	d015      	beq.n	d46f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d46c6:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d46ca:	f1bc 0f05 	cmp.w	ip, #5
   d46ce:	d801      	bhi.n	d46d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d46d0:	2b2d      	cmp	r3, #45	; 0x2d
   d46d2:	d10e      	bne.n	d46f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d46d4:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d46d8:	f1bc 0f05 	cmp.w	ip, #5
   d46dc:	d909      	bls.n	d46f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d46de:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d46e2:	f1bc 0f02 	cmp.w	ip, #2
   d46e6:	d904      	bls.n	d46f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d46e8:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d46ec:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d46f0:	d902      	bls.n	d46f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d46f2:	42b2      	cmp	r2, r6
   d46f4:	d10e      	bne.n	d4714 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d46f6:	e049      	b.n	d478c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d46f8:	42b2      	cmp	r2, r6
   d46fa:	d047      	beq.n	d478c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d46fc:	4575      	cmp	r5, lr
   d46fe:	d821      	bhi.n	d4744 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d4700:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d4704:	f1bc 0f19 	cmp.w	ip, #25
   d4708:	d808      	bhi.n	d471c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d470a:	3b20      	subs	r3, #32
   d470c:	b2db      	uxtb	r3, r3
        lc |= bit;
   d470e:	ea49 0707 	orr.w	r7, r9, r7
   d4712:	e00a      	b.n	d472a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d4714:	4575      	cmp	r5, lr
   d4716:	d815      	bhi.n	d4744 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d4718:	2400      	movs	r4, #0
      c = '_';
   d471a:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d471c:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d4720:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d4724:	bf98      	it	ls
   d4726:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d472a:	f105 0c01 	add.w	ip, r5, #1
   d472e:	fa5f fc8c 	uxtb.w	ip, ip
   d4732:	440d      	add	r5, r1
      if (i < 7) {
   d4734:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d4738:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d473a:	d801      	bhi.n	d4740 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d473c:	f881 c00c 	strb.w	ip, [r1, #12]
   d4740:	4665      	mov	r5, ip
   d4742:	e7b3      	b.n	d46ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d4744:	f1be 0f0a 	cmp.w	lr, #10
   d4748:	d117      	bne.n	d477a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d474a:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d474c:	7b4b      	ldrb	r3, [r1, #13]
   d474e:	2b20      	cmp	r3, #32
   d4750:	f43f af53 	beq.w	d45fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d4754:	b13c      	cbz	r4, d4766 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d4756:	ea1a 0f07 	tst.w	sl, r7
   d475a:	bf18      	it	ne
   d475c:	2702      	movne	r7, #2
   d475e:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d4760:	2001      	movs	r0, #1
   d4762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d4766:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d4768:	2001      	movs	r0, #1
   d476a:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d476c:	4419      	add	r1, r3
   d476e:	237e      	movs	r3, #126	; 0x7e
   d4770:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d4772:	2331      	movs	r3, #49	; 0x31
   d4774:	738b      	strb	r3, [r1, #14]
   d4776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d477a:	42b2      	cmp	r2, r6
   d477c:	dce5      	bgt.n	d474a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d477e:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d4780:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d4784:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d4786:	f04f 0910 	mov.w	r9, #16
   d478a:	e78e      	b.n	d46aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d478c:	f1be 0f0a 	cmp.w	lr, #10
   d4790:	d0db      	beq.n	d474a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d4792:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d4794:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d4798:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d479a:	f04f 0910 	mov.w	r9, #16
   d479e:	e785      	b.n	d46ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d47a0:	31000101 	.word	0x31000101

000d47a4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d47a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d47a8:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d47ac:	4606      	mov	r6, r0
   d47ae:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d47b0:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d47b2:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d47b4:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d47b8:	6869      	ldr	r1, [r5, #4]
   d47ba:	68aa      	ldr	r2, [r5, #8]
   d47bc:	1863      	adds	r3, r4, r1
   d47be:	b29b      	uxth	r3, r3
   d47c0:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d47c2:	4291      	cmp	r1, r2
   d47c4:	d006      	beq.n	d47d4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d47c6:	f812 0b01 	ldrb.w	r0, [r2], #1
   d47ca:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d47ce:	4043      	eors	r3, r0
   d47d0:	b29b      	uxth	r3, r3
   d47d2:	e7f6      	b.n	d47c2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d47d4:	f1b9 0f03 	cmp.w	r9, #3
   d47d8:	bf28      	it	cs
   d47da:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d47de:	f109 0204 	add.w	r2, r9, #4
   d47e2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d47e4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d47e8:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d47ea:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d47ec:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d47ee:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d47f0:	bf94      	ite	ls
   d47f2:	3130      	addls	r1, #48	; 0x30
   d47f4:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d47f6:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d47f8:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d47fa:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d47fe:	d3f1      	bcc.n	d47e4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d4800:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d4804:	2100      	movs	r1, #0
   d4806:	735f      	strb	r7, [r3, #13]
   d4808:	4630      	mov	r0, r6
   d480a:	f000 fb1e 	bl	d4e4a <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d480e:	2101      	movs	r1, #1
   d4810:	4630      	mov	r0, r6
   d4812:	f000 fafd 	bl	d4e10 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d4816:	4601      	mov	r1, r0
   d4818:	b928      	cbnz	r0, d4826 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d481a:	7870      	ldrb	r0, [r6, #1]
   d481c:	fab0 f080 	clz	r0, r0
   d4820:	0940      	lsrs	r0, r0, #5
   d4822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d4826:	7803      	ldrb	r3, [r0, #0]
   d4828:	b14b      	cbz	r3, d483e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d482a:	7ac3      	ldrb	r3, [r0, #11]
   d482c:	071b      	lsls	r3, r3, #28
   d482e:	d4ee      	bmi.n	d480e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d4830:	220b      	movs	r2, #11
   d4832:	4640      	mov	r0, r8
   d4834:	f002 fdd0 	bl	d73d8 <memcmp>
   d4838:	2800      	cmp	r0, #0
   d483a:	d1e8      	bne.n	d480e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d483c:	e002      	b.n	d4844 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d483e:	2001      	movs	r0, #1
   d4840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4844:	3401      	adds	r4, #1
   d4846:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d4848:	2c64      	cmp	r4, #100	; 0x64
   d484a:	d1b5      	bne.n	d47b8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d484c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4850 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4854:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4856:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4858:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d485a:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d485e:	9005      	str	r0, [sp, #20]
   d4860:	460e      	mov	r6, r1
   d4862:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4864:	d101      	bne.n	d486a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d4866:	2000      	movs	r0, #0
   d4868:	e1a0      	b.n	d4bac <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d486a:	9b05      	ldr	r3, [sp, #20]
   d486c:	781b      	ldrb	r3, [r3, #0]
   d486e:	2b00      	cmp	r3, #0
   d4870:	d1f9      	bne.n	d4866 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d4872:	6853      	ldr	r3, [r2, #4]
   d4874:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d4876:	7813      	ldrb	r3, [r2, #0]
   d4878:	079b      	lsls	r3, r3, #30
   d487a:	f000 818d 	beq.w	d4b98 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d487e:	9b02      	ldr	r3, [sp, #8]
   d4880:	270d      	movs	r7, #13
   d4882:	330c      	adds	r3, #12
   d4884:	fbb3 f7f7 	udiv	r7, r3, r7
   d4888:	3701      	adds	r7, #1
   d488a:	b2ff      	uxtb	r7, r7
   d488c:	2100      	movs	r1, #0
   d488e:	4630      	mov	r0, r6
   d4890:	f000 fadb 	bl	d4e4a <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d4894:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d4898:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d489c:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d48a0:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d48a2:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d48a4:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d48a6:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d48aa:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d48ac:	6972      	ldr	r2, [r6, #20]
   d48ae:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d48b0:	2101      	movs	r1, #1
   d48b2:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d48b4:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d48b8:	f000 faaa 	bl	d4e10 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d48bc:	9b07      	ldr	r3, [sp, #28]
   d48be:	b920      	cbnz	r0, d48ca <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d48c0:	7873      	ldrb	r3, [r6, #1]
   d48c2:	2b00      	cmp	r3, #0
   d48c4:	f000 8090 	beq.w	d49e8 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d48c8:	e7cd      	b.n	d4866 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d48ca:	7802      	ldrb	r2, [r0, #0]
   d48cc:	2ae5      	cmp	r2, #229	; 0xe5
   d48ce:	d000      	beq.n	d48d2 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d48d0:	b942      	cbnz	r2, d48e4 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d48d2:	2c00      	cmp	r4, #0
   d48d4:	bf08      	it	eq
   d48d6:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d48d8:	42bc      	cmp	r4, r7
        freeFound++;
   d48da:	bf3c      	itt	cc
   d48dc:	3401      	addcc	r4, #1
   d48de:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d48e0:	b922      	cbnz	r2, d48ec <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d48e2:	e081      	b.n	d49e8 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d48e4:	42bc      	cmp	r4, r7
   d48e6:	bf38      	it	cc
   d48e8:	2400      	movcc	r4, #0
   d48ea:	e003      	b.n	d48f4 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d48ec:	2ae5      	cmp	r2, #229	; 0xe5
   d48ee:	d101      	bne.n	d48f4 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d48f0:	2500      	movs	r5, #0
   d48f2:	e7db      	b.n	d48ac <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d48f4:	2a2e      	cmp	r2, #46	; 0x2e
   d48f6:	d0fb      	beq.n	d48f0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d48f8:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d48fa:	290f      	cmp	r1, #15
   d48fc:	d152      	bne.n	d49a4 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d48fe:	b93d      	cbnz	r5, d4910 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d4900:	0651      	lsls	r1, r2, #25
   d4902:	d5d3      	bpl.n	d48ac <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d4904:	7b43      	ldrb	r3, [r0, #13]
   d4906:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d4908:	f002 051f 	and.w	r5, r2, #31
   d490c:	462b      	mov	r3, r5
   d490e:	e007      	b.n	d4920 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d4910:	3b01      	subs	r3, #1
   d4912:	b2db      	uxtb	r3, r3
   d4914:	429a      	cmp	r2, r3
   d4916:	d1eb      	bne.n	d48f0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4918:	7b42      	ldrb	r2, [r0, #13]
   d491a:	9903      	ldr	r1, [sp, #12]
   d491c:	4291      	cmp	r1, r2
   d491e:	d1e7      	bne.n	d48f0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d4920:	1e5a      	subs	r2, r3, #1
   d4922:	f04f 0c0d 	mov.w	ip, #13
   d4926:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d492a:	9a02      	ldr	r2, [sp, #8]
   d492c:	4562      	cmp	r2, ip
   d492e:	d9df      	bls.n	d48f0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4930:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d4934:	f1be 0f04 	cmp.w	lr, #4
   d4938:	fa5f f28e 	uxtb.w	r2, lr
   d493c:	d804      	bhi.n	d4948 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d493e:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d4942:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d4946:	e00c      	b.n	d4962 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d4948:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d494a:	bf95      	itete	ls
   d494c:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d4950:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d4954:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d4958:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d495c:	bf94      	ite	ls
   d495e:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d4960:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d4962:	9902      	ldr	r1, [sp, #8]
   d4964:	4561      	cmp	r1, ip
   d4966:	d103      	bne.n	d4970 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d4968:	2a00      	cmp	r2, #0
   d496a:	bf18      	it	ne
   d496c:	2500      	movne	r5, #0
   d496e:	e79d      	b.n	d48ac <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4970:	2aff      	cmp	r2, #255	; 0xff
   d4972:	d8bd      	bhi.n	d48f0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4974:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d4976:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d497a:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d497c:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d4980:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d4984:	bf98      	it	ls
   d4986:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4988:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d498c:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d4990:	bf98      	it	ls
   d4992:	b2d2      	uxtbls	r2, r2
   d4994:	f1bc 0f19 	cmp.w	ip, #25
   d4998:	bf9c      	itt	ls
   d499a:	3120      	addls	r1, #32
   d499c:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d499e:	4291      	cmp	r1, r2
   d49a0:	d1a6      	bne.n	d48f0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d49a2:	e0fb      	b.n	d4b9c <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d49a4:	0709      	lsls	r1, r1, #28
   d49a6:	d4a3      	bmi.n	d48f0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d49a8:	b14d      	cbz	r5, d49be <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d49aa:	2b01      	cmp	r3, #1
   d49ac:	f47f af5b 	bne.w	d4866 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d49b0:	f7ff fdfd 	bl	d45ae <_ZN7FatFile11lfnChecksumEPh>
   d49b4:	9b03      	ldr	r3, [sp, #12]
   d49b6:	4283      	cmp	r3, r0
   d49b8:	f47f af55 	bne.w	d4866 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d49bc:	e00f      	b.n	d49de <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d49be:	220b      	movs	r2, #11
   d49c0:	9906      	ldr	r1, [sp, #24]
   d49c2:	9307      	str	r3, [sp, #28]
   d49c4:	f002 fd08 	bl	d73d8 <memcmp>
   d49c8:	9b07      	ldr	r3, [sp, #28]
   d49ca:	2800      	cmp	r0, #0
   d49cc:	f47f af6e 	bne.w	d48ac <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d49d0:	f899 2000 	ldrb.w	r2, [r9]
   d49d4:	07d2      	lsls	r2, r2, #31
   d49d6:	d502      	bpl.n	d49de <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d49d8:	2201      	movs	r2, #1
   d49da:	9204      	str	r2, [sp, #16]
   d49dc:	e766      	b.n	d48ac <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d49de:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d49e2:	f000 80d1 	beq.w	d4b88 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d49e6:	e73e      	b.n	d4866 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d49e8:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d49ec:	f43f af3b 	beq.w	d4866 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d49f0:	f00b 0303 	and.w	r3, fp, #3
   d49f4:	3b01      	subs	r3, #1
   d49f6:	2b01      	cmp	r3, #1
   d49f8:	f63f af35 	bhi.w	d4866 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d49fc:	2c00      	cmp	r4, #0
   d49fe:	bf08      	it	eq
   d4a00:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d4a02:	42bc      	cmp	r4, r7
   d4a04:	d302      	bcc.n	d4a0c <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d4a06:	9b04      	ldr	r3, [sp, #16]
   d4a08:	b9cb      	cbnz	r3, d4a3e <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d4a0a:	e01f      	b.n	d4a4c <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d4a0c:	2100      	movs	r1, #0
   d4a0e:	4630      	mov	r0, r6
   d4a10:	f000 f9fe 	bl	d4e10 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d4a14:	b910      	cbnz	r0, d4a1c <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d4a16:	7873      	ldrb	r3, [r6, #1]
   d4a18:	b15b      	cbz	r3, d4a32 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d4a1a:	e724      	b.n	d4866 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d4a1c:	3401      	adds	r4, #1
   d4a1e:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d4a20:	e7ef      	b.n	d4a02 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d4a22:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d4a24:	791b      	ldrb	r3, [r3, #4]
   d4a26:	2b01      	cmp	r3, #1
   d4a28:	d8ed      	bhi.n	d4a06 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d4a2a:	3410      	adds	r4, #16
   d4a2c:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d4a2e:	42a7      	cmp	r7, r4
   d4a30:	d9e9      	bls.n	d4a06 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d4a32:	4630      	mov	r0, r6
   d4a34:	f000 f8d2 	bl	d4bdc <_ZN7FatFile13addDirClusterEv>
   d4a38:	2800      	cmp	r0, #0
   d4a3a:	d1f2      	bne.n	d4a22 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d4a3c:	e713      	b.n	d4866 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d4a3e:	4649      	mov	r1, r9
   d4a40:	4630      	mov	r0, r6
   d4a42:	f7ff feaf 	bl	d47a4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d4a46:	2800      	cmp	r0, #0
   d4a48:	f43f af0d 	beq.w	d4866 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d4a4c:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d4a50:	4630      	mov	r0, r6
   d4a52:	f000 f9fa 	bl	d4e4a <_ZN7FatFile7seekSetEm>
   d4a56:	2800      	cmp	r0, #0
   d4a58:	f43f af05 	beq.w	d4866 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d4a5c:	1e7d      	subs	r5, r7, #1
   d4a5e:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d4a60:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d4a62:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d4a66:	f04f 080f 	mov.w	r8, #15
   d4a6a:	e041      	b.n	d4af0 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d4a6c:	2100      	movs	r1, #0
   d4a6e:	4630      	mov	r0, r6
   d4a70:	f000 f9ce 	bl	d4e10 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d4a74:	4607      	mov	r7, r0
   d4a76:	2800      	cmp	r0, #0
   d4a78:	f43f aef5 	beq.w	d4866 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d4a7c:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d4a7e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d4a82:	42ac      	cmp	r4, r5
   d4a84:	f043 0301 	orr.w	r3, r3, #1
   d4a88:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d4a8c:	bf0c      	ite	eq
   d4a8e:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d4a92:	4622      	movne	r2, r4
   d4a94:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d4a96:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d4a9a:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d4a9e:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d4aa2:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d4aa4:	f7ff fd83 	bl	d45ae <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d4aa8:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d4aaa:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d4aac:	f887 a01a 	strb.w	sl, [r7, #26]
   d4ab0:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d4ab4:	f002 021f 	and.w	r2, r2, #31
   d4ab8:	230d      	movs	r3, #13
   d4aba:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d4abc:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d4ac0:	435a      	muls	r2, r3
   d4ac2:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d4ac4:	9902      	ldr	r1, [sp, #8]
   d4ac6:	4291      	cmp	r1, r2
   d4ac8:	d915      	bls.n	d4af6 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d4aca:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d4ace:	2b04      	cmp	r3, #4
   d4ad0:	fa5f fc83 	uxtb.w	ip, r3
   d4ad4:	f103 0001 	add.w	r0, r3, #1
   d4ad8:	d813      	bhi.n	d4b02 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d4ada:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d4ade:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d4ae2:	280d      	cmp	r0, #13
   d4ae4:	f102 0201 	add.w	r2, r2, #1
   d4ae8:	4603      	mov	r3, r0
   d4aea:	d1eb      	bne.n	d4ac4 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d4aec:	3c01      	subs	r4, #1
   d4aee:	b2e4      	uxtb	r4, r4
   d4af0:	2c00      	cmp	r4, #0
   d4af2:	d1bb      	bne.n	d4a6c <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d4af4:	e00e      	b.n	d4b14 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d4af6:	bf14      	ite	ne
   d4af8:	f04f 31ff 	movne.w	r1, #4294967295
   d4afc:	2100      	moveq	r1, #0
   d4afe:	b289      	uxth	r1, r1
   d4b00:	e7e5      	b.n	d4ace <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d4b02:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d4b06:	bf94      	ite	ls
   d4b08:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d4b0c:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d4b10:	8099      	strh	r1, [r3, #4]
   d4b12:	e7e6      	b.n	d4ae2 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d4b14:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d4b16:	4621      	mov	r1, r4
   d4b18:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d4b1a:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d4b1e:	f000 f977 	bl	d4e10 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d4b22:	4607      	mov	r7, r0
   d4b24:	2800      	cmp	r0, #0
   d4b26:	f43f ae9e 	beq.w	d4866 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d4b2a:	2220      	movs	r2, #32
   d4b2c:	4621      	mov	r1, r4
   d4b2e:	f002 fc6d 	bl	d740c <memset>
  memcpy(dir->name, fname->sfn, 11);
   d4b32:	464b      	mov	r3, r9
   d4b34:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d4b38:	603a      	str	r2, [r7, #0]
   d4b3a:	685a      	ldr	r2, [r3, #4]
   d4b3c:	607a      	str	r2, [r7, #4]
   d4b3e:	891a      	ldrh	r2, [r3, #8]
   d4b40:	813a      	strh	r2, [r7, #8]
   d4b42:	7a9b      	ldrb	r3, [r3, #10]
   d4b44:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d4b46:	f899 3000 	ldrb.w	r3, [r9]
   d4b4a:	f003 0318 	and.w	r3, r3, #24
   d4b4e:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d4b50:	4b18      	ldr	r3, [pc, #96]	; (d4bb4 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d4b52:	681b      	ldr	r3, [r3, #0]
   d4b54:	b12b      	cbz	r3, d4b62 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d4b56:	f107 010e 	add.w	r1, r7, #14
   d4b5a:	f107 0010 	add.w	r0, r7, #16
   d4b5e:	4798      	blx	r3
   d4b60:	e006      	b.n	d4b70 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d4b62:	2321      	movs	r3, #33	; 0x21
   d4b64:	743b      	strb	r3, [r7, #16]
   d4b66:	2328      	movs	r3, #40	; 0x28
   d4b68:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d4b6a:	2308      	movs	r3, #8
   d4b6c:	73bc      	strb	r4, [r7, #14]
   d4b6e:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d4b70:	8a3b      	ldrh	r3, [r7, #16]
   d4b72:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d4b74:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d4b76:	89fb      	ldrh	r3, [r7, #14]
   d4b78:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d4b7a:	68b2      	ldr	r2, [r6, #8]
   d4b7c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d4b80:	f043 0301 	orr.w	r3, r3, #1
   d4b84:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d4b88:	9500      	str	r5, [sp, #0]
   d4b8a:	465b      	mov	r3, fp
   d4b8c:	4652      	mov	r2, sl
   d4b8e:	4631      	mov	r1, r6
   d4b90:	9805      	ldr	r0, [sp, #20]
   d4b92:	f000 f9a3 	bl	d4edc <_ZN7FatFile15openCachedEntryEPS_tih>
   d4b96:	e009      	b.n	d4bac <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d4b98:	2701      	movs	r7, #1
   d4b9a:	e677      	b.n	d488c <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d4b9c:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d4ba0:	f1be 0f0d 	cmp.w	lr, #13
   d4ba4:	f43f ae82 	beq.w	d48ac <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4ba8:	46d4      	mov	ip, sl
   d4baa:	e6c3      	b.n	d4934 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d4bac:	b009      	add	sp, #36	; 0x24
   d4bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4bb2:	bf00      	nop
   d4bb4:	2003e3d0 	.word	0x2003e3d0

000d4bb8 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d4bb8:	f001 b992 	b.w	d5ee0 <HAL_Pin_Map>

000d4bbc <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d4bbc:	f001 b990 	b.w	d5ee0 <HAL_Pin_Map>

000d4bc0 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d4bc0:	f001 b98e 	b.w	d5ee0 <HAL_Pin_Map>

000d4bc4 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d4bc4:	f001 b98c 	b.w	d5ee0 <HAL_Pin_Map>

000d4bc8 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d4bc8:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d4bca:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d4bcc:	f043 0304 	orr.w	r3, r3, #4
   d4bd0:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d4bd2:	f100 0210 	add.w	r2, r0, #16
   d4bd6:	6880      	ldr	r0, [r0, #8]
   d4bd8:	f000 bc12 	b.w	d5400 <_ZN9FatVolume15allocateClusterEmPm>

000d4bdc <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d4bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d4be0:	7803      	ldrb	r3, [r0, #0]
   d4be2:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d4be6:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d4be8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4bec:	b10b      	cbz	r3, d4bf2 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d4bee:	2600      	movs	r6, #0
   d4bf0:	e02e      	b.n	d4c50 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d4bf2:	6942      	ldr	r2, [r0, #20]
   d4bf4:	4b18      	ldr	r3, [pc, #96]	; (d4c58 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d4bf6:	429a      	cmp	r2, r3
   d4bf8:	d8f9      	bhi.n	d4bee <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d4bfa:	f7ff ffe5 	bl	d4bc8 <_ZN7FatFile10addClusterEv>
   d4bfe:	4606      	mov	r6, r0
   d4c00:	2800      	cmp	r0, #0
   d4c02:	d0f4      	beq.n	d4bee <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d4c04:	6921      	ldr	r1, [r4, #16]
   d4c06:	68a0      	ldr	r0, [r4, #8]
   d4c08:	f000 fb8f 	bl	d532a <_ZNK9FatVolume17clusterFirstBlockEm>
   d4c0c:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4c0e:	68a0      	ldr	r0, [r4, #8]
   d4c10:	2205      	movs	r2, #5
   d4c12:	4639      	mov	r1, r7
   d4c14:	3024      	adds	r0, #36	; 0x24
   d4c16:	f000 fb64 	bl	d52e2 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d4c1a:	4680      	mov	r8, r0
   d4c1c:	2800      	cmp	r0, #0
   d4c1e:	d0e6      	beq.n	d4bee <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d4c20:	4629      	mov	r1, r5
   d4c22:	f44f 7200 	mov.w	r2, #512	; 0x200
   d4c26:	f002 fbf1 	bl	d740c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d4c2a:	2501      	movs	r5, #1
   d4c2c:	68a3      	ldr	r3, [r4, #8]
   d4c2e:	791a      	ldrb	r2, [r3, #4]
   d4c30:	42aa      	cmp	r2, r5
   d4c32:	d909      	bls.n	d4c48 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d4c34:	4642      	mov	r2, r8
   d4c36:	19e9      	adds	r1, r5, r7
   d4c38:	6818      	ldr	r0, [r3, #0]
   d4c3a:	f000 fecf 	bl	d59dc <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d4c3e:	2800      	cmp	r0, #0
   d4c40:	d0d5      	beq.n	d4bee <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d4c42:	3501      	adds	r5, #1
   d4c44:	b2ed      	uxtb	r5, r5
   d4c46:	e7f1      	b.n	d4c2c <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d4c48:	6963      	ldr	r3, [r4, #20]
   d4c4a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d4c4e:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d4c50:	4630      	mov	r0, r6
   d4c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4c56:	bf00      	nop
   d4c58:	001ffdff 	.word	0x001ffdff

000d4c5c <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d4c5c:	b510      	push	{r4, lr}
   d4c5e:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4c60:	6880      	ldr	r0, [r0, #8]
   d4c62:	460a      	mov	r2, r1
   d4c64:	3024      	adds	r0, #36	; 0x24
   d4c66:	69a1      	ldr	r1, [r4, #24]
   d4c68:	f000 fb3b 	bl	d52e2 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d4c6c:	b120      	cbz	r0, d4c78 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d4c6e:	88a3      	ldrh	r3, [r4, #4]
   d4c70:	f003 030f 	and.w	r3, r3, #15
   d4c74:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d4c78:	bd10      	pop	{r4, pc}

000d4c7a <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d4c7a:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d4c7c:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d4c7e:	4605      	mov	r5, r0
   d4c80:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d4c82:	b984      	cbnz	r4, d4ca6 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d4c84:	2224      	movs	r2, #36	; 0x24
   d4c86:	4621      	mov	r1, r4
   d4c88:	f002 fbc0 	bl	d740c <memset>

  m_vol = vol;
   d4c8c:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d4c8e:	79f3      	ldrb	r3, [r6, #7]
   d4c90:	2b10      	cmp	r3, #16
   d4c92:	d003      	beq.n	d4c9c <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d4c94:	2b20      	cmp	r3, #32
   d4c96:	d106      	bne.n	d4ca6 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d4c98:	2340      	movs	r3, #64	; 0x40
   d4c9a:	e000      	b.n	d4c9e <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d4c9c:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d4c9e:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d4ca0:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d4ca2:	70a8      	strb	r0, [r5, #2]
   d4ca4:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d4ca6:	2000      	movs	r0, #0
   d4ca8:	bd70      	pop	{r4, r5, r6, pc}

000d4caa <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d4caa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4cae:	7803      	ldrb	r3, [r0, #0]
   d4cb0:	4604      	mov	r4, r0
   d4cb2:	4689      	mov	r9, r1
   d4cb4:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d4cb6:	b14b      	cbz	r3, d4ccc <_ZN7FatFile4readEPvj+0x22>
   d4cb8:	7882      	ldrb	r2, [r0, #2]
   d4cba:	07d1      	lsls	r1, r2, #31
   d4cbc:	d506      	bpl.n	d4ccc <_ZN7FatFile4readEPvj+0x22>
   d4cbe:	e00c      	b.n	d4cda <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4cc0:	465a      	mov	r2, fp
   d4cc2:	6921      	ldr	r1, [r4, #16]
   d4cc4:	f000 fb37 	bl	d5336 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d4cc8:	2800      	cmp	r0, #0
   d4cca:	da3d      	bge.n	d4d48 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d4ccc:	7863      	ldrb	r3, [r4, #1]
   d4cce:	f043 0302 	orr.w	r3, r3, #2
   d4cd2:	7063      	strb	r3, [r4, #1]
  return -1;
   d4cd4:	f04f 30ff 	mov.w	r0, #4294967295
   d4cd8:	e097      	b.n	d4e0a <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d4cda:	071a      	lsls	r2, r3, #28
   d4cdc:	d503      	bpl.n	d4ce6 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d4cde:	69e3      	ldr	r3, [r4, #28]
   d4ce0:	6962      	ldr	r2, [r4, #20]
   d4ce2:	1a9b      	subs	r3, r3, r2
   d4ce4:	e007      	b.n	d4cf6 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d4ce6:	069a      	lsls	r2, r3, #26
   d4ce8:	d508      	bpl.n	d4cfc <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d4cea:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d4cec:	891a      	ldrh	r2, [r3, #8]
   d4cee:	6963      	ldr	r3, [r4, #20]
   d4cf0:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d4cf4:	b29b      	uxth	r3, r3
   d4cf6:	429d      	cmp	r5, r3
   d4cf8:	bf28      	it	cs
   d4cfa:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d4cfc:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d4cfe:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4d02:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d4d06:	2e00      	cmp	r6, #0
   d4d08:	d035      	beq.n	d4d76 <_ZN7FatFile4readEPvj+0xcc>
   d4d0a:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d4d0c:	6963      	ldr	r3, [r4, #20]
   d4d0e:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d4d10:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d4d14:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d4d18:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d4d1c:	d002      	beq.n	d4d24 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d4d1e:	6a03      	ldr	r3, [r0, #32]
   d4d20:	4419      	add	r1, r3
   d4d22:	e01d      	b.n	d4d60 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d4d24:	f890 8005 	ldrb.w	r8, [r0, #5]
   d4d28:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d4d2c:	f1ba 0f00 	cmp.w	sl, #0
   d4d30:	d110      	bne.n	d4d54 <_ZN7FatFile4readEPvj+0xaa>
   d4d32:	f1b8 0f00 	cmp.w	r8, #0
   d4d36:	d10d      	bne.n	d4d54 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d4d38:	2b00      	cmp	r3, #0
   d4d3a:	d1c1      	bne.n	d4cc0 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d4d3c:	0653      	lsls	r3, r2, #25
   d4d3e:	bf4c      	ite	mi
   d4d40:	6a03      	ldrmi	r3, [r0, #32]
   d4d42:	6a23      	ldrpl	r3, [r4, #32]
   d4d44:	6123      	str	r3, [r4, #16]
   d4d46:	e005      	b.n	d4d54 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d4d48:	d104      	bne.n	d4d54 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d4d4a:	7823      	ldrb	r3, [r4, #0]
   d4d4c:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4d50:	d111      	bne.n	d4d76 <_ZN7FatFile4readEPvj+0xcc>
   d4d52:	e7bb      	b.n	d4ccc <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4d54:	6921      	ldr	r1, [r4, #16]
   d4d56:	68a0      	ldr	r0, [r4, #8]
   d4d58:	f000 fae7 	bl	d532a <_ZNK9FatVolume17clusterFirstBlockEm>
   d4d5c:	eb08 0100 	add.w	r1, r8, r0
   d4d60:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d4d62:	f1ba 0f00 	cmp.w	sl, #0
   d4d66:	d135      	bne.n	d4dd4 <_ZN7FatFile4readEPvj+0x12a>
   d4d68:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d4d6c:	d332      	bcc.n	d4dd4 <_ZN7FatFile4readEPvj+0x12a>
   d4d6e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4d70:	4299      	cmp	r1, r3
   d4d72:	d102      	bne.n	d4d7a <_ZN7FatFile4readEPvj+0xd0>
   d4d74:	e02e      	b.n	d4dd4 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d4d76:	1ba8      	subs	r0, r5, r6
   d4d78:	e047      	b.n	d4e0a <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d4d7a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d4d7e:	d31b      	bcc.n	d4db8 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d4d80:	7822      	ldrb	r2, [r4, #0]
   d4d82:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d4d84:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d4d88:	d406      	bmi.n	d4d98 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d4d8a:	7902      	ldrb	r2, [r0, #4]
   d4d8c:	ebc8 0202 	rsb	r2, r8, r2
   d4d90:	b2d2      	uxtb	r2, r2
   d4d92:	4592      	cmp	sl, r2
   d4d94:	bf28      	it	cs
   d4d96:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4d98:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d4d9a:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4d9e:	d207      	bcs.n	d4db0 <_ZN7FatFile4readEPvj+0x106>
   d4da0:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d4da2:	4653      	mov	r3, sl
   d4da4:	464a      	mov	r2, r9
   d4da6:	6800      	ldr	r0, [r0, #0]
   d4da8:	f000 fdd6 	bl	d5958 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d4dac:	b960      	cbnz	r0, d4dc8 <_ZN7FatFile4readEPvj+0x11e>
   d4dae:	e78d      	b.n	d4ccc <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4db0:	4453      	add	r3, sl
   d4db2:	4299      	cmp	r1, r3
   d4db4:	d321      	bcc.n	d4dfa <_ZN7FatFile4readEPvj+0x150>
   d4db6:	e7f3      	b.n	d4da0 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d4db8:	464a      	mov	r2, r9
   d4dba:	6800      	ldr	r0, [r0, #0]
   d4dbc:	f000 fd84 	bl	d58c8 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d4dc0:	2800      	cmp	r0, #0
   d4dc2:	d083      	beq.n	d4ccc <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d4dc4:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d4dc8:	6963      	ldr	r3, [r4, #20]
   d4dca:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d4dcc:	44b9      	add	r9, r7
    m_curPosition += n;
   d4dce:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d4dd0:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d4dd2:	e798      	b.n	d4d06 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4dd4:	2200      	movs	r2, #0
   d4dd6:	3024      	adds	r0, #36	; 0x24
   d4dd8:	f000 fa83 	bl	d52e2 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d4ddc:	2800      	cmp	r0, #0
   d4dde:	f43f af75 	beq.w	d4ccc <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d4de2:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d4de6:	42b7      	cmp	r7, r6
   d4de8:	bf28      	it	cs
   d4dea:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d4dec:	eb00 010a 	add.w	r1, r0, sl
   d4df0:	463a      	mov	r2, r7
   d4df2:	4648      	mov	r0, r9
   d4df4:	f002 faff 	bl	d73f6 <memcpy>
   d4df8:	e7e6      	b.n	d4dc8 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d4dfa:	3024      	adds	r0, #36	; 0x24
   d4dfc:	9101      	str	r1, [sp, #4]
   d4dfe:	f000 fa49 	bl	d5294 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d4e02:	9901      	ldr	r1, [sp, #4]
   d4e04:	2800      	cmp	r0, #0
   d4e06:	d1cb      	bne.n	d4da0 <_ZN7FatFile4readEPvj+0xf6>
   d4e08:	e760      	b.n	d4ccc <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d4e0a:	b003      	add	sp, #12
   d4e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4e10 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d4e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d4e12:	6943      	ldr	r3, [r0, #20]
   d4e14:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d4e18:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d4e1a:	b105      	cbz	r5, d4e1e <_ZN7FatFile12readDirCacheEb+0xe>
   d4e1c:	b969      	cbnz	r1, d4e3a <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d4e1e:	2201      	movs	r2, #1
   d4e20:	f10d 0107 	add.w	r1, sp, #7
   d4e24:	4620      	mov	r0, r4
   d4e26:	f7ff ff40 	bl	d4caa <_ZN7FatFile4readEPvj>
   d4e2a:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d4e2c:	2801      	cmp	r0, #1
   d4e2e:	d001      	beq.n	d4e34 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d4e30:	2000      	movs	r0, #0
   d4e32:	e008      	b.n	d4e46 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d4e34:	6963      	ldr	r3, [r4, #20]
   d4e36:	331f      	adds	r3, #31
   d4e38:	e000      	b.n	d4e3c <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d4e3a:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d4e3c:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d4e3e:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d4e40:	3030      	adds	r0, #48	; 0x30
   d4e42:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d4e46:	b003      	add	sp, #12
   d4e48:	bd30      	pop	{r4, r5, pc}

000d4e4a <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d4e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4e4e:	460e      	mov	r6, r1
   d4e50:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d4e52:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d4e54:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d4e56:	2900      	cmp	r1, #0
   d4e58:	d039      	beq.n	d4ece <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d4e5a:	6945      	ldr	r5, [r0, #20]
   d4e5c:	42b5      	cmp	r5, r6
   d4e5e:	d03a      	beq.n	d4ed6 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d4e60:	b90e      	cbnz	r6, d4e66 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d4e62:	6106      	str	r6, [r0, #16]
    goto done;
   d4e64:	e031      	b.n	d4eca <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d4e66:	070b      	lsls	r3, r1, #28
   d4e68:	d503      	bpl.n	d4e72 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d4e6a:	69c3      	ldr	r3, [r0, #28]
   d4e6c:	429e      	cmp	r6, r3
   d4e6e:	d82e      	bhi.n	d4ece <_ZN7FatFile7seekSetEm+0x84>
   d4e70:	e007      	b.n	d4e82 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d4e72:	0688      	lsls	r0, r1, #26
   d4e74:	d505      	bpl.n	d4e82 <_ZN7FatFile7seekSetEm+0x38>
   d4e76:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d4e78:	891b      	ldrh	r3, [r3, #8]
   d4e7a:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d4e7e:	d826      	bhi.n	d4ece <_ZN7FatFile7seekSetEm+0x84>
   d4e80:	e023      	b.n	d4eca <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4e82:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d4e86:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d4e8a:	1e6a      	subs	r2, r5, #1
   d4e8c:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d4e90:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4e92:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d4e94:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d4e96:	429a      	cmp	r2, r3
   d4e98:	d800      	bhi.n	d4e9c <_ZN7FatFile7seekSetEm+0x52>
   d4e9a:	b94d      	cbnz	r5, d4eb0 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d4e9c:	064a      	lsls	r2, r1, #25
   d4e9e:	bf4c      	ite	mi
   d4ea0:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d4ea4:	6a22      	ldrpl	r2, [r4, #32]
   d4ea6:	6122      	str	r2, [r4, #16]
   d4ea8:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d4eaa:	f104 0810 	add.w	r8, r4, #16
   d4eae:	e00a      	b.n	d4ec6 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d4eb0:	1a9b      	subs	r3, r3, r2
   d4eb2:	e7f9      	b.n	d4ea8 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d4eb4:	4642      	mov	r2, r8
   d4eb6:	6921      	ldr	r1, [r4, #16]
   d4eb8:	68a0      	ldr	r0, [r4, #8]
   d4eba:	f000 fa3c 	bl	d5336 <_ZN9FatVolume6fatGetEmPm>
   d4ebe:	2800      	cmp	r0, #0
   d4ec0:	f105 35ff 	add.w	r5, r5, #4294967295
   d4ec4:	dd03      	ble.n	d4ece <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d4ec6:	2d00      	cmp	r5, #0
   d4ec8:	d1f4      	bne.n	d4eb4 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d4eca:	6166      	str	r6, [r4, #20]
   d4ecc:	e003      	b.n	d4ed6 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d4ece:	6127      	str	r7, [r4, #16]
  return false;
   d4ed0:	2000      	movs	r0, #0
   d4ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d4ed6:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d4ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4edc <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d4edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ede:	460f      	mov	r7, r1
   d4ee0:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d4ee2:	2100      	movs	r1, #0
   d4ee4:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d4ee6:	4604      	mov	r4, r0
   d4ee8:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d4eea:	f002 fa8f 	bl	d740c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d4eee:	68b8      	ldr	r0, [r7, #8]
   d4ef0:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d4ef2:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d4ef6:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d4ef8:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d4efc:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d4efe:	6a3b      	ldr	r3, [r7, #32]
   d4f00:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d4f02:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d4f04:	7acb      	ldrb	r3, [r1, #11]
   d4f06:	071d      	lsls	r5, r3, #28
   d4f08:	d44c      	bmi.n	d4fa4 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d4f0a:	1883      	adds	r3, r0, r2
   d4f0c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d4f10:	f003 0317 	and.w	r3, r3, #23
   d4f14:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d4f16:	7ac9      	ldrb	r1, [r1, #11]
   d4f18:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d4f1c:	bf04      	itt	eq
   d4f1e:	f043 0308 	orreq.w	r3, r3, #8
   d4f22:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d4f24:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d4f28:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d4f2a:	f006 0303 	and.w	r3, r6, #3
   d4f2e:	2b01      	cmp	r3, #1
   d4f30:	d009      	beq.n	d4f46 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d4f32:	2b02      	cmp	r3, #2
   d4f34:	d005      	beq.n	d4f42 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d4f36:	2b00      	cmp	r3, #0
   d4f38:	d134      	bne.n	d4fa4 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d4f3a:	0571      	lsls	r1, r6, #21
   d4f3c:	d432      	bmi.n	d4fa4 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d4f3e:	2301      	movs	r3, #1
   d4f40:	e002      	b.n	d4f48 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d4f42:	2303      	movs	r3, #3
   d4f44:	e000      	b.n	d4f48 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d4f46:	2302      	movs	r3, #2
   d4f48:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d4f4a:	78a1      	ldrb	r1, [r4, #2]
   d4f4c:	078b      	lsls	r3, r1, #30
   d4f4e:	d503      	bpl.n	d4f58 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d4f50:	7823      	ldrb	r3, [r4, #0]
   d4f52:	f013 0f11 	tst.w	r3, #17
   d4f56:	d125      	bne.n	d4fa4 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d4f58:	b24b      	sxtb	r3, r1
   d4f5a:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d4f5e:	f006 0108 	and.w	r1, r6, #8
   d4f62:	bf14      	ite	ne
   d4f64:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d4f68:	2700      	moveq	r7, #0
   d4f6a:	4319      	orrs	r1, r3
   d4f6c:	4339      	orrs	r1, r7
   d4f6e:	70a1      	strb	r1, [r4, #2]
   d4f70:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d4f72:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d4f74:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d4f76:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d4f78:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d4f7c:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d4f80:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d4f84:	d504      	bpl.n	d4f90 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d4f86:	b181      	cbz	r1, d4faa <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d4f88:	f000 fa75 	bl	d5476 <_ZN9FatVolume9freeChainEm>
   d4f8c:	b968      	cbnz	r0, d4faa <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d4f8e:	e009      	b.n	d4fa4 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d4f90:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d4f92:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d4f94:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d4f96:	0473      	lsls	r3, r6, #17
   d4f98:	d50c      	bpl.n	d4fb4 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d4f9a:	69e1      	ldr	r1, [r4, #28]
   d4f9c:	4620      	mov	r0, r4
   d4f9e:	f7ff ff54 	bl	d4e4a <_ZN7FatFile7seekSetEm>
   d4fa2:	b938      	cbnz	r0, d4fb4 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d4fa4:	2000      	movs	r0, #0
   d4fa6:	7020      	strb	r0, [r4, #0]
  return false;
   d4fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d4faa:	78a3      	ldrb	r3, [r4, #2]
   d4fac:	f043 0304 	orr.w	r3, r3, #4
   d4fb0:	70a3      	strb	r3, [r4, #2]
   d4fb2:	e7f0      	b.n	d4f96 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d4fb4:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d4fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4fb8 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d4fb8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d4fba:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d4fbc:	4604      	mov	r4, r0
  if (!isOpen()) {
   d4fbe:	b90b      	cbnz	r3, d4fc4 <_ZN7FatFile4syncEv+0xc>
    return true;
   d4fc0:	2001      	movs	r0, #1
   d4fc2:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d4fc4:	7883      	ldrb	r3, [r0, #2]
   d4fc6:	075a      	lsls	r2, r3, #29
   d4fc8:	d523      	bpl.n	d5012 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d4fca:	2101      	movs	r1, #1
   d4fcc:	f7ff fe46 	bl	d4c5c <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d4fd0:	4605      	mov	r5, r0
   d4fd2:	b928      	cbnz	r0, d4fe0 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d4fd4:	7863      	ldrb	r3, [r4, #1]
   d4fd6:	f043 0301 	orr.w	r3, r3, #1
   d4fda:	7063      	strb	r3, [r4, #1]
  return false;
   d4fdc:	2000      	movs	r0, #0
   d4fde:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d4fe0:	7803      	ldrb	r3, [r0, #0]
   d4fe2:	2be5      	cmp	r3, #229	; 0xe5
   d4fe4:	d0f6      	beq.n	d4fd4 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d4fe6:	7823      	ldrb	r3, [r4, #0]
   d4fe8:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d4fea:	bf44      	itt	mi
   d4fec:	69e3      	ldrmi	r3, [r4, #28]
   d4fee:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d4ff0:	8c23      	ldrh	r3, [r4, #32]
   d4ff2:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d4ff4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d4ff6:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d4ff8:	4b09      	ldr	r3, [pc, #36]	; (d5020 <_ZN7FatFile4syncEv+0x68>)
   d4ffa:	681b      	ldr	r3, [r3, #0]
   d4ffc:	b12b      	cbz	r3, d500a <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d4ffe:	f100 0116 	add.w	r1, r0, #22
   d5002:	3018      	adds	r0, #24
   d5004:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5006:	8b2b      	ldrh	r3, [r5, #24]
   d5008:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d500a:	78a3      	ldrb	r3, [r4, #2]
   d500c:	f023 0304 	bic.w	r3, r3, #4
   d5010:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5012:	68a0      	ldr	r0, [r4, #8]
   d5014:	f7ff fabe 	bl	d4594 <_ZN9FatVolume9cacheSyncEv>
   d5018:	2800      	cmp	r0, #0
   d501a:	d0db      	beq.n	d4fd4 <_ZN7FatFile4syncEv+0x1c>
   d501c:	e7d0      	b.n	d4fc0 <_ZN7FatFile4syncEv+0x8>
   d501e:	bf00      	nop
   d5020:	2003e3d0 	.word	0x2003e3d0

000d5024 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5024:	b510      	push	{r4, lr}
   d5026:	4604      	mov	r4, r0
  bool rtn = sync();
   d5028:	f7ff ffc6 	bl	d4fb8 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d502c:	2300      	movs	r3, #0
   d502e:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d5030:	bd10      	pop	{r4, pc}

000d5032 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5032:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5034:	b093      	sub	sp, #76	; 0x4c
   d5036:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5038:	2300      	movs	r3, #0
   d503a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d503e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5042:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5044:	9201      	str	r2, [sp, #4]
   d5046:	4606      	mov	r6, r0
   d5048:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d504a:	b10b      	cbz	r3, d5050 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d504c:	2000      	movs	r0, #0
   d504e:	e03d      	b.n	d50cc <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5050:	780b      	ldrb	r3, [r1, #0]
   d5052:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5056:	d0f9      	beq.n	d504c <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d5058:	7813      	ldrb	r3, [r2, #0]
   d505a:	2b2f      	cmp	r3, #47	; 0x2f
   d505c:	d112      	bne.n	d5084 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d505e:	9b01      	ldr	r3, [sp, #4]
   d5060:	781a      	ldrb	r2, [r3, #0]
   d5062:	2a2f      	cmp	r2, #47	; 0x2f
   d5064:	d102      	bne.n	d506c <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d5066:	3301      	adds	r3, #1
   d5068:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d506a:	e7f8      	b.n	d505e <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d506c:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d506e:	b91a      	cbnz	r2, d5078 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d5070:	4630      	mov	r0, r6
   d5072:	f7ff fe02 	bl	d4c7a <_ZN7FatFile8openRootEP9FatVolume>
   d5076:	e029      	b.n	d50cc <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d5078:	a809      	add	r0, sp, #36	; 0x24
   d507a:	f7ff fdfe 	bl	d4c7a <_ZN7FatFile8openRootEP9FatVolume>
   d507e:	2800      	cmp	r0, #0
   d5080:	d0e4      	beq.n	d504c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d5082:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d5084:	aa01      	add	r2, sp, #4
   d5086:	a903      	add	r1, sp, #12
   d5088:	9801      	ldr	r0, [sp, #4]
   d508a:	f7ff fa9f 	bl	d45cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d508e:	2800      	cmp	r0, #0
   d5090:	d0dc      	beq.n	d504c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d5092:	9b01      	ldr	r3, [sp, #4]
   d5094:	781b      	ldrb	r3, [r3, #0]
   d5096:	b19b      	cbz	r3, d50c0 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d5098:	2300      	movs	r3, #0
   d509a:	aa03      	add	r2, sp, #12
   d509c:	4621      	mov	r1, r4
   d509e:	4630      	mov	r0, r6
   d50a0:	f7ff fbd6 	bl	d4850 <_ZN7FatFile4openEPS_P7fname_ti>
   d50a4:	2800      	cmp	r0, #0
   d50a6:	d0d1      	beq.n	d504c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d50a8:	4635      	mov	r5, r6
   d50aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50ac:	ac09      	add	r4, sp, #36	; 0x24
   d50ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50b4:	682b      	ldr	r3, [r5, #0]
   d50b6:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d50b8:	4630      	mov	r0, r6
   d50ba:	f7ff ffb3 	bl	d5024 <_ZN7FatFile5closeEv>
   d50be:	e7e0      	b.n	d5082 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d50c0:	463b      	mov	r3, r7
   d50c2:	aa03      	add	r2, sp, #12
   d50c4:	4621      	mov	r1, r4
   d50c6:	4630      	mov	r0, r6
   d50c8:	f7ff fbc2 	bl	d4850 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d50cc:	b013      	add	sp, #76	; 0x4c
   d50ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d50d0 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d50d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d50d4:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d50d6:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d50d8:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d50da:	4604      	mov	r4, r0
   d50dc:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d50de:	d508      	bpl.n	d50f2 <_ZN7FatFile5writeEPKvj+0x22>
   d50e0:	7883      	ldrb	r3, [r0, #2]
   d50e2:	079a      	lsls	r2, r3, #30
   d50e4:	d505      	bpl.n	d50f2 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d50e6:	071b      	lsls	r3, r3, #28
   d50e8:	d50b      	bpl.n	d5102 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d50ea:	69e1      	ldr	r1, [r4, #28]
   d50ec:	f7ff fead 	bl	d4e4a <_ZN7FatFile7seekSetEm>
   d50f0:	b938      	cbnz	r0, d5102 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d50f2:	7863      	ldrb	r3, [r4, #1]
   d50f4:	f043 0301 	orr.w	r3, r3, #1
   d50f8:	7063      	strb	r3, [r4, #1]
  return -1;
   d50fa:	f04f 30ff 	mov.w	r0, #4294967295
   d50fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d5102:	6963      	ldr	r3, [r4, #20]
   d5104:	43db      	mvns	r3, r3
   d5106:	4598      	cmp	r8, r3
   d5108:	d8f3      	bhi.n	d50f2 <_ZN7FatFile5writeEPKvj+0x22>
   d510a:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d510c:	f04f 0a00 	mov.w	sl, #0
   d5110:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5112:	2e00      	cmp	r6, #0
   d5114:	f000 8081 	beq.w	d521a <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d5118:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d511a:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d511c:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5120:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5124:	d11c      	bne.n	d5160 <_ZN7FatFile5writeEPKvj+0x90>
   d5126:	b9df      	cbnz	r7, d5160 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d5128:	6921      	ldr	r1, [r4, #16]
   d512a:	b171      	cbz	r1, d514a <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d512c:	f104 0210 	add.w	r2, r4, #16
   d5130:	f000 f901 	bl	d5336 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5134:	2800      	cmp	r0, #0
   d5136:	dbdc      	blt.n	d50f2 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d5138:	f040 808e 	bne.w	d5258 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d513c:	4620      	mov	r0, r4
   d513e:	f7ff fd43 	bl	d4bc8 <_ZN7FatFile10addClusterEv>
   d5142:	2800      	cmp	r0, #0
   d5144:	f040 8088 	bne.w	d5258 <_ZN7FatFile5writeEPKvj+0x188>
   d5148:	e7d3      	b.n	d50f2 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d514a:	6a23      	ldr	r3, [r4, #32]
   d514c:	b93b      	cbnz	r3, d515e <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d514e:	4620      	mov	r0, r4
   d5150:	f7ff fd3a 	bl	d4bc8 <_ZN7FatFile10addClusterEv>
   d5154:	2800      	cmp	r0, #0
   d5156:	d0cc      	beq.n	d50f2 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5158:	6923      	ldr	r3, [r4, #16]
   d515a:	6223      	str	r3, [r4, #32]
   d515c:	e000      	b.n	d5160 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d515e:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5160:	6921      	ldr	r1, [r4, #16]
   d5162:	68a0      	ldr	r0, [r4, #8]
   d5164:	f000 f8e1 	bl	d532a <_ZNK9FatVolume17clusterFirstBlockEm>
   d5168:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d516a:	b917      	cbnz	r7, d5172 <_ZN7FatFile5writeEPKvj+0xa2>
   d516c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5170:	d221      	bcs.n	d51b6 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d5172:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d5176:	42b5      	cmp	r5, r6
   d5178:	bf28      	it	cs
   d517a:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d517c:	b937      	cbnz	r7, d518c <_ZN7FatFile5writeEPKvj+0xbc>
   d517e:	6963      	ldr	r3, [r4, #20]
   d5180:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d5182:	4293      	cmp	r3, r2
   d5184:	bf34      	ite	cc
   d5186:	2201      	movcc	r2, #1
   d5188:	2205      	movcs	r2, #5
   d518a:	e000      	b.n	d518e <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d518c:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d518e:	68a0      	ldr	r0, [r4, #8]
   d5190:	3024      	adds	r0, #36	; 0x24
   d5192:	f000 f8a6 	bl	d52e2 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d5196:	2800      	cmp	r0, #0
   d5198:	d0ab      	beq.n	d50f2 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d519a:	4438      	add	r0, r7
   d519c:	462a      	mov	r2, r5
   d519e:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d51a0:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d51a2:	f002 f928 	bl	d73f6 <memcpy>
      if (512 == (n + blockOffset)) {
   d51a6:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d51aa:	d130      	bne.n	d520e <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d51ac:	68a0      	ldr	r0, [r4, #8]
   d51ae:	3024      	adds	r0, #36	; 0x24
   d51b0:	f000 f870 	bl	d5294 <_ZN8FatCache4syncEv>
   d51b4:	e017      	b.n	d51e6 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d51b6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d51ba:	68a0      	ldr	r0, [r4, #8]
   d51bc:	d315      	bcc.n	d51ea <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d51be:	7902      	ldrb	r2, [r0, #4]
   d51c0:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d51c2:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d51c4:	b2d2      	uxtb	r2, r2
   d51c6:	4293      	cmp	r3, r2
   d51c8:	bf28      	it	cs
   d51ca:	4613      	movcs	r3, r2
   d51cc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d51ce:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d51d0:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d51d4:	d302      	bcc.n	d51dc <_ZN7FatFile5writeEPKvj+0x10c>
   d51d6:	441a      	add	r2, r3
   d51d8:	4291      	cmp	r1, r2
   d51da:	d337      	bcc.n	d524c <_ZN7FatFile5writeEPKvj+0x17c>
   d51dc:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d51de:	464a      	mov	r2, r9
   d51e0:	6838      	ldr	r0, [r7, #0]
   d51e2:	f000 fc6d 	bl	d5ac0 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d51e6:	b990      	cbnz	r0, d520e <_ZN7FatFile5writeEPKvj+0x13e>
   d51e8:	e783      	b.n	d50f2 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d51ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d51ec:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d51ee:	bf02      	ittt	eq
   d51f0:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d51f4:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d51f8:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d51fa:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d51fc:	464a      	mov	r2, r9
   d51fe:	6818      	ldr	r0, [r3, #0]
   d5200:	f000 fbec 	bl	d59dc <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d5204:	2800      	cmp	r0, #0
   d5206:	f43f af74 	beq.w	d50f2 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d520a:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d520e:	6963      	ldr	r3, [r4, #20]
   d5210:	442b      	add	r3, r5
   d5212:	6163      	str	r3, [r4, #20]
    src += n;
   d5214:	44a9      	add	r9, r5
    nToWrite -= n;
   d5216:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5218:	e77a      	b.n	d5110 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d521a:	69e2      	ldr	r2, [r4, #28]
   d521c:	4293      	cmp	r3, r2
   d521e:	d901      	bls.n	d5224 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d5220:	61e3      	str	r3, [r4, #28]
   d5222:	e002      	b.n	d522a <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d5224:	4b0f      	ldr	r3, [pc, #60]	; (d5264 <_ZN7FatFile5writeEPKvj+0x194>)
   d5226:	681b      	ldr	r3, [r3, #0]
   d5228:	b11b      	cbz	r3, d5232 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d522a:	78a3      	ldrb	r3, [r4, #2]
   d522c:	f043 0304 	orr.w	r3, r3, #4
   d5230:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d5232:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d5236:	2b00      	cmp	r3, #0
   d5238:	db02      	blt.n	d5240 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d523a:	4640      	mov	r0, r8
   d523c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d5240:	4620      	mov	r0, r4
   d5242:	f7ff feb9 	bl	d4fb8 <_ZN7FatFile4syncEv>
   d5246:	2800      	cmp	r0, #0
   d5248:	d1f7      	bne.n	d523a <_ZN7FatFile5writeEPKvj+0x16a>
   d524a:	e752      	b.n	d50f2 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d524c:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5250:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5254:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5256:	e7c1      	b.n	d51dc <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5258:	6921      	ldr	r1, [r4, #16]
   d525a:	68a0      	ldr	r0, [r4, #8]
   d525c:	f000 f865 	bl	d532a <_ZNK9FatVolume17clusterFirstBlockEm>
   d5260:	4601      	mov	r1, r0
   d5262:	e783      	b.n	d516c <_ZN7FatFile5writeEPKvj+0x9c>
   d5264:	2003e3d0 	.word	0x2003e3d0

000d5268 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d5268:	f000 be3a 	b.w	d5ee0 <HAL_Pin_Map>

000d526c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d526c:	b570      	push	{r4, r5, r6, lr}
   d526e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5270:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5272:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5274:	b149      	cbz	r1, d528a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5276:	f002 f933 	bl	d74e0 <strlen>
   d527a:	682b      	ldr	r3, [r5, #0]
   d527c:	4602      	mov	r2, r0
   d527e:	4621      	mov	r1, r4
   d5280:	4628      	mov	r0, r5
   d5282:	68db      	ldr	r3, [r3, #12]
    }
   d5284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5288:	4718      	bx	r3
    }
   d528a:	bd70      	pop	{r4, r5, r6, pc}

000d528c <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d528c:	f000 be28 	b.w	d5ee0 <HAL_Pin_Map>

000d5290 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5290:	f000 be26 	b.w	d5ee0 <HAL_Pin_Map>

000d5294 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5294:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d5296:	7803      	ldrb	r3, [r0, #0]
   d5298:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d529a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d529c:	d51e      	bpl.n	d52dc <_ZN8FatCache4syncEv+0x48>
   d529e:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d52a0:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d52a2:	f100 060c 	add.w	r6, r0, #12
   d52a6:	4632      	mov	r2, r6
   d52a8:	6818      	ldr	r0, [r3, #0]
   d52aa:	f000 fb97 	bl	d59dc <_ZN9SdSpiCard10writeBlockEmPKh>
   d52ae:	4605      	mov	r5, r0
   d52b0:	b908      	cbnz	r0, d52b6 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d52b2:	2500      	movs	r5, #0
   d52b4:	e013      	b.n	d52de <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d52b6:	7823      	ldrb	r3, [r4, #0]
   d52b8:	079b      	lsls	r3, r3, #30
   d52ba:	d404      	bmi.n	d52c6 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d52bc:	7823      	ldrb	r3, [r4, #0]
   d52be:	f023 0301 	bic.w	r3, r3, #1
   d52c2:	7023      	strb	r3, [r4, #0]
   d52c4:	e00b      	b.n	d52de <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d52c6:	6863      	ldr	r3, [r4, #4]
   d52c8:	68a0      	ldr	r0, [r4, #8]
   d52ca:	6919      	ldr	r1, [r3, #16]
   d52cc:	4632      	mov	r2, r6
   d52ce:	4401      	add	r1, r0
   d52d0:	6818      	ldr	r0, [r3, #0]
   d52d2:	f000 fb83 	bl	d59dc <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d52d6:	2800      	cmp	r0, #0
   d52d8:	d1f0      	bne.n	d52bc <_ZN8FatCache4syncEv+0x28>
   d52da:	e7ea      	b.n	d52b2 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d52dc:	2501      	movs	r5, #1

fail:
  return false;
}
   d52de:	4628      	mov	r0, r5
   d52e0:	bd70      	pop	{r4, r5, r6, pc}

000d52e2 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d52e2:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d52e4:	6883      	ldr	r3, [r0, #8]
   d52e6:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d52e8:	4604      	mov	r4, r0
   d52ea:	460e      	mov	r6, r1
   d52ec:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d52ee:	d014      	beq.n	d531a <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d52f0:	f7ff ffd0 	bl	d5294 <_ZN8FatCache4syncEv>
   d52f4:	b908      	cbnz	r0, d52fa <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d52f6:	2000      	movs	r0, #0
   d52f8:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d52fa:	076b      	lsls	r3, r5, #29
   d52fc:	d503      	bpl.n	d5306 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d52fe:	2300      	movs	r3, #0
   d5300:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d5302:	60a6      	str	r6, [r4, #8]
   d5304:	e009      	b.n	d531a <_ZN8FatCache4readEmh+0x38>
   d5306:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5308:	f104 020c 	add.w	r2, r4, #12
   d530c:	4631      	mov	r1, r6
   d530e:	6818      	ldr	r0, [r3, #0]
   d5310:	f000 fada 	bl	d58c8 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d5314:	2800      	cmp	r0, #0
   d5316:	d1f2      	bne.n	d52fe <_ZN8FatCache4readEmh+0x1c>
   d5318:	e7ed      	b.n	d52f6 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d531a:	7823      	ldrb	r3, [r4, #0]
   d531c:	4620      	mov	r0, r4
   d531e:	f005 0503 	and.w	r5, r5, #3
   d5322:	431d      	orrs	r5, r3
   d5324:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d5328:	bd70      	pop	{r4, r5, r6, pc}

000d532a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d532a:	7983      	ldrb	r3, [r0, #6]
   d532c:	6940      	ldr	r0, [r0, #20]
   d532e:	3902      	subs	r1, #2
   d5330:	4099      	lsls	r1, r3
}
   d5332:	4408      	add	r0, r1
   d5334:	4770      	bx	lr

000d5336 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5336:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d5338:	b570      	push	{r4, r5, r6, lr}
   d533a:	4605      	mov	r5, r0
   d533c:	460c      	mov	r4, r1
   d533e:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5340:	d802      	bhi.n	d5348 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d5342:	f04f 30ff 	mov.w	r0, #4294967295
   d5346:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5348:	69c3      	ldr	r3, [r0, #28]
   d534a:	4299      	cmp	r1, r3
   d534c:	d8f9      	bhi.n	d5342 <_ZN9FatVolume6fatGetEmPm+0xc>
   d534e:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5350:	2b20      	cmp	r3, #32
   d5352:	d110      	bne.n	d5376 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d5354:	6981      	ldr	r1, [r0, #24]
   d5356:	2202      	movs	r2, #2
   d5358:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d535c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5360:	f7ff ffbf 	bl	d52e2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5364:	2800      	cmp	r0, #0
   d5366:	d0ec      	beq.n	d5342 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d5368:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d536c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d5370:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d5374:	e00f      	b.n	d5396 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d5376:	2b10      	cmp	r3, #16
   d5378:	d1e3      	bne.n	d5342 <_ZN9FatVolume6fatGetEmPm+0xc>
   d537a:	6983      	ldr	r3, [r0, #24]
   d537c:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5380:	2202      	movs	r2, #2
   d5382:	4419      	add	r1, r3
   d5384:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5388:	f7ff ffab 	bl	d52e2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d538c:	2800      	cmp	r0, #0
   d538e:	d0d8      	beq.n	d5342 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d5390:	b2e4      	uxtb	r4, r4
   d5392:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d5396:	69ea      	ldr	r2, [r5, #28]
   d5398:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d539a:	bf9a      	itte	ls
   d539c:	6033      	strls	r3, [r6, #0]
  return 1;
   d539e:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d53a0:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d53a2:	bd70      	pop	{r4, r5, r6, pc}

000d53a4 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d53a4:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d53a6:	b538      	push	{r3, r4, r5, lr}
   d53a8:	460c      	mov	r4, r1
   d53aa:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d53ac:	d801      	bhi.n	d53b2 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d53ae:	2000      	movs	r0, #0
   d53b0:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d53b2:	69c3      	ldr	r3, [r0, #28]
   d53b4:	4299      	cmp	r1, r3
   d53b6:	d8fa      	bhi.n	d53ae <_ZN9FatVolume6fatPutEmm+0xa>
   d53b8:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d53ba:	2b20      	cmp	r3, #32
   d53bc:	d10e      	bne.n	d53dc <_ZN9FatVolume6fatPutEmm+0x38>
   d53be:	6981      	ldr	r1, [r0, #24]
   d53c0:	2203      	movs	r2, #3
   d53c2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d53c6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d53ca:	f7ff ff8a 	bl	d52e2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d53ce:	2800      	cmp	r0, #0
   d53d0:	d0ed      	beq.n	d53ae <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d53d2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d53d6:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d53da:	e00f      	b.n	d53fc <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d53dc:	2b10      	cmp	r3, #16
   d53de:	d1e6      	bne.n	d53ae <_ZN9FatVolume6fatPutEmm+0xa>
   d53e0:	6983      	ldr	r3, [r0, #24]
   d53e2:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d53e6:	2203      	movs	r2, #3
   d53e8:	4419      	add	r1, r3
   d53ea:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d53ee:	f7ff ff78 	bl	d52e2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d53f2:	2800      	cmp	r0, #0
   d53f4:	d0db      	beq.n	d53ae <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d53f6:	b2e4      	uxtb	r4, r4
   d53f8:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d53fc:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d53fe:	bd38      	pop	{r3, r4, r5, pc}

000d5400 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5400:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5404:	68c4      	ldr	r4, [r0, #12]
   d5406:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5408:	4605      	mov	r5, r0
   d540a:	460e      	mov	r6, r1
   d540c:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d540e:	d207      	bcs.n	d5420 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d5410:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d5412:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d5414:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d5416:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d5418:	429c      	cmp	r4, r3
   d541a:	d903      	bls.n	d5424 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d541c:	b9cf      	cbnz	r7, d5452 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d541e:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d5420:	2701      	movs	r7, #1
   d5422:	e7f7      	b.n	d5414 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d5424:	42a6      	cmp	r6, r4
   d5426:	d014      	beq.n	d5452 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d5428:	aa01      	add	r2, sp, #4
   d542a:	4621      	mov	r1, r4
   d542c:	4628      	mov	r0, r5
   d542e:	f7ff ff82 	bl	d5336 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5432:	2800      	cmp	r0, #0
   d5434:	db0d      	blt.n	d5452 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d5436:	d0ed      	beq.n	d5414 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d5438:	9b01      	ldr	r3, [sp, #4]
   d543a:	2b00      	cmp	r3, #0
   d543c:	d1ea      	bne.n	d5414 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d543e:	b107      	cbz	r7, d5442 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d5440:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d5442:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d5446:	4621      	mov	r1, r4
   d5448:	4628      	mov	r0, r5
   d544a:	f7ff ffab 	bl	d53a4 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d544e:	4607      	mov	r7, r0
   d5450:	b908      	cbnz	r0, d5456 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d5452:	2700      	movs	r7, #0
   d5454:	e00b      	b.n	d546e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d5456:	b916      	cbnz	r6, d545e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d5458:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d545c:	e007      	b.n	d546e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d545e:	4622      	mov	r2, r4
   d5460:	4631      	mov	r1, r6
   d5462:	4628      	mov	r0, r5
   d5464:	f7ff ff9e 	bl	d53a4 <_ZN9FatVolume6fatPutEmm>
   d5468:	2800      	cmp	r0, #0
   d546a:	d1f5      	bne.n	d5458 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d546c:	e7f1      	b.n	d5452 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d546e:	4638      	mov	r0, r7
   d5470:	b002      	add	sp, #8
   d5472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5476 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d5476:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5478:	4605      	mov	r5, r0
   d547a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d547c:	aa01      	add	r2, sp, #4
   d547e:	4621      	mov	r1, r4
   d5480:	4628      	mov	r0, r5
   d5482:	f7ff ff58 	bl	d5336 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5486:	1e06      	subs	r6, r0, #0
   d5488:	da01      	bge.n	d548e <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d548a:	2000      	movs	r0, #0
   d548c:	e00f      	b.n	d54ae <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d548e:	2200      	movs	r2, #0
   d5490:	4621      	mov	r1, r4
   d5492:	4628      	mov	r0, r5
   d5494:	f7ff ff86 	bl	d53a4 <_ZN9FatVolume6fatPutEmm>
   d5498:	2800      	cmp	r0, #0
   d549a:	d0f6      	beq.n	d548a <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d549c:	68eb      	ldr	r3, [r5, #12]
   d549e:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d54a0:	bf9c      	itt	ls
   d54a2:	f104 34ff 	addls.w	r4, r4, #4294967295
   d54a6:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d54a8:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d54aa:	2e00      	cmp	r6, #0
   d54ac:	d1e6      	bne.n	d547c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d54ae:	b002      	add	sp, #8
   d54b0:	bd70      	pop	{r4, r5, r6, pc}

000d54b2 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d54b2:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d54b4:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d54b6:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d54b8:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d54ba:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d54bc:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d54c0:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d54c2:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d54c4:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d54c6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d54ca:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d54cc:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d54d0:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d54d4:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d54d8:	b1a1      	cbz	r1, d5504 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d54da:	2904      	cmp	r1, #4
   d54dc:	d85d      	bhi.n	d559a <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d54de:	4611      	mov	r1, r2
   d54e0:	3024      	adds	r0, #36	; 0x24
   d54e2:	f7ff fefe 	bl	d52e2 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d54e6:	2800      	cmp	r0, #0
   d54e8:	d057      	beq.n	d559a <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d54ea:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d54ee:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d54f2:	065b      	lsls	r3, r3, #25
   d54f4:	d151      	bne.n	d559a <_ZN9FatVolume4initEh+0xe8>
   d54f6:	351b      	adds	r5, #27
   d54f8:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d54fc:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d5500:	2d00      	cmp	r5, #0
   d5502:	d04a      	beq.n	d559a <_ZN9FatVolume4initEh+0xe8>
   d5504:	2200      	movs	r2, #0
   d5506:	4629      	mov	r1, r5
   d5508:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d550c:	f7ff fee9 	bl	d52e2 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d5510:	2800      	cmp	r0, #0
   d5512:	d042      	beq.n	d559a <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d5514:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d5518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d551c:	d13d      	bne.n	d559a <_ZN9FatVolume4initEh+0xe8>
   d551e:	7c03      	ldrb	r3, [r0, #16]
   d5520:	2b02      	cmp	r3, #2
   d5522:	d13a      	bne.n	d559a <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d5524:	89c3      	ldrh	r3, [r0, #14]
   d5526:	2b00      	cmp	r3, #0
   d5528:	d037      	beq.n	d559a <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d552a:	7b41      	ldrb	r1, [r0, #13]
   d552c:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d552e:	1e4b      	subs	r3, r1, #1
   d5530:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d5532:	2300      	movs	r3, #0
   d5534:	71a3      	strb	r3, [r4, #6]
   d5536:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5538:	2301      	movs	r3, #1
   d553a:	428b      	cmp	r3, r1
   d553c:	d007      	beq.n	d554e <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d553e:	3e01      	subs	r6, #1
   d5540:	d02b      	beq.n	d559a <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5542:	79a2      	ldrb	r2, [r4, #6]
   d5544:	005b      	lsls	r3, r3, #1
   d5546:	3201      	adds	r2, #1
   d5548:	b2db      	uxtb	r3, r3
   d554a:	71a2      	strb	r2, [r4, #6]
   d554c:	e7f5      	b.n	d553a <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d554e:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d5550:	b902      	cbnz	r2, d5554 <_ZN9FatVolume4initEh+0xa2>
   d5552:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d5554:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d5556:	89c6      	ldrh	r6, [r0, #14]
   d5558:	442e      	add	r6, r5
   d555a:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d555c:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d5560:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d5562:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d5566:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d5568:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d556c:	0152      	lsls	r2, r2, #5
   d556e:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d5572:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d5576:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d5578:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d557c:	b903      	cbnz	r3, d5580 <_ZN9FatVolume4initEh+0xce>
   d557e:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d5580:	1aad      	subs	r5, r5, r2
   d5582:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d5584:	79a5      	ldrb	r5, [r4, #6]
   d5586:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d558a:	1c6b      	adds	r3, r5, #1
   d558c:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d558e:	f640 73f4 	movw	r3, #4084	; 0xff4
   d5592:	429d      	cmp	r5, r3
   d5594:	d803      	bhi.n	d559e <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d5596:	230c      	movs	r3, #12
   d5598:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d559a:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d559c:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d559e:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d55a2:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d55a4:	bf85      	ittet	hi
   d55a6:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d55a8:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d55aa:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d55ac:	2320      	movhi	r3, #32
   d55ae:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d55b0:	2001      	movs	r0, #1

fail:
  return false;
}
   d55b2:	bd70      	pop	{r4, r5, r6, pc}

000d55b4 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d55b4:	f000 bc94 	b.w	d5ee0 <HAL_Pin_Map>

000d55b8 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d55b8:	f000 bc92 	b.w	d5ee0 <HAL_Pin_Map>

000d55bc <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d55bc:	f000 bc90 	b.w	d5ee0 <HAL_Pin_Map>

000d55c0 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d55c0:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d55c2:	4c0e      	ldr	r4, [pc, #56]	; (d55fc <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d55c4:	460e      	mov	r6, r1
   d55c6:	4615      	mov	r5, r2
   d55c8:	f000 fd02 	bl	d5fd0 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d55cc:	6823      	ldr	r3, [r4, #0]
   d55ce:	1ac0      	subs	r0, r0, r3
   d55d0:	4b0b      	ldr	r3, [pc, #44]	; (d5600 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d55d2:	4298      	cmp	r0, r3
   d55d4:	d908      	bls.n	d55e8 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d55d6:	f000 fd03 	bl	d5fe0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d55da:	4b0a      	ldr	r3, [pc, #40]	; (d5604 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d55dc:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d55de:	f000 fe7b 	bl	d62d8 <spark_process>
   d55e2:	f000 fcf5 	bl	d5fd0 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d55e6:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d55e8:	f000 fcfa 	bl	d5fe0 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d55ec:	b280      	uxth	r0, r0
   d55ee:	1b80      	subs	r0, r0, r6
}
   d55f0:	42a8      	cmp	r0, r5
   d55f2:	bfd4      	ite	le
   d55f4:	2000      	movle	r0, #0
   d55f6:	2001      	movgt	r0, #1
   d55f8:	bd70      	pop	{r4, r5, r6, pc}
   d55fa:	bf00      	nop
   d55fc:	2003e3d4 	.word	0x2003e3d4
   d5600:	000186a0 	.word	0x000186a0
   d5604:	2003e730 	.word	0x2003e730

000d5608 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5608:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d560a:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d560c:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d560e:	b94d      	cbnz	r5, d5624 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d5610:	6840      	ldr	r0, [r0, #4]
   d5612:	f000 fa7d 	bl	d5b10 <_ZN14SdSpiAltDriver8activateEv>
   d5616:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d5618:	4629      	mov	r1, r5
   d561a:	7d18      	ldrb	r0, [r3, #20]
   d561c:	f001 fd0b 	bl	d7036 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d5620:	2301      	movs	r3, #1
   d5622:	7223      	strb	r3, [r4, #8]
   d5624:	bd38      	pop	{r3, r4, r5, pc}

000d5626 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d5626:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d5628:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d562a:	4604      	mov	r4, r0
  if (m_spiActive) {
   d562c:	b16b      	cbz	r3, d564a <_ZN9SdSpiCard7spiStopEv+0x24>
   d562e:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d5630:	2101      	movs	r1, #1
   d5632:	7d18      	ldrb	r0, [r3, #20]
   d5634:	f001 fcff 	bl	d7036 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5638:	21ff      	movs	r1, #255	; 0xff
   d563a:	6860      	ldr	r0, [r4, #4]
   d563c:	f000 fa9a 	bl	d5b74 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d5640:	6860      	ldr	r0, [r4, #4]
   d5642:	f000 fa79 	bl	d5b38 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d5646:	2300      	movs	r3, #0
   d5648:	7223      	strb	r3, [r4, #8]
   d564a:	bd10      	pop	{r4, pc}

000d564c <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d564e:	4604      	mov	r4, r0
   d5650:	460d      	mov	r5, r1
   d5652:	4616      	mov	r6, r2
   d5654:	f000 fcc4 	bl	d5fe0 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d5658:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d565a:	6860      	ldr	r0, [r4, #4]
   d565c:	f000 fa6f 	bl	d5b3e <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d5660:	28ff      	cmp	r0, #255	; 0xff
   d5662:	7260      	strb	r0, [r4, #9]
   d5664:	d109      	bne.n	d567a <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d5666:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d566a:	4639      	mov	r1, r7
   d566c:	4620      	mov	r0, r4
   d566e:	f7ff ffa7 	bl	d55c0 <_ZN9SdSpiCard10isTimedOutEtt>
   d5672:	2800      	cmp	r0, #0
   d5674:	d0f1      	beq.n	d565a <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5676:	2355      	movs	r3, #85	; 0x55
   d5678:	e00b      	b.n	d5692 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d567a:	28fe      	cmp	r0, #254	; 0xfe
   d567c:	d001      	beq.n	d5682 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d567e:	2350      	movs	r3, #80	; 0x50
   d5680:	e007      	b.n	d5692 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d5682:	4632      	mov	r2, r6
   d5684:	4629      	mov	r1, r5
   d5686:	6860      	ldr	r0, [r4, #4]
   d5688:	f000 fa5e 	bl	d5b48 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d568c:	7260      	strb	r0, [r4, #9]
   d568e:	b130      	cbz	r0, d569e <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5690:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d5692:	4620      	mov	r0, r4
   d5694:	7023      	strb	r3, [r4, #0]
   d5696:	f7ff ffc6 	bl	d5626 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d569a:	2000      	movs	r0, #0
}
   d569c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d569e:	6860      	ldr	r0, [r4, #4]
   d56a0:	f000 fa4d 	bl	d5b3e <_ZN14SdSpiAltDriver7receiveEv>
   d56a4:	6860      	ldr	r0, [r4, #4]
   d56a6:	f000 fa4a 	bl	d5b3e <_ZN14SdSpiAltDriver7receiveEv>
   d56aa:	2001      	movs	r0, #1
   d56ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d56ae <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d56ae:	b570      	push	{r4, r5, r6, lr}
   d56b0:	4604      	mov	r4, r0
   d56b2:	460e      	mov	r6, r1
   d56b4:	f000 fc94 	bl	d5fe0 <HAL_Timer_Get_Milli_Seconds>
   d56b8:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d56ba:	4632      	mov	r2, r6
   d56bc:	4629      	mov	r1, r5
   d56be:	4620      	mov	r0, r4
   d56c0:	f7ff ff7e 	bl	d55c0 <_ZN9SdSpiCard10isTimedOutEtt>
   d56c4:	b930      	cbnz	r0, d56d4 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d56c6:	6860      	ldr	r0, [r4, #4]
   d56c8:	f000 fa39 	bl	d5b3e <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d56cc:	28ff      	cmp	r0, #255	; 0xff
   d56ce:	d1f4      	bne.n	d56ba <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d56d0:	2001      	movs	r0, #1
   d56d2:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d56d4:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d56d6:	bd70      	pop	{r4, r5, r6, pc}

000d56d8 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d56d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d56da:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d56dc:	9201      	str	r2, [sp, #4]
   d56de:	4604      	mov	r4, r0
   d56e0:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d56e2:	b90b      	cbnz	r3, d56e8 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d56e4:	f7ff ff90 	bl	d5608 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d56e8:	b125      	cbz	r5, d56f4 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d56ea:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d56ee:	4620      	mov	r0, r4
   d56f0:	f7ff ffdd 	bl	d56ae <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d56f4:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d56f8:	6860      	ldr	r0, [r4, #4]
   d56fa:	f000 fa3b 	bl	d5b74 <_ZN14SdSpiAltDriver4sendEh>
   d56fe:	f10d 0607 	add.w	r6, sp, #7
   d5702:	f10d 0703 	add.w	r7, sp, #3
   d5706:	f816 1901 	ldrb.w	r1, [r6], #-1
   d570a:	6860      	ldr	r0, [r4, #4]
   d570c:	f000 fa32 	bl	d5b74 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d5710:	42be      	cmp	r6, r7
   d5712:	d1f8      	bne.n	d5706 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d5714:	2d00      	cmp	r5, #0
   d5716:	bf0c      	ite	eq
   d5718:	2195      	moveq	r1, #149	; 0x95
   d571a:	2187      	movne	r1, #135	; 0x87
   d571c:	6860      	ldr	r0, [r4, #4]
   d571e:	f000 fa29 	bl	d5b74 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5722:	6860      	ldr	r0, [r4, #4]
   d5724:	f000 fa0b 	bl	d5b3e <_ZN14SdSpiAltDriver7receiveEv>
   d5728:	250b      	movs	r5, #11
   d572a:	6860      	ldr	r0, [r4, #4]
   d572c:	f000 fa07 	bl	d5b3e <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d5730:	0603      	lsls	r3, r0, #24
   d5732:	7260      	strb	r0, [r4, #9]
   d5734:	d503      	bpl.n	d573e <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d5736:	3d01      	subs	r5, #1
   d5738:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d573c:	d1f5      	bne.n	d572a <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d573e:	b003      	add	sp, #12
   d5740:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5742 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d5742:	b570      	push	{r4, r5, r6, lr}
   d5744:	4604      	mov	r4, r0
   d5746:	460d      	mov	r5, r1
   d5748:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d574a:	2137      	movs	r1, #55	; 0x37
   d574c:	2200      	movs	r2, #0
   d574e:	f7ff ffc3 	bl	d56d8 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d5752:	4632      	mov	r2, r6
   d5754:	4629      	mov	r1, r5
   d5756:	4620      	mov	r0, r4
  }
   d5758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d575c:	f7ff bfbc 	b.w	d56d8 <_ZN9SdSpiCard11cardCommandEhm>

000d5760 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d5760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d5764:	2500      	movs	r5, #0
   d5766:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d5768:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d576a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d576c:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d576e:	4604      	mov	r4, r0
   d5770:	4690      	mov	r8, r2
   d5772:	461e      	mov	r6, r3
   d5774:	f000 fc34 	bl	d5fe0 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d5778:	4641      	mov	r1, r8
   d577a:	4607      	mov	r7, r0
   d577c:	6860      	ldr	r0, [r4, #4]
   d577e:	f000 f9cb 	bl	d5b18 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d5782:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d5784:	4a4f      	ldr	r2, [pc, #316]	; (d58c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d5786:	721d      	strb	r5, [r3, #8]
   d5788:	f04f 0801 	mov.w	r8, #1
   d578c:	60da      	str	r2, [r3, #12]
   d578e:	745d      	strb	r5, [r3, #17]
   d5790:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d5794:	4620      	mov	r0, r4
   d5796:	f7ff ff37 	bl	d5608 <_ZN9SdSpiCard8spiStartEv>
   d579a:	6863      	ldr	r3, [r4, #4]
   d579c:	4641      	mov	r1, r8
   d579e:	7d18      	ldrb	r0, [r3, #20]
   d57a0:	f001 fc49 	bl	d7036 <digitalWrite>
   d57a4:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d57a6:	21ff      	movs	r1, #255	; 0xff
   d57a8:	6860      	ldr	r0, [r4, #4]
   d57aa:	3d01      	subs	r5, #1
   d57ac:	f000 f9e2 	bl	d5b74 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d57b0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d57b4:	d1f7      	bne.n	d57a6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d57b6:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d57b8:	4629      	mov	r1, r5
   d57ba:	7d18      	ldrb	r0, [r3, #20]
   d57bc:	f001 fc3b 	bl	d7036 <digitalWrite>
   d57c0:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d57c2:	2200      	movs	r2, #0
   d57c4:	4611      	mov	r1, r2
   d57c6:	4620      	mov	r0, r4
   d57c8:	f7ff ff86 	bl	d56d8 <_ZN9SdSpiCard11cardCommandEhm>
   d57cc:	2801      	cmp	r0, #1
   d57ce:	4680      	mov	r8, r0
   d57d0:	d012      	beq.n	d57f8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d57d2:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d57d4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d57d8:	d101      	bne.n	d57de <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d57da:	2320      	movs	r3, #32
   d57dc:	e057      	b.n	d588e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d57de:	21fd      	movs	r1, #253	; 0xfd
   d57e0:	6860      	ldr	r0, [r4, #4]
   d57e2:	f000 f9c7 	bl	d5b74 <_ZN14SdSpiAltDriver4sendEh>
   d57e6:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d57ea:	6860      	ldr	r0, [r4, #4]
   d57ec:	f000 f9a7 	bl	d5b3e <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d57f0:	f1b8 0801 	subs.w	r8, r8, #1
   d57f4:	d1f9      	bne.n	d57ea <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d57f6:	e7e4      	b.n	d57c2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d57f8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d57fc:	2108      	movs	r1, #8
   d57fe:	4620      	mov	r0, r4
   d5800:	f7ff ff6a 	bl	d56d8 <_ZN9SdSpiCard11cardCommandEhm>
   d5804:	2805      	cmp	r0, #5
   d5806:	d102      	bne.n	d580e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d5808:	f884 800a 	strb.w	r8, [r4, #10]
   d580c:	e00f      	b.n	d582e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d580e:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5810:	6860      	ldr	r0, [r4, #4]
   d5812:	f000 f994 	bl	d5b3e <_ZN14SdSpiAltDriver7receiveEv>
   d5816:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d5818:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d581c:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d581e:	d1f7      	bne.n	d5810 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d5820:	28aa      	cmp	r0, #170	; 0xaa
   d5822:	d102      	bne.n	d582a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d5824:	2302      	movs	r3, #2
   d5826:	72a3      	strb	r3, [r4, #10]
   d5828:	e001      	b.n	d582e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d582a:	2325      	movs	r3, #37	; 0x25
   d582c:	e02f      	b.n	d588e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d582e:	7aa3      	ldrb	r3, [r4, #10]
   d5830:	2b02      	cmp	r3, #2
   d5832:	bf0c      	ite	eq
   d5834:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d5838:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d583a:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d583c:	462a      	mov	r2, r5
   d583e:	2129      	movs	r1, #41	; 0x29
   d5840:	4620      	mov	r0, r4
   d5842:	f7ff ff7e 	bl	d5742 <_ZN9SdSpiCard8cardAcmdEhm>
   d5846:	4602      	mov	r2, r0
   d5848:	b148      	cbz	r0, d585e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d584a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d584e:	4639      	mov	r1, r7
   d5850:	4620      	mov	r0, r4
   d5852:	f7ff feb5 	bl	d55c0 <_ZN9SdSpiCard10isTimedOutEtt>
   d5856:	2800      	cmp	r0, #0
   d5858:	d0f0      	beq.n	d583c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d585a:	2343      	movs	r3, #67	; 0x43
   d585c:	e017      	b.n	d588e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d585e:	7aa3      	ldrb	r3, [r4, #10]
   d5860:	2b02      	cmp	r3, #2
   d5862:	d00e      	beq.n	d5882 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d5864:	4620      	mov	r0, r4
   d5866:	f7ff fede 	bl	d5626 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d586a:	6863      	ldr	r3, [r4, #4]
   d586c:	68b0      	ldr	r0, [r6, #8]
   d586e:	7934      	ldrb	r4, [r6, #4]
   d5870:	7b31      	ldrb	r1, [r6, #12]
   d5872:	7b72      	ldrb	r2, [r6, #13]
   d5874:	745a      	strb	r2, [r3, #17]
   d5876:	60d8      	str	r0, [r3, #12]
   d5878:	721c      	strb	r4, [r3, #8]
   d587a:	7419      	strb	r1, [r3, #16]
  return true;
   d587c:	2001      	movs	r0, #1
   d587e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d5882:	213a      	movs	r1, #58	; 0x3a
   d5884:	4620      	mov	r0, r4
   d5886:	f7ff ff27 	bl	d56d8 <_ZN9SdSpiCard11cardCommandEhm>
   d588a:	b138      	cbz	r0, d589c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d588c:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d588e:	4620      	mov	r0, r4
   d5890:	7023      	strb	r3, [r4, #0]
   d5892:	f7ff fec8 	bl	d5626 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5896:	2000      	movs	r0, #0
}
   d5898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d589c:	6860      	ldr	r0, [r4, #4]
   d589e:	f000 f94e 	bl	d5b3e <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d58a2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d58a6:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d58a8:	bf04      	itt	eq
   d58aa:	2303      	moveq	r3, #3
   d58ac:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d58ae:	6860      	ldr	r0, [r4, #4]
   d58b0:	f000 f945 	bl	d5b3e <_ZN14SdSpiAltDriver7receiveEv>
   d58b4:	6860      	ldr	r0, [r4, #4]
   d58b6:	f000 f942 	bl	d5b3e <_ZN14SdSpiAltDriver7receiveEv>
   d58ba:	6860      	ldr	r0, [r4, #4]
   d58bc:	f000 f93f 	bl	d5b3e <_ZN14SdSpiAltDriver7receiveEv>
   d58c0:	e7d0      	b.n	d5864 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d58c2:	bf00      	nop
   d58c4:	0003d090 	.word	0x0003d090

000d58c8 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d58c8:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d58ca:	7a83      	ldrb	r3, [r0, #10]
   d58cc:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d58ce:	bf18      	it	ne
   d58d0:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d58d2:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d58d4:	460a      	mov	r2, r1
   d58d6:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d58d8:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d58da:	f7ff fefd 	bl	d56d8 <_ZN9SdSpiCard11cardCommandEhm>
   d58de:	b110      	cbz	r0, d58e6 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d58e0:	2330      	movs	r3, #48	; 0x30
   d58e2:	7023      	strb	r3, [r4, #0]
   d58e4:	e00b      	b.n	d58fe <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d58e6:	4629      	mov	r1, r5
   d58e8:	f44f 7200 	mov.w	r2, #512	; 0x200
   d58ec:	4620      	mov	r0, r4
   d58ee:	f7ff fead 	bl	d564c <_ZN9SdSpiCard8readDataEPhj>
   d58f2:	4605      	mov	r5, r0
   d58f4:	b118      	cbz	r0, d58fe <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d58f6:	4620      	mov	r0, r4
   d58f8:	f7ff fe95 	bl	d5626 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d58fc:	e003      	b.n	d5906 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d58fe:	4620      	mov	r0, r4
   d5900:	f7ff fe91 	bl	d5626 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5904:	2500      	movs	r5, #0
}
   d5906:	4628      	mov	r0, r5
   d5908:	bd38      	pop	{r3, r4, r5, pc}

000d590a <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d590a:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d590c:	7a83      	ldrb	r3, [r0, #10]
   d590e:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5910:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5912:	bf18      	it	ne
   d5914:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d5916:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5918:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d591a:	f7ff fedd 	bl	d56d8 <_ZN9SdSpiCard11cardCommandEhm>
   d591e:	b130      	cbz	r0, d592e <_ZN9SdSpiCard9readStartEm+0x24>
   d5920:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d5922:	4620      	mov	r0, r4
   d5924:	7023      	strb	r3, [r4, #0]
   d5926:	f7ff fe7e 	bl	d5626 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d592a:	2000      	movs	r0, #0
   d592c:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d592e:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5930:	bd10      	pop	{r4, pc}

000d5932 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d5932:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d5934:	2200      	movs	r2, #0
   d5936:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d5938:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d593a:	f7ff fecd 	bl	d56d8 <_ZN9SdSpiCard11cardCommandEhm>
   d593e:	b130      	cbz	r0, d594e <_ZN9SdSpiCard8readStopEv+0x1c>
   d5940:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d5942:	4620      	mov	r0, r4
   d5944:	7023      	strb	r3, [r4, #0]
   d5946:	f7ff fe6e 	bl	d5626 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d594a:	2000      	movs	r0, #0
   d594c:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d594e:	4620      	mov	r0, r4
   d5950:	f7ff fe69 	bl	d5626 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5954:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5956:	bd10      	pop	{r4, pc}

000d5958 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d5958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d595a:	4605      	mov	r5, r0
   d595c:	4616      	mov	r6, r2
   d595e:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d5960:	f7ff ffd3 	bl	d590a <_ZN9SdSpiCard9readStartEm>
   d5964:	b198      	cbz	r0, d598e <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d5966:	2400      	movs	r4, #0
   d5968:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d596a:	429f      	cmp	r7, r3
   d596c:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d5970:	d908      	bls.n	d5984 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d5972:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5976:	4628      	mov	r0, r5
   d5978:	f7ff fe68 	bl	d564c <_ZN9SdSpiCard8readDataEPhj>
   d597c:	3401      	adds	r4, #1
   d597e:	2800      	cmp	r0, #0
   d5980:	d1f2      	bne.n	d5968 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d5982:	e004      	b.n	d598e <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d5984:	4628      	mov	r0, r5
}
   d5986:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d598a:	f7ff bfd2 	b.w	d5932 <_ZN9SdSpiCard8readStopEv>
}
   d598e:	2000      	movs	r0, #0
   d5990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5992 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d5992:	b538      	push	{r3, r4, r5, lr}
   d5994:	4604      	mov	r4, r0
   d5996:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5998:	6840      	ldr	r0, [r0, #4]
   d599a:	f000 f8eb 	bl	d5b74 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d599e:	f44f 7200 	mov.w	r2, #512	; 0x200
   d59a2:	4629      	mov	r1, r5
   d59a4:	6860      	ldr	r0, [r4, #4]
   d59a6:	f000 f8e9 	bl	d5b7c <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d59aa:	21ff      	movs	r1, #255	; 0xff
   d59ac:	6860      	ldr	r0, [r4, #4]
   d59ae:	f000 f8e1 	bl	d5b74 <_ZN14SdSpiAltDriver4sendEh>
   d59b2:	21ff      	movs	r1, #255	; 0xff
   d59b4:	6860      	ldr	r0, [r4, #4]
   d59b6:	f000 f8dd 	bl	d5b74 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d59ba:	6860      	ldr	r0, [r4, #4]
   d59bc:	f000 f8bf 	bl	d5b3e <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d59c0:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d59c2:	f000 001f 	and.w	r0, r0, #31
   d59c6:	2805      	cmp	r0, #5
   d59c8:	d006      	beq.n	d59d8 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d59ca:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d59cc:	4620      	mov	r0, r4
   d59ce:	7023      	strb	r3, [r4, #0]
   d59d0:	f7ff fe29 	bl	d5626 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d59d4:	2000      	movs	r0, #0
   d59d6:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d59d8:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d59da:	bd38      	pop	{r3, r4, r5, pc}

000d59dc <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d59dc:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d59de:	7a83      	ldrb	r3, [r0, #10]
   d59e0:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d59e2:	bf18      	it	ne
   d59e4:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d59e6:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d59e8:	460a      	mov	r2, r1
   d59ea:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d59ec:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d59ee:	f7ff fe73 	bl	d56d8 <_ZN9SdSpiCard11cardCommandEhm>
   d59f2:	4606      	mov	r6, r0
   d59f4:	b108      	cbz	r0, d59fa <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d59f6:	2332      	movs	r3, #50	; 0x32
   d59f8:	e01d      	b.n	d5a36 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d59fa:	462a      	mov	r2, r5
   d59fc:	21fe      	movs	r1, #254	; 0xfe
   d59fe:	4620      	mov	r0, r4
   d5a00:	f7ff ffc7 	bl	d5992 <_ZN9SdSpiCard9writeDataEhPKh>
   d5a04:	b1c0      	cbz	r0, d5a38 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5a06:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d5a0a:	4620      	mov	r0, r4
   d5a0c:	f7ff fe4f 	bl	d56ae <_ZN9SdSpiCard11waitNotBusyEt>
   d5a10:	4605      	mov	r5, r0
   d5a12:	b908      	cbnz	r0, d5a18 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d5a14:	235a      	movs	r3, #90	; 0x5a
   d5a16:	e00e      	b.n	d5a36 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d5a18:	4632      	mov	r2, r6
   d5a1a:	210d      	movs	r1, #13
   d5a1c:	4620      	mov	r0, r4
   d5a1e:	f7ff fe5b 	bl	d56d8 <_ZN9SdSpiCard11cardCommandEhm>
   d5a22:	b938      	cbnz	r0, d5a34 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5a24:	6860      	ldr	r0, [r4, #4]
   d5a26:	f000 f88a 	bl	d5b3e <_ZN14SdSpiAltDriver7receiveEv>
   d5a2a:	b918      	cbnz	r0, d5a34 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d5a2c:	4620      	mov	r0, r4
   d5a2e:	f7ff fdfa 	bl	d5626 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5a32:	e005      	b.n	d5a40 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5a34:	2329      	movs	r3, #41	; 0x29
   d5a36:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d5a38:	4620      	mov	r0, r4
   d5a3a:	f7ff fdf4 	bl	d5626 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5a3e:	2500      	movs	r5, #0
}
   d5a40:	4628      	mov	r0, r5
   d5a42:	bd70      	pop	{r4, r5, r6, pc}

000d5a44 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5a44:	b538      	push	{r3, r4, r5, lr}
   d5a46:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5a48:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5a4c:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5a4e:	f7ff fe2e 	bl	d56ae <_ZN9SdSpiCard11waitNotBusyEt>
   d5a52:	b910      	cbnz	r0, d5a5a <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d5a54:	235b      	movs	r3, #91	; 0x5b
   d5a56:	7023      	strb	r3, [r4, #0]
   d5a58:	e005      	b.n	d5a66 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d5a5a:	462a      	mov	r2, r5
   d5a5c:	21fc      	movs	r1, #252	; 0xfc
   d5a5e:	4620      	mov	r0, r4
   d5a60:	f7ff ff97 	bl	d5992 <_ZN9SdSpiCard9writeDataEhPKh>
   d5a64:	b918      	cbnz	r0, d5a6e <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5a66:	4620      	mov	r0, r4
   d5a68:	f7ff fddd 	bl	d5626 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5a6c:	2000      	movs	r0, #0
}
   d5a6e:	bd38      	pop	{r3, r4, r5, pc}

000d5a70 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5a70:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5a72:	7a83      	ldrb	r3, [r0, #10]
   d5a74:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5a76:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5a78:	bf18      	it	ne
   d5a7a:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5a7c:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5a7e:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5a80:	f7ff fe2a 	bl	d56d8 <_ZN9SdSpiCard11cardCommandEhm>
   d5a84:	b130      	cbz	r0, d5a94 <_ZN9SdSpiCard10writeStartEm+0x24>
   d5a86:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5a88:	4620      	mov	r0, r4
   d5a8a:	7023      	strb	r3, [r4, #0]
   d5a8c:	f7ff fdcb 	bl	d5626 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5a90:	2000      	movs	r0, #0
   d5a92:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d5a94:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5a96:	bd10      	pop	{r4, pc}

000d5a98 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5a98:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5a9a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5a9e:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5aa0:	f7ff fe05 	bl	d56ae <_ZN9SdSpiCard11waitNotBusyEt>
   d5aa4:	4605      	mov	r5, r0
   d5aa6:	b120      	cbz	r0, d5ab2 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5aa8:	21fd      	movs	r1, #253	; 0xfd
   d5aaa:	6860      	ldr	r0, [r4, #4]
   d5aac:	f000 f862 	bl	d5b74 <_ZN14SdSpiAltDriver4sendEh>
   d5ab0:	e001      	b.n	d5ab6 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5ab2:	2356      	movs	r3, #86	; 0x56
   d5ab4:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d5ab6:	4620      	mov	r0, r4
   d5ab8:	f7ff fdb5 	bl	d5626 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5abc:	4628      	mov	r0, r5
   d5abe:	bd38      	pop	{r3, r4, r5, pc}

000d5ac0 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d5ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ac2:	4605      	mov	r5, r0
   d5ac4:	4616      	mov	r6, r2
   d5ac6:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d5ac8:	f7ff ffd2 	bl	d5a70 <_ZN9SdSpiCard10writeStartEm>
   d5acc:	b170      	cbz	r0, d5aec <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d5ace:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5ad0:	42bc      	cmp	r4, r7
   d5ad2:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5ad6:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5ad8:	d004      	beq.n	d5ae4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d5ada:	f7ff ffb3 	bl	d5a44 <_ZN9SdSpiCard9writeDataEPKh>
   d5ade:	b128      	cbz	r0, d5aec <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5ae0:	3401      	adds	r4, #1
   d5ae2:	e7f5      	b.n	d5ad0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d5ae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5ae8:	f7ff bfd6 	b.w	d5a98 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d5aec:	4628      	mov	r0, r5
   d5aee:	f7ff fd9a 	bl	d5626 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5af2:	2000      	movs	r0, #0
   d5af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5af6 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d5af6:	f000 b9f3 	b.w	d5ee0 <HAL_Pin_Map>

000d5afa <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d5afa:	f000 b9f1 	b.w	d5ee0 <HAL_Pin_Map>

000d5afe <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d5afe:	f000 b9ef 	b.w	d5ee0 <HAL_Pin_Map>
	...

000d5b04 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d5b04:	4b01      	ldr	r3, [pc, #4]	; (d5b0c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d5b06:	2201      	movs	r2, #1
   d5b08:	701a      	strb	r2, [r3, #0]
   d5b0a:	4770      	bx	lr
   d5b0c:	2003e3d8 	.word	0x2003e3d8

000d5b10 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d5b10:	1d01      	adds	r1, r0, #4
   d5b12:	6800      	ldr	r0, [r0, #0]
   d5b14:	f000 bc80 	b.w	d6418 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d5b18 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d5b18:	b510      	push	{r4, lr}
   d5b1a:	4604      	mov	r4, r0
  m_csPin = csPin;
   d5b1c:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d5b1e:	6800      	ldr	r0, [r0, #0]
   d5b20:	f000 fc50 	bl	d63c4 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d5b24:	7d20      	ldrb	r0, [r4, #20]
   d5b26:	2101      	movs	r1, #1
   d5b28:	f001 fa74 	bl	d7014 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d5b2c:	7d20      	ldrb	r0, [r4, #20]
   d5b2e:	2101      	movs	r1, #1
}
   d5b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d5b34:	f001 ba7f 	b.w	d7036 <digitalWrite>

000d5b38 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d5b38:	6800      	ldr	r0, [r0, #0]
   d5b3a:	f000 bc54 	b.w	d63e6 <_ZN8SPIClass14endTransactionEv>

000d5b3e <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d5b3e:	21ff      	movs	r1, #255	; 0xff
   d5b40:	6800      	ldr	r0, [r0, #0]
   d5b42:	f000 bcd9 	b.w	d64f8 <_ZN8SPIClass8transferEh>
	...

000d5b48 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d5b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5b4a:	4b08      	ldr	r3, [pc, #32]	; (d5b6c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d5b4c:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5b4e:	2500      	movs	r5, #0
   d5b50:	4c07      	ldr	r4, [pc, #28]	; (d5b70 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5b52:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5b54:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5b56:	4613      	mov	r3, r2
   d5b58:	460a      	mov	r2, r1
   d5b5a:	4629      	mov	r1, r5
   d5b5c:	f000 fcd2 	bl	d6504 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d5b60:	7823      	ldrb	r3, [r4, #0]
   d5b62:	2b00      	cmp	r3, #0
   d5b64:	d0fc      	beq.n	d5b60 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d5b66:	2000      	movs	r0, #0
   d5b68:	b003      	add	sp, #12
   d5b6a:	bd30      	pop	{r4, r5, pc}
   d5b6c:	000d5b05 	.word	0x000d5b05
   d5b70:	2003e3d8 	.word	0x2003e3d8

000d5b74 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d5b74:	6800      	ldr	r0, [r0, #0]
   d5b76:	f000 bcbf 	b.w	d64f8 <_ZN8SPIClass8transferEh>
	...

000d5b7c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d5b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5b7e:	4b07      	ldr	r3, [pc, #28]	; (d5b9c <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d5b80:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5b82:	2500      	movs	r5, #0
   d5b84:	4c06      	ldr	r4, [pc, #24]	; (d5ba0 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5b86:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5b88:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5b8a:	4613      	mov	r3, r2
   d5b8c:	462a      	mov	r2, r5
   d5b8e:	f000 fcb9 	bl	d6504 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d5b92:	7823      	ldrb	r3, [r4, #0]
   d5b94:	2b00      	cmp	r3, #0
   d5b96:	d0fc      	beq.n	d5b92 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d5b98:	b003      	add	sp, #12
   d5b9a:	bd30      	pop	{r4, r5, pc}
   d5b9c:	000d5b05 	.word	0x000d5b05
   d5ba0:	2003e3d8 	.word	0x2003e3d8

000d5ba4 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d5ba4:	f000 b99c 	b.w	d5ee0 <HAL_Pin_Map>

000d5ba8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   d5ba8:	b510      	push	{r4, lr}
   d5baa:	b08a      	sub	sp, #40	; 0x28
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5bac:	e88d 000c 	stmia.w	sp, {r2, r3}
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   d5bb0:	460c      	mov	r4, r1
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d5bb2:	2120      	movs	r1, #32
   d5bb4:	9102      	str	r1, [sp, #8]
    attr.flags = 0;
   d5bb6:	2100      	movs	r1, #0
   d5bb8:	9103      	str	r1, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5bba:	460b      	mov	r3, r1
   d5bbc:	aa02      	add	r2, sp, #8
   d5bbe:	6801      	ldr	r1, [r0, #0]
   d5bc0:	4620      	mov	r0, r4
   d5bc2:	f000 fb0d 	bl	d61e0 <log_message_v>
}
   d5bc6:	b00a      	add	sp, #40	; 0x28
   d5bc8:	bd10      	pop	{r4, pc}

000d5bca <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5bca:	b40e      	push	{r1, r2, r3}
   d5bcc:	b503      	push	{r0, r1, lr}
   d5bce:	ab03      	add	r3, sp, #12
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d5bd0:	211e      	movs	r1, #30
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5bd2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
   d5bd6:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_INFO, fmt, args);
   d5bd8:	f7ff ffe6 	bl	d5ba8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
    va_end(args);
}
   d5bdc:	b002      	add	sp, #8
   d5bde:	f85d eb04 	ldr.w	lr, [sp], #4
   d5be2:	b003      	add	sp, #12
   d5be4:	4770      	bx	lr

000d5be6 <_ZNK5spark6Logger4warnEPKcz>:

inline void spark::Logger::warn(const char *fmt, ...) const {
   d5be6:	b40e      	push	{r1, r2, r3}
   d5be8:	b503      	push	{r0, r1, lr}
   d5bea:	ab03      	add	r3, sp, #12
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
   d5bec:	2128      	movs	r1, #40	; 0x28
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}

inline void spark::Logger::warn(const char *fmt, ...) const {
   d5bee:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
   d5bf2:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_WARN, fmt, args);
   d5bf4:	f7ff ffd8 	bl	d5ba8 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
    va_end(args);
}
   d5bf8:	b002      	add	sp, #8
   d5bfa:	f85d eb04 	ldr.w	lr, [sp], #4
   d5bfe:	b003      	add	sp, #12
   d5c00:	4770      	bx	lr
	...

000d5c04 <_ZN12uCamIII_Base9hardResetEv>:
  
  return 0;
}

void uCamIII_Base::hardReset()
{
   d5c04:	b510      	push	{r4, lr}
   d5c06:	4604      	mov	r4, r0
  Log.trace(__FUNCTION__); 
   d5c08:	490d      	ldr	r1, [pc, #52]	; (d5c40 <_ZN12uCamIII_Base9hardResetEv+0x3c>)
   d5c0a:	480e      	ldr	r0, [pc, #56]	; (d5c44 <_ZN12uCamIII_Base9hardResetEv+0x40>)
   d5c0c:	f7fe fa92 	bl	d4134 <_ZNK5spark6Logger5traceEPKcz>

  if (_resetPin > 0)
   d5c10:	6860      	ldr	r0, [r4, #4]
   d5c12:	2800      	cmp	r0, #0
   d5c14:	dd13      	ble.n	d5c3e <_ZN12uCamIII_Base9hardResetEv+0x3a>
  {
    pinMode(_resetPin, OUTPUT);
   d5c16:	2101      	movs	r1, #1
   d5c18:	b280      	uxth	r0, r0
   d5c1a:	f001 f9fb 	bl	d7014 <pinMode>
    digitalWrite(_resetPin, LOW);
   d5c1e:	2100      	movs	r1, #0
   d5c20:	88a0      	ldrh	r0, [r4, #4]
   d5c22:	f001 fa08 	bl	d7036 <digitalWrite>
    delay(10);
   d5c26:	200a      	movs	r0, #10
   d5c28:	f000 fd9a 	bl	d6760 <delay>
    pinMode(_resetPin, INPUT);
   d5c2c:	88a0      	ldrh	r0, [r4, #4]
   d5c2e:	2100      	movs	r1, #0
   d5c30:	f001 f9f0 	bl	d7014 <pinMode>
    delay(10);
   d5c34:	200a      	movs	r0, #10
  }
}
   d5c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  {
    pinMode(_resetPin, OUTPUT);
    digitalWrite(_resetPin, LOW);
    delay(10);
    pinMode(_resetPin, INPUT);
    delay(10);
   d5c3a:	f000 bd91 	b.w	d6760 <delay>
   d5c3e:	bd10      	pop	{r4, pc}
   d5c40:	000d77ed 	.word	0x000d77ed
   d5c44:	2003e3f4 	.word	0x2003e3f4

000d5c48 <_ZN12uCamIII_Base7sendCmdE11uCamIII_CMDhhhh>:
}

// ----------------------------------- protected ----------------------------------------

long uCamIII_Base::sendCmd(uCamIII_CMD cmd, uint8_t p1, uint8_t p2, uint8_t p3, uint8_t p4)
{
   d5c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5c4c:	b086      	sub	sp, #24
  Log.trace(__FUNCTION__); 
   d5c4e:	4c15      	ldr	r4, [pc, #84]	; (d5ca4 <_ZN12uCamIII_Base7sendCmdE11uCamIII_CMDhhhh+0x5c>)
}

// ----------------------------------- protected ----------------------------------------

long uCamIII_Base::sendCmd(uCamIII_CMD cmd, uint8_t p1, uint8_t p2, uint8_t p3, uint8_t p4)
{
   d5c50:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   d5c54:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
   d5c58:	4616      	mov	r6, r2
   d5c5a:	461f      	mov	r7, r3
   d5c5c:	460d      	mov	r5, r1
   d5c5e:	4682      	mov	sl, r0
  Log.trace(__FUNCTION__); 
   d5c60:	4911      	ldr	r1, [pc, #68]	; (d5ca8 <_ZN12uCamIII_Base7sendCmdE11uCamIII_CMDhhhh+0x60>)
   d5c62:	4620      	mov	r0, r4
   d5c64:	f7fe fa66 	bl	d4134 <_ZNK5spark6Logger5traceEPKcz>

  uint8_t buf[6] = { uCamIII_STARTBYTE, cmd, p1, p2, p3, p4 };
   d5c68:	22aa      	movs	r2, #170	; 0xaa
  Log.info("sendCmd: %02X %02X %02X %02X %02X %02X", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5]);
   d5c6a:	462b      	mov	r3, r5
   d5c6c:	4620      	mov	r0, r4
   d5c6e:	e88d 03c0 	stmia.w	sp, {r6, r7, r8, r9}
   d5c72:	490e      	ldr	r1, [pc, #56]	; (d5cac <_ZN12uCamIII_Base7sendCmdE11uCamIII_CMDhhhh+0x64>)

long uCamIII_Base::sendCmd(uCamIII_CMD cmd, uint8_t p1, uint8_t p2, uint8_t p3, uint8_t p4)
{
  Log.trace(__FUNCTION__); 

  uint8_t buf[6] = { uCamIII_STARTBYTE, cmd, p1, p2, p3, p4 };
   d5c74:	f88d 2010 	strb.w	r2, [sp, #16]
   d5c78:	f88d 5011 	strb.w	r5, [sp, #17]
   d5c7c:	f88d 6012 	strb.w	r6, [sp, #18]
   d5c80:	f88d 7013 	strb.w	r7, [sp, #19]
   d5c84:	f88d 8014 	strb.w	r8, [sp, #20]
   d5c88:	f88d 9015 	strb.w	r9, [sp, #21]
  Log.info("sendCmd: %02X %02X %02X %02X %02X %02X", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5]);
   d5c8c:	f7ff ff9d 	bl	d5bca <_ZNK5spark6Logger4infoEPKcz>
  return _cameraStream.write(buf, 6);
   d5c90:	f8da 0000 	ldr.w	r0, [sl]
   d5c94:	6803      	ldr	r3, [r0, #0]
   d5c96:	2206      	movs	r2, #6
   d5c98:	68db      	ldr	r3, [r3, #12]
   d5c9a:	a904      	add	r1, sp, #16
   d5c9c:	4798      	blx	r3
}
   d5c9e:	b006      	add	sp, #24
   d5ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5ca4:	2003e3f4 	.word	0x2003e3f4
   d5ca8:	000d76fc 	.word	0x000d76fc
   d5cac:	000d7722 	.word	0x000d7722

000d5cb0 <_ZN12uCamIII_Base13expectPackageE11uCamIII_CMDh>:
  sendCmd(cmd, p1, p2, p3, p4);
  return expectPackage(uCamIII_CMD_ACK, cmd);
}

long uCamIII_Base::expectPackage(uCamIII_CMD pkg, uint8_t option)
{
   d5cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5cb2:	b089      	sub	sp, #36	; 0x24
   d5cb4:	4604      	mov	r4, r0
  Log.trace("%s(%02x,%02x)", __FUNCTION__, pkg, option); 
   d5cb6:	460b      	mov	r3, r1
   d5cb8:	9200      	str	r2, [sp, #0]
   d5cba:	482d      	ldr	r0, [pc, #180]	; (d5d70 <_ZN12uCamIII_Base13expectPackageE11uCamIII_CMDh+0xc0>)
  sendCmd(cmd, p1, p2, p3, p4);
  return expectPackage(uCamIII_CMD_ACK, cmd);
}

long uCamIII_Base::expectPackage(uCamIII_CMD pkg, uint8_t option)
{
   d5cbc:	460f      	mov	r7, r1
   d5cbe:	4615      	mov	r5, r2
  Log.trace("%s(%02x,%02x)", __FUNCTION__, pkg, option); 
   d5cc0:	492c      	ldr	r1, [pc, #176]	; (d5d74 <_ZN12uCamIII_Base13expectPackageE11uCamIII_CMDh+0xc4>)
   d5cc2:	4a2d      	ldr	r2, [pc, #180]	; (d5d78 <_ZN12uCamIII_Base13expectPackageE11uCamIII_CMDh+0xc8>)
   d5cc4:	f7fe fa36 	bl	d4134 <_ZNK5spark6Logger5traceEPKcz>
  uint8_t buf[6];
  memset(buf, 0x00, sizeof(buf));
   d5cc8:	2600      	movs	r6, #0

  if (_cameraStream.readBytes((char*)buf, sizeof(buf)) == sizeof(buf))
   d5cca:	2206      	movs	r2, #6
   d5ccc:	a906      	add	r1, sp, #24
   d5cce:	6820      	ldr	r0, [r4, #0]

long uCamIII_Base::expectPackage(uCamIII_CMD pkg, uint8_t option)
{
  Log.trace("%s(%02x,%02x)", __FUNCTION__, pkg, option); 
  uint8_t buf[6];
  memset(buf, 0x00, sizeof(buf));
   d5cd0:	9606      	str	r6, [sp, #24]
   d5cd2:	f8ad 601c 	strh.w	r6, [sp, #28]

  if (_cameraStream.readBytes((char*)buf, sizeof(buf)) == sizeof(buf))
   d5cd6:	f000 fd1b 	bl	d6710 <_ZN6Stream9readBytesEPcj>
   d5cda:	2806      	cmp	r0, #6
   d5cdc:	d12e      	bne.n	d5d3c <_ZN12uCamIII_Base13expectPackageE11uCamIII_CMDh+0x8c>
  {
    _lastError = 0;
    Log.trace("received: %02X %02X %02X %02X %02X %02X", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5]);
   d5cde:	f89d 101d 	ldrb.w	r1, [sp, #29]
   d5ce2:	9103      	str	r1, [sp, #12]
   d5ce4:	f89d 101c 	ldrb.w	r1, [sp, #28]
   d5ce8:	9102      	str	r1, [sp, #8]
   d5cea:	f89d 101b 	ldrb.w	r1, [sp, #27]
   d5cee:	9101      	str	r1, [sp, #4]
   d5cf0:	f89d 101a 	ldrb.w	r1, [sp, #26]
   d5cf4:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d5cf8:	f89d 2018 	ldrb.w	r2, [sp, #24]
   d5cfc:	9100      	str	r1, [sp, #0]
  uint8_t buf[6];
  memset(buf, 0x00, sizeof(buf));

  if (_cameraStream.readBytes((char*)buf, sizeof(buf)) == sizeof(buf))
  {
    _lastError = 0;
   d5cfe:	7526      	strb	r6, [r4, #20]
    Log.trace("received: %02X %02X %02X %02X %02X %02X", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5]);
   d5d00:	491e      	ldr	r1, [pc, #120]	; (d5d7c <_ZN12uCamIII_Base13expectPackageE11uCamIII_CMDh+0xcc>)
   d5d02:	481b      	ldr	r0, [pc, #108]	; (d5d70 <_ZN12uCamIII_Base13expectPackageE11uCamIII_CMDh+0xc0>)
   d5d04:	f7fe fa16 	bl	d4134 <_ZNK5spark6Logger5traceEPKcz>
    if (buf[1] == pkg && (buf[2] == option || option == uCamIII_DONT_CARE)) 
   d5d08:	f89d 2019 	ldrb.w	r2, [sp, #25]
   d5d0c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d5d10:	4297      	cmp	r7, r2
   d5d12:	d110      	bne.n	d5d36 <_ZN12uCamIII_Base13expectPackageE11uCamIII_CMDh+0x86>
   d5d14:	f89d 101a 	ldrb.w	r1, [sp, #26]
   d5d18:	42a9      	cmp	r1, r5
   d5d1a:	d001      	beq.n	d5d20 <_ZN12uCamIII_Base13expectPackageE11uCamIII_CMDh+0x70>
   d5d1c:	2dff      	cmp	r5, #255	; 0xff
   d5d1e:	d10a      	bne.n	d5d36 <_ZN12uCamIII_Base13expectPackageE11uCamIII_CMDh+0x86>
      return buf[3] | buf[4] << 8 | buf[5] << 16 | 0x1000000;
   d5d20:	f89d 001b 	ldrb.w	r0, [sp, #27]
   d5d24:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   d5d28:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d5d2c:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d5d30:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   d5d34:	e019      	b.n	d5d6a <_ZN12uCamIII_Base13expectPackageE11uCamIII_CMDh+0xba>
    else if (buf[1] == uCamIII_CMD_NAK)
   d5d36:	2a0f      	cmp	r2, #15
      _lastError = buf[4];
   d5d38:	bf08      	it	eq
   d5d3a:	7523      	strbeq	r3, [r4, #20]
  }
  
  Log.warn("timeout: %02X %02X %02X %02X %02X %02X (%lu)", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], _timeout);
   d5d3c:	68a1      	ldr	r1, [r4, #8]
   d5d3e:	9104      	str	r1, [sp, #16]
   d5d40:	f89d 101d 	ldrb.w	r1, [sp, #29]
   d5d44:	9103      	str	r1, [sp, #12]
   d5d46:	f89d 101c 	ldrb.w	r1, [sp, #28]
   d5d4a:	9102      	str	r1, [sp, #8]
   d5d4c:	f89d 101b 	ldrb.w	r1, [sp, #27]
   d5d50:	9101      	str	r1, [sp, #4]
   d5d52:	f89d 101a 	ldrb.w	r1, [sp, #26]
   d5d56:	9100      	str	r1, [sp, #0]
   d5d58:	4805      	ldr	r0, [pc, #20]	; (d5d70 <_ZN12uCamIII_Base13expectPackageE11uCamIII_CMDh+0xc0>)
   d5d5a:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d5d5e:	f89d 2018 	ldrb.w	r2, [sp, #24]
   d5d62:	4907      	ldr	r1, [pc, #28]	; (d5d80 <_ZN12uCamIII_Base13expectPackageE11uCamIII_CMDh+0xd0>)
   d5d64:	f7ff ff3f 	bl	d5be6 <_ZNK5spark6Logger4warnEPKcz>
  return 0;
   d5d68:	2000      	movs	r0, #0
}
   d5d6a:	b009      	add	sp, #36	; 0x24
   d5d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5d6e:	bf00      	nop
   d5d70:	2003e3f4 	.word	0x2003e3f4
   d5d74:	000d7749 	.word	0x000d7749
   d5d78:	000d7709 	.word	0x000d7709
   d5d7c:	000d7757 	.word	0x000d7757
   d5d80:	000d777f 	.word	0x000d777f

000d5d84 <_ZN12uCamIII_Base14sendCmdWithAckE11uCamIII_CMDhhhh>:
  Log.info("sendCmd: %02X %02X %02X %02X %02X %02X", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5]);
  return _cameraStream.write(buf, 6);
}

long uCamIII_Base::sendCmdWithAck(uCamIII_CMD cmd, uint8_t p1, uint8_t p2, uint8_t p3, uint8_t p4) 
{
   d5d84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5d88:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5d8c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   d5d90:	4604      	mov	r4, r0
   d5d92:	460d      	mov	r5, r1
   d5d94:	4616      	mov	r6, r2
   d5d96:	461f      	mov	r7, r3
  Log.trace(__FUNCTION__); 
   d5d98:	4909      	ldr	r1, [pc, #36]	; (d5dc0 <_ZN12uCamIII_Base14sendCmdWithAckE11uCamIII_CMDhhhh+0x3c>)
   d5d9a:	480a      	ldr	r0, [pc, #40]	; (d5dc4 <_ZN12uCamIII_Base14sendCmdWithAckE11uCamIII_CMDhhhh+0x40>)
   d5d9c:	f7fe f9ca 	bl	d4134 <_ZNK5spark6Logger5traceEPKcz>

  sendCmd(cmd, p1, p2, p3, p4);
   d5da0:	4632      	mov	r2, r6
   d5da2:	4629      	mov	r1, r5
   d5da4:	e88d 0300 	stmia.w	sp, {r8, r9}
   d5da8:	463b      	mov	r3, r7
   d5daa:	4620      	mov	r0, r4
   d5dac:	f7ff ff4c 	bl	d5c48 <_ZN12uCamIII_Base7sendCmdE11uCamIII_CMDhhhh>
  return expectPackage(uCamIII_CMD_ACK, cmd);
   d5db0:	462a      	mov	r2, r5
   d5db2:	210e      	movs	r1, #14
   d5db4:	4620      	mov	r0, r4
}
   d5db6:	b003      	add	sp, #12
   d5db8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
long uCamIII_Base::sendCmdWithAck(uCamIII_CMD cmd, uint8_t p1, uint8_t p2, uint8_t p3, uint8_t p4) 
{
  Log.trace(__FUNCTION__); 

  sendCmd(cmd, p1, p2, p3, p4);
  return expectPackage(uCamIII_CMD_ACK, cmd);
   d5dbc:	f7ff bf78 	b.w	d5cb0 <_ZN12uCamIII_Base13expectPackageE11uCamIII_CMDh>
   d5dc0:	000d77de 	.word	0x000d77de
   d5dc4:	2003e3f4 	.word	0x2003e3f4

000d5dc8 <_ZN12uCamIII_Base4syncEi>:
  hardReset();
  return sync();
}

long uCamIII_Base::sync(int maxTry)
{
   d5dc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5dcc:	4605      	mov	r5, r0
   d5dce:	460e      	mov	r6, r1
  Log.trace(__FUNCTION__); 
   d5dd0:	481b      	ldr	r0, [pc, #108]	; (d5e40 <_ZN12uCamIII_Base4syncEi+0x78>)
   d5dd2:	491c      	ldr	r1, [pc, #112]	; (d5e44 <_ZN12uCamIII_Base4syncEi+0x7c>)
   d5dd4:	f7fe f9ae 	bl	d4134 <_ZNK5spark6Logger5traceEPKcz>

  int      tries;
  int      count;
  uint32_t ms = _timeout;
   d5dd8:	f8d5 8008 	ldr.w	r8, [r5, #8]
  
  for (tries = 1; tries < maxTry; tries++)
   d5ddc:	2401      	movs	r4, #1
  {
    _timeout = 5 + tries;                                       // start with 5ms timeout between syncs and increase by 1ms
    if ((count = sendCmdWithAck(uCamIII_CMD_SYNC))) break;
   d5dde:	2700      	movs	r7, #0

  int      tries;
  int      count;
  uint32_t ms = _timeout;
  
  for (tries = 1; tries < maxTry; tries++)
   d5de0:	42b4      	cmp	r4, r6
   d5de2:	da0c      	bge.n	d5dfe <_ZN12uCamIII_Base4syncEi+0x36>
  {
    _timeout = 5 + tries;                                       // start with 5ms timeout between syncs and increase by 1ms
   d5de4:	1d63      	adds	r3, r4, #5
   d5de6:	60ab      	str	r3, [r5, #8]
    if ((count = sendCmdWithAck(uCamIII_CMD_SYNC))) break;
   d5de8:	2300      	movs	r3, #0
   d5dea:	9701      	str	r7, [sp, #4]
   d5dec:	9700      	str	r7, [sp, #0]
   d5dee:	461a      	mov	r2, r3
   d5df0:	210d      	movs	r1, #13
   d5df2:	4628      	mov	r0, r5
   d5df4:	f7ff ffc6 	bl	d5d84 <_ZN12uCamIII_Base14sendCmdWithAckE11uCamIII_CMDhhhh>
   d5df8:	b908      	cbnz	r0, d5dfe <_ZN12uCamIII_Base4syncEi+0x36>

  int      tries;
  int      count;
  uint32_t ms = _timeout;
  
  for (tries = 1; tries < maxTry; tries++)
   d5dfa:	3401      	adds	r4, #1
   d5dfc:	e7f0      	b.n	d5de0 <_ZN12uCamIII_Base4syncEi+0x18>
  {
    _timeout = 5 + tries;                                       // start with 5ms timeout between syncs and increase by 1ms
    if ((count = sendCmdWithAck(uCamIII_CMD_SYNC))) break;
  }
  _timeout = ms;
  if (tries < maxTry)
   d5dfe:	42b4      	cmp	r4, r6
  for (tries = 1; tries < maxTry; tries++)
  {
    _timeout = 5 + tries;                                       // start with 5ms timeout between syncs and increase by 1ms
    if ((count = sendCmdWithAck(uCamIII_CMD_SYNC))) break;
  }
  _timeout = ms;
   d5e00:	f8c5 8008 	str.w	r8, [r5, #8]
  if (tries < maxTry)
   d5e04:	da14      	bge.n	d5e30 <_ZN12uCamIII_Base4syncEi+0x68>
  {
    Log.info("sync after %d tries", tries);    
   d5e06:	4622      	mov	r2, r4
   d5e08:	490f      	ldr	r1, [pc, #60]	; (d5e48 <_ZN12uCamIII_Base4syncEi+0x80>)
   d5e0a:	480d      	ldr	r0, [pc, #52]	; (d5e40 <_ZN12uCamIII_Base4syncEi+0x78>)
   d5e0c:	f7ff fedd 	bl	d5bca <_ZNK5spark6Logger4infoEPKcz>
    if (expectPackage(uCamIII_CMD_SYNC)) {
   d5e10:	22ff      	movs	r2, #255	; 0xff
   d5e12:	210d      	movs	r1, #13
   d5e14:	4628      	mov	r0, r5
   d5e16:	f7ff ff4b 	bl	d5cb0 <_ZN12uCamIII_Base13expectPackageE11uCamIII_CMDh>
   d5e1a:	b148      	cbz	r0, d5e30 <_ZN12uCamIII_Base4syncEi+0x68>
      sendCmd(uCamIII_CMD_ACK, uCamIII_CMD_SYNC);
   d5e1c:	2300      	movs	r3, #0
   d5e1e:	9301      	str	r3, [sp, #4]
   d5e20:	9300      	str	r3, [sp, #0]
   d5e22:	220d      	movs	r2, #13
   d5e24:	210e      	movs	r1, #14
   d5e26:	4628      	mov	r0, r5
   d5e28:	f7ff ff0e 	bl	d5c48 <_ZN12uCamIII_Base7sendCmdE11uCamIII_CMDhhhh>
      return tries;
   d5e2c:	4620      	mov	r0, r4
   d5e2e:	e004      	b.n	d5e3a <_ZN12uCamIII_Base4syncEi+0x72>
    }
  }
  
  Log.warn("no sync");
   d5e30:	4803      	ldr	r0, [pc, #12]	; (d5e40 <_ZN12uCamIII_Base4syncEi+0x78>)
   d5e32:	4906      	ldr	r1, [pc, #24]	; (d5e4c <_ZN12uCamIII_Base4syncEi+0x84>)
   d5e34:	f7ff fed7 	bl	d5be6 <_ZNK5spark6Logger4warnEPKcz>
  return 0;
   d5e38:	2000      	movs	r0, #0
}
   d5e3a:	b002      	add	sp, #8
   d5e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5e40:	2003e3f4 	.word	0x2003e3f4
   d5e44:	000d7704 	.word	0x000d7704
   d5e48:	000d77ac 	.word	0x000d77ac
   d5e4c:	000d77c0 	.word	0x000d77c0

000d5e50 <_ZN12uCamIII_Base4initEv>:
************************************************************************************* */

#include <uCamIII.h>

long uCamIII_Base::init() 
{
   d5e50:	b510      	push	{r4, lr}
  Log.trace("uCAMIII_Base: %s", __FUNCTION__); 
   d5e52:	4907      	ldr	r1, [pc, #28]	; (d5e70 <_ZN12uCamIII_Base4initEv+0x20>)
   d5e54:	4a07      	ldr	r2, [pc, #28]	; (d5e74 <_ZN12uCamIII_Base4initEv+0x24>)
************************************************************************************* */

#include <uCamIII.h>

long uCamIII_Base::init() 
{
   d5e56:	4604      	mov	r4, r0
  Log.trace("uCAMIII_Base: %s", __FUNCTION__); 
   d5e58:	4807      	ldr	r0, [pc, #28]	; (d5e78 <_ZN12uCamIII_Base4initEv+0x28>)
   d5e5a:	f7fe f96b 	bl	d4134 <_ZNK5spark6Logger5traceEPKcz>
  hardReset();
   d5e5e:	4620      	mov	r0, r4
   d5e60:	f7ff fed0 	bl	d5c04 <_ZN12uCamIII_Base9hardResetEv>
  return sync();
   d5e64:	4620      	mov	r0, r4
   d5e66:	213c      	movs	r1, #60	; 0x3c
}
   d5e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

long uCamIII_Base::init() 
{
  Log.trace("uCAMIII_Base: %s", __FUNCTION__); 
  hardReset();
  return sync();
   d5e6c:	f7ff bfac 	b.w	d5dc8 <_ZN12uCamIII_Base4syncEi>
   d5e70:	000d77c8 	.word	0x000d77c8
   d5e74:	000d77d9 	.word	0x000d77d9
   d5e78:	2003e3f4 	.word	0x2003e3f4

000d5e7c <_ZN12uCamIII_Base10getPictureE16uCamIII_PIC_TYPE>:
  Log.warn("no sync");
  return 0;
}

long uCamIII_Base::getPicture(uCamIII_PIC_TYPE type)
{
   d5e7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  Log.trace(__FUNCTION__); 

  if (sendCmdWithAck(uCamIII_CMD_GET_PICTURE, type))
   d5e7e:	2500      	movs	r5, #0
  Log.warn("no sync");
  return 0;
}

long uCamIII_Base::getPicture(uCamIII_PIC_TYPE type)
{
   d5e80:	4604      	mov	r4, r0
   d5e82:	460e      	mov	r6, r1
  Log.trace(__FUNCTION__); 
   d5e84:	480b      	ldr	r0, [pc, #44]	; (d5eb4 <_ZN12uCamIII_Base10getPictureE16uCamIII_PIC_TYPE+0x38>)
   d5e86:	490c      	ldr	r1, [pc, #48]	; (d5eb8 <_ZN12uCamIII_Base10getPictureE16uCamIII_PIC_TYPE+0x3c>)
   d5e88:	f7fe f954 	bl	d4134 <_ZNK5spark6Logger5traceEPKcz>

  if (sendCmdWithAck(uCamIII_CMD_GET_PICTURE, type))
   d5e8c:	9501      	str	r5, [sp, #4]
   d5e8e:	9500      	str	r5, [sp, #0]
   d5e90:	462b      	mov	r3, r5
   d5e92:	4632      	mov	r2, r6
   d5e94:	2104      	movs	r1, #4
   d5e96:	4620      	mov	r0, r4
   d5e98:	f7ff ff74 	bl	d5d84 <_ZN12uCamIII_Base14sendCmdWithAckE11uCamIII_CMDhhhh>
   d5e9c:	b140      	cbz	r0, d5eb0 <_ZN12uCamIII_Base10getPictureE16uCamIII_PIC_TYPE+0x34>
  {
    _packageNumber = 0;    
   d5e9e:	8265      	strh	r5, [r4, #18]
    return (_imageSize = expectPackage(uCamIII_CMD_DATA, type) & 0x00FFFFFF);   // return image size
   d5ea0:	4632      	mov	r2, r6
   d5ea2:	210a      	movs	r1, #10
   d5ea4:	4620      	mov	r0, r4
   d5ea6:	f7ff ff03 	bl	d5cb0 <_ZN12uCamIII_Base13expectPackageE11uCamIII_CMDh>
   d5eaa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   d5eae:	60e0      	str	r0, [r4, #12]
  }
  return 0;
}
   d5eb0:	b002      	add	sp, #8
   d5eb2:	bd70      	pop	{r4, r5, r6, pc}
   d5eb4:	2003e3f4 	.word	0x2003e3f4
   d5eb8:	000d7717 	.word	0x000d7717

000d5ebc <_GLOBAL__sub_I__ZN12uCamIII_Base4initEv>:
   d5ebc:	f000 b810 	b.w	d5ee0 <HAL_Pin_Map>

000d5ec0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5ec0:	b508      	push	{r3, lr}
   d5ec2:	4b02      	ldr	r3, [pc, #8]	; (d5ecc <netdb_freeaddrinfo+0xc>)
   d5ec4:	681b      	ldr	r3, [r3, #0]
   d5ec6:	689b      	ldr	r3, [r3, #8]
   d5ec8:	9301      	str	r3, [sp, #4]
   d5eca:	bd08      	pop	{r3, pc}
   d5ecc:	00030268 	.word	0x00030268

000d5ed0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5ed0:	b508      	push	{r3, lr}
   d5ed2:	4b02      	ldr	r3, [pc, #8]	; (d5edc <netdb_getaddrinfo+0xc>)
   d5ed4:	681b      	ldr	r3, [r3, #0]
   d5ed6:	68db      	ldr	r3, [r3, #12]
   d5ed8:	9301      	str	r3, [sp, #4]
   d5eda:	bd08      	pop	{r3, pc}
   d5edc:	00030268 	.word	0x00030268

000d5ee0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5ee0:	b508      	push	{r3, lr}
   d5ee2:	4b02      	ldr	r3, [pc, #8]	; (d5eec <HAL_Pin_Map+0xc>)
   d5ee4:	681b      	ldr	r3, [r3, #0]
   d5ee6:	681b      	ldr	r3, [r3, #0]
   d5ee8:	9301      	str	r3, [sp, #4]
   d5eea:	bd08      	pop	{r3, pc}
   d5eec:	0003022c 	.word	0x0003022c

000d5ef0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5ef0:	b508      	push	{r3, lr}
   d5ef2:	4b02      	ldr	r3, [pc, #8]	; (d5efc <HAL_Pin_Mode+0xc>)
   d5ef4:	681b      	ldr	r3, [r3, #0]
   d5ef6:	689b      	ldr	r3, [r3, #8]
   d5ef8:	9301      	str	r3, [sp, #4]
   d5efa:	bd08      	pop	{r3, pc}
   d5efc:	0003022c 	.word	0x0003022c

000d5f00 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5f00:	b508      	push	{r3, lr}
   d5f02:	4b02      	ldr	r3, [pc, #8]	; (d5f0c <HAL_Get_Pin_Mode+0xc>)
   d5f04:	681b      	ldr	r3, [r3, #0]
   d5f06:	68db      	ldr	r3, [r3, #12]
   d5f08:	9301      	str	r3, [sp, #4]
   d5f0a:	bd08      	pop	{r3, pc}
   d5f0c:	0003022c 	.word	0x0003022c

000d5f10 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5f10:	b508      	push	{r3, lr}
   d5f12:	4b02      	ldr	r3, [pc, #8]	; (d5f1c <HAL_GPIO_Write+0xc>)
   d5f14:	681b      	ldr	r3, [r3, #0]
   d5f16:	691b      	ldr	r3, [r3, #16]
   d5f18:	9301      	str	r3, [sp, #4]
   d5f1a:	bd08      	pop	{r3, pc}
   d5f1c:	0003022c 	.word	0x0003022c

000d5f20 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5f20:	b508      	push	{r3, lr}
   d5f22:	4b02      	ldr	r3, [pc, #8]	; (d5f2c <HAL_SPI_Begin+0xc>)
   d5f24:	681b      	ldr	r3, [r3, #0]
   d5f26:	681b      	ldr	r3, [r3, #0]
   d5f28:	9301      	str	r3, [sp, #4]
   d5f2a:	bd08      	pop	{r3, pc}
   d5f2c:	00030230 	.word	0x00030230

000d5f30 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5f30:	b508      	push	{r3, lr}
   d5f32:	4b02      	ldr	r3, [pc, #8]	; (d5f3c <HAL_SPI_Send_Receive_Data+0xc>)
   d5f34:	681b      	ldr	r3, [r3, #0]
   d5f36:	695b      	ldr	r3, [r3, #20]
   d5f38:	9301      	str	r3, [sp, #4]
   d5f3a:	bd08      	pop	{r3, pc}
   d5f3c:	00030230 	.word	0x00030230

000d5f40 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5f40:	b508      	push	{r3, lr}
   d5f42:	4b02      	ldr	r3, [pc, #8]	; (d5f4c <HAL_SPI_Init+0xc>)
   d5f44:	681b      	ldr	r3, [r3, #0]
   d5f46:	69db      	ldr	r3, [r3, #28]
   d5f48:	9301      	str	r3, [sp, #4]
   d5f4a:	bd08      	pop	{r3, pc}
   d5f4c:	00030230 	.word	0x00030230

000d5f50 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5f50:	b508      	push	{r3, lr}
   d5f52:	4b02      	ldr	r3, [pc, #8]	; (d5f5c <HAL_SPI_Is_Enabled+0xc>)
   d5f54:	681b      	ldr	r3, [r3, #0]
   d5f56:	6a1b      	ldr	r3, [r3, #32]
   d5f58:	9301      	str	r3, [sp, #4]
   d5f5a:	bd08      	pop	{r3, pc}
   d5f5c:	00030230 	.word	0x00030230

000d5f60 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5f60:	b508      	push	{r3, lr}
   d5f62:	4b02      	ldr	r3, [pc, #8]	; (d5f6c <HAL_SPI_Info+0xc>)
   d5f64:	681b      	ldr	r3, [r3, #0]
   d5f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5f68:	9301      	str	r3, [sp, #4]
   d5f6a:	bd08      	pop	{r3, pc}
   d5f6c:	00030230 	.word	0x00030230

000d5f70 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d5f70:	b508      	push	{r3, lr}
   d5f72:	4b02      	ldr	r3, [pc, #8]	; (d5f7c <HAL_SPI_DMA_Transfer+0xc>)
   d5f74:	681b      	ldr	r3, [r3, #0]
   d5f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5f78:	9301      	str	r3, [sp, #4]
   d5f7a:	bd08      	pop	{r3, pc}
   d5f7c:	00030230 	.word	0x00030230

000d5f80 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d5f80:	b508      	push	{r3, lr}
   d5f82:	4b02      	ldr	r3, [pc, #8]	; (d5f8c <HAL_SPI_DMA_Transfer_Status+0xc>)
   d5f84:	681b      	ldr	r3, [r3, #0]
   d5f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5f88:	9301      	str	r3, [sp, #4]
   d5f8a:	bd08      	pop	{r3, pc}
   d5f8c:	00030230 	.word	0x00030230

000d5f90 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5f90:	b508      	push	{r3, lr}
   d5f92:	4b02      	ldr	r3, [pc, #8]	; (d5f9c <HAL_SPI_Set_Settings+0xc>)
   d5f94:	681b      	ldr	r3, [r3, #0]
   d5f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5f98:	9301      	str	r3, [sp, #4]
   d5f9a:	bd08      	pop	{r3, pc}
   d5f9c:	00030230 	.word	0x00030230

000d5fa0 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5fa0:	b508      	push	{r3, lr}
   d5fa2:	4b02      	ldr	r3, [pc, #8]	; (d5fac <HAL_SPI_Acquire+0xc>)
   d5fa4:	681b      	ldr	r3, [r3, #0]
   d5fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5fa8:	9301      	str	r3, [sp, #4]
   d5faa:	bd08      	pop	{r3, pc}
   d5fac:	00030230 	.word	0x00030230

000d5fb0 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5fb0:	b508      	push	{r3, lr}
   d5fb2:	4b02      	ldr	r3, [pc, #8]	; (d5fbc <HAL_SPI_Release+0xc>)
   d5fb4:	681b      	ldr	r3, [r3, #0]
   d5fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5fb8:	9301      	str	r3, [sp, #4]
   d5fba:	bd08      	pop	{r3, pc}
   d5fbc:	00030230 	.word	0x00030230

000d5fc0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5fc0:	b508      	push	{r3, lr}
   d5fc2:	4b02      	ldr	r3, [pc, #8]	; (d5fcc <HAL_RNG_GetRandomNumber+0xc>)
   d5fc4:	681b      	ldr	r3, [r3, #0]
   d5fc6:	685b      	ldr	r3, [r3, #4]
   d5fc8:	9301      	str	r3, [sp, #4]
   d5fca:	bd08      	pop	{r3, pc}
   d5fcc:	00030218 	.word	0x00030218

000d5fd0 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d5fd0:	b508      	push	{r3, lr}
   d5fd2:	4b02      	ldr	r3, [pc, #8]	; (d5fdc <HAL_Timer_Get_Micro_Seconds+0xc>)
   d5fd4:	681b      	ldr	r3, [r3, #0]
   d5fd6:	691b      	ldr	r3, [r3, #16]
   d5fd8:	9301      	str	r3, [sp, #4]
   d5fda:	bd08      	pop	{r3, pc}
   d5fdc:	00030218 	.word	0x00030218

000d5fe0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5fe0:	b508      	push	{r3, lr}
   d5fe2:	4b02      	ldr	r3, [pc, #8]	; (d5fec <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5fe4:	681b      	ldr	r3, [r3, #0]
   d5fe6:	695b      	ldr	r3, [r3, #20]
   d5fe8:	9301      	str	r3, [sp, #4]
   d5fea:	bd08      	pop	{r3, pc}
   d5fec:	00030218 	.word	0x00030218

000d5ff0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5ff0:	b508      	push	{r3, lr}
   d5ff2:	4b02      	ldr	r3, [pc, #8]	; (d5ffc <os_thread_is_current+0xc>)
   d5ff4:	681b      	ldr	r3, [r3, #0]
   d5ff6:	689b      	ldr	r3, [r3, #8]
   d5ff8:	9301      	str	r3, [sp, #4]
   d5ffa:	bd08      	pop	{r3, pc}
   d5ffc:	00030248 	.word	0x00030248

000d6000 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6000:	b508      	push	{r3, lr}
   d6002:	4b02      	ldr	r3, [pc, #8]	; (d600c <os_thread_yield+0xc>)
   d6004:	681b      	ldr	r3, [r3, #0]
   d6006:	68db      	ldr	r3, [r3, #12]
   d6008:	9301      	str	r3, [sp, #4]
   d600a:	bd08      	pop	{r3, pc}
   d600c:	00030248 	.word	0x00030248

000d6010 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6010:	b508      	push	{r3, lr}
   d6012:	4b02      	ldr	r3, [pc, #8]	; (d601c <os_thread_join+0xc>)
   d6014:	681b      	ldr	r3, [r3, #0]
   d6016:	691b      	ldr	r3, [r3, #16]
   d6018:	9301      	str	r3, [sp, #4]
   d601a:	bd08      	pop	{r3, pc}
   d601c:	00030248 	.word	0x00030248

000d6020 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6020:	b508      	push	{r3, lr}
   d6022:	4b02      	ldr	r3, [pc, #8]	; (d602c <os_thread_cleanup+0xc>)
   d6024:	681b      	ldr	r3, [r3, #0]
   d6026:	695b      	ldr	r3, [r3, #20]
   d6028:	9301      	str	r3, [sp, #4]
   d602a:	bd08      	pop	{r3, pc}
   d602c:	00030248 	.word	0x00030248

000d6030 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6030:	b508      	push	{r3, lr}
   d6032:	4b02      	ldr	r3, [pc, #8]	; (d603c <os_mutex_recursive_create+0xc>)
   d6034:	681b      	ldr	r3, [r3, #0]
   d6036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6038:	9301      	str	r3, [sp, #4]
   d603a:	bd08      	pop	{r3, pc}
   d603c:	00030248 	.word	0x00030248

000d6040 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6040:	b508      	push	{r3, lr}
   d6042:	4b02      	ldr	r3, [pc, #8]	; (d604c <os_mutex_recursive_destroy+0xc>)
   d6044:	681b      	ldr	r3, [r3, #0]
   d6046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6048:	9301      	str	r3, [sp, #4]
   d604a:	bd08      	pop	{r3, pc}
   d604c:	00030248 	.word	0x00030248

000d6050 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6050:	b508      	push	{r3, lr}
   d6052:	4b02      	ldr	r3, [pc, #8]	; (d605c <inet_inet_ntop+0xc>)
   d6054:	681b      	ldr	r3, [r3, #0]
   d6056:	695b      	ldr	r3, [r3, #20]
   d6058:	9301      	str	r3, [sp, #4]
   d605a:	bd08      	pop	{r3, pc}
   d605c:	00030264 	.word	0x00030264

000d6060 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6060:	b508      	push	{r3, lr}
   d6062:	4b02      	ldr	r3, [pc, #8]	; (d606c <HAL_USART_Init+0xc>)
   d6064:	681b      	ldr	r3, [r3, #0]
   d6066:	681b      	ldr	r3, [r3, #0]
   d6068:	9301      	str	r3, [sp, #4]
   d606a:	bd08      	pop	{r3, pc}
   d606c:	0003023c 	.word	0x0003023c

000d6070 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d6070:	b508      	push	{r3, lr}
   d6072:	4b02      	ldr	r3, [pc, #8]	; (d607c <HAL_USART_End+0xc>)
   d6074:	681b      	ldr	r3, [r3, #0]
   d6076:	689b      	ldr	r3, [r3, #8]
   d6078:	9301      	str	r3, [sp, #4]
   d607a:	bd08      	pop	{r3, pc}
   d607c:	0003023c 	.word	0x0003023c

000d6080 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6080:	b508      	push	{r3, lr}
   d6082:	4b02      	ldr	r3, [pc, #8]	; (d608c <HAL_USART_Write_Data+0xc>)
   d6084:	681b      	ldr	r3, [r3, #0]
   d6086:	68db      	ldr	r3, [r3, #12]
   d6088:	9301      	str	r3, [sp, #4]
   d608a:	bd08      	pop	{r3, pc}
   d608c:	0003023c 	.word	0x0003023c

000d6090 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6090:	b508      	push	{r3, lr}
   d6092:	4b02      	ldr	r3, [pc, #8]	; (d609c <HAL_USART_Available_Data+0xc>)
   d6094:	681b      	ldr	r3, [r3, #0]
   d6096:	691b      	ldr	r3, [r3, #16]
   d6098:	9301      	str	r3, [sp, #4]
   d609a:	bd08      	pop	{r3, pc}
   d609c:	0003023c 	.word	0x0003023c

000d60a0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d60a0:	b508      	push	{r3, lr}
   d60a2:	4b02      	ldr	r3, [pc, #8]	; (d60ac <HAL_USART_Read_Data+0xc>)
   d60a4:	681b      	ldr	r3, [r3, #0]
   d60a6:	695b      	ldr	r3, [r3, #20]
   d60a8:	9301      	str	r3, [sp, #4]
   d60aa:	bd08      	pop	{r3, pc}
   d60ac:	0003023c 	.word	0x0003023c

000d60b0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d60b0:	b508      	push	{r3, lr}
   d60b2:	4b02      	ldr	r3, [pc, #8]	; (d60bc <HAL_USART_Peek_Data+0xc>)
   d60b4:	681b      	ldr	r3, [r3, #0]
   d60b6:	699b      	ldr	r3, [r3, #24]
   d60b8:	9301      	str	r3, [sp, #4]
   d60ba:	bd08      	pop	{r3, pc}
   d60bc:	0003023c 	.word	0x0003023c

000d60c0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d60c0:	b508      	push	{r3, lr}
   d60c2:	4b02      	ldr	r3, [pc, #8]	; (d60cc <HAL_USART_Flush_Data+0xc>)
   d60c4:	681b      	ldr	r3, [r3, #0]
   d60c6:	69db      	ldr	r3, [r3, #28]
   d60c8:	9301      	str	r3, [sp, #4]
   d60ca:	bd08      	pop	{r3, pc}
   d60cc:	0003023c 	.word	0x0003023c

000d60d0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d60d0:	b508      	push	{r3, lr}
   d60d2:	4b02      	ldr	r3, [pc, #8]	; (d60dc <HAL_USART_Is_Enabled+0xc>)
   d60d4:	681b      	ldr	r3, [r3, #0]
   d60d6:	6a1b      	ldr	r3, [r3, #32]
   d60d8:	9301      	str	r3, [sp, #4]
   d60da:	bd08      	pop	{r3, pc}
   d60dc:	0003023c 	.word	0x0003023c

000d60e0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d60e0:	b508      	push	{r3, lr}
   d60e2:	4b02      	ldr	r3, [pc, #8]	; (d60ec <HAL_USART_Available_Data_For_Write+0xc>)
   d60e4:	681b      	ldr	r3, [r3, #0]
   d60e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d60e8:	9301      	str	r3, [sp, #4]
   d60ea:	bd08      	pop	{r3, pc}
   d60ec:	0003023c 	.word	0x0003023c

000d60f0 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d60f0:	b508      	push	{r3, lr}
   d60f2:	4b02      	ldr	r3, [pc, #8]	; (d60fc <HAL_USART_BeginConfig+0xc>)
   d60f4:	681b      	ldr	r3, [r3, #0]
   d60f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d60f8:	9301      	str	r3, [sp, #4]
   d60fa:	bd08      	pop	{r3, pc}
   d60fc:	0003023c 	.word	0x0003023c

000d6100 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6100:	b508      	push	{r3, lr}
   d6102:	4b02      	ldr	r3, [pc, #8]	; (d610c <HAL_I2C_Write_Data+0xc>)
   d6104:	681b      	ldr	r3, [r3, #0]
   d6106:	6a1b      	ldr	r3, [r3, #32]
   d6108:	9301      	str	r3, [sp, #4]
   d610a:	bd08      	pop	{r3, pc}
   d610c:	00030228 	.word	0x00030228

000d6110 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6110:	b508      	push	{r3, lr}
   d6112:	4b02      	ldr	r3, [pc, #8]	; (d611c <HAL_I2C_Available_Data+0xc>)
   d6114:	681b      	ldr	r3, [r3, #0]
   d6116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6118:	9301      	str	r3, [sp, #4]
   d611a:	bd08      	pop	{r3, pc}
   d611c:	00030228 	.word	0x00030228

000d6120 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6120:	b508      	push	{r3, lr}
   d6122:	4b02      	ldr	r3, [pc, #8]	; (d612c <HAL_I2C_Read_Data+0xc>)
   d6124:	681b      	ldr	r3, [r3, #0]
   d6126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6128:	9301      	str	r3, [sp, #4]
   d612a:	bd08      	pop	{r3, pc}
   d612c:	00030228 	.word	0x00030228

000d6130 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6130:	b508      	push	{r3, lr}
   d6132:	4b02      	ldr	r3, [pc, #8]	; (d613c <HAL_I2C_Peek_Data+0xc>)
   d6134:	681b      	ldr	r3, [r3, #0]
   d6136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6138:	9301      	str	r3, [sp, #4]
   d613a:	bd08      	pop	{r3, pc}
   d613c:	00030228 	.word	0x00030228

000d6140 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6140:	b508      	push	{r3, lr}
   d6142:	4b02      	ldr	r3, [pc, #8]	; (d614c <HAL_I2C_Flush_Data+0xc>)
   d6144:	681b      	ldr	r3, [r3, #0]
   d6146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6148:	9301      	str	r3, [sp, #4]
   d614a:	bd08      	pop	{r3, pc}
   d614c:	00030228 	.word	0x00030228

000d6150 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6150:	b508      	push	{r3, lr}
   d6152:	4b02      	ldr	r3, [pc, #8]	; (d615c <HAL_I2C_Is_Enabled+0xc>)
   d6154:	681b      	ldr	r3, [r3, #0]
   d6156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6158:	9301      	str	r3, [sp, #4]
   d615a:	bd08      	pop	{r3, pc}
   d615c:	00030228 	.word	0x00030228

000d6160 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6160:	b508      	push	{r3, lr}
   d6162:	4b02      	ldr	r3, [pc, #8]	; (d616c <HAL_I2C_Init+0xc>)
   d6164:	681b      	ldr	r3, [r3, #0]
   d6166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6168:	9301      	str	r3, [sp, #4]
   d616a:	bd08      	pop	{r3, pc}
   d616c:	00030228 	.word	0x00030228

000d6170 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6170:	b508      	push	{r3, lr}
   d6172:	4b02      	ldr	r3, [pc, #8]	; (d617c <HAL_USB_USART_Init+0xc>)
   d6174:	681b      	ldr	r3, [r3, #0]
   d6176:	681b      	ldr	r3, [r3, #0]
   d6178:	9301      	str	r3, [sp, #4]
   d617a:	bd08      	pop	{r3, pc}
   d617c:	0003024c 	.word	0x0003024c

000d6180 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6180:	b508      	push	{r3, lr}
   d6182:	4b02      	ldr	r3, [pc, #8]	; (d618c <HAL_USB_USART_Begin+0xc>)
   d6184:	681b      	ldr	r3, [r3, #0]
   d6186:	685b      	ldr	r3, [r3, #4]
   d6188:	9301      	str	r3, [sp, #4]
   d618a:	bd08      	pop	{r3, pc}
   d618c:	0003024c 	.word	0x0003024c

000d6190 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6190:	b508      	push	{r3, lr}
   d6192:	4b02      	ldr	r3, [pc, #8]	; (d619c <HAL_USB_USART_Available_Data+0xc>)
   d6194:	681b      	ldr	r3, [r3, #0]
   d6196:	691b      	ldr	r3, [r3, #16]
   d6198:	9301      	str	r3, [sp, #4]
   d619a:	bd08      	pop	{r3, pc}
   d619c:	0003024c 	.word	0x0003024c

000d61a0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d61a0:	b508      	push	{r3, lr}
   d61a2:	4b02      	ldr	r3, [pc, #8]	; (d61ac <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d61a4:	681b      	ldr	r3, [r3, #0]
   d61a6:	695b      	ldr	r3, [r3, #20]
   d61a8:	9301      	str	r3, [sp, #4]
   d61aa:	bd08      	pop	{r3, pc}
   d61ac:	0003024c 	.word	0x0003024c

000d61b0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d61b0:	b508      	push	{r3, lr}
   d61b2:	4b02      	ldr	r3, [pc, #8]	; (d61bc <HAL_USB_USART_Receive_Data+0xc>)
   d61b4:	681b      	ldr	r3, [r3, #0]
   d61b6:	699b      	ldr	r3, [r3, #24]
   d61b8:	9301      	str	r3, [sp, #4]
   d61ba:	bd08      	pop	{r3, pc}
   d61bc:	0003024c 	.word	0x0003024c

000d61c0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d61c0:	b508      	push	{r3, lr}
   d61c2:	4b02      	ldr	r3, [pc, #8]	; (d61cc <HAL_USB_USART_Send_Data+0xc>)
   d61c4:	681b      	ldr	r3, [r3, #0]
   d61c6:	69db      	ldr	r3, [r3, #28]
   d61c8:	9301      	str	r3, [sp, #4]
   d61ca:	bd08      	pop	{r3, pc}
   d61cc:	0003024c 	.word	0x0003024c

000d61d0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d61d0:	b508      	push	{r3, lr}
   d61d2:	4b02      	ldr	r3, [pc, #8]	; (d61dc <HAL_USB_USART_Flush_Data+0xc>)
   d61d4:	681b      	ldr	r3, [r3, #0]
   d61d6:	6a1b      	ldr	r3, [r3, #32]
   d61d8:	9301      	str	r3, [sp, #4]
   d61da:	bd08      	pop	{r3, pc}
   d61dc:	0003024c 	.word	0x0003024c

000d61e0 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d61e0:	b508      	push	{r3, lr}
   d61e2:	4b02      	ldr	r3, [pc, #8]	; (d61ec <log_message_v+0xc>)
   d61e4:	681b      	ldr	r3, [r3, #0]
   d61e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d61e8:	9301      	str	r3, [sp, #4]
   d61ea:	bd08      	pop	{r3, pc}
   d61ec:	00030260 	.word	0x00030260

000d61f0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d61f0:	b508      	push	{r3, lr}
   d61f2:	4b02      	ldr	r3, [pc, #8]	; (d61fc <set_system_mode+0xc>)
   d61f4:	681b      	ldr	r3, [r3, #0]
   d61f6:	685b      	ldr	r3, [r3, #4]
   d61f8:	9301      	str	r3, [sp, #4]
   d61fa:	bd08      	pop	{r3, pc}
   d61fc:	00030220 	.word	0x00030220

000d6200 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6200:	b508      	push	{r3, lr}
   d6202:	4b02      	ldr	r3, [pc, #8]	; (d620c <system_delay_ms+0xc>)
   d6204:	681b      	ldr	r3, [r3, #0]
   d6206:	695b      	ldr	r3, [r3, #20]
   d6208:	9301      	str	r3, [sp, #4]
   d620a:	bd08      	pop	{r3, pc}
   d620c:	00030220 	.word	0x00030220

000d6210 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6210:	b508      	push	{r3, lr}
   d6212:	4b03      	ldr	r3, [pc, #12]	; (d6220 <system_ctrl_set_app_request_handler+0x10>)
   d6214:	681b      	ldr	r3, [r3, #0]
   d6216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d621a:	9301      	str	r3, [sp, #4]
   d621c:	bd08      	pop	{r3, pc}
   d621e:	0000      	.short	0x0000
   d6220:	00030220 	.word	0x00030220

000d6224 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6224:	b508      	push	{r3, lr}
   d6226:	4b03      	ldr	r3, [pc, #12]	; (d6234 <system_ctrl_set_result+0x10>)
   d6228:	681b      	ldr	r3, [r3, #0]
   d622a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d622e:	9301      	str	r3, [sp, #4]
   d6230:	bd08      	pop	{r3, pc}
   d6232:	0000      	.short	0x0000
   d6234:	00030220 	.word	0x00030220

000d6238 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6238:	b508      	push	{r3, lr}
   d623a:	4b02      	ldr	r3, [pc, #8]	; (d6244 <network_connect+0xc>)
   d623c:	681b      	ldr	r3, [r3, #0]
   d623e:	685b      	ldr	r3, [r3, #4]
   d6240:	9301      	str	r3, [sp, #4]
   d6242:	bd08      	pop	{r3, pc}
   d6244:	00030240 	.word	0x00030240

000d6248 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6248:	b508      	push	{r3, lr}
   d624a:	4b02      	ldr	r3, [pc, #8]	; (d6254 <network_connecting+0xc>)
   d624c:	681b      	ldr	r3, [r3, #0]
   d624e:	689b      	ldr	r3, [r3, #8]
   d6250:	9301      	str	r3, [sp, #4]
   d6252:	bd08      	pop	{r3, pc}
   d6254:	00030240 	.word	0x00030240

000d6258 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6258:	b508      	push	{r3, lr}
   d625a:	4b02      	ldr	r3, [pc, #8]	; (d6264 <network_disconnect+0xc>)
   d625c:	681b      	ldr	r3, [r3, #0]
   d625e:	68db      	ldr	r3, [r3, #12]
   d6260:	9301      	str	r3, [sp, #4]
   d6262:	bd08      	pop	{r3, pc}
   d6264:	00030240 	.word	0x00030240

000d6268 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6268:	b508      	push	{r3, lr}
   d626a:	4b02      	ldr	r3, [pc, #8]	; (d6274 <network_ready+0xc>)
   d626c:	681b      	ldr	r3, [r3, #0]
   d626e:	691b      	ldr	r3, [r3, #16]
   d6270:	9301      	str	r3, [sp, #4]
   d6272:	bd08      	pop	{r3, pc}
   d6274:	00030240 	.word	0x00030240

000d6278 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6278:	b508      	push	{r3, lr}
   d627a:	4b02      	ldr	r3, [pc, #8]	; (d6284 <network_on+0xc>)
   d627c:	681b      	ldr	r3, [r3, #0]
   d627e:	695b      	ldr	r3, [r3, #20]
   d6280:	9301      	str	r3, [sp, #4]
   d6282:	bd08      	pop	{r3, pc}
   d6284:	00030240 	.word	0x00030240

000d6288 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6288:	b508      	push	{r3, lr}
   d628a:	4b02      	ldr	r3, [pc, #8]	; (d6294 <network_off+0xc>)
   d628c:	681b      	ldr	r3, [r3, #0]
   d628e:	699b      	ldr	r3, [r3, #24]
   d6290:	9301      	str	r3, [sp, #4]
   d6292:	bd08      	pop	{r3, pc}
   d6294:	00030240 	.word	0x00030240

000d6298 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6298:	b508      	push	{r3, lr}
   d629a:	4b02      	ldr	r3, [pc, #8]	; (d62a4 <network_listen+0xc>)
   d629c:	681b      	ldr	r3, [r3, #0]
   d629e:	69db      	ldr	r3, [r3, #28]
   d62a0:	9301      	str	r3, [sp, #4]
   d62a2:	bd08      	pop	{r3, pc}
   d62a4:	00030240 	.word	0x00030240

000d62a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d62a8:	b508      	push	{r3, lr}
   d62aa:	4b02      	ldr	r3, [pc, #8]	; (d62b4 <network_listening+0xc>)
   d62ac:	681b      	ldr	r3, [r3, #0]
   d62ae:	6a1b      	ldr	r3, [r3, #32]
   d62b0:	9301      	str	r3, [sp, #4]
   d62b2:	bd08      	pop	{r3, pc}
   d62b4:	00030240 	.word	0x00030240

000d62b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d62b8:	b508      	push	{r3, lr}
   d62ba:	4b02      	ldr	r3, [pc, #8]	; (d62c4 <network_set_listen_timeout+0xc>)
   d62bc:	681b      	ldr	r3, [r3, #0]
   d62be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d62c0:	9301      	str	r3, [sp, #4]
   d62c2:	bd08      	pop	{r3, pc}
   d62c4:	00030240 	.word	0x00030240

000d62c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d62c8:	b508      	push	{r3, lr}
   d62ca:	4b02      	ldr	r3, [pc, #8]	; (d62d4 <network_get_listen_timeout+0xc>)
   d62cc:	681b      	ldr	r3, [r3, #0]
   d62ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d62d0:	9301      	str	r3, [sp, #4]
   d62d2:	bd08      	pop	{r3, pc}
   d62d4:	00030240 	.word	0x00030240

000d62d8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d62d8:	b508      	push	{r3, lr}
   d62da:	4b02      	ldr	r3, [pc, #8]	; (d62e4 <spark_process+0xc>)
   d62dc:	681b      	ldr	r3, [r3, #0]
   d62de:	689b      	ldr	r3, [r3, #8]
   d62e0:	9301      	str	r3, [sp, #4]
   d62e2:	bd08      	pop	{r3, pc}
   d62e4:	00030244 	.word	0x00030244

000d62e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d62e8:	b508      	push	{r3, lr}
   d62ea:	4b02      	ldr	r3, [pc, #8]	; (d62f4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d62ec:	681b      	ldr	r3, [r3, #0]
   d62ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d62f0:	9301      	str	r3, [sp, #4]
   d62f2:	bd08      	pop	{r3, pc}
   d62f4:	00030244 	.word	0x00030244

000d62f8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d62f8:	b508      	push	{r3, lr}
   d62fa:	4b02      	ldr	r3, [pc, #8]	; (d6304 <malloc+0xc>)
   d62fc:	681b      	ldr	r3, [r3, #0]
   d62fe:	681b      	ldr	r3, [r3, #0]
   d6300:	9301      	str	r3, [sp, #4]
   d6302:	bd08      	pop	{r3, pc}
   d6304:	0003021c 	.word	0x0003021c

000d6308 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6308:	b508      	push	{r3, lr}
   d630a:	4b02      	ldr	r3, [pc, #8]	; (d6314 <free+0xc>)
   d630c:	681b      	ldr	r3, [r3, #0]
   d630e:	685b      	ldr	r3, [r3, #4]
   d6310:	9301      	str	r3, [sp, #4]
   d6312:	bd08      	pop	{r3, pc}
   d6314:	0003021c 	.word	0x0003021c

000d6318 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6318:	b508      	push	{r3, lr}
   d631a:	4b02      	ldr	r3, [pc, #8]	; (d6324 <vsnprintf+0xc>)
   d631c:	681b      	ldr	r3, [r3, #0]
   d631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6320:	9301      	str	r3, [sp, #4]
   d6322:	bd08      	pop	{r3, pc}
   d6324:	0003021c 	.word	0x0003021c

000d6328 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6328:	2200      	movs	r2, #0
   d632a:	4611      	mov	r1, r2
   d632c:	6840      	ldr	r0, [r0, #4]
   d632e:	f7ff bfbb 	b.w	d62a8 <network_listening>

000d6332 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6332:	2200      	movs	r2, #0
   d6334:	4611      	mov	r1, r2
   d6336:	6840      	ldr	r0, [r0, #4]
   d6338:	f7ff bfc6 	b.w	d62c8 <network_get_listen_timeout>

000d633c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d633c:	2200      	movs	r2, #0
   d633e:	6840      	ldr	r0, [r0, #4]
   d6340:	f7ff bfba 	b.w	d62b8 <network_set_listen_timeout>

000d6344 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6344:	2200      	movs	r2, #0
   d6346:	f081 0101 	eor.w	r1, r1, #1
   d634a:	6840      	ldr	r0, [r0, #4]
   d634c:	f7ff bfa4 	b.w	d6298 <network_listen>

000d6350 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6350:	2300      	movs	r3, #0
   d6352:	461a      	mov	r2, r3
   d6354:	4619      	mov	r1, r3
   d6356:	6840      	ldr	r0, [r0, #4]
   d6358:	f7ff bf96 	b.w	d6288 <network_off>

000d635c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d635c:	2300      	movs	r3, #0
   d635e:	461a      	mov	r2, r3
   d6360:	4619      	mov	r1, r3
   d6362:	6840      	ldr	r0, [r0, #4]
   d6364:	f7ff bf88 	b.w	d6278 <network_on>

000d6368 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6368:	2200      	movs	r2, #0
   d636a:	4611      	mov	r1, r2
   d636c:	6840      	ldr	r0, [r0, #4]
   d636e:	f7ff bf7b 	b.w	d6268 <network_ready>

000d6372 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6372:	2200      	movs	r2, #0
   d6374:	4611      	mov	r1, r2
   d6376:	6840      	ldr	r0, [r0, #4]
   d6378:	f7ff bf66 	b.w	d6248 <network_connecting>

000d637c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d637c:	2200      	movs	r2, #0
   d637e:	2102      	movs	r1, #2
   d6380:	6840      	ldr	r0, [r0, #4]
   d6382:	f7ff bf69 	b.w	d6258 <network_disconnect>

000d6386 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6386:	2300      	movs	r3, #0
   d6388:	461a      	mov	r2, r3
   d638a:	6840      	ldr	r0, [r0, #4]
   d638c:	f7ff bf54 	b.w	d6238 <network_connect>

000d6390 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6390:	4b02      	ldr	r3, [pc, #8]	; (d639c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6392:	2203      	movs	r2, #3
   d6394:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6396:	4a02      	ldr	r2, [pc, #8]	; (d63a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6398:	601a      	str	r2, [r3, #0]
   d639a:	4770      	bx	lr
   d639c:	2003e3dc 	.word	0x2003e3dc
   d63a0:	000d7800 	.word	0x000d7800

000d63a4 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d63a4:	2100      	movs	r1, #0
   d63a6:	f7ff bdfb 	b.w	d5fa0 <HAL_SPI_Acquire>

000d63aa <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d63aa:	2100      	movs	r1, #0
   d63ac:	f7ff be00 	b.w	d5fb0 <HAL_SPI_Release>

000d63b0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d63b0:	b510      	push	{r4, lr}
   d63b2:	4604      	mov	r4, r0
{
    _spi = spi;
   d63b4:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d63b6:	4608      	mov	r0, r1
   d63b8:	f7ff fdc2 	bl	d5f40 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d63bc:	2300      	movs	r3, #0
   d63be:	6063      	str	r3, [r4, #4]
}
   d63c0:	4620      	mov	r0, r4
   d63c2:	bd10      	pop	{r4, pc}

000d63c4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d63c4:	b510      	push	{r4, lr}
   d63c6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d63c8:	7800      	ldrb	r0, [r0, #0]
   d63ca:	f7ff ffeb 	bl	d63a4 <_ZN8SPIClass4lockEv.isra.0>
   d63ce:	b948      	cbnz	r0, d63e4 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d63d0:	7820      	ldrb	r0, [r4, #0]
   d63d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d63d6:	f7ff fda3 	bl	d5f20 <HAL_SPI_Begin>
        unlock();
   d63da:	7820      	ldrb	r0, [r4, #0]
    }
}
   d63dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d63e0:	f7ff bfe3 	b.w	d63aa <_ZN8SPIClass6unlockEv.isra.1>
   d63e4:	bd10      	pop	{r4, pc}

000d63e6 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d63e6:	7800      	ldrb	r0, [r0, #0]
   d63e8:	f7ff bfdf 	b.w	d63aa <_ZN8SPIClass6unlockEv.isra.1>

000d63ec <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d63ec:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d63ee:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d63f0:	6018      	str	r0, [r3, #0]
   d63f2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d63f4:	6818      	ldr	r0, [r3, #0]
   d63f6:	4288      	cmp	r0, r1
   d63f8:	b2e5      	uxtb	r5, r4
   d63fa:	d906      	bls.n	d640a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d63fc:	3401      	adds	r4, #1
   d63fe:	2c08      	cmp	r4, #8
   d6400:	d002      	beq.n	d6408 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6402:	0840      	lsrs	r0, r0, #1
   d6404:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d6406:	e7f5      	b.n	d63f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6408:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d640a:	4b02      	ldr	r3, [pc, #8]	; (d6414 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d640c:	5d5b      	ldrb	r3, [r3, r5]
   d640e:	7013      	strb	r3, [r2, #0]
   d6410:	bd30      	pop	{r4, r5, pc}
   d6412:	bf00      	nop
   d6414:	000d782c 	.word	0x000d782c

000d6418 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d641c:	4607      	mov	r7, r0
   d641e:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d6420:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6422:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d6424:	f7ff ffbe 	bl	d63a4 <_ZN8SPIClass4lockEv.isra.0>
   d6428:	2800      	cmp	r0, #0
   d642a:	db62      	blt.n	d64f2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d642c:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d642e:	2214      	movs	r2, #20
   d6430:	2100      	movs	r1, #0
   d6432:	a809      	add	r0, sp, #36	; 0x24
   d6434:	f000 ffea 	bl	d740c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6438:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d643a:	4620      	mov	r0, r4
   d643c:	2200      	movs	r2, #0
   d643e:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6440:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d6444:	f7ff fd8c 	bl	d5f60 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d6448:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d644c:	b154      	cbz	r4, d6464 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d644e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d6452:	b935      	cbnz	r5, d6462 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d6454:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6458:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d645c:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d6460:	e003      	b.n	d646a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d6462:	2400      	movs	r4, #0
   d6464:	46a1      	mov	r9, r4
   d6466:	46a0      	mov	r8, r4
   d6468:	2501      	movs	r5, #1
   d646a:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d646c:	b105      	cbz	r5, d6470 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d646e:	b9bb      	cbnz	r3, d64a0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d6470:	429d      	cmp	r5, r3
   d6472:	d10b      	bne.n	d648c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d6474:	68b2      	ldr	r2, [r6, #8]
   d6476:	4542      	cmp	r2, r8
   d6478:	d108      	bne.n	d648c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d647a:	f88d 9020 	strb.w	r9, [sp, #32]
   d647e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6482:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d6486:	89b2      	ldrh	r2, [r6, #12]
   d6488:	4291      	cmp	r1, r2
   d648a:	d009      	beq.n	d64a0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d648c:	b153      	cbz	r3, d64a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d648e:	2400      	movs	r4, #0
   d6490:	7838      	ldrb	r0, [r7, #0]
   d6492:	9401      	str	r4, [sp, #4]
   d6494:	9400      	str	r4, [sp, #0]
   d6496:	4623      	mov	r3, r4
   d6498:	4622      	mov	r2, r4
   d649a:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d649c:	f7ff fd78 	bl	d5f90 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d64a0:	2000      	movs	r0, #0
   d64a2:	e026      	b.n	d64f2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d64a4:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d64a8:	68b1      	ldr	r1, [r6, #8]
   d64aa:	980a      	ldr	r0, [sp, #40]	; 0x28
   d64ac:	ab04      	add	r3, sp, #16
   d64ae:	f10d 020f 	add.w	r2, sp, #15
   d64b2:	f7ff ff9b 	bl	d63ec <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d64b6:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d64b8:	b105      	cbz	r5, d64bc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d64ba:	b9b1      	cbnz	r1, d64ea <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d64bc:	42a9      	cmp	r1, r5
   d64be:	d008      	beq.n	d64d2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d64c0:	2400      	movs	r4, #0
   d64c2:	7838      	ldrb	r0, [r7, #0]
   d64c4:	9401      	str	r4, [sp, #4]
   d64c6:	7b74      	ldrb	r4, [r6, #13]
   d64c8:	7b33      	ldrb	r3, [r6, #12]
   d64ca:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d64ce:	9400      	str	r4, [sp, #0]
   d64d0:	e7e4      	b.n	d649c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d64d2:	68b3      	ldr	r3, [r6, #8]
   d64d4:	4543      	cmp	r3, r8
   d64d6:	d3f3      	bcc.n	d64c0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d64d8:	f88d 9020 	strb.w	r9, [sp, #32]
   d64dc:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d64e0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d64e4:	89b3      	ldrh	r3, [r6, #12]
   d64e6:	429a      	cmp	r2, r3
   d64e8:	d1ea      	bne.n	d64c0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d64ea:	9b04      	ldr	r3, [sp, #16]
   d64ec:	4543      	cmp	r3, r8
   d64ee:	d1e7      	bne.n	d64c0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d64f0:	e7d6      	b.n	d64a0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d64f2:	b00f      	add	sp, #60	; 0x3c
   d64f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d64f8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d64f8:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d64fa:	7800      	ldrb	r0, [r0, #0]
   d64fc:	f7ff fd18 	bl	d5f30 <HAL_SPI_Send_Receive_Data>
}
   d6500:	b2c0      	uxtb	r0, r0
   d6502:	bd08      	pop	{r3, pc}

000d6504 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d6504:	b530      	push	{r4, r5, lr}
   d6506:	b087      	sub	sp, #28
   d6508:	4604      	mov	r4, r0
   d650a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d650c:	7800      	ldrb	r0, [r0, #0]
   d650e:	9500      	str	r5, [sp, #0]
   d6510:	f7ff fd2e 	bl	d5f70 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d6514:	b93d      	cbnz	r5, d6526 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d6516:	a902      	add	r1, sp, #8
   d6518:	7820      	ldrb	r0, [r4, #0]
   d651a:	f7ff fd31 	bl	d5f80 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d651e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d6522:	07db      	lsls	r3, r3, #31
   d6524:	d4f7      	bmi.n	d6516 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d6526:	b007      	add	sp, #28
   d6528:	bd30      	pop	{r4, r5, pc}

000d652a <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d652a:	7800      	ldrb	r0, [r0, #0]
   d652c:	f7ff bd10 	b.w	d5f50 <HAL_SPI_Is_Enabled>

000d6530 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6530:	b510      	push	{r4, lr}
   d6532:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6534:	6800      	ldr	r0, [r0, #0]
   d6536:	b118      	cbz	r0, d6540 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d6538:	f7ff fee6 	bl	d6308 <free>
            wakeupSource_ = nullptr;
   d653c:	2300      	movs	r3, #0
   d653e:	6023      	str	r3, [r4, #0]
   d6540:	bd10      	pop	{r4, pc}

000d6542 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6542:	b510      	push	{r4, lr}
   d6544:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d6546:	f7ff fff3 	bl	d6530 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d654a:	4620      	mov	r0, r4
   d654c:	bd10      	pop	{r4, pc}
	...

000d6550 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6550:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6552:	4c09      	ldr	r4, [pc, #36]	; (d6578 <_GLOBAL__sub_I_System+0x28>)
   d6554:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6556:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d655a:	6020      	str	r0, [r4, #0]
   d655c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d655e:	71a0      	strb	r0, [r4, #6]
   d6560:	8120      	strh	r0, [r4, #8]
   d6562:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6564:	f7ff fe44 	bl	d61f0 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6568:	4620      	mov	r0, r4
   d656a:	4a04      	ldr	r2, [pc, #16]	; (d657c <_GLOBAL__sub_I_System+0x2c>)
   d656c:	4904      	ldr	r1, [pc, #16]	; (d6580 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d656e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6572:	f000 bdb9 	b.w	d70e8 <__aeabi_atexit>
   d6576:	bf00      	nop
   d6578:	2003e3e4 	.word	0x2003e3e4
   d657c:	2003dee8 	.word	0x2003dee8
   d6580:	000d6543 	.word	0x000d6543

000d6584 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6584:	b510      	push	{r4, lr}
   d6586:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6588:	6800      	ldr	r0, [r0, #0]
   d658a:	b108      	cbz	r0, d6590 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d658c:	f7ff fd58 	bl	d6040 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6590:	4620      	mov	r0, r4
   d6592:	bd10      	pop	{r4, pc}

000d6594 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6594:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6596:	4c06      	ldr	r4, [pc, #24]	; (d65b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6598:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d659a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d659c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d659e:	f7ff fd47 	bl	d6030 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d65a2:	4620      	mov	r0, r4
   d65a4:	4a03      	ldr	r2, [pc, #12]	; (d65b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d65a6:	4904      	ldr	r1, [pc, #16]	; (d65b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d65a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d65ac:	f000 bd9c 	b.w	d70e8 <__aeabi_atexit>
   d65b0:	2003e3f0 	.word	0x2003e3f0
   d65b4:	2003dee8 	.word	0x2003dee8
   d65b8:	000d6585 	.word	0x000d6585

000d65bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d65bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d65be:	4606      	mov	r6, r0
   d65c0:	460d      	mov	r5, r1
   d65c2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d65c4:	2400      	movs	r4, #0
  while (size--) {
   d65c6:	42bd      	cmp	r5, r7
   d65c8:	d00c      	beq.n	d65e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d65ca:	6833      	ldr	r3, [r6, #0]
   d65cc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d65d0:	689b      	ldr	r3, [r3, #8]
   d65d2:	4630      	mov	r0, r6
   d65d4:	4798      	blx	r3
     if (chunk>=0)
   d65d6:	2800      	cmp	r0, #0
   d65d8:	db01      	blt.n	d65de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d65da:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d65dc:	e7f3      	b.n	d65c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d65de:	2c00      	cmp	r4, #0
   d65e0:	bf08      	it	eq
   d65e2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d65e4:	4620      	mov	r0, r4
   d65e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d65e8 <_ZN5Print5printEPKc>:
   d65e8:	b508      	push	{r3, lr}
   d65ea:	f7fe fe3f 	bl	d526c <_ZN5Print5writeEPKc>
   d65ee:	bd08      	pop	{r3, pc}

000d65f0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d65f0:	6803      	ldr	r3, [r0, #0]
   d65f2:	689b      	ldr	r3, [r3, #8]
   d65f4:	4718      	bx	r3

000d65f6 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d65f6:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d65f8:	f7fe fe38 	bl	d526c <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
   d65fc:	bd08      	pop	{r3, pc}

000d65fe <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d65fe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6600:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6602:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6604:	f7ff fff4 	bl	d65f0 <_ZN5Print5printEc>
  n += print('\n');
   d6608:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d660a:	4604      	mov	r4, r0
  n += print('\n');
   d660c:	4628      	mov	r0, r5
   d660e:	f7ff ffef 	bl	d65f0 <_ZN5Print5printEc>
  return n;
}
   d6612:	4420      	add	r0, r4
   d6614:	bd38      	pop	{r3, r4, r5, pc}

000d6616 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6616:	b538      	push	{r3, r4, r5, lr}
   d6618:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d661a:	f7fe fe27 	bl	d526c <_ZN5Print5writeEPKc>
   d661e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6620:	4628      	mov	r0, r5
   d6622:	f7ff ffec 	bl	d65fe <_ZN5Print7printlnEv>
  return n;
}
   d6626:	4420      	add	r0, r4
   d6628:	bd38      	pop	{r3, r4, r5, pc}

000d662a <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d662a:	f7ff bff4 	b.w	d6616 <_ZN5Print7printlnEPKc>

000d662e <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d662e:	b530      	push	{r4, r5, lr}
   d6630:	b08b      	sub	sp, #44	; 0x2c
   d6632:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6634:	2100      	movs	r1, #0
   d6636:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d663a:	2a01      	cmp	r2, #1
   d663c:	bf98      	it	ls
   d663e:	220a      	movls	r2, #10
   d6640:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6644:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6648:	fb05 3312 	mls	r3, r5, r2, r3
   d664c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6650:	2b09      	cmp	r3, #9
   d6652:	bf94      	ite	ls
   d6654:	3330      	addls	r3, #48	; 0x30
   d6656:	3337      	addhi	r3, #55	; 0x37
   d6658:	b2db      	uxtb	r3, r3
   d665a:	4621      	mov	r1, r4
   d665c:	f804 3901 	strb.w	r3, [r4], #-1
   d6660:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6662:	2d00      	cmp	r5, #0
   d6664:	d1ee      	bne.n	d6644 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6666:	f7fe fe01 	bl	d526c <_ZN5Print5writeEPKc>
}
   d666a:	b00b      	add	sp, #44	; 0x2c
   d666c:	bd30      	pop	{r4, r5, pc}

000d666e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d666e:	b40c      	push	{r2, r3}
   d6670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6674:	b087      	sub	sp, #28
   d6676:	af00      	add	r7, sp, #0
   d6678:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d667c:	4605      	mov	r5, r0
   d667e:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6682:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6684:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6686:	4623      	mov	r3, r4
   d6688:	464a      	mov	r2, r9
   d668a:	2114      	movs	r1, #20
   d668c:	1d38      	adds	r0, r7, #4
   d668e:	f7ff fe43 	bl	d6318 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6692:	2813      	cmp	r0, #19
   d6694:	d805      	bhi.n	d66a2 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6696:	1d39      	adds	r1, r7, #4
   d6698:	4628      	mov	r0, r5
   d669a:	f7fe fde7 	bl	d526c <_ZN5Print5writeEPKc>
   d669e:	4604      	mov	r4, r0
   d66a0:	e013      	b.n	d66ca <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d66a2:	f100 0308 	add.w	r3, r0, #8
   d66a6:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d66aa:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d66ac:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d66b0:	1c41      	adds	r1, r0, #1
   d66b2:	4623      	mov	r3, r4
   d66b4:	464a      	mov	r2, r9
   d66b6:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d66b8:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d66ba:	f7ff fe2d 	bl	d6318 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d66be:	4669      	mov	r1, sp
   d66c0:	4628      	mov	r0, r5
   d66c2:	f7fe fdd3 	bl	d526c <_ZN5Print5writeEPKc>
   d66c6:	4604      	mov	r4, r0
   d66c8:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d66ca:	b11e      	cbz	r6, d66d4 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d66cc:	4628      	mov	r0, r5
   d66ce:	f7ff ff96 	bl	d65fe <_ZN5Print7printlnEv>
   d66d2:	4404      	add	r4, r0
    return n;
}
   d66d4:	4620      	mov	r0, r4
   d66d6:	371c      	adds	r7, #28
   d66d8:	46bd      	mov	sp, r7
   d66da:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d66de:	b002      	add	sp, #8
   d66e0:	4770      	bx	lr

000d66e2 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d66e2:	b510      	push	{r4, lr}
   d66e4:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d66e6:	f7ff fc7b 	bl	d5fe0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d66ea:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d66ec:	6823      	ldr	r3, [r4, #0]
   d66ee:	4620      	mov	r0, r4
   d66f0:	695b      	ldr	r3, [r3, #20]
   d66f2:	4798      	blx	r3
    if (c >= 0) return c;
   d66f4:	2800      	cmp	r0, #0
   d66f6:	da08      	bge.n	d670a <_ZN6Stream9timedReadEv+0x28>
   d66f8:	f7ff fc72 	bl	d5fe0 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   d66fc:	68e3      	ldr	r3, [r4, #12]
   d66fe:	1ac0      	subs	r0, r0, r3
   d6700:	68a3      	ldr	r3, [r4, #8]
   d6702:	4298      	cmp	r0, r3
   d6704:	d3f2      	bcc.n	d66ec <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d6706:	f04f 30ff 	mov.w	r0, #4294967295
}
   d670a:	bd10      	pop	{r4, pc}

000d670c <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
   d670c:	6081      	str	r1, [r0, #8]
   d670e:	4770      	bx	lr

000d6710 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d6710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6714:	4680      	mov	r8, r0
   d6716:	460d      	mov	r5, r1
   d6718:	188f      	adds	r7, r1, r2
   d671a:	460c      	mov	r4, r1
  size_t count = 0;
  while (count < length) {
   d671c:	42bc      	cmp	r4, r7
   d671e:	eba4 0605 	sub.w	r6, r4, r5
   d6722:	d007      	beq.n	d6734 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   d6724:	4640      	mov	r0, r8
   d6726:	f7ff ffdc 	bl	d66e2 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d672a:	2800      	cmp	r0, #0
   d672c:	db02      	blt.n	d6734 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   d672e:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
   d6732:	e7f3      	b.n	d671c <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
   d6734:	4630      	mov	r0, r6
   d6736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d673c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d673c:	4b01      	ldr	r3, [pc, #4]	; (d6744 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d673e:	4a02      	ldr	r2, [pc, #8]	; (d6748 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6740:	601a      	str	r2, [r3, #0]
   d6742:	4770      	bx	lr
   d6744:	2003e3f4 	.word	0x2003e3f4
   d6748:	000d78a7 	.word	0x000d78a7

000d674c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d674c:	4b02      	ldr	r3, [pc, #8]	; (d6758 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d674e:	681a      	ldr	r2, [r3, #0]
   d6750:	4b02      	ldr	r3, [pc, #8]	; (d675c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6752:	601a      	str	r2, [r3, #0]
   d6754:	4770      	bx	lr
   d6756:	bf00      	nop
   d6758:	2003de80 	.word	0x2003de80
   d675c:	2003e3f8 	.word	0x2003e3f8

000d6760 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6760:	2100      	movs	r1, #0
   d6762:	f7ff bd4d 	b.w	d6200 <system_delay_ms>

000d6766 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6766:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6768:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d676a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d676c:	b113      	cbz	r3, d6774 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d676e:	2203      	movs	r2, #3
   d6770:	4601      	mov	r1, r0
   d6772:	4798      	blx	r3
    }
   d6774:	4620      	mov	r0, r4
   d6776:	bd10      	pop	{r4, pc}

000d6778 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6778:	b510      	push	{r4, lr}
   d677a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d677c:	f7ff fff3 	bl	d6766 <_ZNSt14_Function_baseD1Ev>
   d6780:	4620      	mov	r0, r4
   d6782:	bd10      	pop	{r4, pc}

000d6784 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6784:	4803      	ldr	r0, [pc, #12]	; (d6794 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6786:	4a04      	ldr	r2, [pc, #16]	; (d6798 <_GLOBAL__sub_I_RGB+0x14>)
   d6788:	4904      	ldr	r1, [pc, #16]	; (d679c <_GLOBAL__sub_I_RGB+0x18>)
   d678a:	2300      	movs	r3, #0
   d678c:	6083      	str	r3, [r0, #8]
   d678e:	f000 bcab 	b.w	d70e8 <__aeabi_atexit>
   d6792:	bf00      	nop
   d6794:	2003e3fc 	.word	0x2003e3fc
   d6798:	2003dee8 	.word	0x2003dee8
   d679c:	000d6779 	.word	0x000d6779

000d67a0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d67a0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d67a2:	4b0c      	ldr	r3, [pc, #48]	; (d67d4 <serialEventRun+0x34>)
   d67a4:	b133      	cbz	r3, d67b4 <serialEventRun+0x14>
   d67a6:	f000 f957 	bl	d6a58 <_Z16_fetch_usbserialv>
   d67aa:	6803      	ldr	r3, [r0, #0]
   d67ac:	691b      	ldr	r3, [r3, #16]
   d67ae:	4798      	blx	r3
   d67b0:	2800      	cmp	r0, #0
   d67b2:	dc09      	bgt.n	d67c8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d67b4:	4b08      	ldr	r3, [pc, #32]	; (d67d8 <serialEventRun+0x38>)
   d67b6:	b163      	cbz	r3, d67d2 <serialEventRun+0x32>
   d67b8:	f000 f9da 	bl	d6b70 <_Z22__fetch_global_Serial1v>
   d67bc:	6803      	ldr	r3, [r0, #0]
   d67be:	691b      	ldr	r3, [r3, #16]
   d67c0:	4798      	blx	r3
   d67c2:	2800      	cmp	r0, #0
   d67c4:	dc03      	bgt.n	d67ce <serialEventRun+0x2e>
   d67c6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d67c8:	f3af 8000 	nop.w
   d67cc:	e7f2      	b.n	d67b4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d67ce:	f3af 8000 	nop.w
   d67d2:	bd08      	pop	{r3, pc}
	...

000d67dc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d67dc:	b508      	push	{r3, lr}
	serialEventRun();
   d67de:	f7ff ffdf 	bl	d67a0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d67e2:	f7ff fbfd 	bl	d5fe0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d67e6:	4b01      	ldr	r3, [pc, #4]	; (d67ec <_post_loop+0x10>)
   d67e8:	6018      	str	r0, [r3, #0]
   d67ea:	bd08      	pop	{r3, pc}
   d67ec:	2003e730 	.word	0x2003e730

000d67f0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d67f0:	4802      	ldr	r0, [pc, #8]	; (d67fc <_Z33system_initialize_user_backup_ramv+0xc>)
   d67f2:	4a03      	ldr	r2, [pc, #12]	; (d6800 <_Z33system_initialize_user_backup_ramv+0x10>)
   d67f4:	4903      	ldr	r1, [pc, #12]	; (d6804 <_Z33system_initialize_user_backup_ramv+0x14>)
   d67f6:	1a12      	subs	r2, r2, r0
   d67f8:	f000 bdfd 	b.w	d73f6 <memcpy>
   d67fc:	2003f400 	.word	0x2003f400
   d6800:	2003f404 	.word	0x2003f404
   d6804:	000d7b60 	.word	0x000d7b60

000d6808 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6808:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d680a:	2300      	movs	r3, #0
   d680c:	9300      	str	r3, [sp, #0]
   d680e:	461a      	mov	r2, r3
   d6810:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6814:	f7ff fd06 	bl	d6224 <system_ctrl_set_result>
}
   d6818:	b003      	add	sp, #12
   d681a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6820 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6820:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6822:	8843      	ldrh	r3, [r0, #2]
   d6824:	2b0a      	cmp	r3, #10
   d6826:	d008      	beq.n	d683a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6828:	2b50      	cmp	r3, #80	; 0x50
   d682a:	d109      	bne.n	d6840 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d682c:	4b09      	ldr	r3, [pc, #36]	; (d6854 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d682e:	681b      	ldr	r3, [r3, #0]
   d6830:	b13b      	cbz	r3, d6842 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6832:	b003      	add	sp, #12
   d6834:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6838:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d683a:	f7ff ffe5 	bl	d6808 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d683e:	e006      	b.n	d684e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6840:	2300      	movs	r3, #0
   d6842:	9300      	str	r3, [sp, #0]
   d6844:	461a      	mov	r2, r3
   d6846:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d684a:	f7ff fceb 	bl	d6224 <system_ctrl_set_result>
        break;
    }
}
   d684e:	b003      	add	sp, #12
   d6850:	f85d fb04 	ldr.w	pc, [sp], #4
   d6854:	2003e40c 	.word	0x2003e40c

000d6858 <module_user_init_hook>:

void module_user_init_hook()
{
   d6858:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d685a:	4c10      	ldr	r4, [pc, #64]	; (d689c <module_user_init_hook+0x44>)
   d685c:	4d10      	ldr	r5, [pc, #64]	; (d68a0 <module_user_init_hook+0x48>)
   d685e:	6823      	ldr	r3, [r4, #0]
   d6860:	42ab      	cmp	r3, r5
   d6862:	4b10      	ldr	r3, [pc, #64]	; (d68a4 <module_user_init_hook+0x4c>)
   d6864:	bf0c      	ite	eq
   d6866:	2201      	moveq	r2, #1
   d6868:	2200      	movne	r2, #0
   d686a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d686c:	d002      	beq.n	d6874 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d686e:	f7ff ffbf 	bl	d67f0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6872:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6874:	f7ff fba4 	bl	d5fc0 <HAL_RNG_GetRandomNumber>
   d6878:	4604      	mov	r4, r0
    srand(seed);
   d687a:	f000 fdcf 	bl	d741c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d687e:	4b0a      	ldr	r3, [pc, #40]	; (d68a8 <module_user_init_hook+0x50>)
   d6880:	b113      	cbz	r3, d6888 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d6882:	4620      	mov	r0, r4
   d6884:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6888:	2100      	movs	r1, #0
   d688a:	4807      	ldr	r0, [pc, #28]	; (d68a8 <module_user_init_hook+0x50>)
   d688c:	f7ff fd2c 	bl	d62e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6890:	2100      	movs	r1, #0
   d6892:	4806      	ldr	r0, [pc, #24]	; (d68ac <module_user_init_hook+0x54>)
}
   d6894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6898:	f7ff bcba 	b.w	d6210 <system_ctrl_set_app_request_handler>
   d689c:	2003f400 	.word	0x2003f400
   d68a0:	9a271c1e 	.word	0x9a271c1e
   d68a4:	2003e410 	.word	0x2003e410
   d68a8:	00000000 	.word	0x00000000
   d68ac:	000d6821 	.word	0x000d6821

000d68b0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d68b0:	4770      	bx	lr

000d68b2 <_ZN9IPAddressD0Ev>:
   d68b2:	b510      	push	{r4, lr}
   d68b4:	2118      	movs	r1, #24
   d68b6:	4604      	mov	r4, r0
   d68b8:	f000 fc24 	bl	d7104 <_ZdlPvj>
   d68bc:	4620      	mov	r0, r4
   d68be:	bd10      	pop	{r4, pc}

000d68c0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d68c0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d68c2:	7d03      	ldrb	r3, [r0, #20]
   d68c4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d68c6:	b08d      	sub	sp, #52	; 0x34
   d68c8:	460e      	mov	r6, r1
   d68ca:	f100 0704 	add.w	r7, r0, #4
   d68ce:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d68d2:	d002      	beq.n	d68da <_ZNK9IPAddress7printToER5Print+0x1a>
   d68d4:	f100 0508 	add.w	r5, r0, #8
   d68d8:	e018      	b.n	d690c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d68da:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d68dc:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d68de:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d68e2:	232f      	movs	r3, #47	; 0x2f
   d68e4:	462a      	mov	r2, r5
   d68e6:	200a      	movs	r0, #10
   d68e8:	f7ff fbb2 	bl	d6050 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d68ec:	4628      	mov	r0, r5
   d68ee:	f000 fdf7 	bl	d74e0 <strlen>
   d68f2:	6833      	ldr	r3, [r6, #0]
   d68f4:	4602      	mov	r2, r0
   d68f6:	68db      	ldr	r3, [r3, #12]
   d68f8:	4629      	mov	r1, r5
   d68fa:	4630      	mov	r0, r6
   d68fc:	4798      	blx	r3
   d68fe:	e00f      	b.n	d6920 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6900:	b124      	cbz	r4, d690c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6902:	212e      	movs	r1, #46	; 0x2e
   d6904:	4630      	mov	r0, r6
   d6906:	f7ff fe73 	bl	d65f0 <_ZN5Print5printEc>
   d690a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d690c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6910:	220a      	movs	r2, #10
   d6912:	4630      	mov	r0, r6
   d6914:	f7ff fe8b 	bl	d662e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6918:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d691a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d691c:	d1f0      	bne.n	d6900 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d691e:	4620      	mov	r0, r4
    }
    return n;
}
   d6920:	b00d      	add	sp, #52	; 0x34
   d6922:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6924 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6924:	b510      	push	{r4, lr}
   d6926:	4b05      	ldr	r3, [pc, #20]	; (d693c <_ZN9IPAddressC1Ev+0x18>)
   d6928:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d692a:	2211      	movs	r2, #17
   d692c:	f840 3b04 	str.w	r3, [r0], #4
   d6930:	2100      	movs	r1, #0
   d6932:	f000 fd6b 	bl	d740c <memset>
{
    clear();
}
   d6936:	4620      	mov	r0, r4
   d6938:	bd10      	pop	{r4, pc}
   d693a:	bf00      	nop
   d693c:	000d7948 	.word	0x000d7948

000d6940 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6940:	4603      	mov	r3, r0
   d6942:	4a07      	ldr	r2, [pc, #28]	; (d6960 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6944:	b510      	push	{r4, lr}
   d6946:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d694a:	f101 0210 	add.w	r2, r1, #16
   d694e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6952:	f843 4b04 	str.w	r4, [r3], #4
   d6956:	4291      	cmp	r1, r2
   d6958:	d1f9      	bne.n	d694e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d695a:	780a      	ldrb	r2, [r1, #0]
   d695c:	701a      	strb	r2, [r3, #0]
}
   d695e:	bd10      	pop	{r4, pc}
   d6960:	000d7948 	.word	0x000d7948

000d6964 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6964:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6966:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d696a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d696e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6972:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6976:	2304      	movs	r3, #4
   d6978:	6041      	str	r1, [r0, #4]
   d697a:	7503      	strb	r3, [r0, #20]
   d697c:	bd10      	pop	{r4, pc}

000d697e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d697e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6980:	780d      	ldrb	r5, [r1, #0]
   d6982:	788b      	ldrb	r3, [r1, #2]
   d6984:	784a      	ldrb	r2, [r1, #1]
   d6986:	78c9      	ldrb	r1, [r1, #3]
   d6988:	9100      	str	r1, [sp, #0]
   d698a:	4629      	mov	r1, r5
   d698c:	f7ff ffea 	bl	d6964 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6990:	b003      	add	sp, #12
   d6992:	bd30      	pop	{r4, r5, pc}

000d6994 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6994:	7441      	strb	r1, [r0, #17]
   d6996:	4770      	bx	lr

000d6998 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6998:	4770      	bx	lr

000d699a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d699a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d699c:	2100      	movs	r1, #0
   d699e:	7c00      	ldrb	r0, [r0, #16]
   d69a0:	f7ff fc06 	bl	d61b0 <HAL_USB_USART_Receive_Data>
}
   d69a4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d69a8:	bf28      	it	cs
   d69aa:	f04f 30ff 	movcs.w	r0, #4294967295
   d69ae:	bd08      	pop	{r3, pc}

000d69b0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d69b0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d69b2:	2101      	movs	r1, #1
   d69b4:	7c00      	ldrb	r0, [r0, #16]
   d69b6:	f7ff fbfb 	bl	d61b0 <HAL_USB_USART_Receive_Data>
}
   d69ba:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d69be:	bf28      	it	cs
   d69c0:	f04f 30ff 	movcs.w	r0, #4294967295
   d69c4:	bd08      	pop	{r3, pc}

000d69c6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d69c6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d69c8:	7c00      	ldrb	r0, [r0, #16]
   d69ca:	f7ff fbe9 	bl	d61a0 <HAL_USB_USART_Available_Data_For_Write>
}
   d69ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69d2:	bd08      	pop	{r3, pc}

000d69d4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d69d4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d69d6:	7c00      	ldrb	r0, [r0, #16]
   d69d8:	f7ff fbda 	bl	d6190 <HAL_USB_USART_Available_Data>
}
   d69dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69e0:	bd08      	pop	{r3, pc}

000d69e2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d69e2:	7c00      	ldrb	r0, [r0, #16]
   d69e4:	f7ff bbf4 	b.w	d61d0 <HAL_USB_USART_Flush_Data>

000d69e8 <_ZN9USBSerialD0Ev>:
   d69e8:	b510      	push	{r4, lr}
   d69ea:	2114      	movs	r1, #20
   d69ec:	4604      	mov	r4, r0
   d69ee:	f000 fb89 	bl	d7104 <_ZdlPvj>
   d69f2:	4620      	mov	r0, r4
   d69f4:	bd10      	pop	{r4, pc}

000d69f6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d69f6:	b538      	push	{r3, r4, r5, lr}
   d69f8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d69fa:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d69fc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d69fe:	f7ff fbcf 	bl	d61a0 <HAL_USB_USART_Available_Data_For_Write>
   d6a02:	2800      	cmp	r0, #0
   d6a04:	dc01      	bgt.n	d6a0a <_ZN9USBSerial5writeEh+0x14>
   d6a06:	7c60      	ldrb	r0, [r4, #17]
   d6a08:	b128      	cbz	r0, d6a16 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6a0a:	4629      	mov	r1, r5
   d6a0c:	7c20      	ldrb	r0, [r4, #16]
   d6a0e:	f7ff fbd7 	bl	d61c0 <HAL_USB_USART_Send_Data>
   d6a12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6a16:	bd38      	pop	{r3, r4, r5, pc}

000d6a18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6a18:	b510      	push	{r4, lr}
   d6a1a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6a1c:	2300      	movs	r3, #0
   d6a1e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6a20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6a24:	60a3      	str	r3, [r4, #8]
   d6a26:	4b05      	ldr	r3, [pc, #20]	; (d6a3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6a28:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6a2a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6a2c:	4608      	mov	r0, r1
{
  _serial = serial;
   d6a2e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6a30:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6a32:	4611      	mov	r1, r2
   d6a34:	f7ff fb9c 	bl	d6170 <HAL_USB_USART_Init>
}
   d6a38:	4620      	mov	r0, r4
   d6a3a:	bd10      	pop	{r4, pc}
   d6a3c:	000d795c 	.word	0x000d795c

000d6a40 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6a40:	2200      	movs	r2, #0
   d6a42:	7c00      	ldrb	r0, [r0, #16]
   d6a44:	f7ff bb9c 	b.w	d6180 <HAL_USB_USART_Begin>

000d6a48 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6a48:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6a4a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6a4c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6a4e:	2100      	movs	r1, #0
   d6a50:	f000 fcdc 	bl	d740c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6a54:	4620      	mov	r0, r4
   d6a56:	bd10      	pop	{r4, pc}

000d6a58 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6a58:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6a5a:	4d0e      	ldr	r5, [pc, #56]	; (d6a94 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6a5c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6a5e:	a801      	add	r0, sp, #4
   d6a60:	f7ff fff2 	bl	d6a48 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6a64:	6829      	ldr	r1, [r5, #0]
   d6a66:	f011 0401 	ands.w	r4, r1, #1
   d6a6a:	d110      	bne.n	d6a8e <_Z16_fetch_usbserialv+0x36>
   d6a6c:	4628      	mov	r0, r5
   d6a6e:	f7fd fb16 	bl	d409e <__cxa_guard_acquire>
   d6a72:	b160      	cbz	r0, d6a8e <_Z16_fetch_usbserialv+0x36>
   d6a74:	aa01      	add	r2, sp, #4
   d6a76:	4621      	mov	r1, r4
   d6a78:	4807      	ldr	r0, [pc, #28]	; (d6a98 <_Z16_fetch_usbserialv+0x40>)
   d6a7a:	f7ff ffcd 	bl	d6a18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6a7e:	4628      	mov	r0, r5
   d6a80:	f7fd fb12 	bl	d40a8 <__cxa_guard_release>
   d6a84:	4a05      	ldr	r2, [pc, #20]	; (d6a9c <_Z16_fetch_usbserialv+0x44>)
   d6a86:	4906      	ldr	r1, [pc, #24]	; (d6aa0 <_Z16_fetch_usbserialv+0x48>)
   d6a88:	4803      	ldr	r0, [pc, #12]	; (d6a98 <_Z16_fetch_usbserialv+0x40>)
   d6a8a:	f000 fb2d 	bl	d70e8 <__aeabi_atexit>
	return _usbserial;
}
   d6a8e:	4802      	ldr	r0, [pc, #8]	; (d6a98 <_Z16_fetch_usbserialv+0x40>)
   d6a90:	b007      	add	sp, #28
   d6a92:	bd30      	pop	{r4, r5, pc}
   d6a94:	2003e414 	.word	0x2003e414
   d6a98:	2003e418 	.word	0x2003e418
   d6a9c:	2003dee8 	.word	0x2003dee8
   d6aa0:	000d6999 	.word	0x000d6999

000d6aa4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6aa4:	4770      	bx	lr

000d6aa6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6aa6:	7441      	strb	r1, [r0, #17]
   d6aa8:	4770      	bx	lr

000d6aaa <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6aaa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6aac:	7c00      	ldrb	r0, [r0, #16]
   d6aae:	f7ff fb17 	bl	d60e0 <HAL_USART_Available_Data_For_Write>
}
   d6ab2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6ab6:	bd08      	pop	{r3, pc}

000d6ab8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6ab8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6aba:	7c00      	ldrb	r0, [r0, #16]
   d6abc:	f7ff fae8 	bl	d6090 <HAL_USART_Available_Data>
}
   d6ac0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6ac4:	bd08      	pop	{r3, pc}

000d6ac6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6ac6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6ac8:	7c00      	ldrb	r0, [r0, #16]
   d6aca:	f7ff faf1 	bl	d60b0 <HAL_USART_Peek_Data>
}
   d6ace:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6ad2:	bf28      	it	cs
   d6ad4:	f04f 30ff 	movcs.w	r0, #4294967295
   d6ad8:	bd08      	pop	{r3, pc}

000d6ada <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6ada:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6adc:	7c00      	ldrb	r0, [r0, #16]
   d6ade:	f7ff fadf 	bl	d60a0 <HAL_USART_Read_Data>
}
   d6ae2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6ae6:	bf28      	it	cs
   d6ae8:	f04f 30ff 	movcs.w	r0, #4294967295
   d6aec:	bd08      	pop	{r3, pc}

000d6aee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6aee:	7c00      	ldrb	r0, [r0, #16]
   d6af0:	f7ff bae6 	b.w	d60c0 <HAL_USART_Flush_Data>

000d6af4 <_ZN11USARTSerialD0Ev>:
   d6af4:	b510      	push	{r4, lr}
   d6af6:	2114      	movs	r1, #20
   d6af8:	4604      	mov	r4, r0
   d6afa:	f000 fb03 	bl	d7104 <_ZdlPvj>
   d6afe:	4620      	mov	r0, r4
   d6b00:	bd10      	pop	{r4, pc}

000d6b02 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6b02:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6b04:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6b06:	4604      	mov	r4, r0
   d6b08:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6b0a:	b925      	cbnz	r5, d6b16 <_ZN11USARTSerial5writeEh+0x14>
   d6b0c:	7c00      	ldrb	r0, [r0, #16]
   d6b0e:	f7ff fae7 	bl	d60e0 <HAL_USART_Available_Data_For_Write>
   d6b12:	2800      	cmp	r0, #0
   d6b14:	dd05      	ble.n	d6b22 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6b16:	4631      	mov	r1, r6
   d6b18:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6b1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6b1e:	f7ff baaf 	b.w	d6080 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6b22:	4628      	mov	r0, r5
   d6b24:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6b28 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6b28:	b510      	push	{r4, lr}
   d6b2a:	4604      	mov	r4, r0
   d6b2c:	4608      	mov	r0, r1
   d6b2e:	4611      	mov	r1, r2
   d6b30:	2200      	movs	r2, #0
   d6b32:	6062      	str	r2, [r4, #4]
   d6b34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6b38:	60a2      	str	r2, [r4, #8]
   d6b3a:	4a05      	ldr	r2, [pc, #20]	; (d6b50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6b3c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6b3e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6b40:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6b42:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6b44:	461a      	mov	r2, r3
   d6b46:	f7ff fa8b 	bl	d6060 <HAL_USART_Init>
}
   d6b4a:	4620      	mov	r0, r4
   d6b4c:	bd10      	pop	{r4, pc}
   d6b4e:	bf00      	nop
   d6b50:	000d798c 	.word	0x000d798c

000d6b54 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d6b54:	2300      	movs	r3, #0
   d6b56:	7c00      	ldrb	r0, [r0, #16]
   d6b58:	f7ff baca 	b.w	d60f0 <HAL_USART_BeginConfig>

000d6b5c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d6b5c:	2200      	movs	r2, #0
   d6b5e:	f7ff bff9 	b.w	d6b54 <_ZN11USARTSerial5beginEmm>

000d6b62 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d6b62:	7c00      	ldrb	r0, [r0, #16]
   d6b64:	f7ff ba84 	b.w	d6070 <HAL_USART_End>

000d6b68 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6b68:	7c00      	ldrb	r0, [r0, #16]
   d6b6a:	f7ff bab1 	b.w	d60d0 <HAL_USART_Is_Enabled>
	...

000d6b70 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6b70:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6b72:	4d0c      	ldr	r5, [pc, #48]	; (d6ba4 <_Z22__fetch_global_Serial1v+0x34>)
   d6b74:	6829      	ldr	r1, [r5, #0]
   d6b76:	f011 0401 	ands.w	r4, r1, #1
   d6b7a:	d111      	bne.n	d6ba0 <_Z22__fetch_global_Serial1v+0x30>
   d6b7c:	4628      	mov	r0, r5
   d6b7e:	f7fd fa8e 	bl	d409e <__cxa_guard_acquire>
   d6b82:	b168      	cbz	r0, d6ba0 <_Z22__fetch_global_Serial1v+0x30>
   d6b84:	4a08      	ldr	r2, [pc, #32]	; (d6ba8 <_Z22__fetch_global_Serial1v+0x38>)
   d6b86:	4b09      	ldr	r3, [pc, #36]	; (d6bac <_Z22__fetch_global_Serial1v+0x3c>)
   d6b88:	4809      	ldr	r0, [pc, #36]	; (d6bb0 <_Z22__fetch_global_Serial1v+0x40>)
   d6b8a:	4621      	mov	r1, r4
   d6b8c:	f7ff ffcc 	bl	d6b28 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6b90:	4628      	mov	r0, r5
   d6b92:	f7fd fa89 	bl	d40a8 <__cxa_guard_release>
   d6b96:	4a07      	ldr	r2, [pc, #28]	; (d6bb4 <_Z22__fetch_global_Serial1v+0x44>)
   d6b98:	4907      	ldr	r1, [pc, #28]	; (d6bb8 <_Z22__fetch_global_Serial1v+0x48>)
   d6b9a:	4805      	ldr	r0, [pc, #20]	; (d6bb0 <_Z22__fetch_global_Serial1v+0x40>)
   d6b9c:	f000 faa4 	bl	d70e8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6ba0:	4803      	ldr	r0, [pc, #12]	; (d6bb0 <_Z22__fetch_global_Serial1v+0x40>)
   d6ba2:	bd38      	pop	{r3, r4, r5, pc}
   d6ba4:	2003e4c4 	.word	0x2003e4c4
   d6ba8:	2003e4c8 	.word	0x2003e4c8
   d6bac:	2003e440 	.word	0x2003e440
   d6bb0:	2003e42c 	.word	0x2003e42c
   d6bb4:	2003dee8 	.word	0x2003dee8
   d6bb8:	000d6aa5 	.word	0x000d6aa5

000d6bbc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6bbc:	4770      	bx	lr

000d6bbe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6bc0:	4606      	mov	r6, r0
   d6bc2:	4615      	mov	r5, r2
   d6bc4:	460c      	mov	r4, r1
   d6bc6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6bc8:	42bc      	cmp	r4, r7
   d6bca:	d006      	beq.n	d6bda <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6bcc:	6833      	ldr	r3, [r6, #0]
   d6bce:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6bd2:	689b      	ldr	r3, [r3, #8]
   d6bd4:	4630      	mov	r0, r6
   d6bd6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6bd8:	e7f6      	b.n	d6bc8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6bda:	4628      	mov	r0, r5
   d6bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6bde <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6bde:	2200      	movs	r2, #0
   d6be0:	7c00      	ldrb	r0, [r0, #16]
   d6be2:	f7ff ba8d 	b.w	d6100 <HAL_I2C_Write_Data>

000d6be6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6be6:	2100      	movs	r1, #0
   d6be8:	7c00      	ldrb	r0, [r0, #16]
   d6bea:	f7ff ba91 	b.w	d6110 <HAL_I2C_Available_Data>

000d6bee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6bee:	2100      	movs	r1, #0
   d6bf0:	7c00      	ldrb	r0, [r0, #16]
   d6bf2:	f7ff ba95 	b.w	d6120 <HAL_I2C_Read_Data>

000d6bf6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6bf6:	2100      	movs	r1, #0
   d6bf8:	7c00      	ldrb	r0, [r0, #16]
   d6bfa:	f7ff ba99 	b.w	d6130 <HAL_I2C_Peek_Data>

000d6bfe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6bfe:	2100      	movs	r1, #0
   d6c00:	7c00      	ldrb	r0, [r0, #16]
   d6c02:	f7ff ba9d 	b.w	d6140 <HAL_I2C_Flush_Data>

000d6c06 <_ZN7TwoWireD0Ev>:
   d6c06:	b510      	push	{r4, lr}
   d6c08:	2114      	movs	r1, #20
   d6c0a:	4604      	mov	r4, r0
   d6c0c:	f000 fa7a 	bl	d7104 <_ZdlPvj>
   d6c10:	4620      	mov	r0, r4
   d6c12:	bd10      	pop	{r4, pc}

000d6c14 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6c14:	b510      	push	{r4, lr}
   d6c16:	4604      	mov	r4, r0
   d6c18:	2300      	movs	r3, #0
   d6c1a:	6063      	str	r3, [r4, #4]
   d6c1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6c20:	60a3      	str	r3, [r4, #8]
   d6c22:	4b04      	ldr	r3, [pc, #16]	; (d6c34 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6c24:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6c26:	4608      	mov	r0, r1
   d6c28:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6c2a:	4611      	mov	r1, r2
   d6c2c:	f7ff fa98 	bl	d6160 <HAL_I2C_Init>
}
   d6c30:	4620      	mov	r0, r4
   d6c32:	bd10      	pop	{r4, pc}
   d6c34:	000d79bc 	.word	0x000d79bc

000d6c38 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6c38:	2100      	movs	r1, #0
   d6c3a:	7c00      	ldrb	r0, [r0, #16]
   d6c3c:	f7ff ba88 	b.w	d6150 <HAL_I2C_Is_Enabled>

000d6c40 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d6c40:	b510      	push	{r4, lr}
  if (0 == max) {
   d6c42:	4604      	mov	r4, r0
   d6c44:	b130      	cbz	r0, d6c54 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d6c46:	f000 fc11 	bl	d746c <rand>
   d6c4a:	fb90 f3f4 	sdiv	r3, r0, r4
   d6c4e:	fb03 0014 	mls	r0, r3, r4, r0
   d6c52:	bd10      	pop	{r4, pc}
}
   d6c54:	bd10      	pop	{r4, pc}

000d6c56 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d6c56:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d6c58:	b510      	push	{r4, lr}
   d6c5a:	4604      	mov	r4, r0
  if (min >= max) {
   d6c5c:	da04      	bge.n	d6c68 <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d6c5e:	1a08      	subs	r0, r1, r0
   d6c60:	f7ff ffee 	bl	d6c40 <_Z6randomi>
   d6c64:	4420      	add	r0, r4
   d6c66:	bd10      	pop	{r4, pc}
}
   d6c68:	bd10      	pop	{r4, pc}

000d6c6a <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6c6a:	2200      	movs	r2, #0
   d6c6c:	4611      	mov	r1, r2
   d6c6e:	6840      	ldr	r0, [r0, #4]
   d6c70:	f7ff bb1a 	b.w	d62a8 <network_listening>

000d6c74 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6c74:	2200      	movs	r2, #0
   d6c76:	4611      	mov	r1, r2
   d6c78:	6840      	ldr	r0, [r0, #4]
   d6c7a:	f7ff bb25 	b.w	d62c8 <network_get_listen_timeout>

000d6c7e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6c7e:	2200      	movs	r2, #0
   d6c80:	6840      	ldr	r0, [r0, #4]
   d6c82:	f7ff bb19 	b.w	d62b8 <network_set_listen_timeout>

000d6c86 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6c86:	2200      	movs	r2, #0
   d6c88:	f081 0101 	eor.w	r1, r1, #1
   d6c8c:	6840      	ldr	r0, [r0, #4]
   d6c8e:	f7ff bb03 	b.w	d6298 <network_listen>

000d6c92 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6c92:	2300      	movs	r3, #0
   d6c94:	461a      	mov	r2, r3
   d6c96:	2101      	movs	r1, #1
   d6c98:	6840      	ldr	r0, [r0, #4]
   d6c9a:	f7ff baf5 	b.w	d6288 <network_off>

000d6c9e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6c9e:	2300      	movs	r3, #0
   d6ca0:	461a      	mov	r2, r3
   d6ca2:	4619      	mov	r1, r3
   d6ca4:	6840      	ldr	r0, [r0, #4]
   d6ca6:	f7ff bae7 	b.w	d6278 <network_on>

000d6caa <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6caa:	2200      	movs	r2, #0
   d6cac:	4611      	mov	r1, r2
   d6cae:	6840      	ldr	r0, [r0, #4]
   d6cb0:	f7ff bada 	b.w	d6268 <network_ready>

000d6cb4 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6cb4:	2200      	movs	r2, #0
   d6cb6:	4611      	mov	r1, r2
   d6cb8:	6840      	ldr	r0, [r0, #4]
   d6cba:	f7ff bac5 	b.w	d6248 <network_connecting>

000d6cbe <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6cbe:	2200      	movs	r2, #0
   d6cc0:	2102      	movs	r1, #2
   d6cc2:	6840      	ldr	r0, [r0, #4]
   d6cc4:	f7ff bac8 	b.w	d6258 <network_disconnect>

000d6cc8 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6cc8:	2300      	movs	r3, #0
   d6cca:	461a      	mov	r2, r3
   d6ccc:	6840      	ldr	r0, [r0, #4]
   d6cce:	f7ff bab3 	b.w	d6238 <network_connect>

000d6cd2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6cd2:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6cd4:	4605      	mov	r5, r0
   d6cd6:	b188      	cbz	r0, d6cfc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6cd8:	6804      	ldr	r4, [r0, #0]
   d6cda:	b14c      	cbz	r4, d6cf0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d6cdc:	68a3      	ldr	r3, [r4, #8]
   d6cde:	b11b      	cbz	r3, d6ce8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6ce0:	2203      	movs	r2, #3
   d6ce2:	4621      	mov	r1, r4
   d6ce4:	4620      	mov	r0, r4
   d6ce6:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6ce8:	2110      	movs	r1, #16
   d6cea:	4620      	mov	r0, r4
   d6cec:	f000 fa0a 	bl	d7104 <_ZdlPvj>
   d6cf0:	4628      	mov	r0, r5
   d6cf2:	2114      	movs	r1, #20
      }
   d6cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6cf8:	f000 ba04 	b.w	d7104 <_ZdlPvj>
   d6cfc:	bd38      	pop	{r3, r4, r5, pc}

000d6cfe <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6cfe:	b110      	cbz	r0, d6d06 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6d00:	6803      	ldr	r3, [r0, #0]
   d6d02:	685b      	ldr	r3, [r3, #4]
   d6d04:	4718      	bx	r3
   d6d06:	4770      	bx	lr

000d6d08 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6d08:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6d0a:	6803      	ldr	r3, [r0, #0]
   d6d0c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6d0e:	b1bb      	cbz	r3, d6d40 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6d10:	6858      	ldr	r0, [r3, #4]
   d6d12:	f7ff f96d 	bl	d5ff0 <os_thread_is_current>
   d6d16:	b978      	cbnz	r0, d6d38 <_ZN6ThreadD1Ev+0x30>
   d6d18:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6d1a:	7c5a      	ldrb	r2, [r3, #17]
   d6d1c:	b912      	cbnz	r2, d6d24 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6d1e:	6858      	ldr	r0, [r3, #4]
   d6d20:	f7ff f976 	bl	d6010 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6d24:	6823      	ldr	r3, [r4, #0]
   d6d26:	6858      	ldr	r0, [r3, #4]
   d6d28:	f7ff f97a 	bl	d6020 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d2c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6d2e:	2300      	movs	r3, #0
   d6d30:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6d32:	b128      	cbz	r0, d6d40 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6d34:	f7ff ffcd 	bl	d6cd2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d38:	6820      	ldr	r0, [r4, #0]
   d6d3a:	b108      	cbz	r0, d6d40 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6d3c:	f7ff ffc9 	bl	d6cd2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6d40:	4620      	mov	r0, r4
   d6d42:	bd10      	pop	{r4, pc}

000d6d44 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6d44:	b538      	push	{r3, r4, r5, lr}
   d6d46:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d48:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6d4c:	b108      	cbz	r0, d6d52 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6d4e:	f7fd f9a4 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6d52:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6d56:	b108      	cbz	r0, d6d5c <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6d58:	f7ff f972 	bl	d6040 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d5c:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6d60:	b135      	cbz	r5, d6d70 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6d62:	4628      	mov	r0, r5
   d6d64:	f7ff ffd0 	bl	d6d08 <_ZN6ThreadD1Ev>
   d6d68:	2104      	movs	r1, #4
   d6d6a:	4628      	mov	r0, r5
   d6d6c:	f000 f9ca 	bl	d7104 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d70:	6820      	ldr	r0, [r4, #0]
   d6d72:	b108      	cbz	r0, d6d78 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6d74:	f7ff ffc3 	bl	d6cfe <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6d78:	4620      	mov	r0, r4
   d6d7a:	bd38      	pop	{r3, r4, r5, pc}

000d6d7c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6d7c:	b510      	push	{r4, lr}
   d6d7e:	4b04      	ldr	r3, [pc, #16]	; (d6d90 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6d80:	4604      	mov	r4, r0
   d6d82:	f840 3b08 	str.w	r3, [r0], #8
   d6d86:	f7ff ffdd 	bl	d6d44 <_ZN5spark11MeshPublishD1Ev>
   d6d8a:	4620      	mov	r0, r4
   d6d8c:	bd10      	pop	{r4, pc}
   d6d8e:	bf00      	nop
   d6d90:	000d79e4 	.word	0x000d79e4

000d6d94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6d94:	b538      	push	{r3, r4, r5, lr}
   d6d96:	4c0e      	ldr	r4, [pc, #56]	; (d6dd0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6d98:	4b0e      	ldr	r3, [pc, #56]	; (d6dd4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6d9a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6d9c:	2500      	movs	r5, #0
   d6d9e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6da0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6da4:	6063      	str	r3, [r4, #4]
   d6da6:	60a5      	str	r5, [r4, #8]
   d6da8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6dac:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6db0:	f7ff f93e 	bl	d6030 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6db4:	4b08      	ldr	r3, [pc, #32]	; (d6dd8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6db6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6dba:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6dbe:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6dc0:	4620      	mov	r0, r4
   d6dc2:	4a06      	ldr	r2, [pc, #24]	; (d6ddc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6dc4:	4906      	ldr	r1, [pc, #24]	; (d6de0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6dca:	f000 b98d 	b.w	d70e8 <__aeabi_atexit>
   d6dce:	bf00      	nop
   d6dd0:	2003e54c 	.word	0x2003e54c
   d6dd4:	000d7a4c 	.word	0x000d7a4c
   d6dd8:	000d79e4 	.word	0x000d79e4
   d6ddc:	2003dee8 	.word	0x2003dee8
   d6de0:	000d6d7d 	.word	0x000d6d7d

000d6de4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6de4:	2200      	movs	r2, #0
   d6de6:	4611      	mov	r1, r2
   d6de8:	6840      	ldr	r0, [r0, #4]
   d6dea:	f7ff ba3d 	b.w	d6268 <network_ready>

000d6dee <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6dee:	2200      	movs	r2, #0
   d6df0:	4611      	mov	r1, r2
   d6df2:	6840      	ldr	r0, [r0, #4]
   d6df4:	f7ff ba58 	b.w	d62a8 <network_listening>

000d6df8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6df8:	2200      	movs	r2, #0
   d6dfa:	4611      	mov	r1, r2
   d6dfc:	6840      	ldr	r0, [r0, #4]
   d6dfe:	f7ff ba63 	b.w	d62c8 <network_get_listen_timeout>

000d6e02 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6e02:	2200      	movs	r2, #0
   d6e04:	6840      	ldr	r0, [r0, #4]
   d6e06:	f7ff ba57 	b.w	d62b8 <network_set_listen_timeout>

000d6e0a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6e0a:	2200      	movs	r2, #0
   d6e0c:	f081 0101 	eor.w	r1, r1, #1
   d6e10:	6840      	ldr	r0, [r0, #4]
   d6e12:	f7ff ba41 	b.w	d6298 <network_listen>

000d6e16 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6e16:	2300      	movs	r3, #0
   d6e18:	461a      	mov	r2, r3
   d6e1a:	4619      	mov	r1, r3
   d6e1c:	6840      	ldr	r0, [r0, #4]
   d6e1e:	f7ff ba33 	b.w	d6288 <network_off>

000d6e22 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6e22:	2300      	movs	r3, #0
   d6e24:	461a      	mov	r2, r3
   d6e26:	4619      	mov	r1, r3
   d6e28:	6840      	ldr	r0, [r0, #4]
   d6e2a:	f7ff ba25 	b.w	d6278 <network_on>

000d6e2e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6e2e:	2200      	movs	r2, #0
   d6e30:	4611      	mov	r1, r2
   d6e32:	6840      	ldr	r0, [r0, #4]
   d6e34:	f7ff ba08 	b.w	d6248 <network_connecting>

000d6e38 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e38:	2200      	movs	r2, #0
   d6e3a:	2102      	movs	r1, #2
   d6e3c:	6840      	ldr	r0, [r0, #4]
   d6e3e:	f7ff ba0b 	b.w	d6258 <network_disconnect>

000d6e42 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6e42:	2300      	movs	r3, #0
   d6e44:	461a      	mov	r2, r3
   d6e46:	6840      	ldr	r0, [r0, #4]
   d6e48:	f7ff b9f6 	b.w	d6238 <network_connect>

000d6e4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6e4c:	4b02      	ldr	r3, [pc, #8]	; (d6e58 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6e4e:	2204      	movs	r2, #4
   d6e50:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6e52:	4a02      	ldr	r2, [pc, #8]	; (d6e5c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6e54:	601a      	str	r2, [r3, #0]
   d6e56:	4770      	bx	lr
   d6e58:	2003e720 	.word	0x2003e720
   d6e5c:	000d7a18 	.word	0x000d7a18

000d6e60 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6e60:	2300      	movs	r3, #0
   d6e62:	461a      	mov	r2, r3
   d6e64:	6840      	ldr	r0, [r0, #4]
   d6e66:	f7ff b9e7 	b.w	d6238 <network_connect>

000d6e6a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6e6a:	2200      	movs	r2, #0
   d6e6c:	2102      	movs	r1, #2
   d6e6e:	6840      	ldr	r0, [r0, #4]
   d6e70:	f7ff b9f2 	b.w	d6258 <network_disconnect>

000d6e74 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6e74:	2200      	movs	r2, #0
   d6e76:	4611      	mov	r1, r2
   d6e78:	6840      	ldr	r0, [r0, #4]
   d6e7a:	f7ff b9e5 	b.w	d6248 <network_connecting>

000d6e7e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6e7e:	2200      	movs	r2, #0
   d6e80:	4611      	mov	r1, r2
   d6e82:	6840      	ldr	r0, [r0, #4]
   d6e84:	f7ff b9f0 	b.w	d6268 <network_ready>

000d6e88 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6e88:	2300      	movs	r3, #0
   d6e8a:	461a      	mov	r2, r3
   d6e8c:	4619      	mov	r1, r3
   d6e8e:	6840      	ldr	r0, [r0, #4]
   d6e90:	f7ff b9f2 	b.w	d6278 <network_on>

000d6e94 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6e94:	2300      	movs	r3, #0
   d6e96:	461a      	mov	r2, r3
   d6e98:	4619      	mov	r1, r3
   d6e9a:	6840      	ldr	r0, [r0, #4]
   d6e9c:	f7ff b9f4 	b.w	d6288 <network_off>

000d6ea0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6ea0:	2200      	movs	r2, #0
   d6ea2:	f081 0101 	eor.w	r1, r1, #1
   d6ea6:	6840      	ldr	r0, [r0, #4]
   d6ea8:	f7ff b9f6 	b.w	d6298 <network_listen>

000d6eac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6eac:	2200      	movs	r2, #0
   d6eae:	6840      	ldr	r0, [r0, #4]
   d6eb0:	f7ff ba02 	b.w	d62b8 <network_set_listen_timeout>

000d6eb4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6eb4:	2200      	movs	r2, #0
   d6eb6:	4611      	mov	r1, r2
   d6eb8:	6840      	ldr	r0, [r0, #4]
   d6eba:	f7ff ba05 	b.w	d62c8 <network_get_listen_timeout>

000d6ebe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6ebe:	2200      	movs	r2, #0
   d6ec0:	4611      	mov	r1, r2
   d6ec2:	6840      	ldr	r0, [r0, #4]
   d6ec4:	f7ff b9f0 	b.w	d62a8 <network_listening>

000d6ec8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6ec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6ecc:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6ece:	b095      	sub	sp, #84	; 0x54
   d6ed0:	4616      	mov	r6, r2
   d6ed2:	460d      	mov	r5, r1
   d6ed4:	4607      	mov	r7, r0
    IPAddress addr;
   d6ed6:	f7ff fd25 	bl	d6924 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6eda:	4621      	mov	r1, r4
   d6edc:	2220      	movs	r2, #32
   d6ede:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6ee0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6ee2:	f000 fa93 	bl	d740c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6ee6:	2340      	movs	r3, #64	; 0x40
   d6ee8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6eea:	4621      	mov	r1, r4
   d6eec:	466b      	mov	r3, sp
   d6eee:	aa0c      	add	r2, sp, #48	; 0x30
   d6ef0:	4630      	mov	r0, r6
   d6ef2:	f7fe ffed 	bl	d5ed0 <netdb_getaddrinfo>
    if (!r) {
   d6ef6:	4604      	mov	r4, r0
   d6ef8:	2800      	cmp	r0, #0
   d6efa:	d144      	bne.n	d6f86 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6efc:	4602      	mov	r2, r0
   d6efe:	2101      	movs	r1, #1
   d6f00:	6868      	ldr	r0, [r5, #4]
   d6f02:	f7ff f9b1 	bl	d6268 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6f06:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6f08:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6f0a:	4622      	mov	r2, r4
   d6f0c:	6868      	ldr	r0, [r5, #4]
   d6f0e:	f7ff f9ab 	bl	d6268 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6f12:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6f14:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6f16:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6f18:	2e00      	cmp	r6, #0
   d6f1a:	d034      	beq.n	d6f86 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6f1c:	2900      	cmp	r1, #0
   d6f1e:	d132      	bne.n	d6f86 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6f20:	6873      	ldr	r3, [r6, #4]
   d6f22:	2b02      	cmp	r3, #2
   d6f24:	d002      	beq.n	d6f2c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6f26:	2b0a      	cmp	r3, #10
   d6f28:	d009      	beq.n	d6f3e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6f2a:	e02a      	b.n	d6f82 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6f2c:	f1b8 0f00 	cmp.w	r8, #0
   d6f30:	d027      	beq.n	d6f82 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6f32:	6971      	ldr	r1, [r6, #20]
   d6f34:	4638      	mov	r0, r7
   d6f36:	3104      	adds	r1, #4
   d6f38:	f7ff fd21 	bl	d697e <_ZN9IPAddressaSEPKh>
   d6f3c:	e020      	b.n	d6f80 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6f3e:	f1b9 0f00 	cmp.w	r9, #0
   d6f42:	d01e      	beq.n	d6f82 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6f44:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6f46:	2211      	movs	r2, #17
   d6f48:	a801      	add	r0, sp, #4
   d6f4a:	f000 fa5f 	bl	d740c <memset>
                    a.v = 6;
   d6f4e:	2306      	movs	r3, #6
   d6f50:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6f54:	ad01      	add	r5, sp, #4
   d6f56:	f104 0308 	add.w	r3, r4, #8
   d6f5a:	3418      	adds	r4, #24
   d6f5c:	6818      	ldr	r0, [r3, #0]
   d6f5e:	6859      	ldr	r1, [r3, #4]
   d6f60:	462a      	mov	r2, r5
   d6f62:	c203      	stmia	r2!, {r0, r1}
   d6f64:	3308      	adds	r3, #8
   d6f66:	42a3      	cmp	r3, r4
   d6f68:	4615      	mov	r5, r2
   d6f6a:	d1f7      	bne.n	d6f5c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6f6c:	a901      	add	r1, sp, #4
   d6f6e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6f70:	ad07      	add	r5, sp, #28
   d6f72:	f7ff fce5 	bl	d6940 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6f78:	1d3c      	adds	r4, r7, #4
   d6f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6f7c:	682b      	ldr	r3, [r5, #0]
   d6f7e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6f80:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6f82:	69f6      	ldr	r6, [r6, #28]
   d6f84:	e7c8      	b.n	d6f18 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6f86:	9800      	ldr	r0, [sp, #0]
   d6f88:	f7fe ff9a 	bl	d5ec0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6f8c:	4638      	mov	r0, r7
   d6f8e:	b015      	add	sp, #84	; 0x54
   d6f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6f94 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6f94:	4b02      	ldr	r3, [pc, #8]	; (d6fa0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6f96:	4a03      	ldr	r2, [pc, #12]	; (d6fa4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6f98:	601a      	str	r2, [r3, #0]
   d6f9a:	2200      	movs	r2, #0
   d6f9c:	605a      	str	r2, [r3, #4]
   d6f9e:	4770      	bx	lr
   d6fa0:	2003e728 	.word	0x2003e728
   d6fa4:	000d7a4c 	.word	0x000d7a4c

000d6fa8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6fa8:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6faa:	4e18      	ldr	r6, [pc, #96]	; (d700c <pinAvailable+0x64>)
   d6fac:	6831      	ldr	r1, [r6, #0]
   d6fae:	f011 0501 	ands.w	r5, r1, #1
   d6fb2:	4604      	mov	r4, r0
   d6fb4:	d10a      	bne.n	d6fcc <pinAvailable+0x24>
   d6fb6:	4630      	mov	r0, r6
   d6fb8:	f7fd f871 	bl	d409e <__cxa_guard_acquire>
   d6fbc:	b130      	cbz	r0, d6fcc <pinAvailable+0x24>
   d6fbe:	4629      	mov	r1, r5
   d6fc0:	4813      	ldr	r0, [pc, #76]	; (d7010 <pinAvailable+0x68>)
   d6fc2:	f7ff f9f5 	bl	d63b0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6fc6:	4630      	mov	r0, r6
   d6fc8:	f7fd f86e 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d6fcc:	4810      	ldr	r0, [pc, #64]	; (d7010 <pinAvailable+0x68>)
   d6fce:	f7ff faac 	bl	d652a <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6fd2:	b128      	cbz	r0, d6fe0 <pinAvailable+0x38>
   d6fd4:	f1a4 030b 	sub.w	r3, r4, #11
   d6fd8:	2b02      	cmp	r3, #2
   d6fda:	d801      	bhi.n	d6fe0 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d6fdc:	2000      	movs	r0, #0
   d6fde:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6fe0:	f000 f85c 	bl	d709c <_Z19__fetch_global_Wirev>
   d6fe4:	f7ff fe28 	bl	d6c38 <_ZN7TwoWire9isEnabledEv>
   d6fe8:	b108      	cbz	r0, d6fee <pinAvailable+0x46>
   d6fea:	2c01      	cmp	r4, #1
   d6fec:	d9f6      	bls.n	d6fdc <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6fee:	f7ff fdbf 	bl	d6b70 <_Z22__fetch_global_Serial1v>
   d6ff2:	f7ff fdb9 	bl	d6b68 <_ZN11USARTSerial9isEnabledEv>
   d6ff6:	b118      	cbz	r0, d7000 <pinAvailable+0x58>
   d6ff8:	f1a4 0309 	sub.w	r3, r4, #9
   d6ffc:	2b01      	cmp	r3, #1
   d6ffe:	d9ed      	bls.n	d6fdc <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7000:	2c23      	cmp	r4, #35	; 0x23
   d7002:	bf8c      	ite	hi
   d7004:	2000      	movhi	r0, #0
   d7006:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7008:	bd70      	pop	{r4, r5, r6, pc}
   d700a:	bf00      	nop
   d700c:	2003deec 	.word	0x2003deec
   d7010:	2003def0 	.word	0x2003def0

000d7014 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7014:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7016:	b538      	push	{r3, r4, r5, lr}
   d7018:	4604      	mov	r4, r0
   d701a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d701c:	d80a      	bhi.n	d7034 <pinMode+0x20>
   d701e:	29ff      	cmp	r1, #255	; 0xff
   d7020:	d008      	beq.n	d7034 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7022:	f7ff ffc1 	bl	d6fa8 <pinAvailable>
   d7026:	b128      	cbz	r0, d7034 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7028:	4629      	mov	r1, r5
   d702a:	4620      	mov	r0, r4
}
   d702c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7030:	f7fe bf5e 	b.w	d5ef0 <HAL_Pin_Mode>
   d7034:	bd38      	pop	{r3, r4, r5, pc}

000d7036 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7036:	b538      	push	{r3, r4, r5, lr}
   d7038:	4604      	mov	r4, r0
   d703a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d703c:	f7fe ff60 	bl	d5f00 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7040:	28ff      	cmp	r0, #255	; 0xff
   d7042:	d010      	beq.n	d7066 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7044:	2806      	cmp	r0, #6
   d7046:	d804      	bhi.n	d7052 <digitalWrite+0x1c>
   d7048:	234d      	movs	r3, #77	; 0x4d
   d704a:	fa23 f000 	lsr.w	r0, r3, r0
   d704e:	07c3      	lsls	r3, r0, #31
   d7050:	d409      	bmi.n	d7066 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7052:	4620      	mov	r0, r4
   d7054:	f7ff ffa8 	bl	d6fa8 <pinAvailable>
   d7058:	b128      	cbz	r0, d7066 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d705a:	4629      	mov	r1, r5
   d705c:	4620      	mov	r0, r4
}
   d705e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7062:	f7fe bf55 	b.w	d5f10 <HAL_GPIO_Write>
   d7066:	bd38      	pop	{r3, r4, r5, pc}

000d7068 <_Z17acquireWireBufferv>:
   d7068:	b570      	push	{r4, r5, r6, lr}
   d706a:	4604      	mov	r4, r0
   d706c:	2514      	movs	r5, #20
   d706e:	462a      	mov	r2, r5
   d7070:	4e09      	ldr	r6, [pc, #36]	; (d7098 <_Z17acquireWireBufferv+0x30>)
   d7072:	2100      	movs	r1, #0
   d7074:	f000 f9ca 	bl	d740c <memset>
   d7078:	8025      	strh	r5, [r4, #0]
   d707a:	2520      	movs	r5, #32
   d707c:	4631      	mov	r1, r6
   d707e:	60a5      	str	r5, [r4, #8]
   d7080:	6125      	str	r5, [r4, #16]
   d7082:	4628      	mov	r0, r5
   d7084:	f000 f840 	bl	d7108 <_ZnajRKSt9nothrow_t>
   d7088:	4631      	mov	r1, r6
   d708a:	6060      	str	r0, [r4, #4]
   d708c:	4628      	mov	r0, r5
   d708e:	f000 f83b 	bl	d7108 <_ZnajRKSt9nothrow_t>
   d7092:	60e0      	str	r0, [r4, #12]
   d7094:	4620      	mov	r0, r4
   d7096:	bd70      	pop	{r4, r5, r6, pc}
   d7098:	000d7a78 	.word	0x000d7a78

000d709c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d709c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d709e:	4d0e      	ldr	r5, [pc, #56]	; (d70d8 <_Z19__fetch_global_Wirev+0x3c>)
   d70a0:	6829      	ldr	r1, [r5, #0]
   d70a2:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d70a6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d70a8:	d113      	bne.n	d70d2 <_Z19__fetch_global_Wirev+0x36>
   d70aa:	4628      	mov	r0, r5
   d70ac:	f7fc fff7 	bl	d409e <__cxa_guard_acquire>
   d70b0:	b178      	cbz	r0, d70d2 <_Z19__fetch_global_Wirev+0x36>
   d70b2:	a801      	add	r0, sp, #4
   d70b4:	f7ff ffd8 	bl	d7068 <_Z17acquireWireBufferv>
   d70b8:	aa01      	add	r2, sp, #4
   d70ba:	4621      	mov	r1, r4
   d70bc:	4807      	ldr	r0, [pc, #28]	; (d70dc <_Z19__fetch_global_Wirev+0x40>)
   d70be:	f7ff fda9 	bl	d6c14 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d70c2:	4628      	mov	r0, r5
   d70c4:	f7fc fff0 	bl	d40a8 <__cxa_guard_release>
   d70c8:	4a05      	ldr	r2, [pc, #20]	; (d70e0 <_Z19__fetch_global_Wirev+0x44>)
   d70ca:	4906      	ldr	r1, [pc, #24]	; (d70e4 <_Z19__fetch_global_Wirev+0x48>)
   d70cc:	4803      	ldr	r0, [pc, #12]	; (d70dc <_Z19__fetch_global_Wirev+0x40>)
   d70ce:	f000 f80b 	bl	d70e8 <__aeabi_atexit>
	return wire;
}
   d70d2:	4802      	ldr	r0, [pc, #8]	; (d70dc <_Z19__fetch_global_Wirev+0x40>)
   d70d4:	b007      	add	sp, #28
   d70d6:	bd30      	pop	{r4, r5, pc}
   d70d8:	2003e734 	.word	0x2003e734
   d70dc:	2003e738 	.word	0x2003e738
   d70e0:	2003dee8 	.word	0x2003dee8
   d70e4:	000d6bbd 	.word	0x000d6bbd

000d70e8 <__aeabi_atexit>:
   d70e8:	460b      	mov	r3, r1
   d70ea:	4601      	mov	r1, r0
   d70ec:	4618      	mov	r0, r3
   d70ee:	f000 b965 	b.w	d73bc <__cxa_atexit>
	...

000d70f4 <_ZSt15get_new_handlerv>:
   d70f4:	4b02      	ldr	r3, [pc, #8]	; (d7100 <_ZSt15get_new_handlerv+0xc>)
   d70f6:	6818      	ldr	r0, [r3, #0]
   d70f8:	f3bf 8f5f 	dmb	sy
   d70fc:	4770      	bx	lr
   d70fe:	bf00      	nop
   d7100:	2003e74c 	.word	0x2003e74c

000d7104 <_ZdlPvj>:
   d7104:	f7fc bfc7 	b.w	d4096 <_ZdlPv>

000d7108 <_ZnajRKSt9nothrow_t>:
   d7108:	f000 b800 	b.w	d710c <_ZnwjRKSt9nothrow_t>

000d710c <_ZnwjRKSt9nothrow_t>:
   d710c:	b510      	push	{r4, lr}
   d710e:	2800      	cmp	r0, #0
   d7110:	bf14      	ite	ne
   d7112:	4604      	movne	r4, r0
   d7114:	2401      	moveq	r4, #1
   d7116:	4620      	mov	r0, r4
   d7118:	f7ff f8ee 	bl	d62f8 <malloc>
   d711c:	b920      	cbnz	r0, d7128 <_ZnwjRKSt9nothrow_t+0x1c>
   d711e:	f7ff ffe9 	bl	d70f4 <_ZSt15get_new_handlerv>
   d7122:	b108      	cbz	r0, d7128 <_ZnwjRKSt9nothrow_t+0x1c>
   d7124:	4780      	blx	r0
   d7126:	e7f6      	b.n	d7116 <_ZnwjRKSt9nothrow_t+0xa>
   d7128:	bd10      	pop	{r4, pc}
	...

000d712c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d712c:	4b18      	ldr	r3, [pc, #96]	; (d7190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d712e:	681a      	ldr	r2, [r3, #0]
   d7130:	07d1      	lsls	r1, r2, #31
   d7132:	bf5c      	itt	pl
   d7134:	2201      	movpl	r2, #1
   d7136:	601a      	strpl	r2, [r3, #0]
   d7138:	4b16      	ldr	r3, [pc, #88]	; (d7194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d713a:	681a      	ldr	r2, [r3, #0]
   d713c:	07d2      	lsls	r2, r2, #31
   d713e:	bf5c      	itt	pl
   d7140:	2201      	movpl	r2, #1
   d7142:	601a      	strpl	r2, [r3, #0]
   d7144:	4b14      	ldr	r3, [pc, #80]	; (d7198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7146:	681a      	ldr	r2, [r3, #0]
   d7148:	07d0      	lsls	r0, r2, #31
   d714a:	bf5c      	itt	pl
   d714c:	2201      	movpl	r2, #1
   d714e:	601a      	strpl	r2, [r3, #0]
   d7150:	4b12      	ldr	r3, [pc, #72]	; (d719c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7152:	681a      	ldr	r2, [r3, #0]
   d7154:	07d1      	lsls	r1, r2, #31
   d7156:	bf5c      	itt	pl
   d7158:	2201      	movpl	r2, #1
   d715a:	601a      	strpl	r2, [r3, #0]
   d715c:	4b10      	ldr	r3, [pc, #64]	; (d71a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d715e:	681a      	ldr	r2, [r3, #0]
   d7160:	07d2      	lsls	r2, r2, #31
   d7162:	bf5c      	itt	pl
   d7164:	2201      	movpl	r2, #1
   d7166:	601a      	strpl	r2, [r3, #0]
   d7168:	4b0e      	ldr	r3, [pc, #56]	; (d71a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d716a:	681a      	ldr	r2, [r3, #0]
   d716c:	07d0      	lsls	r0, r2, #31
   d716e:	bf5c      	itt	pl
   d7170:	2201      	movpl	r2, #1
   d7172:	601a      	strpl	r2, [r3, #0]
   d7174:	4b0c      	ldr	r3, [pc, #48]	; (d71a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7176:	681a      	ldr	r2, [r3, #0]
   d7178:	07d1      	lsls	r1, r2, #31
   d717a:	bf5c      	itt	pl
   d717c:	2201      	movpl	r2, #1
   d717e:	601a      	strpl	r2, [r3, #0]
   d7180:	4b0a      	ldr	r3, [pc, #40]	; (d71ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7182:	681a      	ldr	r2, [r3, #0]
   d7184:	07d2      	lsls	r2, r2, #31
   d7186:	bf5c      	itt	pl
   d7188:	2201      	movpl	r2, #1
   d718a:	601a      	strpl	r2, [r3, #0]
   d718c:	4770      	bx	lr
   d718e:	bf00      	nop
   d7190:	2003e76c 	.word	0x2003e76c
   d7194:	2003e768 	.word	0x2003e768
   d7198:	2003e764 	.word	0x2003e764
   d719c:	2003e760 	.word	0x2003e760
   d71a0:	2003e75c 	.word	0x2003e75c
   d71a4:	2003e758 	.word	0x2003e758
   d71a8:	2003e754 	.word	0x2003e754
   d71ac:	2003e750 	.word	0x2003e750

000d71b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d71b0:	4b24      	ldr	r3, [pc, #144]	; (d7244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d71b2:	681a      	ldr	r2, [r3, #0]
   d71b4:	07d0      	lsls	r0, r2, #31
   d71b6:	bf5c      	itt	pl
   d71b8:	2201      	movpl	r2, #1
   d71ba:	601a      	strpl	r2, [r3, #0]
   d71bc:	4b22      	ldr	r3, [pc, #136]	; (d7248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d71be:	681a      	ldr	r2, [r3, #0]
   d71c0:	07d1      	lsls	r1, r2, #31
   d71c2:	bf5c      	itt	pl
   d71c4:	2201      	movpl	r2, #1
   d71c6:	601a      	strpl	r2, [r3, #0]
   d71c8:	4b20      	ldr	r3, [pc, #128]	; (d724c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d71ca:	681a      	ldr	r2, [r3, #0]
   d71cc:	07d2      	lsls	r2, r2, #31
   d71ce:	bf5c      	itt	pl
   d71d0:	2201      	movpl	r2, #1
   d71d2:	601a      	strpl	r2, [r3, #0]
   d71d4:	4b1e      	ldr	r3, [pc, #120]	; (d7250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d71d6:	681a      	ldr	r2, [r3, #0]
   d71d8:	07d0      	lsls	r0, r2, #31
   d71da:	bf5c      	itt	pl
   d71dc:	2201      	movpl	r2, #1
   d71de:	601a      	strpl	r2, [r3, #0]
   d71e0:	4b1c      	ldr	r3, [pc, #112]	; (d7254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d71e2:	681a      	ldr	r2, [r3, #0]
   d71e4:	07d1      	lsls	r1, r2, #31
   d71e6:	bf5c      	itt	pl
   d71e8:	2201      	movpl	r2, #1
   d71ea:	601a      	strpl	r2, [r3, #0]
   d71ec:	4b1a      	ldr	r3, [pc, #104]	; (d7258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d71ee:	681a      	ldr	r2, [r3, #0]
   d71f0:	07d2      	lsls	r2, r2, #31
   d71f2:	bf5c      	itt	pl
   d71f4:	2201      	movpl	r2, #1
   d71f6:	601a      	strpl	r2, [r3, #0]
   d71f8:	4b18      	ldr	r3, [pc, #96]	; (d725c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d71fa:	681a      	ldr	r2, [r3, #0]
   d71fc:	07d0      	lsls	r0, r2, #31
   d71fe:	bf5c      	itt	pl
   d7200:	2201      	movpl	r2, #1
   d7202:	601a      	strpl	r2, [r3, #0]
   d7204:	4b16      	ldr	r3, [pc, #88]	; (d7260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7206:	681a      	ldr	r2, [r3, #0]
   d7208:	07d1      	lsls	r1, r2, #31
   d720a:	bf5c      	itt	pl
   d720c:	2201      	movpl	r2, #1
   d720e:	601a      	strpl	r2, [r3, #0]
   d7210:	4b14      	ldr	r3, [pc, #80]	; (d7264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7212:	681a      	ldr	r2, [r3, #0]
   d7214:	07d2      	lsls	r2, r2, #31
   d7216:	bf5c      	itt	pl
   d7218:	2201      	movpl	r2, #1
   d721a:	601a      	strpl	r2, [r3, #0]
   d721c:	4b12      	ldr	r3, [pc, #72]	; (d7268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d721e:	681a      	ldr	r2, [r3, #0]
   d7220:	07d0      	lsls	r0, r2, #31
   d7222:	bf5c      	itt	pl
   d7224:	2201      	movpl	r2, #1
   d7226:	601a      	strpl	r2, [r3, #0]
   d7228:	4b10      	ldr	r3, [pc, #64]	; (d726c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d722a:	681a      	ldr	r2, [r3, #0]
   d722c:	07d1      	lsls	r1, r2, #31
   d722e:	bf5c      	itt	pl
   d7230:	2201      	movpl	r2, #1
   d7232:	601a      	strpl	r2, [r3, #0]
   d7234:	4b0e      	ldr	r3, [pc, #56]	; (d7270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7236:	681a      	ldr	r2, [r3, #0]
   d7238:	07d2      	lsls	r2, r2, #31
   d723a:	bf5c      	itt	pl
   d723c:	2201      	movpl	r2, #1
   d723e:	601a      	strpl	r2, [r3, #0]
   d7240:	4770      	bx	lr
   d7242:	bf00      	nop
   d7244:	2003e79c 	.word	0x2003e79c
   d7248:	2003e798 	.word	0x2003e798
   d724c:	2003e794 	.word	0x2003e794
   d7250:	2003e790 	.word	0x2003e790
   d7254:	2003e78c 	.word	0x2003e78c
   d7258:	2003e788 	.word	0x2003e788
   d725c:	2003e784 	.word	0x2003e784
   d7260:	2003e780 	.word	0x2003e780
   d7264:	2003e77c 	.word	0x2003e77c
   d7268:	2003e778 	.word	0x2003e778
   d726c:	2003e774 	.word	0x2003e774
   d7270:	2003e770 	.word	0x2003e770

000d7274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7274:	4b24      	ldr	r3, [pc, #144]	; (d7308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7276:	681a      	ldr	r2, [r3, #0]
   d7278:	07d0      	lsls	r0, r2, #31
   d727a:	bf5c      	itt	pl
   d727c:	2201      	movpl	r2, #1
   d727e:	601a      	strpl	r2, [r3, #0]
   d7280:	4b22      	ldr	r3, [pc, #136]	; (d730c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7282:	681a      	ldr	r2, [r3, #0]
   d7284:	07d1      	lsls	r1, r2, #31
   d7286:	bf5c      	itt	pl
   d7288:	2201      	movpl	r2, #1
   d728a:	601a      	strpl	r2, [r3, #0]
   d728c:	4b20      	ldr	r3, [pc, #128]	; (d7310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d728e:	681a      	ldr	r2, [r3, #0]
   d7290:	07d2      	lsls	r2, r2, #31
   d7292:	bf5c      	itt	pl
   d7294:	2201      	movpl	r2, #1
   d7296:	601a      	strpl	r2, [r3, #0]
   d7298:	4b1e      	ldr	r3, [pc, #120]	; (d7314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d729a:	681a      	ldr	r2, [r3, #0]
   d729c:	07d0      	lsls	r0, r2, #31
   d729e:	bf5c      	itt	pl
   d72a0:	2201      	movpl	r2, #1
   d72a2:	601a      	strpl	r2, [r3, #0]
   d72a4:	4b1c      	ldr	r3, [pc, #112]	; (d7318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d72a6:	681a      	ldr	r2, [r3, #0]
   d72a8:	07d1      	lsls	r1, r2, #31
   d72aa:	bf5c      	itt	pl
   d72ac:	2201      	movpl	r2, #1
   d72ae:	601a      	strpl	r2, [r3, #0]
   d72b0:	4b1a      	ldr	r3, [pc, #104]	; (d731c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d72b2:	681a      	ldr	r2, [r3, #0]
   d72b4:	07d2      	lsls	r2, r2, #31
   d72b6:	bf5c      	itt	pl
   d72b8:	2201      	movpl	r2, #1
   d72ba:	601a      	strpl	r2, [r3, #0]
   d72bc:	4b18      	ldr	r3, [pc, #96]	; (d7320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d72be:	681a      	ldr	r2, [r3, #0]
   d72c0:	07d0      	lsls	r0, r2, #31
   d72c2:	bf5c      	itt	pl
   d72c4:	2201      	movpl	r2, #1
   d72c6:	601a      	strpl	r2, [r3, #0]
   d72c8:	4b16      	ldr	r3, [pc, #88]	; (d7324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d72ca:	681a      	ldr	r2, [r3, #0]
   d72cc:	07d1      	lsls	r1, r2, #31
   d72ce:	bf5c      	itt	pl
   d72d0:	2201      	movpl	r2, #1
   d72d2:	601a      	strpl	r2, [r3, #0]
   d72d4:	4b14      	ldr	r3, [pc, #80]	; (d7328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d72d6:	681a      	ldr	r2, [r3, #0]
   d72d8:	07d2      	lsls	r2, r2, #31
   d72da:	bf5c      	itt	pl
   d72dc:	2201      	movpl	r2, #1
   d72de:	601a      	strpl	r2, [r3, #0]
   d72e0:	4b12      	ldr	r3, [pc, #72]	; (d732c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d72e2:	681a      	ldr	r2, [r3, #0]
   d72e4:	07d0      	lsls	r0, r2, #31
   d72e6:	bf5c      	itt	pl
   d72e8:	2201      	movpl	r2, #1
   d72ea:	601a      	strpl	r2, [r3, #0]
   d72ec:	4b10      	ldr	r3, [pc, #64]	; (d7330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d72ee:	681a      	ldr	r2, [r3, #0]
   d72f0:	07d1      	lsls	r1, r2, #31
   d72f2:	bf5c      	itt	pl
   d72f4:	2201      	movpl	r2, #1
   d72f6:	601a      	strpl	r2, [r3, #0]
   d72f8:	4b0e      	ldr	r3, [pc, #56]	; (d7334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d72fa:	681a      	ldr	r2, [r3, #0]
   d72fc:	07d2      	lsls	r2, r2, #31
   d72fe:	bf5c      	itt	pl
   d7300:	2201      	movpl	r2, #1
   d7302:	601a      	strpl	r2, [r3, #0]
   d7304:	4770      	bx	lr
   d7306:	bf00      	nop
   d7308:	2003e7cc 	.word	0x2003e7cc
   d730c:	2003e7c8 	.word	0x2003e7c8
   d7310:	2003e7c4 	.word	0x2003e7c4
   d7314:	2003e7c0 	.word	0x2003e7c0
   d7318:	2003e7bc 	.word	0x2003e7bc
   d731c:	2003e7b8 	.word	0x2003e7b8
   d7320:	2003e7b4 	.word	0x2003e7b4
   d7324:	2003e7b0 	.word	0x2003e7b0
   d7328:	2003e7ac 	.word	0x2003e7ac
   d732c:	2003e7a8 	.word	0x2003e7a8
   d7330:	2003e7a4 	.word	0x2003e7a4
   d7334:	2003e7a0 	.word	0x2003e7a0

000d7338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7338:	4b18      	ldr	r3, [pc, #96]	; (d739c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d733a:	681a      	ldr	r2, [r3, #0]
   d733c:	07d1      	lsls	r1, r2, #31
   d733e:	bf5c      	itt	pl
   d7340:	2201      	movpl	r2, #1
   d7342:	601a      	strpl	r2, [r3, #0]
   d7344:	4b16      	ldr	r3, [pc, #88]	; (d73a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7346:	681a      	ldr	r2, [r3, #0]
   d7348:	07d2      	lsls	r2, r2, #31
   d734a:	bf5c      	itt	pl
   d734c:	2201      	movpl	r2, #1
   d734e:	601a      	strpl	r2, [r3, #0]
   d7350:	4b14      	ldr	r3, [pc, #80]	; (d73a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7352:	681a      	ldr	r2, [r3, #0]
   d7354:	07d0      	lsls	r0, r2, #31
   d7356:	bf5c      	itt	pl
   d7358:	2201      	movpl	r2, #1
   d735a:	601a      	strpl	r2, [r3, #0]
   d735c:	4b12      	ldr	r3, [pc, #72]	; (d73a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d735e:	681a      	ldr	r2, [r3, #0]
   d7360:	07d1      	lsls	r1, r2, #31
   d7362:	bf5c      	itt	pl
   d7364:	2201      	movpl	r2, #1
   d7366:	601a      	strpl	r2, [r3, #0]
   d7368:	4b10      	ldr	r3, [pc, #64]	; (d73ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d736a:	681a      	ldr	r2, [r3, #0]
   d736c:	07d2      	lsls	r2, r2, #31
   d736e:	bf5c      	itt	pl
   d7370:	2201      	movpl	r2, #1
   d7372:	601a      	strpl	r2, [r3, #0]
   d7374:	4b0e      	ldr	r3, [pc, #56]	; (d73b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7376:	681a      	ldr	r2, [r3, #0]
   d7378:	07d0      	lsls	r0, r2, #31
   d737a:	bf5c      	itt	pl
   d737c:	2201      	movpl	r2, #1
   d737e:	601a      	strpl	r2, [r3, #0]
   d7380:	4b0c      	ldr	r3, [pc, #48]	; (d73b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7382:	681a      	ldr	r2, [r3, #0]
   d7384:	07d1      	lsls	r1, r2, #31
   d7386:	bf5c      	itt	pl
   d7388:	2201      	movpl	r2, #1
   d738a:	601a      	strpl	r2, [r3, #0]
   d738c:	4b0a      	ldr	r3, [pc, #40]	; (d73b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d738e:	681a      	ldr	r2, [r3, #0]
   d7390:	07d2      	lsls	r2, r2, #31
   d7392:	bf5c      	itt	pl
   d7394:	2201      	movpl	r2, #1
   d7396:	601a      	strpl	r2, [r3, #0]
   d7398:	4770      	bx	lr
   d739a:	bf00      	nop
   d739c:	2003e7ec 	.word	0x2003e7ec
   d73a0:	2003e7e8 	.word	0x2003e7e8
   d73a4:	2003e7e4 	.word	0x2003e7e4
   d73a8:	2003e7e0 	.word	0x2003e7e0
   d73ac:	2003e7dc 	.word	0x2003e7dc
   d73b0:	2003e7d8 	.word	0x2003e7d8
   d73b4:	2003e7d4 	.word	0x2003e7d4
   d73b8:	2003e7d0 	.word	0x2003e7d0

000d73bc <__cxa_atexit>:
   d73bc:	b510      	push	{r4, lr}
   d73be:	4c05      	ldr	r4, [pc, #20]	; (d73d4 <__cxa_atexit+0x18>)
   d73c0:	4613      	mov	r3, r2
   d73c2:	b12c      	cbz	r4, d73d0 <__cxa_atexit+0x14>
   d73c4:	460a      	mov	r2, r1
   d73c6:	4601      	mov	r1, r0
   d73c8:	2002      	movs	r0, #2
   d73ca:	f3af 8000 	nop.w
   d73ce:	bd10      	pop	{r4, pc}
   d73d0:	4620      	mov	r0, r4
   d73d2:	bd10      	pop	{r4, pc}
   d73d4:	00000000 	.word	0x00000000

000d73d8 <memcmp>:
   d73d8:	b510      	push	{r4, lr}
   d73da:	3901      	subs	r1, #1
   d73dc:	4402      	add	r2, r0
   d73de:	4290      	cmp	r0, r2
   d73e0:	d007      	beq.n	d73f2 <memcmp+0x1a>
   d73e2:	f810 3b01 	ldrb.w	r3, [r0], #1
   d73e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d73ea:	42a3      	cmp	r3, r4
   d73ec:	d0f7      	beq.n	d73de <memcmp+0x6>
   d73ee:	1b18      	subs	r0, r3, r4
   d73f0:	bd10      	pop	{r4, pc}
   d73f2:	2000      	movs	r0, #0
   d73f4:	bd10      	pop	{r4, pc}

000d73f6 <memcpy>:
   d73f6:	b510      	push	{r4, lr}
   d73f8:	1e43      	subs	r3, r0, #1
   d73fa:	440a      	add	r2, r1
   d73fc:	4291      	cmp	r1, r2
   d73fe:	d004      	beq.n	d740a <memcpy+0x14>
   d7400:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7404:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7408:	e7f8      	b.n	d73fc <memcpy+0x6>
   d740a:	bd10      	pop	{r4, pc}

000d740c <memset>:
   d740c:	4402      	add	r2, r0
   d740e:	4603      	mov	r3, r0
   d7410:	4293      	cmp	r3, r2
   d7412:	d002      	beq.n	d741a <memset+0xe>
   d7414:	f803 1b01 	strb.w	r1, [r3], #1
   d7418:	e7fa      	b.n	d7410 <memset+0x4>
   d741a:	4770      	bx	lr

000d741c <srand>:
   d741c:	b538      	push	{r3, r4, r5, lr}
   d741e:	4b12      	ldr	r3, [pc, #72]	; (d7468 <srand+0x4c>)
   d7420:	681c      	ldr	r4, [r3, #0]
   d7422:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7424:	4605      	mov	r5, r0
   d7426:	b9d3      	cbnz	r3, d745e <srand+0x42>
   d7428:	2018      	movs	r0, #24
   d742a:	f7fe ff65 	bl	d62f8 <malloc>
   d742e:	f243 330e 	movw	r3, #13070	; 0x330e
   d7432:	63a0      	str	r0, [r4, #56]	; 0x38
   d7434:	8003      	strh	r3, [r0, #0]
   d7436:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d743a:	8043      	strh	r3, [r0, #2]
   d743c:	f241 2334 	movw	r3, #4660	; 0x1234
   d7440:	8083      	strh	r3, [r0, #4]
   d7442:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7446:	80c3      	strh	r3, [r0, #6]
   d7448:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d744c:	8103      	strh	r3, [r0, #8]
   d744e:	2305      	movs	r3, #5
   d7450:	8143      	strh	r3, [r0, #10]
   d7452:	230b      	movs	r3, #11
   d7454:	8183      	strh	r3, [r0, #12]
   d7456:	2201      	movs	r2, #1
   d7458:	2300      	movs	r3, #0
   d745a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d745e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7460:	2200      	movs	r2, #0
   d7462:	611d      	str	r5, [r3, #16]
   d7464:	615a      	str	r2, [r3, #20]
   d7466:	bd38      	pop	{r3, r4, r5, pc}
   d7468:	2003dee4 	.word	0x2003dee4

000d746c <rand>:
   d746c:	4b19      	ldr	r3, [pc, #100]	; (d74d4 <rand+0x68>)
   d746e:	b510      	push	{r4, lr}
   d7470:	681c      	ldr	r4, [r3, #0]
   d7472:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7474:	b9d3      	cbnz	r3, d74ac <rand+0x40>
   d7476:	2018      	movs	r0, #24
   d7478:	f7fe ff3e 	bl	d62f8 <malloc>
   d747c:	f243 330e 	movw	r3, #13070	; 0x330e
   d7480:	63a0      	str	r0, [r4, #56]	; 0x38
   d7482:	8003      	strh	r3, [r0, #0]
   d7484:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7488:	8043      	strh	r3, [r0, #2]
   d748a:	f241 2334 	movw	r3, #4660	; 0x1234
   d748e:	8083      	strh	r3, [r0, #4]
   d7490:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7494:	80c3      	strh	r3, [r0, #6]
   d7496:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d749a:	8103      	strh	r3, [r0, #8]
   d749c:	2305      	movs	r3, #5
   d749e:	8143      	strh	r3, [r0, #10]
   d74a0:	230b      	movs	r3, #11
   d74a2:	8183      	strh	r3, [r0, #12]
   d74a4:	2201      	movs	r2, #1
   d74a6:	2300      	movs	r3, #0
   d74a8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d74ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d74ae:	4c0a      	ldr	r4, [pc, #40]	; (d74d8 <rand+0x6c>)
   d74b0:	690b      	ldr	r3, [r1, #16]
   d74b2:	6948      	ldr	r0, [r1, #20]
   d74b4:	4a09      	ldr	r2, [pc, #36]	; (d74dc <rand+0x70>)
   d74b6:	435c      	muls	r4, r3
   d74b8:	fb02 4000 	mla	r0, r2, r0, r4
   d74bc:	fba3 2302 	umull	r2, r3, r3, r2
   d74c0:	3201      	adds	r2, #1
   d74c2:	4403      	add	r3, r0
   d74c4:	f143 0300 	adc.w	r3, r3, #0
   d74c8:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d74cc:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d74d0:	bd10      	pop	{r4, pc}
   d74d2:	bf00      	nop
   d74d4:	2003dee4 	.word	0x2003dee4
   d74d8:	5851f42d 	.word	0x5851f42d
   d74dc:	4c957f2d 	.word	0x4c957f2d

000d74e0 <strlen>:
   d74e0:	4603      	mov	r3, r0
   d74e2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d74e6:	2a00      	cmp	r2, #0
   d74e8:	d1fb      	bne.n	d74e2 <strlen+0x2>
   d74ea:	1a18      	subs	r0, r3, r0
   d74ec:	3801      	subs	r0, #1
   d74ee:	4770      	bx	lr

000d74f0 <dynalib_user>:
   d74f0:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7500:	0000 0000                                   ....

000d7504 <_ZTVN8particle13__SPISettingsE>:
	...
   d750c:	40b1 000d                                   .@..

000d7510 <_ZTV6SdFile>:
	...
   d7518:	40af 000d 410f 000d 411d 000d 4109 000d     .@...A...A...A..

000d7528 <_ZZN12uCamIII_Base12takeSnapshotE17uCamIII_SNAP_TYPEtE12__FUNCTION__>:
   d7528:	6174 656b 6e53 7061 6873 746f 6900               takeSnapshot.

000d7535 <_ZZN7uCamIIII11USARTSerialE4initEiE12__FUNCTION__>:
   d7535:	6e69 7469 6400 6665 7561 746c 0020 534d     init.default .MS
   d7545:	0042 534c 0042 533c 4950 6553 7474 6e69     B.LSB.<SPISettin
   d7555:	7367 6420 6665 7561 746c 003e 533c 4950     gs default>.<SPI
   d7565:	6553 7474 6e69 7367 2520 2573 756c 2520     Settings %s%lu %
   d7575:	2073 4f4d 4544 6425 003e 7257 7469 6e69     s MODE%d>.Writin
   d7585:	2067 6164 6174 7420 206f 4453 6163 6472     g data to SDcard
   d7595:	0a20 4300 6e61 7427 6120 6363 7365 2073      ..Can't access 
   d75a5:	4453 6320 7261 2e64 4420 206f 6f6e 2074     SD card. Do not 
   d75b5:	6572 6f66 6d72 7461 002e 6f4e 6320 7261     reformat..No car
   d75c5:	2c64 7720 6f72 676e 6320 6968 2070 6573     d, wrong chip se
   d75d5:	656c 7463 7020 6e69 202c 726f 5320 4950     lect pin, or SPI
   d75e5:	7020 6f72 6c62 6d65 003f 4453 6520 7272      problem?.SD err
   d75f5:	726f 6f43 6564 203a 5830 2c00 5830 4900     orCode: 0X.,0X.I
   d7605:	766e 6c61 6469 6620 726f 616d 2c74 7220     nvalid format, r
   d7615:	6665 726f 616d 2074 4453 002e 6143 276e     eformat SD..Can'
   d7625:	2074 706f 6e65 7220 6f6f 2074 6964 6572     t open root dire
   d7635:	7463 726f 2e79 4e00 206f 7265 6f72 2072     ctory..No error 
   d7645:	6f66 6e75 2e64 5300 6174 7472 6e69 2067     found..Starting 
   d7655:	6144 6174 4c20 676f 6967 676e 0a20 4300     Data Logging ..C
   d7665:	6e61 7427 6320 6572 7461 2065 6966 656c     an't create file
   d7675:	6e20 6d61 0065 6966 656c 6f2e 6570 006e      name.file.open.
   d7685:	6f4c 6767 6e69 2067 6f74 203a 7325 0a20     Logging to: %s .
   d7695:	4400 6e6f 2065 000a 6552 6461 2079 6f66     .Done ..Ready fo
   d76a5:	2072 656e 7478 6420 7461 2061 6f6c 2067     r next data log 
   d76b5:	000a 7277 7469 2065 7265 6f72 2072 000a     ..write error ..
   d76c5:	6954 656d 7453 6d61 2c70 5220 6e61 6f64     TimeStamp, Rando
   d76d5:	206d 6144 6174 2520 2069 000a 4375 4d41     m Data %i ..uCAM
   d76e5:	4949 3a49 2520 0073                         III: %s.

000d76ed <_ZZN12uCamIII_Base14setImageFormatE20uCamIII_IMAGE_FORMAT11uCamIII_RESE12__FUNCTION__>:
   d76ed:	6573 4974 616d 6567 6f46 6d72 7461 7300          setImageFormat.

000d76fc <_ZZN12uCamIII_Base7sendCmdE11uCamIII_CMDhhhhE12__FUNCTION__>:
   d76fc:	6573 646e 6d43 0064                         sendCmd.

000d7704 <_ZZN12uCamIII_Base4syncEiE12__FUNCTION__>:
   d7704:	7973 636e 6500                                   sync.

000d7709 <_ZZN12uCamIII_Base13expectPackageE11uCamIII_CMDhE12__FUNCTION__>:
   d7709:	7865 6570 7463 6150 6b63 6761 0065          expectPackage.

000d7717 <_ZZN12uCamIII_Base10getPictureE16uCamIII_PIC_TYPEE12__FUNCTION__>:
   d7717:	6567 5074 6369 7574 6572 7300 6e65 4364     getPicture.sendC
   d7727:	646d 203a 3025 5832 2520 3230 2058 3025     md: %02X %02X %0
   d7737:	5832 2520 3230 2058 3025 5832 2520 3230     2X %02X %02X %02
   d7747:	0058 7325 2528 3230 2c78 3025 7832 0029     X.%s(%02x,%02x).
   d7757:	6572 6563 7669 6465 203a 3025 5832 2520     received: %02X %
   d7767:	3230 2058 3025 5832 2520 3230 2058 3025     02X %02X %02X %0
   d7777:	5832 2520 3230 0058 6974 656d 756f 3a74     2X %02X.timeout:
   d7787:	2520 3230 2058 3025 5832 2520 3230 2058      %02X %02X %02X 
   d7797:	3025 5832 2520 3230 2058 3025 5832 2820     %02X %02X %02X (
   d77a7:	6c25 2975 7300 6e79 2063 6661 6574 2072     %lu).sync after 
   d77b7:	6425 7420 6972 7365 6e00 206f 7973 636e     %d tries.no sync
   d77c7:	7500 4143 494d 4949 425f 7361 3a65 2520     .uCAMIII_Base: %
   d77d7:	0073                                        s.

000d77d9 <_ZZN12uCamIII_Base4initEvE12__FUNCTION__>:
   d77d9:	6e69 7469 7300                                   init.

000d77de <_ZZN12uCamIII_Base14sendCmdWithAckE11uCamIII_CMDhhhhE12__FUNCTION__>:
   d77de:	6573 646e 6d43 5764 7469 4168 6b63 6800          sendCmdWithAck.

000d77ed <_ZZN12uCamIII_Base9hardResetEvE12__FUNCTION__>:
   d77ed:	6168 6472 6552 6573 0074 0000                    hardReset..

000d77f8 <_ZTVN5spark13EthernetClassE>:
	...
   d7800:	6387 000d 637d 000d 6373 000d 6369 000d     .c..}c..sc..ic..
   d7810:	635d 000d 6351 000d 6345 000d 633d 000d     ]c..Qc..Ec..=c..
   d7820:	6333 000d 6329 000d 6ec9 000d               3c..)c...n..

000d782c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d782c:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d783c:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d784c:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d785c:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d786c:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d787c:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d788c:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d789c:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d78ac:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d78bc:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d78cc:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d78dc:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d78ec:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d78fc:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d790c:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d791c:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d792c:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d793c:	0065 0000                                   e...

000d7940 <_ZTV9IPAddress>:
	...
   d7948:	68c1 000d 68b1 000d 68b3 000d               .h...h...h..

000d7954 <_ZTV9USBSerial>:
	...
   d795c:	6999 000d 69e9 000d 69f7 000d 65bd 000d     .i...i...i...e..
   d796c:	69d5 000d 699b 000d 69b1 000d 69e3 000d     .i...i...i...i..
   d797c:	69c7 000d 6995 000d                         .i...i..

000d7984 <_ZTV11USARTSerial>:
	...
   d798c:	6aa5 000d 6af5 000d 6b03 000d 65bd 000d     .j...j...k...e..
   d799c:	6ab9 000d 6adb 000d 6ac7 000d 6aef 000d     .j...j...j...j..
   d79ac:	6aa7 000d 6aab 000d                         .j...j..

000d79b4 <_ZTV7TwoWire>:
	...
   d79bc:	6bbd 000d 6c07 000d 6bdf 000d 6bbf 000d     .k...l...k...k..
   d79cc:	6be7 000d 6bef 000d 6bf7 000d 6bff 000d     .k...k...k...k..

000d79dc <_ZTVN5spark9MeshClassE>:
	...
   d79e4:	6cc9 000d 6cbf 000d 6cb5 000d 6cab 000d     .l...l...l...l..
   d79f4:	6c9f 000d 6c93 000d 6c87 000d 6c7f 000d     .l...l...l...l..
   d7a04:	6c75 000d 6c6b 000d 6ec9 000d               ul..kl...n..

000d7a10 <_ZTVN5spark9WiFiClassE>:
	...
   d7a18:	6e43 000d 6e39 000d 6e2f 000d 6de5 000d     Cn..9n../n...m..
   d7a28:	6e23 000d 6e17 000d 6e0b 000d 6e03 000d     #n...n...n...n..
   d7a38:	6df9 000d 6def 000d 6ec9 000d               .m...m...n..

000d7a44 <_ZTVN5spark12NetworkClassE>:
	...
   d7a4c:	6e61 000d 6e6b 000d 6e75 000d 6e7f 000d     an..kn..un...n..
   d7a5c:	6e89 000d 6e95 000d 6ea1 000d 6ead 000d     .n...n...n...n..
   d7a6c:	6eb5 000d 6ebf 000d 6ec9 000d               .n...n...n..

000d7a78 <_ZSt7nothrow>:
   d7a78:	0000 0000                                   ....

000d7a7c <__sf_fake_stdin>:
	...

000d7a9c <__sf_fake_stdout>:
	...

000d7abc <__sf_fake_stderr>:
	...
   d7adc:	0043                                        C.

000d7ade <link_const_variable_data_end>:
	...

000d7ae0 <link_constructors_location>:
   d7ae0:	000d44d1 	.word	0x000d44d1
   d7ae4:	000d458d 	.word	0x000d458d
   d7ae8:	000d4591 	.word	0x000d4591
   d7aec:	000d4bb9 	.word	0x000d4bb9
   d7af0:	000d4bbd 	.word	0x000d4bbd
   d7af4:	000d4bc1 	.word	0x000d4bc1
   d7af8:	000d4bc5 	.word	0x000d4bc5
   d7afc:	000d5269 	.word	0x000d5269
   d7b00:	000d528d 	.word	0x000d528d
   d7b04:	000d5291 	.word	0x000d5291
   d7b08:	000d55b5 	.word	0x000d55b5
   d7b0c:	000d55b9 	.word	0x000d55b9
   d7b10:	000d55bd 	.word	0x000d55bd
   d7b14:	000d5af7 	.word	0x000d5af7
   d7b18:	000d5afb 	.word	0x000d5afb
   d7b1c:	000d5aff 	.word	0x000d5aff
   d7b20:	000d5ba5 	.word	0x000d5ba5
   d7b24:	000d5ebd 	.word	0x000d5ebd
   d7b28:	000d6391 	.word	0x000d6391
   d7b2c:	000d6551 	.word	0x000d6551
   d7b30:	000d6595 	.word	0x000d6595
   d7b34:	000d673d 	.word	0x000d673d
   d7b38:	000d674d 	.word	0x000d674d
   d7b3c:	000d6785 	.word	0x000d6785
   d7b40:	000d6d95 	.word	0x000d6d95
   d7b44:	000d6e4d 	.word	0x000d6e4d
   d7b48:	000d6f95 	.word	0x000d6f95
   d7b4c:	000d712d 	.word	0x000d712d
   d7b50:	000d71b1 	.word	0x000d71b1
   d7b54:	000d7275 	.word	0x000d7275
   d7b58:	000d7339 	.word	0x000d7339

000d7b5c <link_constructors_end>:
   d7b5c:	00000000 	.word	0x00000000
