
c:/Users/nmlab/Documents/IoT/ClassAssignments/BikeSafety/Safety_Device_V1/target/1.5.2/argon/Safety_Device_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004d40  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8d60  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  2003dd7c  000d8d64  0001dd7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000009f0  2003de00  2003de00  0002de00  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8de8  000d8de8  00028de8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8e10  000d8e10  00028e10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0019b6d1  00000000  00000000  00028e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00020823  00000000  00000000  001c44e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002b99b  00000000  00000000  001e4d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002e28  00000000  00000000  002106a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000056c0  00000000  00000000  002134cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000505c3  00000000  00000000  00218b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00058bf1  00000000  00000000  0026914e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010d558  00000000  00000000  002c1d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000eab0  00000000  00000000  003cf298  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 f990 	bl	d8356 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 f995 	bl	d836c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dd7c 	.word	0x2003dd7c
   d404c:	000d8d64 	.word	0x000d8d64
   d4050:	2003de00 	.word	0x2003de00
   d4054:	2003de00 	.word	0x2003de00
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 ff7d 	bl	d6f5c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d8d5c 	.word	0x000d8d5c
   d4084:	000d8cd0 	.word	0x000d8cd0

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bbd4 	b.w	d4834 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fb5d 	bl	d474c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 bf23 	b.w	d6ee0 <_post_loop>

000d409a <_ZdlPv>:
   d409a:	f002 bce3 	b.w	d6a64 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f002 bce1 	b.w	d6a64 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d40b2:	4770      	bx	lr

000d40b4 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d40b4:	3008      	adds	r0, #8
   d40b6:	f001 b9fb 	b.w	d54b0 <_ZN7FatFile5writeEPKvj>
	...

000d40bc <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40be:	4602      	mov	r2, r0
   d40c0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40c2:	7913      	ldrb	r3, [r2, #4]
   d40c4:	6895      	ldr	r5, [r2, #8]
   d40c6:	b133      	cbz	r3, d40d6 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40c8:	b93d      	cbnz	r5, d40da <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40ca:	490c      	ldr	r1, [pc, #48]	; (d40fc <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40cc:	b004      	add	sp, #16
   d40ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40d2:	f002 be37 	b.w	d6d44 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d40d6:	4b0a      	ldr	r3, [pc, #40]	; (d4100 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d40d8:	e000      	b.n	d40dc <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d40da:	4b0a      	ldr	r3, [pc, #40]	; (d4104 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d40dc:	7b16      	ldrb	r6, [r2, #12]
   d40de:	4c0a      	ldr	r4, [pc, #40]	; (d4108 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d40e0:	490a      	ldr	r1, [pc, #40]	; (d410c <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40e2:	7b52      	ldrb	r2, [r2, #13]
   d40e4:	9202      	str	r2, [sp, #8]
   d40e6:	2e01      	cmp	r6, #1
   d40e8:	bf08      	it	eq
   d40ea:	4621      	moveq	r1, r4
   d40ec:	9101      	str	r1, [sp, #4]
   d40ee:	9500      	str	r5, [sp, #0]
   d40f0:	4a07      	ldr	r2, [pc, #28]	; (d4110 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d40f2:	2100      	movs	r1, #0
   d40f4:	f002 fe69 	bl	d6dca <_ZN5Print11printf_implEbPKcz>
  }
   d40f8:	b004      	add	sp, #16
   d40fa:	bd70      	pop	{r4, r5, r6, pc}
   d40fc:	000d8605 	.word	0x000d8605
   d4100:	000d89cf 	.word	0x000d89cf
   d4104:	000d85f4 	.word	0x000d85f4
   d4108:	000d85fd 	.word	0x000d85fd
   d410c:	000d8601 	.word	0x000d8601
   d4110:	000d861b 	.word	0x000d861b

000d4114 <_ZN6SdFileD0Ev>:
   d4114:	b510      	push	{r4, lr}
   d4116:	212c      	movs	r1, #44	; 0x2c
   d4118:	4604      	mov	r4, r0
   d411a:	f003 fb85 	bl	d7828 <_ZdlPvj>
   d411e:	4620      	mov	r0, r4
   d4120:	bd10      	pop	{r4, pc}

000d4122 <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4122:	b507      	push	{r0, r1, r2, lr}
   d4124:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4126:	2201      	movs	r2, #1
   d4128:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d412c:	3008      	adds	r0, #8
   d412e:	4619      	mov	r1, r3
   d4130:	f001 f9be 	bl	d54b0 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4134:	b003      	add	sp, #12
   d4136:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d413c <_Z11displayInfov>:
      }
      last = currentMil;
  }
}*/

void displayInfo() {
   d413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// float lat,lon,alt;
	// uint8_t hr,mn,se,sat;
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d4140:	4c7b      	ldr	r4, [pc, #492]	; (d4330 <_Z11displayInfov+0x1f4>)
      }
      last = currentMil;
  }
}*/

void displayInfo() {
   d4142:	b0a9      	sub	sp, #164	; 0xa4

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4144:	f002 fb02 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
	// float lat,lon,alt;
	// uint8_t hr,mn,se,sat;
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d4148:	6823      	ldr	r3, [r4, #0]
   d414a:	1ac0      	subs	r0, r0, r3
   d414c:	f241 3387 	movw	r3, #4999	; 0x1387
   d4150:	4298      	cmp	r0, r3
   d4152:	f240 80e9 	bls.w	d4328 <_Z11displayInfov+0x1ec>
   d4156:	f002 faf9 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
		lastSerial = millis();
   d415a:	6020      	str	r0, [r4, #0]

		char buf[128];
		Serial.println(gps.location.isValid());
   d415c:	f002 fffe 	bl	d715c <_Z16_fetch_usbserialv>
   d4160:	4c74      	ldr	r4, [pc, #464]	; (d4334 <_Z11displayInfov+0x1f8>)
   d4162:	4605      	mov	r5, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4164:	220a      	movs	r2, #10
   d4166:	7821      	ldrb	r1, [r4, #0]
   d4168:	f002 fe0f 	bl	d6d8a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d416c:	4628      	mov	r0, r5
   d416e:	f002 fdf4 	bl	d6d5a <_ZN5Print7printlnEv>
	    Serial.println(gps.location.age());
   d4172:	f002 fff3 	bl	d715c <_Z16_fetch_usbserialv>
{
   friend class TinyGPSPlus;
public:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   d4176:	7823      	ldrb	r3, [r4, #0]
   d4178:	4606      	mov	r6, r0
   d417a:	4625      	mov	r5, r4
   d417c:	b123      	cbz	r3, d4188 <_Z11displayInfov+0x4c>
   d417e:	f002 fae5 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
   d4182:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d4184:	1a41      	subs	r1, r0, r1
   d4186:	e001      	b.n	d418c <_Z11displayInfov+0x50>
   d4188:	f04f 31ff 	mov.w	r1, #4294967295
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d418c:	220a      	movs	r2, #10
   d418e:	4630      	mov	r0, r6
   d4190:	f002 fdfb 	bl	d6d8a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4194:	4630      	mov	r0, r6
   d4196:	f002 fde0 	bl	d6d5a <_ZN5Print7printlnEv>
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
   d419a:	782b      	ldrb	r3, [r5, #0]
   d419c:	4c65      	ldr	r4, [pc, #404]	; (d4334 <_Z11displayInfov+0x1f8>)
   d419e:	f8df a19c 	ldr.w	sl, [pc, #412]	; d433c <_Z11displayInfov+0x200>
   d41a2:	b13b      	cbz	r3, d41b4 <_Z11displayInfov+0x78>
   d41a4:	f002 fad2 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
   d41a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d41aa:	1ac0      	subs	r0, r0, r3
   d41ac:	f242 730f 	movw	r3, #9999	; 0x270f
   d41b0:	4298      	cmp	r0, r3
   d41b2:	d910      	bls.n	d41d6 <_Z11displayInfov+0x9a>
			display.printf("Distance in CM: %0.2f \n",cm);
			display.display(); 
      */
		}
		else {
			strcpy(buf, "no location");
   d41b4:	4960      	ldr	r1, [pc, #384]	; (d4338 <_Z11displayInfov+0x1fc>)
   d41b6:	a808      	add	r0, sp, #32
   d41b8:	f004 f94c 	bl	d8454 <strcpy>
			if (!gettingFix) {
   d41bc:	f89a 3000 	ldrb.w	r3, [sl]
   d41c0:	2b00      	cmp	r3, #0
   d41c2:	f040 80b1 	bne.w	d4328 <_Z11displayInfov+0x1ec>
				gettingFix = true;
   d41c6:	4b5d      	ldr	r3, [pc, #372]	; (d433c <_Z11displayInfov+0x200>)
   d41c8:	2201      	movs	r2, #1
   d41ca:	701a      	strb	r2, [r3, #0]
   d41cc:	f002 fabe 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
				startFix = millis();
   d41d0:	4b5b      	ldr	r3, [pc, #364]	; (d4340 <_Z11displayInfov+0x204>)
   d41d2:	6018      	str	r0, [r3, #0]
			}
		}
	}
}
   d41d4:	e0a8      	b.n	d4328 <_Z11displayInfov+0x1ec>

		char buf[128];
		Serial.println(gps.location.isValid());
	    Serial.println(gps.location.age());
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
			lat = gps.location.lat();
   d41d6:	4620      	mov	r0, r4
   d41d8:	f001 ffaa 	bl	d6130 <_ZN15TinyGPSLocation3latEv>
   d41dc:	ec51 0b10 	vmov	r0, r1, d0
   d41e0:	f004 f848 	bl	d8274 <__aeabi_d2f>
   d41e4:	f8df 9190 	ldr.w	r9, [pc, #400]	; d4378 <_Z11displayInfov+0x23c>
			lon = gps.location.lng(); 
   d41e8:	f8df 8190 	ldr.w	r8, [pc, #400]	; d437c <_Z11displayInfov+0x240>

		char buf[128];
		Serial.println(gps.location.isValid());
	    Serial.println(gps.location.age());
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
			lat = gps.location.lat();
   d41ec:	f8c9 0000 	str.w	r0, [r9]
			lon = gps.location.lng(); 
   d41f0:	4620      	mov	r0, r4
   d41f2:	f001 ffc5 	bl	d6180 <_ZN15TinyGPSLocation3lngEv>
   d41f6:	ec51 0b10 	vmov	r0, r1, d0
   d41fa:	f004 f83b 	bl	d8274 <__aeabi_d2f>
   friend class TinyGPSPlus;
public:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }
   d41fe:	2500      	movs	r5, #0
   d4200:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
   d4204:	f8c8 0000 	str.w	r0, [r8]
			alt = gps.altitude.meters();
   d4208:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   d420c:	4f4d      	ldr	r7, [pc, #308]	; (d4344 <_Z11displayInfov+0x208>)
			hr = gps.time.hour();
			mn = gps.time.minute();
   d420e:	f8df b170 	ldr.w	fp, [pc, #368]	; d4380 <_Z11displayInfov+0x244>
			se = gps.time.second();
   d4212:	4e4d      	ldr	r6, [pc, #308]	; (d4348 <_Z11displayInfov+0x20c>)
		Serial.println(gps.location.isValid());
	    Serial.println(gps.location.age());
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
			lat = gps.location.lat();
			lon = gps.location.lng(); 
			alt = gps.altitude.meters();
   d4214:	f003 fdb6 	bl	d7d84 <__aeabi_i2d>
   d4218:	4b4c      	ldr	r3, [pc, #304]	; (d434c <_Z11displayInfov+0x210>)
   d421a:	2200      	movs	r2, #0
   d421c:	f003 ff42 	bl	d80a4 <__aeabi_ddiv>
   d4220:	f004 f828 	bl	d8274 <__aeabi_d2f>
   d4224:	6038      	str	r0, [r7, #0]
			hr = gps.time.hour();
   d4226:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d422a:	f002 f817 	bl	d625c <_ZN11TinyGPSTime4hourEv>
   d422e:	4a48      	ldr	r2, [pc, #288]	; (d4350 <_Z11displayInfov+0x214>)
   d4230:	9207      	str	r2, [sp, #28]
   d4232:	7010      	strb	r0, [r2, #0]
			mn = gps.time.minute();
   d4234:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d4238:	f002 f81a 	bl	d6270 <_ZN11TinyGPSTime6minuteEv>
   d423c:	f88b 0000 	strb.w	r0, [fp]
			se = gps.time.second();
   d4240:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d4244:	f002 f822 	bl	d628c <_ZN11TinyGPSTime6secondEv>
   friend class TinyGPSPlus;
public:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }
   d4248:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
			sat = gps.satellites.value();
   d424c:	4d41      	ldr	r5, [pc, #260]	; (d4354 <_Z11displayInfov+0x218>)
   d424e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
			lat = gps.location.lat();
			lon = gps.location.lng(); 
			alt = gps.altitude.meters();
			hr = gps.time.hour();
			mn = gps.time.minute();
			se = gps.time.second();
   d4252:	7030      	strb	r0, [r6, #0]
			sat = gps.satellites.value();
      dy - gps.date.day();
   d4254:	f104 0038 	add.w	r0, r4, #56	; 0x38
			lon = gps.location.lng(); 
			alt = gps.altitude.meters();
			hr = gps.time.hour();
			mn = gps.time.minute();
			se = gps.time.second();
			sat = gps.satellites.value();
   d4258:	702b      	strb	r3, [r5, #0]
      dy - gps.date.day();
   d425a:	f001 fff5 	bl	d6248 <_ZN11TinyGPSDate3dayEv>
      mth = gps.date.month();
   d425e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4262:	f001 ffe5 	bl	d6230 <_ZN11TinyGPSDate5monthEv>
   d4266:	4b3c      	ldr	r3, [pc, #240]	; (d4358 <_Z11displayInfov+0x21c>)
   d4268:	7018      	strb	r0, [r3, #0]
      yr = gps.date.year();
   d426a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d426e:	f001 ffd3 	bl	d6218 <_ZN11TinyGPSDate4yearEv>
   d4272:	4b3a      	ldr	r3, [pc, #232]	; (d435c <_Z11displayInfov+0x220>)
			if(hr > 7) {
   d4274:	9a07      	ldr	r2, [sp, #28]
			mn = gps.time.minute();
			se = gps.time.second();
			sat = gps.satellites.value();
      dy - gps.date.day();
      mth = gps.date.month();
      yr = gps.date.year();
   d4276:	7018      	strb	r0, [r3, #0]
			if(hr > 7) {
   d4278:	7813      	ldrb	r3, [r2, #0]
   d427a:	2b07      	cmp	r3, #7
   d427c:	4614      	mov	r4, r2
   d427e:	d901      	bls.n	d4284 <_Z11displayInfov+0x148>
				hr = hr + UTC_offset;
   d4280:	3b06      	subs	r3, #6
   d4282:	e000      	b.n	d4286 <_Z11displayInfov+0x14a>
			}
			else {
				hr = hr + 24 + UTC_offset;
   d4284:	3312      	adds	r3, #18
   d4286:	7023      	strb	r3, [r4, #0]
			}
			Serial.printf("Distance in CM: %0.2f \n",cm);
   d4288:	f002 ff68 	bl	d715c <_Z16_fetch_usbserialv>
   d428c:	4a34      	ldr	r2, [pc, #208]	; (d4360 <_Z11displayInfov+0x224>)
   d428e:	9007      	str	r0, [sp, #28]
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4290:	6810      	ldr	r0, [r2, #0]
   d4292:	f003 fd89 	bl	d7da8 <__aeabi_f2d>
   d4296:	9b07      	ldr	r3, [sp, #28]
   d4298:	4a32      	ldr	r2, [pc, #200]	; (d4364 <_Z11displayInfov+0x228>)
   d429a:	e9cd 0100 	strd	r0, r1, [sp]
   d429e:	2100      	movs	r1, #0
   d42a0:	4618      	mov	r0, r3
   d42a2:	f002 fd92 	bl	d6dca <_ZN5Print11printf_implEbPKcz>
			Serial.printf("%i satellites in view --- ",sat);
   d42a6:	f002 ff59 	bl	d715c <_Z16_fetch_usbserialv>
   d42aa:	782b      	ldrb	r3, [r5, #0]
   d42ac:	4a2e      	ldr	r2, [pc, #184]	; (d4368 <_Z11displayInfov+0x22c>)
   d42ae:	2100      	movs	r1, #0
   d42b0:	f002 fd8b 	bl	d6dca <_ZN5Print11printf_implEbPKcz>
			Serial.printf("Time: %02i:%02i:%02i --- ",hr,mn,se);
   d42b4:	f002 ff52 	bl	d715c <_Z16_fetch_usbserialv>
   d42b8:	7832      	ldrb	r2, [r6, #0]
   d42ba:	7823      	ldrb	r3, [r4, #0]
   d42bc:	9201      	str	r2, [sp, #4]
   d42be:	f89b 2000 	ldrb.w	r2, [fp]
   d42c2:	9200      	str	r2, [sp, #0]
   d42c4:	2100      	movs	r1, #0
   d42c6:	4a29      	ldr	r2, [pc, #164]	; (d436c <_Z11displayInfov+0x230>)
   d42c8:	f002 fd7f 	bl	d6dca <_ZN5Print11printf_implEbPKcz>
			Serial.printf("lat: %f, long: %f, alt: %f \n", lat,lon,alt);
   d42cc:	f002 ff46 	bl	d715c <_Z16_fetch_usbserialv>
   d42d0:	4604      	mov	r4, r0
   d42d2:	6838      	ldr	r0, [r7, #0]
   d42d4:	f003 fd68 	bl	d7da8 <__aeabi_f2d>
   d42d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d42dc:	f8d8 0000 	ldr.w	r0, [r8]
   d42e0:	f003 fd62 	bl	d7da8 <__aeabi_f2d>
   d42e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d42e8:	f8d9 0000 	ldr.w	r0, [r9]
   d42ec:	f003 fd5c 	bl	d7da8 <__aeabi_f2d>
   d42f0:	4a1f      	ldr	r2, [pc, #124]	; (d4370 <_Z11displayInfov+0x234>)
   d42f2:	e9cd 0100 	strd	r0, r1, [sp]
   d42f6:	2100      	movs	r1, #0
   d42f8:	4620      	mov	r0, r4
   d42fa:	f002 fd66 	bl	d6dca <_ZN5Print11printf_implEbPKcz>
			if (gettingFix) {
   d42fe:	f89a 3000 	ldrb.w	r3, [sl]
   d4302:	b18b      	cbz	r3, d4328 <_Z11displayInfov+0x1ec>
				gettingFix = false;
   d4304:	4b0d      	ldr	r3, [pc, #52]	; (d433c <_Z11displayInfov+0x200>)
   d4306:	2200      	movs	r2, #0
   d4308:	701a      	strb	r2, [r3, #0]
   d430a:	f002 fa1f 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
				unsigned long elapsed = millis() - startFix;
   d430e:	4b0c      	ldr	r3, [pc, #48]	; (d4340 <_Z11displayInfov+0x204>)
   d4310:	681c      	ldr	r4, [r3, #0]
   d4312:	1b04      	subs	r4, r0, r4
				Serial.printlnf("%lu milliseconds to get GPS fix", elapsed);
   d4314:	f002 ff22 	bl	d715c <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4318:	4a16      	ldr	r2, [pc, #88]	; (d4374 <_Z11displayInfov+0x238>)
   d431a:	4623      	mov	r3, r4
   d431c:	2101      	movs	r1, #1
				gettingFix = true;
				startFix = millis();
			}
		}
	}
}
   d431e:	b029      	add	sp, #164	; 0xa4
   d4320:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4324:	f002 bd51 	b.w	d6dca <_ZN5Print11printf_implEbPKcz>
   d4328:	b029      	add	sp, #164	; 0xa4
   d432a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d432e:	bf00      	nop
   d4330:	2003e3c4 	.word	0x2003e3c4
   d4334:	2003e2a4 	.word	0x2003e2a4
   d4338:	000d86c3 	.word	0x000d86c3
   d433c:	2003de18 	.word	0x2003de18
   d4340:	2003e388 	.word	0x2003e388
   d4344:	2003e37c 	.word	0x2003e37c
   d4348:	2003e3c8 	.word	0x2003e3c8
   d434c:	40590000 	.word	0x40590000
   d4350:	2003de10 	.word	0x2003de10
   d4354:	2003de12 	.word	0x2003de12
   d4358:	2003e38c 	.word	0x2003e38c
   d435c:	2003e3bc 	.word	0x2003e3bc
   d4360:	2003e2a0 	.word	0x2003e2a0
   d4364:	000d8639 	.word	0x000d8639
   d4368:	000d8651 	.word	0x000d8651
   d436c:	000d866c 	.word	0x000d866c
   d4370:	000d8686 	.word	0x000d8686
   d4374:	000d86a3 	.word	0x000d86a3
   d4378:	2003e3c0 	.word	0x2003e3c0
   d437c:	2003de14 	.word	0x2003de14
   d4380:	2003e381 	.word	0x2003e381

000d4384 <_Z11waitForEchoiil>:
  cm = duration / 58.0; //the speed of sound?//
    // Serial.printf("Duration = %0.2f, Distance in CM: %0.2f \n",duration,cm);
    delay(100);
}

void waitForEcho(int pin, int value, long timeout){
   d4384:	b570      	push	{r4, r5, r6, lr}
   d4386:	4605      	mov	r5, r0
   d4388:	4614      	mov	r4, r2
   d438a:	460e      	mov	r6, r1
   d438c:	f002 f9de 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
  //-----this listens for the pulse to return---//
    long giveupTime = millis() + timeout;
    while (digitalRead(pin) != value && millis() < giveupTime) {}
   d4390:	b2ad      	uxth	r5, r5
    delay(100);
}

void waitForEcho(int pin, int value, long timeout){
  //-----this listens for the pulse to return---//
    long giveupTime = millis() + timeout;
   d4392:	4404      	add	r4, r0
    while (digitalRead(pin) != value && millis() < giveupTime) {}
   d4394:	4628      	mov	r0, r5
   d4396:	f003 f9e5 	bl	d7764 <digitalRead>
   d439a:	42b0      	cmp	r0, r6
   d439c:	d003      	beq.n	d43a6 <_Z11waitForEchoiil+0x22>
   d439e:	f002 f9d5 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
   d43a2:	42a0      	cmp	r0, r4
   d43a4:	d3f6      	bcc.n	d4394 <_Z11waitForEchoiil+0x10>
   d43a6:	bd70      	pop	{r4, r5, r6, pc}

000d43a8 <_Z16sendTriggerPulsei>:
}

void sendTriggerPulse(int pin){
   d43a8:	b510      	push	{r4, lr}
  //------this sends the pulse----//
    digitalWrite(pin, HIGH);
   d43aa:	b284      	uxth	r4, r0
   d43ac:	2101      	movs	r1, #1
   d43ae:	4620      	mov	r0, r4
   d43b0:	f003 f9bf 	bl	d7732 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d43b4:	200a      	movs	r0, #10
   d43b6:	f002 f9b9 	bl	d672c <HAL_Delay_Microseconds>
    delayMicroseconds(10);
    digitalWrite(pin, LOW);
   d43ba:	4620      	mov	r0, r4
   d43bc:	2100      	movs	r1, #0
}
   d43be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void sendTriggerPulse(int pin){
  //------this sends the pulse----//
    digitalWrite(pin, HIGH);
    delayMicroseconds(10);
    digitalWrite(pin, LOW);
   d43c2:	f003 b9b6 	b.w	d7732 <digitalWrite>
	...

000d43c8 <_Z18UltraSonicFunctionv>:
  display.setCursor(20,5);
  display.println("GPS Initializing");
	display.display();
}
*/
void UltraSonicFunction(){
   d43c8:	b538      	push	{r3, r4, r5, lr}
  //----- this calculates the disance every 3 to 4 seconds -----//
  sendTriggerPulse(trigPin);
   d43ca:	4b12      	ldr	r3, [pc, #72]	; (d4414 <_Z18UltraSonicFunctionv+0x4c>)
  waitForEcho(echoPin, HIGH, 100);
   d43cc:	4d12      	ldr	r5, [pc, #72]	; (d4418 <_Z18UltraSonicFunctionv+0x50>)
	display.display();
}
*/
void UltraSonicFunction(){
  //----- this calculates the disance every 3 to 4 seconds -----//
  sendTriggerPulse(trigPin);
   d43ce:	6818      	ldr	r0, [r3, #0]
   d43d0:	f7ff ffea 	bl	d43a8 <_Z16sendTriggerPulsei>
  waitForEcho(echoPin, HIGH, 100);
   d43d4:	2264      	movs	r2, #100	; 0x64
   d43d6:	2101      	movs	r1, #1
   d43d8:	6828      	ldr	r0, [r5, #0]
   d43da:	f7ff ffd3 	bl	d4384 <_Z11waitForEchoiil>
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d43de:	f002 f9ad 	bl	d673c <HAL_Timer_Get_Micro_Seconds>
  long startTime = micros();
  waitForEcho(echoPin, LOW, 100);
   d43e2:	2264      	movs	r2, #100	; 0x64
   d43e4:	4604      	mov	r4, r0
   d43e6:	2100      	movs	r1, #0
   d43e8:	6828      	ldr	r0, [r5, #0]
   d43ea:	f7ff ffcb 	bl	d4384 <_Z11waitForEchoiil>
   d43ee:	f002 f9a5 	bl	d673c <HAL_Timer_Get_Micro_Seconds>
  long endTime = micros();
  float duration = endTime - startTime;
  cm = duration / 58.0; //the speed of sound?//
   d43f2:	1b00      	subs	r0, r0, r4
   d43f4:	ee07 0a90 	vmov	s15, r0
   d43f8:	eddf 6a08 	vldr	s13, [pc, #32]	; d441c <_Z18UltraSonicFunctionv+0x54>
   d43fc:	4b08      	ldr	r3, [pc, #32]	; (d4420 <_Z18UltraSonicFunctionv+0x58>)
   d43fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    // Serial.printf("Duration = %0.2f, Distance in CM: %0.2f \n",duration,cm);
    delay(100);
   d4402:	2064      	movs	r0, #100	; 0x64
  waitForEcho(echoPin, HIGH, 100);
  long startTime = micros();
  waitForEcho(echoPin, LOW, 100);
  long endTime = micros();
  float duration = endTime - startTime;
  cm = duration / 58.0; //the speed of sound?//
   d4404:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d4408:	ed83 7a00 	vstr	s14, [r3]
    // Serial.printf("Duration = %0.2f, Distance in CM: %0.2f \n",duration,cm);
    delay(100);
}
   d440c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  waitForEcho(echoPin, LOW, 100);
  long endTime = micros();
  float duration = endTime - startTime;
  cm = duration / 58.0; //the speed of sound?//
    // Serial.printf("Duration = %0.2f, Distance in CM: %0.2f \n",duration,cm);
    delay(100);
   d4410:	f002 bd28 	b.w	d6e64 <delay>
   d4414:	2003dd7c 	.word	0x2003dd7c
   d4418:	2003dd80 	.word	0x2003dd80
   d441c:	42680000 	.word	0x42680000
   d4420:	2003e2a0 	.word	0x2003e2a0

000d4424 <_Z25doSomethingWhenDistanceIsi>:
    digitalWrite(pin, HIGH);
    delayMicroseconds(10);
    digitalWrite(pin, LOW);
}

void doSomethingWhenDistanceIs(int distanceIs){
   d4424:	b510      	push	{r4, lr}
  //-----this is the alarm set to go off at 1 meter----//
  // UltraSonicFunction();
    if (cm<distanceIs){
   d4426:	ee07 0a90 	vmov	s15, r0
   d442a:	4b13      	ldr	r3, [pc, #76]	; (d4478 <_Z25doSomethingWhenDistanceIsi+0x54>)
   d442c:	4c13      	ldr	r4, [pc, #76]	; (d447c <_Z25doSomethingWhenDistanceIsi+0x58>)
   d442e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d4432:	edd3 7a00 	vldr	s15, [r3]
        if (beam_status==false){
   d4436:	7823      	ldrb	r3, [r4, #0]
}

void doSomethingWhenDistanceIs(int distanceIs){
  //-----this is the alarm set to go off at 1 meter----//
  // UltraSonicFunction();
    if (cm<distanceIs){
   d4438:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d443c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4440:	dd0c      	ble.n	d445c <_Z25doSomethingWhenDistanceIsi+0x38>
        if (beam_status==false){
   d4442:	b99b      	cbnz	r3, d446c <_Z25doSomethingWhenDistanceIsi+0x48>
            
            Serial.println("less than 125cm");
   d4444:	f002 fe8a 	bl	d715c <_Z16_fetch_usbserialv>
   d4448:	490d      	ldr	r1, [pc, #52]	; (d4480 <_Z25doSomethingWhenDistanceIsi+0x5c>)
   d444a:	f002 fc92 	bl	d6d72 <_ZN5Print7printlnEPKc>
            logStart = !logStart;
   d444e:	4a0d      	ldr	r2, [pc, #52]	; (d4484 <_Z25doSomethingWhenDistanceIsi+0x60>)
   d4450:	7813      	ldrb	r3, [r2, #0]
   d4452:	f083 0301 	eor.w	r3, r3, #1
   d4456:	7013      	strb	r3, [r2, #0]
            beam_status = true;   
   d4458:	2301      	movs	r3, #1
   d445a:	e006      	b.n	d446a <_Z25doSomethingWhenDistanceIsi+0x46>
        }
    } else {
        if (beam_status==false){
   d445c:	b133      	cbz	r3, d446c <_Z25doSomethingWhenDistanceIsi+0x48>
            
        } else {
            Serial.print("clear");
   d445e:	f002 fe7d 	bl	d715c <_Z16_fetch_usbserialv>
   d4462:	4909      	ldr	r1, [pc, #36]	; (d4488 <_Z25doSomethingWhenDistanceIsi+0x64>)
   d4464:	f002 fc6e 	bl	d6d44 <_ZN5Print5printEPKc>
            beam_status = false;
   d4468:	2300      	movs	r3, #0
   d446a:	7023      	strb	r3, [r4, #0]
        }
    }
    delay(1000);
   d446c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   d4470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        } else {
            Serial.print("clear");
            beam_status = false;
        }
    }
    delay(1000);
   d4474:	f002 bcf6 	b.w	d6e64 <delay>
   d4478:	2003e2a0 	.word	0x2003e2a0
   d447c:	2003de11 	.word	0x2003de11
   d4480:	000d86cf 	.word	0x000d86cf
   d4484:	2003e380 	.word	0x2003e380
   d4488:	000d86df 	.word	0x000d86df

000d448c <_Z8logData2v>:
      delay(2000);
      Serial.printf("Ready for next data log \n");
    }
  }
}
void logData2() {
   d448c:	b510      	push	{r4, lr}
   d448e:	b086      	sub	sp, #24
 
  Serial.print("Writing data to SDcard \n");
   d4490:	f002 fe64 	bl	d715c <_Z16_fetch_usbserialv>
   d4494:	4926      	ldr	r1, [pc, #152]	; (d4530 <_Z8logData2v+0xa4>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4496:	4c27      	ldr	r4, [pc, #156]	; (d4534 <_Z8logData2v+0xa8>)
   d4498:	f002 fc54 	bl	d6d44 <_ZN5Print5printEPKc>
  file.printf("Day: %i, Month %i, Year %i \n", dy, mth, yr);
   d449c:	4a26      	ldr	r2, [pc, #152]	; (d4538 <_Z8logData2v+0xac>)
   d449e:	4b27      	ldr	r3, [pc, #156]	; (d453c <_Z8logData2v+0xb0>)
   d44a0:	7812      	ldrb	r2, [r2, #0]
   d44a2:	781b      	ldrb	r3, [r3, #0]
   d44a4:	9201      	str	r2, [sp, #4]
   d44a6:	4a26      	ldr	r2, [pc, #152]	; (d4540 <_Z8logData2v+0xb4>)
   d44a8:	7812      	ldrb	r2, [r2, #0]
   d44aa:	9200      	str	r2, [sp, #0]
   d44ac:	2100      	movs	r1, #0
   d44ae:	4a25      	ldr	r2, [pc, #148]	; (d4544 <_Z8logData2v+0xb8>)
   d44b0:	4620      	mov	r0, r4
   d44b2:	f002 fc8a 	bl	d6dca <_ZN5Print11printf_implEbPKcz>
  file.printf("Time: %02i:%02i:%02i \n",hr,mn,se);
   d44b6:	4a24      	ldr	r2, [pc, #144]	; (d4548 <_Z8logData2v+0xbc>)
   d44b8:	4b24      	ldr	r3, [pc, #144]	; (d454c <_Z8logData2v+0xc0>)
   d44ba:	7812      	ldrb	r2, [r2, #0]
   d44bc:	781b      	ldrb	r3, [r3, #0]
   d44be:	9201      	str	r2, [sp, #4]
   d44c0:	4a23      	ldr	r2, [pc, #140]	; (d4550 <_Z8logData2v+0xc4>)
   d44c2:	7812      	ldrb	r2, [r2, #0]
   d44c4:	9200      	str	r2, [sp, #0]
   d44c6:	2100      	movs	r1, #0
   d44c8:	4a22      	ldr	r2, [pc, #136]	; (d4554 <_Z8logData2v+0xc8>)
   d44ca:	4620      	mov	r0, r4
   d44cc:	f002 fc7d 	bl	d6dca <_ZN5Print11printf_implEbPKcz>
	file.printf("lat  %f \nlong %f \nalt %f\n", lat,lon,alt);
   d44d0:	4b21      	ldr	r3, [pc, #132]	; (d4558 <_Z8logData2v+0xcc>)
   d44d2:	6818      	ldr	r0, [r3, #0]
   d44d4:	f003 fc68 	bl	d7da8 <__aeabi_f2d>
   d44d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d44dc:	4b1f      	ldr	r3, [pc, #124]	; (d455c <_Z8logData2v+0xd0>)
   d44de:	6818      	ldr	r0, [r3, #0]
   d44e0:	f003 fc62 	bl	d7da8 <__aeabi_f2d>
   d44e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d44e8:	4b1d      	ldr	r3, [pc, #116]	; (d4560 <_Z8logData2v+0xd4>)
   d44ea:	6818      	ldr	r0, [r3, #0]
   d44ec:	f003 fc5c 	bl	d7da8 <__aeabi_f2d>
   d44f0:	4a1c      	ldr	r2, [pc, #112]	; (d4564 <_Z8logData2v+0xd8>)
   d44f2:	e9cd 0100 	strd	r0, r1, [sp]
   d44f6:	2100      	movs	r1, #0
   d44f8:	4620      	mov	r0, r4
   d44fa:	f002 fc66 	bl	d6dca <_ZN5Print11printf_implEbPKcz>
   d44fe:	4b1a      	ldr	r3, [pc, #104]	; (d4568 <_Z8logData2v+0xdc>)
   d4500:	4a1a      	ldr	r2, [pc, #104]	; (d456c <_Z8logData2v+0xe0>)
   d4502:	781b      	ldrb	r3, [r3, #0]
   d4504:	2100      	movs	r1, #0
   d4506:	4620      	mov	r0, r4
   d4508:	f002 fc5f 	bl	d6dca <_ZN5Print11printf_implEbPKcz>
	file.printf("Satellites in view: %i \n",sat);
	file.println("");
   d450c:	4918      	ldr	r1, [pc, #96]	; (d4570 <_Z8logData2v+0xe4>)
   d450e:	4620      	mov	r0, r4
   d4510:	f002 fc2f 	bl	d6d72 <_ZN5Print7printlnEPKc>
	file.printf("Distance in CM: %0.2f \n",cm);
   d4514:	4b17      	ldr	r3, [pc, #92]	; (d4574 <_Z8logData2v+0xe8>)
   d4516:	6818      	ldr	r0, [r3, #0]
   d4518:	f003 fc46 	bl	d7da8 <__aeabi_f2d>
   d451c:	4a16      	ldr	r2, [pc, #88]	; (d4578 <_Z8logData2v+0xec>)
   d451e:	e9cd 0100 	strd	r0, r1, [sp]
   d4522:	2100      	movs	r1, #0
   d4524:	4620      	mov	r0, r4
   d4526:	f002 fc50 	bl	d6dca <_ZN5Print11printf_implEbPKcz>
}
   d452a:	b006      	add	sp, #24
   d452c:	bd10      	pop	{r4, pc}
   d452e:	bf00      	nop
   d4530:	000d86e5 	.word	0x000d86e5
   d4534:	2003e390 	.word	0x2003e390
   d4538:	2003e3bc 	.word	0x2003e3bc
   d453c:	2003e3bd 	.word	0x2003e3bd
   d4540:	2003e38c 	.word	0x2003e38c
   d4544:	000d86fe 	.word	0x000d86fe
   d4548:	2003e3c8 	.word	0x2003e3c8
   d454c:	2003de10 	.word	0x2003de10
   d4550:	2003e381 	.word	0x2003e381
   d4554:	000d871b 	.word	0x000d871b
   d4558:	2003e37c 	.word	0x2003e37c
   d455c:	2003de14 	.word	0x2003de14
   d4560:	2003e3c0 	.word	0x2003e3c0
   d4564:	000d8732 	.word	0x000d8732
   d4568:	2003de12 	.word	0x2003de12
   d456c:	000d874c 	.word	0x000d874c
   d4570:	000d89cf 	.word	0x000d89cf
   d4574:	2003e2a0 	.word	0x2003e2a0
   d4578:	000d8639 	.word	0x000d8639

000d457c <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv>:
    pr->print(F("error: "));
    pr->println(msg);
    errorPrint(pr);
  }
  /** %Print any SD error code and halt. */
  void initErrorHalt() {
   d457c:	b508      	push	{r3, lr}
   d457e:	4604      	mov	r4, r0
    initErrorHalt(&Serial);
   d4580:	f002 fdec 	bl	d715c <_Z16_fetch_usbserialv>
  /** Print error details after begin() fails.
   *
   * \param[in] pr Print destination.
   */
  void initErrorPrint(Print* pr) {
    if (cardErrorCode()) {
   d4584:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
    pr->println(msg);
    errorPrint(pr);
  }
  /** %Print any SD error code and halt. */
  void initErrorHalt() {
    initErrorHalt(&Serial);
   d4588:	4605      	mov	r5, r0
  /** Print error details after begin() fails.
   *
   * \param[in] pr Print destination.
   */
  void initErrorPrint(Print* pr) {
    if (cardErrorCode()) {
   d458a:	b32b      	cbz	r3, d45d8 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x5c>
      pr->println(F("Can't access SD card. Do not reformat."));
   d458c:	491a      	ldr	r1, [pc, #104]	; (d45f8 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x7c>)
   d458e:	f002 fbfa 	bl	d6d86 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
   d4592:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
   d4596:	2b20      	cmp	r3, #32
   d4598:	d103      	bne.n	d45a2 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x26>
        pr->println(F("No card, wrong chip select pin, or SPI problem?"));
   d459a:	4918      	ldr	r1, [pc, #96]	; (d45fc <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x80>)
   d459c:	4628      	mov	r0, r5
   d459e:	f002 fbf2 	bl	d6d86 <_ZN5Print7printlnEPK19__FlashStringHelper>
  }
  /** %Print any SD error code.
   * \param[in] pr Print device.
   */
  void errorPrint(Print* pr) {
    if (!cardErrorCode()) {
   d45a2:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
   d45a6:	b31b      	cbz	r3, d45f0 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x74>
      return;
    }
    pr->print(F("SD errorCode: 0X"));
   d45a8:	4915      	ldr	r1, [pc, #84]	; (d4600 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x84>)
   d45aa:	4628      	mov	r0, r5
   d45ac:	f002 fbd1 	bl	d6d52 <_ZN5Print5printEPK19__FlashStringHelper>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d45b0:	2210      	movs	r2, #16
   d45b2:	f894 1460 	ldrb.w	r1, [r4, #1120]	; 0x460
   d45b6:	4628      	mov	r0, r5
   d45b8:	f002 fbe7 	bl	d6d8a <_ZN5Print11printNumberEmh>
    pr->print(cardErrorCode(), HEX);
    pr->print(F(",0X"));
   d45bc:	4911      	ldr	r1, [pc, #68]	; (d4604 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x88>)
   d45be:	4628      	mov	r0, r5
   d45c0:	f002 fbc7 	bl	d6d52 <_ZN5Print5printEPK19__FlashStringHelper>
   d45c4:	2210      	movs	r2, #16
   d45c6:	f894 1469 	ldrb.w	r1, [r4, #1129]	; 0x469
   d45ca:	4628      	mov	r0, r5
   d45cc:	f002 fbdd 	bl	d6d8a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d45d0:	4628      	mov	r0, r5
   d45d2:	f002 fbc2 	bl	d6d5a <_ZN5Print7printlnEv>
   d45d6:	e00b      	b.n	d45f0 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x74>
      pr->println(F("Can't access SD card. Do not reformat."));
      if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
        pr->println(F("No card, wrong chip select pin, or SPI problem?"));
      }
      errorPrint(pr);
    } else if (vol()->fatType() == 0) {
   d45d8:	79e3      	ldrb	r3, [r4, #7]
   d45da:	b90b      	cbnz	r3, d45e0 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x64>
      pr->println(F("Invalid format, reformat SD."));
   d45dc:	490a      	ldr	r1, [pc, #40]	; (d4608 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x8c>)
   d45de:	e005      	b.n	d45ec <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x70>
    } else if (!vwd()->isOpen()) {
   d45e0:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d45e4:	b90b      	cbnz	r3, d45ea <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x6e>
      pr->println(F("Can't open root directory."));
   d45e6:	4909      	ldr	r1, [pc, #36]	; (d460c <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x90>)
   d45e8:	e000      	b.n	d45ec <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x70>
    } else {
      pr->println(F("No error found."));
   d45ea:	4909      	ldr	r1, [pc, #36]	; (d4610 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x94>)
   d45ec:	f002 fbcb 	bl	d6d86 <_ZN5Print7printlnEPK19__FlashStringHelper>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   d45f0:	f002 f8bc 	bl	d676c <os_thread_yield>
   d45f4:	e7fc      	b.n	d45f0 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x74>
   d45f6:	bf00      	nop
   d45f8:	000d8765 	.word	0x000d8765
   d45fc:	000d878c 	.word	0x000d878c
   d4600:	000d87bc 	.word	0x000d87bc
   d4604:	000d87cd 	.word	0x000d87cd
   d4608:	000d87d1 	.word	0x000d87d1
   d460c:	000d87ee 	.word	0x000d87ee
   d4610:	000d8809 	.word	0x000d8809

000d4614 <_ZN5Print6printfIIEEEjPKcDpT_>:
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4614:	460a      	mov	r2, r1
   d4616:	2100      	movs	r1, #0
   d4618:	f002 bbd7 	b.w	d6dca <_ZN5Print11printf_implEbPKcz>

000d461c <_Z15SDwriteFunctionv>:
  }
  // Write data header.
  file.printf("TimeStamp, Random Data %i \n");
  // Start on a multiple of the sample interval.
}
void SDwriteFunction(){
   d461c:	b570      	push	{r4, r5, r6, lr}
  // logStart=true; // use a button nomrally
if (logStart==true) {
   d461e:	4c3c      	ldr	r4, [pc, #240]	; (d4710 <_Z15SDwriteFunctionv+0xf4>)
   d4620:	7823      	ldrb	r3, [r4, #0]
  }
  // Write data header.
  file.printf("TimeStamp, Random Data %i \n");
  // Start on a multiple of the sample interval.
}
void SDwriteFunction(){
   d4622:	b08a      	sub	sp, #40	; 0x28
  // logStart=true; // use a button nomrally
if (logStart==true) {
   d4624:	2b00      	cmp	r3, #0
   d4626:	d070      	beq.n	d470a <_Z15SDwriteFunctionv+0xee>
  Serial.printf("Starting Data Logging \n");
   d4628:	f002 fd98 	bl	d715c <_Z16_fetch_usbserialv>
   d462c:	4939      	ldr	r1, [pc, #228]	; (d4714 <_Z15SDwriteFunctionv+0xf8>)
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d462e:	4d3a      	ldr	r5, [pc, #232]	; (d4718 <_Z15SDwriteFunctionv+0xfc>)
   d4630:	f7ff fff0 	bl	d4614 <_ZN5Print6printfIIEEEjPKcDpT_>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4634:	2600      	movs	r6, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d4636:	2300      	movs	r3, #0
   d4638:	4a37      	ldr	r2, [pc, #220]	; (d4718 <_Z15SDwriteFunctionv+0xfc>)
   d463a:	4938      	ldr	r1, [pc, #224]	; (d471c <_Z15SDwriteFunctionv+0x100>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d463c:	f88d 6004 	strb.w	r6, [sp, #4]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d4640:	a801      	add	r0, sp, #4
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4642:	f88d 6005 	strb.w	r6, [sp, #5]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d4646:	f000 fee4 	bl	d5412 <_ZN7FatFile4openEPS_PKci>
  while (sd.exists(fileName)) {
   d464a:	b198      	cbz	r0, d4674 <_Z15SDwriteFunctionv+0x58>
    if (fileName[BASE_NAME_SIZE + 1] != '9') {
   d464c:	796b      	ldrb	r3, [r5, #5]
   d464e:	2b39      	cmp	r3, #57	; 0x39
   d4650:	d002      	beq.n	d4658 <_Z15SDwriteFunctionv+0x3c>
      fileName[BASE_NAME_SIZE + 1]++;
   d4652:	3301      	adds	r3, #1
   d4654:	716b      	strb	r3, [r5, #5]
   d4656:	e7ee      	b.n	d4636 <_Z15SDwriteFunctionv+0x1a>
    } else if (fileName[BASE_NAME_SIZE] != '9') {
   d4658:	792b      	ldrb	r3, [r5, #4]
   d465a:	2b39      	cmp	r3, #57	; 0x39
   d465c:	d004      	beq.n	d4668 <_Z15SDwriteFunctionv+0x4c>
      fileName[BASE_NAME_SIZE + 1] = '0';
   d465e:	2230      	movs	r2, #48	; 0x30
      fileName[BASE_NAME_SIZE]++;
   d4660:	3301      	adds	r3, #1
  Serial.printf("Starting Data Logging \n");
  while (sd.exists(fileName)) {
    if (fileName[BASE_NAME_SIZE + 1] != '9') {
      fileName[BASE_NAME_SIZE + 1]++;
    } else if (fileName[BASE_NAME_SIZE] != '9') {
      fileName[BASE_NAME_SIZE + 1] = '0';
   d4662:	716a      	strb	r2, [r5, #5]
      fileName[BASE_NAME_SIZE]++;
   d4664:	712b      	strb	r3, [r5, #4]
   d4666:	e7e6      	b.n	d4636 <_Z15SDwriteFunctionv+0x1a>
    } else {
      Serial.println("Can't create file name");
   d4668:	f002 fd78 	bl	d715c <_Z16_fetch_usbserialv>
   d466c:	492c      	ldr	r1, [pc, #176]	; (d4720 <_Z15SDwriteFunctionv+0x104>)
   d466e:	f002 fb80 	bl	d6d72 <_ZN5Print7printlnEPKc>
   d4672:	e7fe      	b.n	d4672 <_Z15SDwriteFunctionv+0x56>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d4674:	492b      	ldr	r1, [pc, #172]	; (d4724 <_Z15SDwriteFunctionv+0x108>)
   d4676:	4a28      	ldr	r2, [pc, #160]	; (d4718 <_Z15SDwriteFunctionv+0xfc>)
   d4678:	6809      	ldr	r1, [r1, #0]
   d467a:	482b      	ldr	r0, [pc, #172]	; (d4728 <_Z15SDwriteFunctionv+0x10c>)
   d467c:	f640 2301 	movw	r3, #2561	; 0xa01
   d4680:	f000 fec7 	bl	d5412 <_ZN7FatFile4openEPS_PKci>
      while(1);
    }
  }
  if (!file.open(fileName, O_WRONLY | O_CREAT | O_EXCL)) {
   d4684:	b920      	cbnz	r0, d4690 <_Z15SDwriteFunctionv+0x74>
    Serial.println("file.open");
   d4686:	f002 fd69 	bl	d715c <_Z16_fetch_usbserialv>
   d468a:	4928      	ldr	r1, [pc, #160]	; (d472c <_Z15SDwriteFunctionv+0x110>)
   d468c:	f002 fb71 	bl	d6d72 <_ZN5Print7printlnEPKc>
  }
  Serial.printf("Logging to: %s \n",fileName);
   d4690:	f002 fd64 	bl	d715c <_Z16_fetch_usbserialv>
   d4694:	4b20      	ldr	r3, [pc, #128]	; (d4718 <_Z15SDwriteFunctionv+0xfc>)
   d4696:	4a26      	ldr	r2, [pc, #152]	; (d4730 <_Z15SDwriteFunctionv+0x114>)
      Serial.print(".");
      
      logData2();

      // Force data to SD and update the directory entry to avoid data loss.
      if (!file.sync() || file.getWriteError()) {
   d4698:	4d26      	ldr	r5, [pc, #152]	; (d4734 <_Z15SDwriteFunctionv+0x118>)
   d469a:	2100      	movs	r1, #0
   d469c:	f002 fb95 	bl	d6dca <_ZN5Print11printf_implEbPKcz>
   d46a0:	f002 f84c 	bl	d673c <HAL_Timer_Get_Micro_Seconds>
  }
  if (!file.open(fileName, O_WRONLY | O_CREAT | O_EXCL)) {
    Serial.println("file.open");
  }
  Serial.printf("Logging to: %s \n",fileName);
  startTime = micros();
   d46a4:	4b24      	ldr	r3, [pc, #144]	; (d4738 <_Z15SDwriteFunctionv+0x11c>)
   d46a6:	6018      	str	r0, [r3, #0]
}
  while(logStart==true) {
   d46a8:	7823      	ldrb	r3, [r4, #0]
   d46aa:	b373      	cbz	r3, d470a <_Z15SDwriteFunctionv+0xee>
    // for (i=0;i<100;i++) {

      // logTime = micros() - startTime;
      Serial.print(".");
   d46ac:	f002 fd56 	bl	d715c <_Z16_fetch_usbserialv>
   d46b0:	4922      	ldr	r1, [pc, #136]	; (d473c <_Z15SDwriteFunctionv+0x120>)
   d46b2:	f002 fb47 	bl	d6d44 <_ZN5Print5printEPKc>
      
      logData2();
   d46b6:	f7ff fee9 	bl	d448c <_Z8logData2v>

      // Force data to SD and update the directory entry to avoid data loss.
      if (!file.sync() || file.getWriteError()) {
   d46ba:	481b      	ldr	r0, [pc, #108]	; (d4728 <_Z15SDwriteFunctionv+0x10c>)
   d46bc:	f000 fe6c 	bl	d5398 <_ZN7FatFile4syncEv>
   d46c0:	b1e8      	cbz	r0, d46fe <_Z15SDwriteFunctionv+0xe2>
   d46c2:	7a6b      	ldrb	r3, [r5, #9]
   d46c4:	07db      	lsls	r3, r3, #31
   d46c6:	d41a      	bmi.n	d46fe <_Z15SDwriteFunctionv+0xe2>
      Serial.printf("write error \n");
      }
      delay(random(100,500));
   d46c8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   d46cc:	2064      	movs	r0, #100	; 0x64
   d46ce:	f002 fe40 	bl	d7352 <_Z6randomii>
   d46d2:	f002 fbc7 	bl	d6e64 <delay>
    // }
    logStart = false;   // button release
   d46d6:	2300      	movs	r3, #0
    if (logStart==false) {
      file.close();
   d46d8:	4813      	ldr	r0, [pc, #76]	; (d4728 <_Z15SDwriteFunctionv+0x10c>)
      if (!file.sync() || file.getWriteError()) {
      Serial.printf("write error \n");
      }
      delay(random(100,500));
    // }
    logStart = false;   // button release
   d46da:	7023      	strb	r3, [r4, #0]
    if (logStart==false) {
      file.close();
   d46dc:	f000 fe92 	bl	d5404 <_ZN7FatFile5closeEv>
      Serial.printf("Done \n");
   d46e0:	f002 fd3c 	bl	d715c <_Z16_fetch_usbserialv>
   d46e4:	4916      	ldr	r1, [pc, #88]	; (d4740 <_Z15SDwriteFunctionv+0x124>)
   d46e6:	f7ff ff95 	bl	d4614 <_ZN5Print6printfIIEEEjPKcDpT_>
      delay(2000);
   d46ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d46ee:	f002 fbb9 	bl	d6e64 <delay>
      Serial.printf("Ready for next data log \n");
   d46f2:	f002 fd33 	bl	d715c <_Z16_fetch_usbserialv>
   d46f6:	4913      	ldr	r1, [pc, #76]	; (d4744 <_Z15SDwriteFunctionv+0x128>)
   d46f8:	f7ff ff8c 	bl	d4614 <_ZN5Print6printfIIEEEjPKcDpT_>
   d46fc:	e7d4      	b.n	d46a8 <_Z15SDwriteFunctionv+0x8c>
      
      logData2();

      // Force data to SD and update the directory entry to avoid data loss.
      if (!file.sync() || file.getWriteError()) {
      Serial.printf("write error \n");
   d46fe:	f002 fd2d 	bl	d715c <_Z16_fetch_usbserialv>
   d4702:	4911      	ldr	r1, [pc, #68]	; (d4748 <_Z15SDwriteFunctionv+0x12c>)
   d4704:	f7ff ff86 	bl	d4614 <_ZN5Print6printfIIEEEjPKcDpT_>
   d4708:	e7de      	b.n	d46c8 <_Z15SDwriteFunctionv+0xac>
      Serial.printf("Done \n");
      delay(2000);
      Serial.printf("Ready for next data log \n");
    }
  }
}
   d470a:	b00a      	add	sp, #40	; 0x28
   d470c:	bd70      	pop	{r4, r5, r6, pc}
   d470e:	bf00      	nop
   d4710:	2003e380 	.word	0x2003e380
   d4714:	000d8819 	.word	0x000d8819
   d4718:	2003dd84 	.word	0x2003dd84
   d471c:	2003e258 	.word	0x2003e258
   d4720:	000d8831 	.word	0x000d8831
   d4724:	2003e3cc 	.word	0x2003e3cc
   d4728:	2003e398 	.word	0x2003e398
   d472c:	000d8848 	.word	0x000d8848
   d4730:	000d8852 	.word	0x000d8852
   d4734:	2003e390 	.word	0x2003e390
   d4738:	2003e384 	.word	0x2003e384
   d473c:	000d87ec 	.word	0x000d87ec
   d4740:	000d8863 	.word	0x000d8863
   d4744:	000d886a 	.word	0x000d886a
   d4748:	000d8884 	.word	0x000d8884

000d474c <loop>:
	delay(500);

}

void loop()
{
   d474c:	b508      	push	{r3, lr}
  //packetGroper();
  //MQTT_connect();
	UltraSonicFunction();
   d474e:	f7ff fe3b 	bl	d43c8 <_Z18UltraSonicFunctionv>
  
	while (Serial1.available() > 0) {
   d4752:	f002 fd8b 	bl	d726c <_Z22__fetch_global_Serial1v>
   d4756:	6803      	ldr	r3, [r0, #0]
   d4758:	691b      	ldr	r3, [r3, #16]
   d475a:	4798      	blx	r3
   d475c:	2800      	cmp	r0, #0
   d475e:	dd10      	ble.n	d4782 <loop+0x36>
		if (gps.encode(Serial1.read())) {
   d4760:	f002 fd84 	bl	d726c <_Z22__fetch_global_Serial1v>
   d4764:	6803      	ldr	r3, [r0, #0]
   d4766:	695b      	ldr	r3, [r3, #20]
   d4768:	4798      	blx	r3
   d476a:	b2c1      	uxtb	r1, r0
   d476c:	4807      	ldr	r0, [pc, #28]	; (d478c <loop+0x40>)
   d476e:	f001 fef3 	bl	d6558 <_ZN11TinyGPSPlus6encodeEc>
   d4772:	2800      	cmp	r0, #0
   d4774:	d0ed      	beq.n	d4752 <loop+0x6>
			displayInfo();
   d4776:	f7ff fce1 	bl	d413c <_Z11displayInfov>
      //subscribePublish();
      doSomethingWhenDistanceIs(100);
   d477a:	2064      	movs	r0, #100	; 0x64
   d477c:	f7ff fe52 	bl	d4424 <_Z25doSomethingWhenDistanceIsi>
   d4780:	e7e7      	b.n	d4752 <loop+0x6>
		}
	}

SDwriteFunction();
}
   d4782:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      //subscribePublish();
      doSomethingWhenDistanceIs(100);
		}
	}

SDwriteFunction();
   d4786:	f7ff bf49 	b.w	d461c <_Z15SDwriteFunctionv>
   d478a:	bf00      	nop
   d478c:	2003e2a4 	.word	0x2003e2a4

000d4790 <_Z11SDcardSetupv>:
//   while ((currentTime - lastSecond) < timer){
//          //do nothing//
//   }
//   lastSecond = millis();
// }
void SDcardSetup(){
   d4790:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	logStart = false;
   d4792:	4a21      	ldr	r2, [pc, #132]	; (d4818 <_Z11SDcardSetupv+0x88>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4794:	4c21      	ldr	r4, [pc, #132]	; (d481c <_Z11SDcardSetupv+0x8c>)
   d4796:	2300      	movs	r3, #0
   d4798:	7013      	strb	r3, [r2, #0]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d479a:	4a21      	ldr	r2, [pc, #132]	; (d4820 <_Z11SDcardSetupv+0x90>)
   d479c:	9200      	str	r2, [sp, #0]
   d479e:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d47a2:	4a20      	ldr	r2, [pc, #128]	; (d4824 <_Z11SDcardSetupv+0x94>)
   d47a4:	f88d 3004 	strb.w	r3, [sp, #4]
   d47a8:	9202      	str	r2, [sp, #8]
   d47aa:	2501      	movs	r5, #1
   d47ac:	f88d 300d 	strb.w	r3, [sp, #13]
   d47b0:	220e      	movs	r2, #14
   d47b2:	466b      	mov	r3, sp
   d47b4:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d47b8:	4630      	mov	r0, r6
   d47ba:	f88d 500c 	strb.w	r5, [sp, #12]
   d47be:	f001 f9bf 	bl	d5b40 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d47c2:	b330      	cbz	r0, d4812 <_Z11SDcardSetupv+0x82>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d47c4:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d47c8:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d47ca:	f000 fe1b 	bl	d5404 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d47ce:	4629      	mov	r1, r5
   d47d0:	4620      	mov	r0, r4
   d47d2:	f001 f85e 	bl	d5892 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d47d6:	4601      	mov	r1, r0
   d47d8:	b140      	cbz	r0, d47ec <_Z11SDcardSetupv+0x5c>
   d47da:	4c10      	ldr	r4, [pc, #64]	; (d481c <_Z11SDcardSetupv+0x8c>)
   d47dc:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   d47e0:	4621      	mov	r1, r4
   d47e2:	4628      	mov	r0, r5
   d47e4:	f000 fc39 	bl	d505a <_ZN7FatFile8openRootEP9FatVolume>
   d47e8:	b198      	cbz	r0, d4812 <_Z11SDcardSetupv+0x82>
   d47ea:	e005      	b.n	d47f8 <_Z11SDcardSetupv+0x68>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d47ec:	4620      	mov	r0, r4
   d47ee:	f001 f850 	bl	d5892 <_ZN9FatVolume4initEh>
   d47f2:	2800      	cmp	r0, #0
   d47f4:	d1f1      	bne.n	d47da <_Z11SDcardSetupv+0x4a>
   d47f6:	e00c      	b.n	d4812 <_Z11SDcardSetupv+0x82>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d47f8:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d47fc:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4800:	d007      	beq.n	d4812 <_Z11SDcardSetupv+0x82>
      return false;
    }
    m_cwd = dir;
   d4802:	4b09      	ldr	r3, [pc, #36]	; (d4828 <_Z11SDcardSetupv+0x98>)
  if (BASE_NAME_SIZE > 6) {
    Serial.println("FILE_BASE_NAME too long");
    while(1);
  }
  // Write data header.
  file.printf("TimeStamp, Random Data %i \n");
   d4804:	4909      	ldr	r1, [pc, #36]	; (d482c <_Z11SDcardSetupv+0x9c>)
   d4806:	480a      	ldr	r0, [pc, #40]	; (d4830 <_Z11SDcardSetupv+0xa0>)
   d4808:	601d      	str	r5, [r3, #0]
   d480a:	f7ff ff03 	bl	d4614 <_ZN5Print6printfIIEEEjPKcDpT_>
  // Start on a multiple of the sample interval.
}
   d480e:	b004      	add	sp, #16
   d4810:	bd70      	pop	{r4, r5, r6, pc}
void SDcardSetup(){
	logStart = false;
  // Initialize at the highest speed supported by the board that is
  // not over 50 MHz. Try a lower speed if SPI errors occur.cc
  if (!sd.begin(chipSelect, SD_SCK_MHZ(50))) {
    sd.initErrorHalt();  
   d4812:	4802      	ldr	r0, [pc, #8]	; (d481c <_Z11SDcardSetupv+0x8c>)
   d4814:	f7ff feb2 	bl	d457c <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv>
   d4818:	2003e380 	.word	0x2003e380
   d481c:	2003de1c 	.word	0x2003de1c
   d4820:	000d85d8 	.word	0x000d85d8
   d4824:	02faf080 	.word	0x02faf080
   d4828:	2003e3cc 	.word	0x2003e3cc
   d482c:	000d8892 	.word	0x000d8892
   d4830:	2003e390 	.word	0x2003e390

000d4834 <setup>:
// Error messages stored in flash.
#define error(msg) sd.errorHalt(msg)
//------------------------------------------------------------------------------

void setup()
{
   d4834:	b508      	push	{r3, lr}
	Serial.begin(9600);
   d4836:	f002 fc91 	bl	d715c <_Z16_fetch_usbserialv>
   d483a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d483e:	f002 fc81 	bl	d7144 <_ZN9USBSerial5beginEl>

	delay(500);
   d4842:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4846:	f002 fb0d 	bl	d6e64 <delay>
   pinMode(trigPin, OUTPUT);
   d484a:	4b14      	ldr	r3, [pc, #80]	; (d489c <setup+0x68>)
   d484c:	2101      	movs	r1, #1
   d484e:	8818      	ldrh	r0, [r3, #0]
   d4850:	f002 ff5e 	bl	d7710 <pinMode>
   pinMode(echoPin, INPUT);
   d4854:	4b12      	ldr	r3, [pc, #72]	; (d48a0 <setup+0x6c>)
   d4856:	2100      	movs	r1, #0
   d4858:	8818      	ldrh	r0, [r3, #0]
   d485a:	f002 ff59 	bl	d7710 <pinMode>

	Serial1.begin(9600);
   d485e:	f002 fd05 	bl	d726c <_Z22__fetch_global_Serial1v>
   d4862:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4866:	f002 fcfb 	bl	d7260 <_ZN11USARTSerial5beginEm>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d486a:	f001 ff6f 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
    startFix = millis();
   d486e:	4b0d      	ldr	r3, [pc, #52]	; (d48a4 <setup+0x70>)
   d4870:	6018      	str	r0, [r3, #0]
    gettingFix = true;
   d4872:	4b0d      	ldr	r3, [pc, #52]	; (d48a8 <setup+0x74>)
   d4874:	2201      	movs	r2, #1
   d4876:	701a      	strb	r2, [r3, #0]
	
	// OLED Display initialization
	//display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
	//helloWorld();
  
  SDcardSetup();
   d4878:	f7ff ff8a 	bl	d4790 <_Z11SDcardSetupv>

	delay(500);
   d487c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4880:	f002 faf0 	bl	d6e64 <delay>
	Serial.println("attempt 19");
   d4884:	f002 fc6a 	bl	d715c <_Z16_fetch_usbserialv>
   d4888:	4908      	ldr	r1, [pc, #32]	; (d48ac <setup+0x78>)
   d488a:	f002 fa72 	bl	d6d72 <_ZN5Print7printlnEPKc>
	delay(500);
   d488e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4

}
   d4892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  SDcardSetup();

	delay(500);
	Serial.println("attempt 19");
	delay(500);
   d4896:	f002 bae5 	b.w	d6e64 <delay>
   d489a:	bf00      	nop
   d489c:	2003dd7c 	.word	0x2003dd7c
   d48a0:	2003dd80 	.word	0x2003dd80
   d48a4:	2003e388 	.word	0x2003e388
   d48a8:	2003de18 	.word	0x2003de18
   d48ac:	000d88ae 	.word	0x000d88ae

000d48b0 <_GLOBAL__sub_I_gps>:
  file.printf("Time: %02i:%02i:%02i \n",hr,mn,se);
	file.printf("lat  %f \nlong %f \nalt %f\n", lat,lon,alt);
	file.printf("Satellites in view: %i \n",sat);
	file.println("");
	file.printf("Distance in CM: %0.2f \n",cm);
}
   d48b0:	b570      	push	{r4, r5, r6, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d48b2:	f001 febb 	bl	d662c <HAL_Pin_Map>
//---oled code---//
//#define OLED_RESET D4
//Adafruit_SSD1306 display(OLED_RESET);

//---gps constants ---//
SYSTEM_THREAD(ENABLED);
   d48b6:	2100      	movs	r1, #0
   d48b8:	2001      	movs	r0, #1
   d48ba:	f002 f84f 	bl	d695c <system_thread_set_state>
//Adafruit_MQTT_Publish longWrite = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Longitude");
//Adafruit_MQTT_Publish altWrite = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Altitude");
//Adafruit_MQTT_Publish distanceWrite = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Distance in CM");

// The TinyGPS++ object
TinyGPSPlus gps;
   d48be:	481e      	ldr	r0, [pc, #120]	; (d4938 <_GLOBAL__sub_I_gps+0x88>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d48c0:	4e1e      	ldr	r6, [pc, #120]	; (d493c <_GLOBAL__sub_I_gps+0x8c>)
   d48c2:	f001 fb61 	bl	d5f88 <_ZN11TinyGPSPlusC1Ev>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d48c6:	4b1e      	ldr	r3, [pc, #120]	; (d4940 <_GLOBAL__sub_I_gps+0x90>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d48c8:	2164      	movs	r1, #100	; 0x64
   d48ca:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d48ce:	491d      	ldr	r1, [pc, #116]	; (d4944 <_GLOBAL__sub_I_gps+0x94>)
   d48d0:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d48d4:	2101      	movs	r1, #1
   d48d6:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d48da:	6831      	ldr	r1, [r6, #0]
   d48dc:	2200      	movs	r2, #0
   d48de:	f011 0501 	ands.w	r5, r1, #1
   d48e2:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d48e4:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d48e8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d48ec:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d48f0:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d48f4:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d48f8:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d48fc:	461c      	mov	r4, r3
   d48fe:	d10a      	bne.n	d4916 <_GLOBAL__sub_I_gps+0x66>
   d4900:	4630      	mov	r0, r6
   d4902:	f7ff fbce 	bl	d40a2 <__cxa_guard_acquire>
   d4906:	b130      	cbz	r0, d4916 <_GLOBAL__sub_I_gps+0x66>
   d4908:	4629      	mov	r1, r5
   d490a:	480f      	ldr	r0, [pc, #60]	; (d4948 <_GLOBAL__sub_I_gps+0x98>)
   d490c:	f002 f8fe 	bl	d6b0c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4910:	4630      	mov	r0, r6
   d4912:	f7ff fbcb 	bl	d40ac <__cxa_guard_release>
   d4916:	480d      	ldr	r0, [pc, #52]	; (d494c <_GLOBAL__sub_I_gps+0x9c>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4918:	4b0b      	ldr	r3, [pc, #44]	; (d4948 <_GLOBAL__sub_I_gps+0x98>)
   d491a:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d491e:	2300      	movs	r3, #0
   d4920:	7203      	strb	r3, [r0, #8]
   d4922:	7243      	strb	r3, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4924:	6043      	str	r3, [r0, #4]
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
   d4926:	4b0a      	ldr	r3, [pc, #40]	; (d4950 <_GLOBAL__sub_I_gps+0xa0>)
   d4928:	6003      	str	r3, [r0, #0]

#define FILE_BASE_NAME "Data"

// Create file system object.
SdFat sd;
SdFile file;
   d492a:	4a0a      	ldr	r2, [pc, #40]	; (d4954 <_GLOBAL__sub_I_gps+0xa4>)
   d492c:	490a      	ldr	r1, [pc, #40]	; (d4958 <_GLOBAL__sub_I_gps+0xa8>)
  file.printf("Time: %02i:%02i:%02i \n",hr,mn,se);
	file.printf("lat  %f \nlong %f \nalt %f\n", lat,lon,alt);
	file.printf("Satellites in view: %i \n",sat);
	file.println("");
	file.printf("Distance in CM: %0.2f \n",cm);
}
   d492e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

#define FILE_BASE_NAME "Data"

// Create file system object.
SdFat sd;
SdFile file;
   d4932:	f002 bf6b 	b.w	d780c <__aeabi_atexit>
   d4936:	bf00      	nop
   d4938:	2003e2a4 	.word	0x2003e2a4
   d493c:	2003de04 	.word	0x2003de04
   d4940:	2003de1c 	.word	0x2003de1c
   d4944:	000d85d8 	.word	0x000d85d8
   d4948:	2003de08 	.word	0x2003de08
   d494c:	2003e390 	.word	0x2003e390
   d4950:	000d85e4 	.word	0x000d85e4
   d4954:	2003de00 	.word	0x2003de00
   d4958:	000d40b3 	.word	0x000d40b3

000d495c <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d495c:	f001 be66 	b.w	d662c <HAL_Pin_Map>

000d4960 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d4960:	f001 be64 	b.w	d662c <HAL_Pin_Map>

000d4964 <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d4964:	f001 be62 	b.w	d662c <HAL_Pin_Map>

000d4968 <_GLOBAL__sub_I__Z11printBufferPht>:
   d4968:	f001 be60 	b.w	d662c <HAL_Pin_Map>

000d496c <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d496c:	f001 be5e 	b.w	d662c <HAL_Pin_Map>

000d4970 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d4970:	f001 be5c 	b.w	d662c <HAL_Pin_Map>

000d4974 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d4974:	b510      	push	{r4, lr}
   d4976:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4978:	3024      	adds	r0, #36	; 0x24
   d497a:	f000 fe7b 	bl	d5674 <_ZN8FatCache4syncEv>
   d497e:	b128      	cbz	r0, d498c <_ZN9FatVolume9cacheSyncEv+0x18>
   d4980:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d4984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4988:	f000 be74 	b.w	d5674 <_ZN8FatCache4syncEv>
  }
   d498c:	bd10      	pop	{r4, pc}

000d498e <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d498e:	1e41      	subs	r1, r0, #1
   d4990:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d4994:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4996:	0843      	lsrs	r3, r0, #1
   d4998:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d499c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d49a0:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d49a4:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d49a6:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d49a8:	d1f5      	bne.n	d4996 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d49aa:	4770      	bx	lr

000d49ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d49ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d49b0:	7803      	ldrb	r3, [r0, #0]
   d49b2:	2b20      	cmp	r3, #32
   d49b4:	f100 0401 	add.w	r4, r0, #1
   d49b8:	d101      	bne.n	d49be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d49ba:	4620      	mov	r0, r4
   d49bc:	e7f8      	b.n	d49b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d49be:	4f70      	ldr	r7, [pc, #448]	; (d4b80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d49c0:	6088      	str	r0, [r1, #8]
   d49c2:	4605      	mov	r5, r0
   d49c4:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d49c6:	462e      	mov	r6, r5
   d49c8:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d49cc:	b30b      	cbz	r3, d4a12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d49ce:	2b2f      	cmp	r3, #47	; 0x2f
   d49d0:	d101      	bne.n	d49d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d49d2:	1903      	adds	r3, r0, r4
   d49d4:	e017      	b.n	d4a06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d49d6:	2b5c      	cmp	r3, #92	; 0x5c
   d49d8:	d102      	bne.n	d49e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d49da:	2000      	movs	r0, #0
   d49dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d49e0:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d49e4:	b2e4      	uxtb	r4, r4
   d49e6:	2c1d      	cmp	r4, #29
   d49e8:	d803      	bhi.n	d49f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d49ea:	fa27 f404 	lsr.w	r4, r7, r4
   d49ee:	07e4      	lsls	r4, r4, #31
   d49f0:	d4f3      	bmi.n	d49da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d49f2:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d49f6:	2c3c      	cmp	r4, #60	; 0x3c
   d49f8:	d0ef      	beq.n	d49da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d49fa:	3b20      	subs	r3, #32
   d49fc:	2b5e      	cmp	r3, #94	; 0x5e
   d49fe:	d9e1      	bls.n	d49c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d4a00:	e7eb      	b.n	d49da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d4a02:	2d2f      	cmp	r5, #47	; 0x2f
   d4a04:	d105      	bne.n	d4a12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d4a06:	461e      	mov	r6, r3
   d4a08:	f813 5b01 	ldrb.w	r5, [r3], #1
   d4a0c:	2d20      	cmp	r5, #32
   d4a0e:	d1f8      	bne.n	d4a02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d4a10:	e7f9      	b.n	d4a06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d4a12:	6016      	str	r6, [r2, #0]
   d4a14:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d4a16:	4298      	cmp	r0, r3
   d4a18:	ebc0 0803 	rsb	r8, r0, r3
   d4a1c:	d009      	beq.n	d4a32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d4a1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d4a22:	2a2e      	cmp	r2, #46	; 0x2e
   d4a24:	d0f7      	beq.n	d4a16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d4a26:	2a20      	cmp	r2, #32
   d4a28:	d0f5      	beq.n	d4a16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d4a2a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d4a2e:	dcd4      	bgt.n	d49da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d4a30:	e001      	b.n	d4a36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d4a32:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d4a36:	f8c1 8004 	str.w	r8, [r1, #4]
   d4a3a:	f101 030c 	add.w	r3, r1, #12
   d4a3e:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d4a42:	2420      	movs	r4, #32
   d4a44:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d4a48:	4293      	cmp	r3, r2
   d4a4a:	d1fb      	bne.n	d4a44 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d4a4c:	4603      	mov	r3, r0
   d4a4e:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d4a50:	f813 4b01 	ldrb.w	r4, [r3], #1
   d4a54:	2c2e      	cmp	r4, #46	; 0x2e
   d4a56:	d0fa      	beq.n	d4a4e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d4a58:	2c20      	cmp	r4, #32
   d4a5a:	d0f8      	beq.n	d4a4e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d4a5c:	fab2 f482 	clz	r4, r2
   d4a60:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d4a62:	f108 36ff 	add.w	r6, r8, #4294967295
   d4a66:	1c73      	adds	r3, r6, #1
   d4a68:	d107      	bne.n	d4a7a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d4a6a:	2700      	movs	r7, #0
   d4a6c:	f04f 0e07 	mov.w	lr, #7
   d4a70:	463d      	mov	r5, r7
   d4a72:	46ba      	mov	sl, r7
   d4a74:	f04f 0908 	mov.w	r9, #8
   d4a78:	e009      	b.n	d4a8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d4a7a:	5d83      	ldrb	r3, [r0, r6]
   d4a7c:	2b2e      	cmp	r3, #46	; 0x2e
   d4a7e:	d0f4      	beq.n	d4a6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d4a80:	3e01      	subs	r6, #1
   d4a82:	e7f0      	b.n	d4a66 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d4a84:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d4a86:	2b20      	cmp	r3, #32
   d4a88:	d104      	bne.n	d4a94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d4a8a:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d4a8c:	3201      	adds	r2, #1
   d4a8e:	4542      	cmp	r2, r8
   d4a90:	dbf8      	blt.n	d4a84 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d4a92:	e04b      	b.n	d4b2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d4a94:	2b2e      	cmp	r3, #46	; 0x2e
   d4a96:	d102      	bne.n	d4a9e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d4a98:	42b2      	cmp	r2, r6
   d4a9a:	d1f6      	bne.n	d4a8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d4a9c:	e003      	b.n	d4aa6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d4a9e:	2b22      	cmp	r3, #34	; 0x22
   d4aa0:	d017      	beq.n	d4ad2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d4aa2:	2b7c      	cmp	r3, #124	; 0x7c
   d4aa4:	d015      	beq.n	d4ad2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d4aa6:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d4aaa:	f1bc 0f05 	cmp.w	ip, #5
   d4aae:	d801      	bhi.n	d4ab4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d4ab0:	2b2d      	cmp	r3, #45	; 0x2d
   d4ab2:	d10e      	bne.n	d4ad2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d4ab4:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d4ab8:	f1bc 0f05 	cmp.w	ip, #5
   d4abc:	d909      	bls.n	d4ad2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d4abe:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d4ac2:	f1bc 0f02 	cmp.w	ip, #2
   d4ac6:	d904      	bls.n	d4ad2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d4ac8:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d4acc:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d4ad0:	d902      	bls.n	d4ad8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d4ad2:	42b2      	cmp	r2, r6
   d4ad4:	d10e      	bne.n	d4af4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d4ad6:	e049      	b.n	d4b6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d4ad8:	42b2      	cmp	r2, r6
   d4ada:	d047      	beq.n	d4b6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d4adc:	4575      	cmp	r5, lr
   d4ade:	d821      	bhi.n	d4b24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d4ae0:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d4ae4:	f1bc 0f19 	cmp.w	ip, #25
   d4ae8:	d808      	bhi.n	d4afc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d4aea:	3b20      	subs	r3, #32
   d4aec:	b2db      	uxtb	r3, r3
        lc |= bit;
   d4aee:	ea49 0707 	orr.w	r7, r9, r7
   d4af2:	e00a      	b.n	d4b0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d4af4:	4575      	cmp	r5, lr
   d4af6:	d815      	bhi.n	d4b24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d4af8:	2400      	movs	r4, #0
      c = '_';
   d4afa:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d4afc:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d4b00:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d4b04:	bf98      	it	ls
   d4b06:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d4b0a:	f105 0c01 	add.w	ip, r5, #1
   d4b0e:	fa5f fc8c 	uxtb.w	ip, ip
   d4b12:	440d      	add	r5, r1
      if (i < 7) {
   d4b14:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d4b18:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d4b1a:	d801      	bhi.n	d4b20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d4b1c:	f881 c00c 	strb.w	ip, [r1, #12]
   d4b20:	4665      	mov	r5, ip
   d4b22:	e7b3      	b.n	d4a8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d4b24:	f1be 0f0a 	cmp.w	lr, #10
   d4b28:	d117      	bne.n	d4b5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d4b2a:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d4b2c:	7b4b      	ldrb	r3, [r1, #13]
   d4b2e:	2b20      	cmp	r3, #32
   d4b30:	f43f af53 	beq.w	d49da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d4b34:	b13c      	cbz	r4, d4b46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d4b36:	ea1a 0f07 	tst.w	sl, r7
   d4b3a:	bf18      	it	ne
   d4b3c:	2702      	movne	r7, #2
   d4b3e:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d4b40:	2001      	movs	r0, #1
   d4b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d4b46:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d4b48:	2001      	movs	r0, #1
   d4b4a:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d4b4c:	4419      	add	r1, r3
   d4b4e:	237e      	movs	r3, #126	; 0x7e
   d4b50:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d4b52:	2331      	movs	r3, #49	; 0x31
   d4b54:	738b      	strb	r3, [r1, #14]
   d4b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d4b5a:	42b2      	cmp	r2, r6
   d4b5c:	dce5      	bgt.n	d4b2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d4b5e:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d4b60:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d4b64:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d4b66:	f04f 0910 	mov.w	r9, #16
   d4b6a:	e78e      	b.n	d4a8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d4b6c:	f1be 0f0a 	cmp.w	lr, #10
   d4b70:	d0db      	beq.n	d4b2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d4b72:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d4b74:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d4b78:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d4b7a:	f04f 0910 	mov.w	r9, #16
   d4b7e:	e785      	b.n	d4a8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d4b80:	31000101 	.word	0x31000101

000d4b84 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d4b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d4b88:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d4b8c:	4606      	mov	r6, r0
   d4b8e:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d4b90:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d4b92:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d4b94:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d4b98:	6869      	ldr	r1, [r5, #4]
   d4b9a:	68aa      	ldr	r2, [r5, #8]
   d4b9c:	1863      	adds	r3, r4, r1
   d4b9e:	b29b      	uxth	r3, r3
   d4ba0:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d4ba2:	4291      	cmp	r1, r2
   d4ba4:	d006      	beq.n	d4bb4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d4ba6:	f812 0b01 	ldrb.w	r0, [r2], #1
   d4baa:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d4bae:	4043      	eors	r3, r0
   d4bb0:	b29b      	uxth	r3, r3
   d4bb2:	e7f6      	b.n	d4ba2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d4bb4:	f1b9 0f03 	cmp.w	r9, #3
   d4bb8:	bf28      	it	cs
   d4bba:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4bbe:	f109 0204 	add.w	r2, r9, #4
   d4bc2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d4bc4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4bc8:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4bca:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4bcc:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4bce:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4bd0:	bf94      	ite	ls
   d4bd2:	3130      	addls	r1, #48	; 0x30
   d4bd4:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4bd6:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4bd8:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d4bda:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4bde:	d3f1      	bcc.n	d4bc4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d4be0:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d4be4:	2100      	movs	r1, #0
   d4be6:	735f      	strb	r7, [r3, #13]
   d4be8:	4630      	mov	r0, r6
   d4bea:	f000 fb1e 	bl	d522a <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d4bee:	2101      	movs	r1, #1
   d4bf0:	4630      	mov	r0, r6
   d4bf2:	f000 fafd 	bl	d51f0 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d4bf6:	4601      	mov	r1, r0
   d4bf8:	b928      	cbnz	r0, d4c06 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d4bfa:	7870      	ldrb	r0, [r6, #1]
   d4bfc:	fab0 f080 	clz	r0, r0
   d4c00:	0940      	lsrs	r0, r0, #5
   d4c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d4c06:	7803      	ldrb	r3, [r0, #0]
   d4c08:	b14b      	cbz	r3, d4c1e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d4c0a:	7ac3      	ldrb	r3, [r0, #11]
   d4c0c:	071b      	lsls	r3, r3, #28
   d4c0e:	d4ee      	bmi.n	d4bee <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d4c10:	220b      	movs	r2, #11
   d4c12:	4640      	mov	r0, r8
   d4c14:	f003 fb90 	bl	d8338 <memcmp>
   d4c18:	2800      	cmp	r0, #0
   d4c1a:	d1e8      	bne.n	d4bee <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d4c1c:	e002      	b.n	d4c24 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d4c1e:	2001      	movs	r0, #1
   d4c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4c24:	3401      	adds	r4, #1
   d4c26:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d4c28:	2c64      	cmp	r4, #100	; 0x64
   d4c2a:	d1b5      	bne.n	d4b98 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d4c2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4c30 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c34:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4c36:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4c38:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4c3a:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4c3e:	9005      	str	r0, [sp, #20]
   d4c40:	460e      	mov	r6, r1
   d4c42:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4c44:	d101      	bne.n	d4c4a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d4c46:	2000      	movs	r0, #0
   d4c48:	e1a0      	b.n	d4f8c <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4c4a:	9b05      	ldr	r3, [sp, #20]
   d4c4c:	781b      	ldrb	r3, [r3, #0]
   d4c4e:	2b00      	cmp	r3, #0
   d4c50:	d1f9      	bne.n	d4c46 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d4c52:	6853      	ldr	r3, [r2, #4]
   d4c54:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d4c56:	7813      	ldrb	r3, [r2, #0]
   d4c58:	079b      	lsls	r3, r3, #30
   d4c5a:	f000 818d 	beq.w	d4f78 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d4c5e:	9b02      	ldr	r3, [sp, #8]
   d4c60:	270d      	movs	r7, #13
   d4c62:	330c      	adds	r3, #12
   d4c64:	fbb3 f7f7 	udiv	r7, r3, r7
   d4c68:	3701      	adds	r7, #1
   d4c6a:	b2ff      	uxtb	r7, r7
   d4c6c:	2100      	movs	r1, #0
   d4c6e:	4630      	mov	r0, r6
   d4c70:	f000 fadb 	bl	d522a <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d4c74:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d4c78:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d4c7c:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d4c80:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d4c82:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d4c84:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d4c86:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d4c8a:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d4c8c:	6972      	ldr	r2, [r6, #20]
   d4c8e:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d4c90:	2101      	movs	r1, #1
   d4c92:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d4c94:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d4c98:	f000 faaa 	bl	d51f0 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d4c9c:	9b07      	ldr	r3, [sp, #28]
   d4c9e:	b920      	cbnz	r0, d4caa <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d4ca0:	7873      	ldrb	r3, [r6, #1]
   d4ca2:	2b00      	cmp	r3, #0
   d4ca4:	f000 8090 	beq.w	d4dc8 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d4ca8:	e7cd      	b.n	d4c46 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d4caa:	7802      	ldrb	r2, [r0, #0]
   d4cac:	2ae5      	cmp	r2, #229	; 0xe5
   d4cae:	d000      	beq.n	d4cb2 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d4cb0:	b942      	cbnz	r2, d4cc4 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d4cb2:	2c00      	cmp	r4, #0
   d4cb4:	bf08      	it	eq
   d4cb6:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d4cb8:	42bc      	cmp	r4, r7
        freeFound++;
   d4cba:	bf3c      	itt	cc
   d4cbc:	3401      	addcc	r4, #1
   d4cbe:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d4cc0:	b922      	cbnz	r2, d4ccc <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d4cc2:	e081      	b.n	d4dc8 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d4cc4:	42bc      	cmp	r4, r7
   d4cc6:	bf38      	it	cc
   d4cc8:	2400      	movcc	r4, #0
   d4cca:	e003      	b.n	d4cd4 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d4ccc:	2ae5      	cmp	r2, #229	; 0xe5
   d4cce:	d101      	bne.n	d4cd4 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d4cd0:	2500      	movs	r5, #0
   d4cd2:	e7db      	b.n	d4c8c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d4cd4:	2a2e      	cmp	r2, #46	; 0x2e
   d4cd6:	d0fb      	beq.n	d4cd0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4cd8:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d4cda:	290f      	cmp	r1, #15
   d4cdc:	d152      	bne.n	d4d84 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d4cde:	b93d      	cbnz	r5, d4cf0 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d4ce0:	0651      	lsls	r1, r2, #25
   d4ce2:	d5d3      	bpl.n	d4c8c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d4ce4:	7b43      	ldrb	r3, [r0, #13]
   d4ce6:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d4ce8:	f002 051f 	and.w	r5, r2, #31
   d4cec:	462b      	mov	r3, r5
   d4cee:	e007      	b.n	d4d00 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d4cf0:	3b01      	subs	r3, #1
   d4cf2:	b2db      	uxtb	r3, r3
   d4cf4:	429a      	cmp	r2, r3
   d4cf6:	d1eb      	bne.n	d4cd0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4cf8:	7b42      	ldrb	r2, [r0, #13]
   d4cfa:	9903      	ldr	r1, [sp, #12]
   d4cfc:	4291      	cmp	r1, r2
   d4cfe:	d1e7      	bne.n	d4cd0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d4d00:	1e5a      	subs	r2, r3, #1
   d4d02:	f04f 0c0d 	mov.w	ip, #13
   d4d06:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d4d0a:	9a02      	ldr	r2, [sp, #8]
   d4d0c:	4562      	cmp	r2, ip
   d4d0e:	d9df      	bls.n	d4cd0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4d10:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d4d14:	f1be 0f04 	cmp.w	lr, #4
   d4d18:	fa5f f28e 	uxtb.w	r2, lr
   d4d1c:	d804      	bhi.n	d4d28 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d4d1e:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d4d22:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d4d26:	e00c      	b.n	d4d42 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d4d28:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d4d2a:	bf95      	itete	ls
   d4d2c:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d4d30:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d4d34:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d4d38:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d4d3c:	bf94      	ite	ls
   d4d3e:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d4d40:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d4d42:	9902      	ldr	r1, [sp, #8]
   d4d44:	4561      	cmp	r1, ip
   d4d46:	d103      	bne.n	d4d50 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d4d48:	2a00      	cmp	r2, #0
   d4d4a:	bf18      	it	ne
   d4d4c:	2500      	movne	r5, #0
   d4d4e:	e79d      	b.n	d4c8c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4d50:	2aff      	cmp	r2, #255	; 0xff
   d4d52:	d8bd      	bhi.n	d4cd0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4d54:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d4d56:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d4d5a:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4d5c:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d4d60:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d4d64:	bf98      	it	ls
   d4d66:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4d68:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d4d6c:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d4d70:	bf98      	it	ls
   d4d72:	b2d2      	uxtbls	r2, r2
   d4d74:	f1bc 0f19 	cmp.w	ip, #25
   d4d78:	bf9c      	itt	ls
   d4d7a:	3120      	addls	r1, #32
   d4d7c:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4d7e:	4291      	cmp	r1, r2
   d4d80:	d1a6      	bne.n	d4cd0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4d82:	e0fb      	b.n	d4f7c <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d4d84:	0709      	lsls	r1, r1, #28
   d4d86:	d4a3      	bmi.n	d4cd0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d4d88:	b14d      	cbz	r5, d4d9e <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d4d8a:	2b01      	cmp	r3, #1
   d4d8c:	f47f af5b 	bne.w	d4c46 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d4d90:	f7ff fdfd 	bl	d498e <_ZN7FatFile11lfnChecksumEPh>
   d4d94:	9b03      	ldr	r3, [sp, #12]
   d4d96:	4283      	cmp	r3, r0
   d4d98:	f47f af55 	bne.w	d4c46 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d4d9c:	e00f      	b.n	d4dbe <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d4d9e:	220b      	movs	r2, #11
   d4da0:	9906      	ldr	r1, [sp, #24]
   d4da2:	9307      	str	r3, [sp, #28]
   d4da4:	f003 fac8 	bl	d8338 <memcmp>
   d4da8:	9b07      	ldr	r3, [sp, #28]
   d4daa:	2800      	cmp	r0, #0
   d4dac:	f47f af6e 	bne.w	d4c8c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d4db0:	f899 2000 	ldrb.w	r2, [r9]
   d4db4:	07d2      	lsls	r2, r2, #31
   d4db6:	d502      	bpl.n	d4dbe <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d4db8:	2201      	movs	r2, #1
   d4dba:	9204      	str	r2, [sp, #16]
   d4dbc:	e766      	b.n	d4c8c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d4dbe:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d4dc2:	f000 80d1 	beq.w	d4f68 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d4dc6:	e73e      	b.n	d4c46 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d4dc8:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d4dcc:	f43f af3b 	beq.w	d4c46 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d4dd0:	f00b 0303 	and.w	r3, fp, #3
   d4dd4:	3b01      	subs	r3, #1
   d4dd6:	2b01      	cmp	r3, #1
   d4dd8:	f63f af35 	bhi.w	d4c46 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d4ddc:	2c00      	cmp	r4, #0
   d4dde:	bf08      	it	eq
   d4de0:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d4de2:	42bc      	cmp	r4, r7
   d4de4:	d302      	bcc.n	d4dec <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d4de6:	9b04      	ldr	r3, [sp, #16]
   d4de8:	b9cb      	cbnz	r3, d4e1e <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d4dea:	e01f      	b.n	d4e2c <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d4dec:	2100      	movs	r1, #0
   d4dee:	4630      	mov	r0, r6
   d4df0:	f000 f9fe 	bl	d51f0 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d4df4:	b910      	cbnz	r0, d4dfc <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d4df6:	7873      	ldrb	r3, [r6, #1]
   d4df8:	b15b      	cbz	r3, d4e12 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d4dfa:	e724      	b.n	d4c46 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d4dfc:	3401      	adds	r4, #1
   d4dfe:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d4e00:	e7ef      	b.n	d4de2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d4e02:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d4e04:	791b      	ldrb	r3, [r3, #4]
   d4e06:	2b01      	cmp	r3, #1
   d4e08:	d8ed      	bhi.n	d4de6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d4e0a:	3410      	adds	r4, #16
   d4e0c:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d4e0e:	42a7      	cmp	r7, r4
   d4e10:	d9e9      	bls.n	d4de6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d4e12:	4630      	mov	r0, r6
   d4e14:	f000 f8d2 	bl	d4fbc <_ZN7FatFile13addDirClusterEv>
   d4e18:	2800      	cmp	r0, #0
   d4e1a:	d1f2      	bne.n	d4e02 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d4e1c:	e713      	b.n	d4c46 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d4e1e:	4649      	mov	r1, r9
   d4e20:	4630      	mov	r0, r6
   d4e22:	f7ff feaf 	bl	d4b84 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d4e26:	2800      	cmp	r0, #0
   d4e28:	f43f af0d 	beq.w	d4c46 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d4e2c:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d4e30:	4630      	mov	r0, r6
   d4e32:	f000 f9fa 	bl	d522a <_ZN7FatFile7seekSetEm>
   d4e36:	2800      	cmp	r0, #0
   d4e38:	f43f af05 	beq.w	d4c46 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d4e3c:	1e7d      	subs	r5, r7, #1
   d4e3e:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d4e40:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d4e42:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d4e46:	f04f 080f 	mov.w	r8, #15
   d4e4a:	e041      	b.n	d4ed0 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d4e4c:	2100      	movs	r1, #0
   d4e4e:	4630      	mov	r0, r6
   d4e50:	f000 f9ce 	bl	d51f0 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d4e54:	4607      	mov	r7, r0
   d4e56:	2800      	cmp	r0, #0
   d4e58:	f43f aef5 	beq.w	d4c46 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d4e5c:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d4e5e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d4e62:	42ac      	cmp	r4, r5
   d4e64:	f043 0301 	orr.w	r3, r3, #1
   d4e68:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d4e6c:	bf0c      	ite	eq
   d4e6e:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d4e72:	4622      	movne	r2, r4
   d4e74:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d4e76:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d4e7a:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d4e7e:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d4e82:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d4e84:	f7ff fd83 	bl	d498e <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d4e88:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d4e8a:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d4e8c:	f887 a01a 	strb.w	sl, [r7, #26]
   d4e90:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d4e94:	f002 021f 	and.w	r2, r2, #31
   d4e98:	230d      	movs	r3, #13
   d4e9a:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d4e9c:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d4ea0:	435a      	muls	r2, r3
   d4ea2:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d4ea4:	9902      	ldr	r1, [sp, #8]
   d4ea6:	4291      	cmp	r1, r2
   d4ea8:	d915      	bls.n	d4ed6 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d4eaa:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d4eae:	2b04      	cmp	r3, #4
   d4eb0:	fa5f fc83 	uxtb.w	ip, r3
   d4eb4:	f103 0001 	add.w	r0, r3, #1
   d4eb8:	d813      	bhi.n	d4ee2 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d4eba:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d4ebe:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d4ec2:	280d      	cmp	r0, #13
   d4ec4:	f102 0201 	add.w	r2, r2, #1
   d4ec8:	4603      	mov	r3, r0
   d4eca:	d1eb      	bne.n	d4ea4 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d4ecc:	3c01      	subs	r4, #1
   d4ece:	b2e4      	uxtb	r4, r4
   d4ed0:	2c00      	cmp	r4, #0
   d4ed2:	d1bb      	bne.n	d4e4c <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d4ed4:	e00e      	b.n	d4ef4 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d4ed6:	bf14      	ite	ne
   d4ed8:	f04f 31ff 	movne.w	r1, #4294967295
   d4edc:	2100      	moveq	r1, #0
   d4ede:	b289      	uxth	r1, r1
   d4ee0:	e7e5      	b.n	d4eae <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d4ee2:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d4ee6:	bf94      	ite	ls
   d4ee8:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d4eec:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d4ef0:	8099      	strh	r1, [r3, #4]
   d4ef2:	e7e6      	b.n	d4ec2 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d4ef4:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d4ef6:	4621      	mov	r1, r4
   d4ef8:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d4efa:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d4efe:	f000 f977 	bl	d51f0 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d4f02:	4607      	mov	r7, r0
   d4f04:	2800      	cmp	r0, #0
   d4f06:	f43f ae9e 	beq.w	d4c46 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d4f0a:	2220      	movs	r2, #32
   d4f0c:	4621      	mov	r1, r4
   d4f0e:	f003 fa2d 	bl	d836c <memset>
  memcpy(dir->name, fname->sfn, 11);
   d4f12:	464b      	mov	r3, r9
   d4f14:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d4f18:	603a      	str	r2, [r7, #0]
   d4f1a:	685a      	ldr	r2, [r3, #4]
   d4f1c:	607a      	str	r2, [r7, #4]
   d4f1e:	891a      	ldrh	r2, [r3, #8]
   d4f20:	813a      	strh	r2, [r7, #8]
   d4f22:	7a9b      	ldrb	r3, [r3, #10]
   d4f24:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d4f26:	f899 3000 	ldrb.w	r3, [r9]
   d4f2a:	f003 0318 	and.w	r3, r3, #24
   d4f2e:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d4f30:	4b18      	ldr	r3, [pc, #96]	; (d4f94 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d4f32:	681b      	ldr	r3, [r3, #0]
   d4f34:	b12b      	cbz	r3, d4f42 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d4f36:	f107 010e 	add.w	r1, r7, #14
   d4f3a:	f107 0010 	add.w	r0, r7, #16
   d4f3e:	4798      	blx	r3
   d4f40:	e006      	b.n	d4f50 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d4f42:	2321      	movs	r3, #33	; 0x21
   d4f44:	743b      	strb	r3, [r7, #16]
   d4f46:	2328      	movs	r3, #40	; 0x28
   d4f48:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d4f4a:	2308      	movs	r3, #8
   d4f4c:	73bc      	strb	r4, [r7, #14]
   d4f4e:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d4f50:	8a3b      	ldrh	r3, [r7, #16]
   d4f52:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d4f54:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d4f56:	89fb      	ldrh	r3, [r7, #14]
   d4f58:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d4f5a:	68b2      	ldr	r2, [r6, #8]
   d4f5c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d4f60:	f043 0301 	orr.w	r3, r3, #1
   d4f64:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d4f68:	9500      	str	r5, [sp, #0]
   d4f6a:	465b      	mov	r3, fp
   d4f6c:	4652      	mov	r2, sl
   d4f6e:	4631      	mov	r1, r6
   d4f70:	9805      	ldr	r0, [sp, #20]
   d4f72:	f000 f9a3 	bl	d52bc <_ZN7FatFile15openCachedEntryEPS_tih>
   d4f76:	e009      	b.n	d4f8c <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d4f78:	2701      	movs	r7, #1
   d4f7a:	e677      	b.n	d4c6c <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d4f7c:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d4f80:	f1be 0f0d 	cmp.w	lr, #13
   d4f84:	f43f ae82 	beq.w	d4c8c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4f88:	46d4      	mov	ip, sl
   d4f8a:	e6c3      	b.n	d4d14 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d4f8c:	b009      	add	sp, #36	; 0x24
   d4f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4f92:	bf00      	nop
   d4f94:	2003e3d0 	.word	0x2003e3d0

000d4f98 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d4f98:	f001 bb48 	b.w	d662c <HAL_Pin_Map>

000d4f9c <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d4f9c:	f001 bb46 	b.w	d662c <HAL_Pin_Map>

000d4fa0 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d4fa0:	f001 bb44 	b.w	d662c <HAL_Pin_Map>

000d4fa4 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d4fa4:	f001 bb42 	b.w	d662c <HAL_Pin_Map>

000d4fa8 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d4fa8:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d4faa:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d4fac:	f043 0304 	orr.w	r3, r3, #4
   d4fb0:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d4fb2:	f100 0210 	add.w	r2, r0, #16
   d4fb6:	6880      	ldr	r0, [r0, #8]
   d4fb8:	f000 bc12 	b.w	d57e0 <_ZN9FatVolume15allocateClusterEmPm>

000d4fbc <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d4fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d4fc0:	7803      	ldrb	r3, [r0, #0]
   d4fc2:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d4fc6:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d4fc8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4fcc:	b10b      	cbz	r3, d4fd2 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d4fce:	2600      	movs	r6, #0
   d4fd0:	e02e      	b.n	d5030 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d4fd2:	6942      	ldr	r2, [r0, #20]
   d4fd4:	4b18      	ldr	r3, [pc, #96]	; (d5038 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d4fd6:	429a      	cmp	r2, r3
   d4fd8:	d8f9      	bhi.n	d4fce <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d4fda:	f7ff ffe5 	bl	d4fa8 <_ZN7FatFile10addClusterEv>
   d4fde:	4606      	mov	r6, r0
   d4fe0:	2800      	cmp	r0, #0
   d4fe2:	d0f4      	beq.n	d4fce <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d4fe4:	6921      	ldr	r1, [r4, #16]
   d4fe6:	68a0      	ldr	r0, [r4, #8]
   d4fe8:	f000 fb8f 	bl	d570a <_ZNK9FatVolume17clusterFirstBlockEm>
   d4fec:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4fee:	68a0      	ldr	r0, [r4, #8]
   d4ff0:	2205      	movs	r2, #5
   d4ff2:	4639      	mov	r1, r7
   d4ff4:	3024      	adds	r0, #36	; 0x24
   d4ff6:	f000 fb64 	bl	d56c2 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d4ffa:	4680      	mov	r8, r0
   d4ffc:	2800      	cmp	r0, #0
   d4ffe:	d0e6      	beq.n	d4fce <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d5000:	4629      	mov	r1, r5
   d5002:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5006:	f003 f9b1 	bl	d836c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d500a:	2501      	movs	r5, #1
   d500c:	68a3      	ldr	r3, [r4, #8]
   d500e:	791a      	ldrb	r2, [r3, #4]
   d5010:	42aa      	cmp	r2, r5
   d5012:	d909      	bls.n	d5028 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5014:	4642      	mov	r2, r8
   d5016:	19e9      	adds	r1, r5, r7
   d5018:	6818      	ldr	r0, [r3, #0]
   d501a:	f000 fecf 	bl	d5dbc <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d501e:	2800      	cmp	r0, #0
   d5020:	d0d5      	beq.n	d4fce <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5022:	3501      	adds	r5, #1
   d5024:	b2ed      	uxtb	r5, r5
   d5026:	e7f1      	b.n	d500c <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d5028:	6963      	ldr	r3, [r4, #20]
   d502a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d502e:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d5030:	4630      	mov	r0, r6
   d5032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5036:	bf00      	nop
   d5038:	001ffdff 	.word	0x001ffdff

000d503c <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d503c:	b510      	push	{r4, lr}
   d503e:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5040:	6880      	ldr	r0, [r0, #8]
   d5042:	460a      	mov	r2, r1
   d5044:	3024      	adds	r0, #36	; 0x24
   d5046:	69a1      	ldr	r1, [r4, #24]
   d5048:	f000 fb3b 	bl	d56c2 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d504c:	b120      	cbz	r0, d5058 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d504e:	88a3      	ldrh	r3, [r4, #4]
   d5050:	f003 030f 	and.w	r3, r3, #15
   d5054:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d5058:	bd10      	pop	{r4, pc}

000d505a <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d505a:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d505c:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d505e:	4605      	mov	r5, r0
   d5060:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d5062:	b984      	cbnz	r4, d5086 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d5064:	2224      	movs	r2, #36	; 0x24
   d5066:	4621      	mov	r1, r4
   d5068:	f003 f980 	bl	d836c <memset>

  m_vol = vol;
   d506c:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d506e:	79f3      	ldrb	r3, [r6, #7]
   d5070:	2b10      	cmp	r3, #16
   d5072:	d003      	beq.n	d507c <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5074:	2b20      	cmp	r3, #32
   d5076:	d106      	bne.n	d5086 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5078:	2340      	movs	r3, #64	; 0x40
   d507a:	e000      	b.n	d507e <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d507c:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d507e:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5080:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5082:	70a8      	strb	r0, [r5, #2]
   d5084:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d5086:	2000      	movs	r0, #0
   d5088:	bd70      	pop	{r4, r5, r6, pc}

000d508a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d508a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d508e:	7803      	ldrb	r3, [r0, #0]
   d5090:	4604      	mov	r4, r0
   d5092:	4689      	mov	r9, r1
   d5094:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5096:	b14b      	cbz	r3, d50ac <_ZN7FatFile4readEPvj+0x22>
   d5098:	7882      	ldrb	r2, [r0, #2]
   d509a:	07d1      	lsls	r1, r2, #31
   d509c:	d506      	bpl.n	d50ac <_ZN7FatFile4readEPvj+0x22>
   d509e:	e00c      	b.n	d50ba <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d50a0:	465a      	mov	r2, fp
   d50a2:	6921      	ldr	r1, [r4, #16]
   d50a4:	f000 fb37 	bl	d5716 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d50a8:	2800      	cmp	r0, #0
   d50aa:	da3d      	bge.n	d5128 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d50ac:	7863      	ldrb	r3, [r4, #1]
   d50ae:	f043 0302 	orr.w	r3, r3, #2
   d50b2:	7063      	strb	r3, [r4, #1]
  return -1;
   d50b4:	f04f 30ff 	mov.w	r0, #4294967295
   d50b8:	e097      	b.n	d51ea <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d50ba:	071a      	lsls	r2, r3, #28
   d50bc:	d503      	bpl.n	d50c6 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d50be:	69e3      	ldr	r3, [r4, #28]
   d50c0:	6962      	ldr	r2, [r4, #20]
   d50c2:	1a9b      	subs	r3, r3, r2
   d50c4:	e007      	b.n	d50d6 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d50c6:	069a      	lsls	r2, r3, #26
   d50c8:	d508      	bpl.n	d50dc <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d50ca:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d50cc:	891a      	ldrh	r2, [r3, #8]
   d50ce:	6963      	ldr	r3, [r4, #20]
   d50d0:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d50d4:	b29b      	uxth	r3, r3
   d50d6:	429d      	cmp	r5, r3
   d50d8:	bf28      	it	cs
   d50da:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d50dc:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d50de:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d50e2:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d50e6:	2e00      	cmp	r6, #0
   d50e8:	d035      	beq.n	d5156 <_ZN7FatFile4readEPvj+0xcc>
   d50ea:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d50ec:	6963      	ldr	r3, [r4, #20]
   d50ee:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d50f0:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d50f4:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d50f8:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d50fc:	d002      	beq.n	d5104 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d50fe:	6a03      	ldr	r3, [r0, #32]
   d5100:	4419      	add	r1, r3
   d5102:	e01d      	b.n	d5140 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5104:	f890 8005 	ldrb.w	r8, [r0, #5]
   d5108:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d510c:	f1ba 0f00 	cmp.w	sl, #0
   d5110:	d110      	bne.n	d5134 <_ZN7FatFile4readEPvj+0xaa>
   d5112:	f1b8 0f00 	cmp.w	r8, #0
   d5116:	d10d      	bne.n	d5134 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d5118:	2b00      	cmp	r3, #0
   d511a:	d1c1      	bne.n	d50a0 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d511c:	0653      	lsls	r3, r2, #25
   d511e:	bf4c      	ite	mi
   d5120:	6a03      	ldrmi	r3, [r0, #32]
   d5122:	6a23      	ldrpl	r3, [r4, #32]
   d5124:	6123      	str	r3, [r4, #16]
   d5126:	e005      	b.n	d5134 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d5128:	d104      	bne.n	d5134 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d512a:	7823      	ldrb	r3, [r4, #0]
   d512c:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5130:	d111      	bne.n	d5156 <_ZN7FatFile4readEPvj+0xcc>
   d5132:	e7bb      	b.n	d50ac <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5134:	6921      	ldr	r1, [r4, #16]
   d5136:	68a0      	ldr	r0, [r4, #8]
   d5138:	f000 fae7 	bl	d570a <_ZNK9FatVolume17clusterFirstBlockEm>
   d513c:	eb08 0100 	add.w	r1, r8, r0
   d5140:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5142:	f1ba 0f00 	cmp.w	sl, #0
   d5146:	d135      	bne.n	d51b4 <_ZN7FatFile4readEPvj+0x12a>
   d5148:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d514c:	d332      	bcc.n	d51b4 <_ZN7FatFile4readEPvj+0x12a>
   d514e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5150:	4299      	cmp	r1, r3
   d5152:	d102      	bne.n	d515a <_ZN7FatFile4readEPvj+0xd0>
   d5154:	e02e      	b.n	d51b4 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d5156:	1ba8      	subs	r0, r5, r6
   d5158:	e047      	b.n	d51ea <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d515a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d515e:	d31b      	bcc.n	d5198 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d5160:	7822      	ldrb	r2, [r4, #0]
   d5162:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d5164:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5168:	d406      	bmi.n	d5178 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d516a:	7902      	ldrb	r2, [r0, #4]
   d516c:	ebc8 0202 	rsb	r2, r8, r2
   d5170:	b2d2      	uxtb	r2, r2
   d5172:	4592      	cmp	sl, r2
   d5174:	bf28      	it	cs
   d5176:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5178:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d517a:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d517e:	d207      	bcs.n	d5190 <_ZN7FatFile4readEPvj+0x106>
   d5180:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d5182:	4653      	mov	r3, sl
   d5184:	464a      	mov	r2, r9
   d5186:	6800      	ldr	r0, [r0, #0]
   d5188:	f000 fdd6 	bl	d5d38 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d518c:	b960      	cbnz	r0, d51a8 <_ZN7FatFile4readEPvj+0x11e>
   d518e:	e78d      	b.n	d50ac <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5190:	4453      	add	r3, sl
   d5192:	4299      	cmp	r1, r3
   d5194:	d321      	bcc.n	d51da <_ZN7FatFile4readEPvj+0x150>
   d5196:	e7f3      	b.n	d5180 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5198:	464a      	mov	r2, r9
   d519a:	6800      	ldr	r0, [r0, #0]
   d519c:	f000 fd84 	bl	d5ca8 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d51a0:	2800      	cmp	r0, #0
   d51a2:	d083      	beq.n	d50ac <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d51a4:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d51a8:	6963      	ldr	r3, [r4, #20]
   d51aa:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d51ac:	44b9      	add	r9, r7
    m_curPosition += n;
   d51ae:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d51b0:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d51b2:	e798      	b.n	d50e6 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d51b4:	2200      	movs	r2, #0
   d51b6:	3024      	adds	r0, #36	; 0x24
   d51b8:	f000 fa83 	bl	d56c2 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d51bc:	2800      	cmp	r0, #0
   d51be:	f43f af75 	beq.w	d50ac <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d51c2:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d51c6:	42b7      	cmp	r7, r6
   d51c8:	bf28      	it	cs
   d51ca:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d51cc:	eb00 010a 	add.w	r1, r0, sl
   d51d0:	463a      	mov	r2, r7
   d51d2:	4648      	mov	r0, r9
   d51d4:	f003 f8bf 	bl	d8356 <memcpy>
   d51d8:	e7e6      	b.n	d51a8 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d51da:	3024      	adds	r0, #36	; 0x24
   d51dc:	9101      	str	r1, [sp, #4]
   d51de:	f000 fa49 	bl	d5674 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d51e2:	9901      	ldr	r1, [sp, #4]
   d51e4:	2800      	cmp	r0, #0
   d51e6:	d1cb      	bne.n	d5180 <_ZN7FatFile4readEPvj+0xf6>
   d51e8:	e760      	b.n	d50ac <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d51ea:	b003      	add	sp, #12
   d51ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d51f0 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d51f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d51f2:	6943      	ldr	r3, [r0, #20]
   d51f4:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d51f8:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d51fa:	b105      	cbz	r5, d51fe <_ZN7FatFile12readDirCacheEb+0xe>
   d51fc:	b969      	cbnz	r1, d521a <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d51fe:	2201      	movs	r2, #1
   d5200:	f10d 0107 	add.w	r1, sp, #7
   d5204:	4620      	mov	r0, r4
   d5206:	f7ff ff40 	bl	d508a <_ZN7FatFile4readEPvj>
   d520a:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d520c:	2801      	cmp	r0, #1
   d520e:	d001      	beq.n	d5214 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d5210:	2000      	movs	r0, #0
   d5212:	e008      	b.n	d5226 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d5214:	6963      	ldr	r3, [r4, #20]
   d5216:	331f      	adds	r3, #31
   d5218:	e000      	b.n	d521c <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d521a:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d521c:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d521e:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5220:	3030      	adds	r0, #48	; 0x30
   d5222:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d5226:	b003      	add	sp, #12
   d5228:	bd30      	pop	{r4, r5, pc}

000d522a <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d522a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d522e:	460e      	mov	r6, r1
   d5230:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d5232:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5234:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d5236:	2900      	cmp	r1, #0
   d5238:	d039      	beq.n	d52ae <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d523a:	6945      	ldr	r5, [r0, #20]
   d523c:	42b5      	cmp	r5, r6
   d523e:	d03a      	beq.n	d52b6 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d5240:	b90e      	cbnz	r6, d5246 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d5242:	6106      	str	r6, [r0, #16]
    goto done;
   d5244:	e031      	b.n	d52aa <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d5246:	070b      	lsls	r3, r1, #28
   d5248:	d503      	bpl.n	d5252 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d524a:	69c3      	ldr	r3, [r0, #28]
   d524c:	429e      	cmp	r6, r3
   d524e:	d82e      	bhi.n	d52ae <_ZN7FatFile7seekSetEm+0x84>
   d5250:	e007      	b.n	d5262 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d5252:	0688      	lsls	r0, r1, #26
   d5254:	d505      	bpl.n	d5262 <_ZN7FatFile7seekSetEm+0x38>
   d5256:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5258:	891b      	ldrh	r3, [r3, #8]
   d525a:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d525e:	d826      	bhi.n	d52ae <_ZN7FatFile7seekSetEm+0x84>
   d5260:	e023      	b.n	d52aa <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5262:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d5266:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d526a:	1e6a      	subs	r2, r5, #1
   d526c:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5270:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5272:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5274:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d5276:	429a      	cmp	r2, r3
   d5278:	d800      	bhi.n	d527c <_ZN7FatFile7seekSetEm+0x52>
   d527a:	b94d      	cbnz	r5, d5290 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d527c:	064a      	lsls	r2, r1, #25
   d527e:	bf4c      	ite	mi
   d5280:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5284:	6a22      	ldrpl	r2, [r4, #32]
   d5286:	6122      	str	r2, [r4, #16]
   d5288:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d528a:	f104 0810 	add.w	r8, r4, #16
   d528e:	e00a      	b.n	d52a6 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d5290:	1a9b      	subs	r3, r3, r2
   d5292:	e7f9      	b.n	d5288 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5294:	4642      	mov	r2, r8
   d5296:	6921      	ldr	r1, [r4, #16]
   d5298:	68a0      	ldr	r0, [r4, #8]
   d529a:	f000 fa3c 	bl	d5716 <_ZN9FatVolume6fatGetEmPm>
   d529e:	2800      	cmp	r0, #0
   d52a0:	f105 35ff 	add.w	r5, r5, #4294967295
   d52a4:	dd03      	ble.n	d52ae <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d52a6:	2d00      	cmp	r5, #0
   d52a8:	d1f4      	bne.n	d5294 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d52aa:	6166      	str	r6, [r4, #20]
   d52ac:	e003      	b.n	d52b6 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d52ae:	6127      	str	r7, [r4, #16]
  return false;
   d52b0:	2000      	movs	r0, #0
   d52b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d52b6:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d52b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d52bc <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d52bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d52be:	460f      	mov	r7, r1
   d52c0:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d52c2:	2100      	movs	r1, #0
   d52c4:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d52c6:	4604      	mov	r4, r0
   d52c8:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d52ca:	f003 f84f 	bl	d836c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d52ce:	68b8      	ldr	r0, [r7, #8]
   d52d0:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d52d2:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d52d6:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d52d8:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d52dc:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d52de:	6a3b      	ldr	r3, [r7, #32]
   d52e0:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d52e2:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d52e4:	7acb      	ldrb	r3, [r1, #11]
   d52e6:	071d      	lsls	r5, r3, #28
   d52e8:	d44c      	bmi.n	d5384 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d52ea:	1883      	adds	r3, r0, r2
   d52ec:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d52f0:	f003 0317 	and.w	r3, r3, #23
   d52f4:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d52f6:	7ac9      	ldrb	r1, [r1, #11]
   d52f8:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d52fc:	bf04      	itt	eq
   d52fe:	f043 0308 	orreq.w	r3, r3, #8
   d5302:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d5304:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5308:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d530a:	f006 0303 	and.w	r3, r6, #3
   d530e:	2b01      	cmp	r3, #1
   d5310:	d009      	beq.n	d5326 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d5312:	2b02      	cmp	r3, #2
   d5314:	d005      	beq.n	d5322 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d5316:	2b00      	cmp	r3, #0
   d5318:	d134      	bne.n	d5384 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d531a:	0571      	lsls	r1, r6, #21
   d531c:	d432      	bmi.n	d5384 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d531e:	2301      	movs	r3, #1
   d5320:	e002      	b.n	d5328 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d5322:	2303      	movs	r3, #3
   d5324:	e000      	b.n	d5328 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d5326:	2302      	movs	r3, #2
   d5328:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d532a:	78a1      	ldrb	r1, [r4, #2]
   d532c:	078b      	lsls	r3, r1, #30
   d532e:	d503      	bpl.n	d5338 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d5330:	7823      	ldrb	r3, [r4, #0]
   d5332:	f013 0f11 	tst.w	r3, #17
   d5336:	d125      	bne.n	d5384 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d5338:	b24b      	sxtb	r3, r1
   d533a:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d533e:	f006 0108 	and.w	r1, r6, #8
   d5342:	bf14      	ite	ne
   d5344:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d5348:	2700      	moveq	r7, #0
   d534a:	4319      	orrs	r1, r3
   d534c:	4339      	orrs	r1, r7
   d534e:	70a1      	strb	r1, [r4, #2]
   d5350:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d5352:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5354:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d5356:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d5358:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d535c:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d5360:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d5364:	d504      	bpl.n	d5370 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5366:	b181      	cbz	r1, d538a <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5368:	f000 fa75 	bl	d5856 <_ZN9FatVolume9freeChainEm>
   d536c:	b968      	cbnz	r0, d538a <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d536e:	e009      	b.n	d5384 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d5370:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d5372:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d5374:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d5376:	0473      	lsls	r3, r6, #17
   d5378:	d50c      	bpl.n	d5394 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d537a:	69e1      	ldr	r1, [r4, #28]
   d537c:	4620      	mov	r0, r4
   d537e:	f7ff ff54 	bl	d522a <_ZN7FatFile7seekSetEm>
   d5382:	b938      	cbnz	r0, d5394 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d5384:	2000      	movs	r0, #0
   d5386:	7020      	strb	r0, [r4, #0]
  return false;
   d5388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d538a:	78a3      	ldrb	r3, [r4, #2]
   d538c:	f043 0304 	orr.w	r3, r3, #4
   d5390:	70a3      	strb	r3, [r4, #2]
   d5392:	e7f0      	b.n	d5376 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d5394:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d5396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5398 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5398:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d539a:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d539c:	4604      	mov	r4, r0
  if (!isOpen()) {
   d539e:	b90b      	cbnz	r3, d53a4 <_ZN7FatFile4syncEv+0xc>
    return true;
   d53a0:	2001      	movs	r0, #1
   d53a2:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d53a4:	7883      	ldrb	r3, [r0, #2]
   d53a6:	075a      	lsls	r2, r3, #29
   d53a8:	d523      	bpl.n	d53f2 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d53aa:	2101      	movs	r1, #1
   d53ac:	f7ff fe46 	bl	d503c <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d53b0:	4605      	mov	r5, r0
   d53b2:	b928      	cbnz	r0, d53c0 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d53b4:	7863      	ldrb	r3, [r4, #1]
   d53b6:	f043 0301 	orr.w	r3, r3, #1
   d53ba:	7063      	strb	r3, [r4, #1]
  return false;
   d53bc:	2000      	movs	r0, #0
   d53be:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d53c0:	7803      	ldrb	r3, [r0, #0]
   d53c2:	2be5      	cmp	r3, #229	; 0xe5
   d53c4:	d0f6      	beq.n	d53b4 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d53c6:	7823      	ldrb	r3, [r4, #0]
   d53c8:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d53ca:	bf44      	itt	mi
   d53cc:	69e3      	ldrmi	r3, [r4, #28]
   d53ce:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d53d0:	8c23      	ldrh	r3, [r4, #32]
   d53d2:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d53d4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d53d6:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d53d8:	4b09      	ldr	r3, [pc, #36]	; (d5400 <_ZN7FatFile4syncEv+0x68>)
   d53da:	681b      	ldr	r3, [r3, #0]
   d53dc:	b12b      	cbz	r3, d53ea <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d53de:	f100 0116 	add.w	r1, r0, #22
   d53e2:	3018      	adds	r0, #24
   d53e4:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d53e6:	8b2b      	ldrh	r3, [r5, #24]
   d53e8:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d53ea:	78a3      	ldrb	r3, [r4, #2]
   d53ec:	f023 0304 	bic.w	r3, r3, #4
   d53f0:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d53f2:	68a0      	ldr	r0, [r4, #8]
   d53f4:	f7ff fabe 	bl	d4974 <_ZN9FatVolume9cacheSyncEv>
   d53f8:	2800      	cmp	r0, #0
   d53fa:	d0db      	beq.n	d53b4 <_ZN7FatFile4syncEv+0x1c>
   d53fc:	e7d0      	b.n	d53a0 <_ZN7FatFile4syncEv+0x8>
   d53fe:	bf00      	nop
   d5400:	2003e3d0 	.word	0x2003e3d0

000d5404 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5404:	b510      	push	{r4, lr}
   d5406:	4604      	mov	r4, r0
  bool rtn = sync();
   d5408:	f7ff ffc6 	bl	d5398 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d540c:	2300      	movs	r3, #0
   d540e:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d5410:	bd10      	pop	{r4, pc}

000d5412 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5412:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5414:	b093      	sub	sp, #76	; 0x4c
   d5416:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5418:	2300      	movs	r3, #0
   d541a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d541e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5422:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5424:	9201      	str	r2, [sp, #4]
   d5426:	4606      	mov	r6, r0
   d5428:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d542a:	b10b      	cbz	r3, d5430 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d542c:	2000      	movs	r0, #0
   d542e:	e03d      	b.n	d54ac <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5430:	780b      	ldrb	r3, [r1, #0]
   d5432:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5436:	d0f9      	beq.n	d542c <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d5438:	7813      	ldrb	r3, [r2, #0]
   d543a:	2b2f      	cmp	r3, #47	; 0x2f
   d543c:	d112      	bne.n	d5464 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d543e:	9b01      	ldr	r3, [sp, #4]
   d5440:	781a      	ldrb	r2, [r3, #0]
   d5442:	2a2f      	cmp	r2, #47	; 0x2f
   d5444:	d102      	bne.n	d544c <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d5446:	3301      	adds	r3, #1
   d5448:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d544a:	e7f8      	b.n	d543e <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d544c:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d544e:	b91a      	cbnz	r2, d5458 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d5450:	4630      	mov	r0, r6
   d5452:	f7ff fe02 	bl	d505a <_ZN7FatFile8openRootEP9FatVolume>
   d5456:	e029      	b.n	d54ac <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d5458:	a809      	add	r0, sp, #36	; 0x24
   d545a:	f7ff fdfe 	bl	d505a <_ZN7FatFile8openRootEP9FatVolume>
   d545e:	2800      	cmp	r0, #0
   d5460:	d0e4      	beq.n	d542c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d5462:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d5464:	aa01      	add	r2, sp, #4
   d5466:	a903      	add	r1, sp, #12
   d5468:	9801      	ldr	r0, [sp, #4]
   d546a:	f7ff fa9f 	bl	d49ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d546e:	2800      	cmp	r0, #0
   d5470:	d0dc      	beq.n	d542c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d5472:	9b01      	ldr	r3, [sp, #4]
   d5474:	781b      	ldrb	r3, [r3, #0]
   d5476:	b19b      	cbz	r3, d54a0 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d5478:	2300      	movs	r3, #0
   d547a:	aa03      	add	r2, sp, #12
   d547c:	4621      	mov	r1, r4
   d547e:	4630      	mov	r0, r6
   d5480:	f7ff fbd6 	bl	d4c30 <_ZN7FatFile4openEPS_P7fname_ti>
   d5484:	2800      	cmp	r0, #0
   d5486:	d0d1      	beq.n	d542c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d5488:	4635      	mov	r5, r6
   d548a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d548c:	ac09      	add	r4, sp, #36	; 0x24
   d548e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5494:	682b      	ldr	r3, [r5, #0]
   d5496:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d5498:	4630      	mov	r0, r6
   d549a:	f7ff ffb3 	bl	d5404 <_ZN7FatFile5closeEv>
   d549e:	e7e0      	b.n	d5462 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d54a0:	463b      	mov	r3, r7
   d54a2:	aa03      	add	r2, sp, #12
   d54a4:	4621      	mov	r1, r4
   d54a6:	4630      	mov	r0, r6
   d54a8:	f7ff fbc2 	bl	d4c30 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d54ac:	b013      	add	sp, #76	; 0x4c
   d54ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d54b0 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d54b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d54b4:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d54b6:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d54b8:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d54ba:	4604      	mov	r4, r0
   d54bc:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d54be:	d508      	bpl.n	d54d2 <_ZN7FatFile5writeEPKvj+0x22>
   d54c0:	7883      	ldrb	r3, [r0, #2]
   d54c2:	079a      	lsls	r2, r3, #30
   d54c4:	d505      	bpl.n	d54d2 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d54c6:	071b      	lsls	r3, r3, #28
   d54c8:	d50b      	bpl.n	d54e2 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d54ca:	69e1      	ldr	r1, [r4, #28]
   d54cc:	f7ff fead 	bl	d522a <_ZN7FatFile7seekSetEm>
   d54d0:	b938      	cbnz	r0, d54e2 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d54d2:	7863      	ldrb	r3, [r4, #1]
   d54d4:	f043 0301 	orr.w	r3, r3, #1
   d54d8:	7063      	strb	r3, [r4, #1]
  return -1;
   d54da:	f04f 30ff 	mov.w	r0, #4294967295
   d54de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d54e2:	6963      	ldr	r3, [r4, #20]
   d54e4:	43db      	mvns	r3, r3
   d54e6:	4598      	cmp	r8, r3
   d54e8:	d8f3      	bhi.n	d54d2 <_ZN7FatFile5writeEPKvj+0x22>
   d54ea:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d54ec:	f04f 0a00 	mov.w	sl, #0
   d54f0:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d54f2:	2e00      	cmp	r6, #0
   d54f4:	f000 8081 	beq.w	d55fa <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d54f8:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d54fa:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d54fc:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5500:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5504:	d11c      	bne.n	d5540 <_ZN7FatFile5writeEPKvj+0x90>
   d5506:	b9df      	cbnz	r7, d5540 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d5508:	6921      	ldr	r1, [r4, #16]
   d550a:	b171      	cbz	r1, d552a <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d550c:	f104 0210 	add.w	r2, r4, #16
   d5510:	f000 f901 	bl	d5716 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5514:	2800      	cmp	r0, #0
   d5516:	dbdc      	blt.n	d54d2 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d5518:	f040 808e 	bne.w	d5638 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d551c:	4620      	mov	r0, r4
   d551e:	f7ff fd43 	bl	d4fa8 <_ZN7FatFile10addClusterEv>
   d5522:	2800      	cmp	r0, #0
   d5524:	f040 8088 	bne.w	d5638 <_ZN7FatFile5writeEPKvj+0x188>
   d5528:	e7d3      	b.n	d54d2 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d552a:	6a23      	ldr	r3, [r4, #32]
   d552c:	b93b      	cbnz	r3, d553e <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d552e:	4620      	mov	r0, r4
   d5530:	f7ff fd3a 	bl	d4fa8 <_ZN7FatFile10addClusterEv>
   d5534:	2800      	cmp	r0, #0
   d5536:	d0cc      	beq.n	d54d2 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5538:	6923      	ldr	r3, [r4, #16]
   d553a:	6223      	str	r3, [r4, #32]
   d553c:	e000      	b.n	d5540 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d553e:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5540:	6921      	ldr	r1, [r4, #16]
   d5542:	68a0      	ldr	r0, [r4, #8]
   d5544:	f000 f8e1 	bl	d570a <_ZNK9FatVolume17clusterFirstBlockEm>
   d5548:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d554a:	b917      	cbnz	r7, d5552 <_ZN7FatFile5writeEPKvj+0xa2>
   d554c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5550:	d221      	bcs.n	d5596 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d5552:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d5556:	42b5      	cmp	r5, r6
   d5558:	bf28      	it	cs
   d555a:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d555c:	b937      	cbnz	r7, d556c <_ZN7FatFile5writeEPKvj+0xbc>
   d555e:	6963      	ldr	r3, [r4, #20]
   d5560:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d5562:	4293      	cmp	r3, r2
   d5564:	bf34      	ite	cc
   d5566:	2201      	movcc	r2, #1
   d5568:	2205      	movcs	r2, #5
   d556a:	e000      	b.n	d556e <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d556c:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d556e:	68a0      	ldr	r0, [r4, #8]
   d5570:	3024      	adds	r0, #36	; 0x24
   d5572:	f000 f8a6 	bl	d56c2 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d5576:	2800      	cmp	r0, #0
   d5578:	d0ab      	beq.n	d54d2 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d557a:	4438      	add	r0, r7
   d557c:	462a      	mov	r2, r5
   d557e:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5580:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5582:	f002 fee8 	bl	d8356 <memcpy>
      if (512 == (n + blockOffset)) {
   d5586:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d558a:	d130      	bne.n	d55ee <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d558c:	68a0      	ldr	r0, [r4, #8]
   d558e:	3024      	adds	r0, #36	; 0x24
   d5590:	f000 f870 	bl	d5674 <_ZN8FatCache4syncEv>
   d5594:	e017      	b.n	d55c6 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d5596:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d559a:	68a0      	ldr	r0, [r4, #8]
   d559c:	d315      	bcc.n	d55ca <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d559e:	7902      	ldrb	r2, [r0, #4]
   d55a0:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d55a2:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d55a4:	b2d2      	uxtb	r2, r2
   d55a6:	4293      	cmp	r3, r2
   d55a8:	bf28      	it	cs
   d55aa:	4613      	movcs	r3, r2
   d55ac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d55ae:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d55b0:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d55b4:	d302      	bcc.n	d55bc <_ZN7FatFile5writeEPKvj+0x10c>
   d55b6:	441a      	add	r2, r3
   d55b8:	4291      	cmp	r1, r2
   d55ba:	d337      	bcc.n	d562c <_ZN7FatFile5writeEPKvj+0x17c>
   d55bc:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d55be:	464a      	mov	r2, r9
   d55c0:	6838      	ldr	r0, [r7, #0]
   d55c2:	f000 fc6d 	bl	d5ea0 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d55c6:	b990      	cbnz	r0, d55ee <_ZN7FatFile5writeEPKvj+0x13e>
   d55c8:	e783      	b.n	d54d2 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d55ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d55cc:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d55ce:	bf02      	ittt	eq
   d55d0:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d55d4:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d55d8:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d55da:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d55dc:	464a      	mov	r2, r9
   d55de:	6818      	ldr	r0, [r3, #0]
   d55e0:	f000 fbec 	bl	d5dbc <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d55e4:	2800      	cmp	r0, #0
   d55e6:	f43f af74 	beq.w	d54d2 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d55ea:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d55ee:	6963      	ldr	r3, [r4, #20]
   d55f0:	442b      	add	r3, r5
   d55f2:	6163      	str	r3, [r4, #20]
    src += n;
   d55f4:	44a9      	add	r9, r5
    nToWrite -= n;
   d55f6:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d55f8:	e77a      	b.n	d54f0 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d55fa:	69e2      	ldr	r2, [r4, #28]
   d55fc:	4293      	cmp	r3, r2
   d55fe:	d901      	bls.n	d5604 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d5600:	61e3      	str	r3, [r4, #28]
   d5602:	e002      	b.n	d560a <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d5604:	4b0f      	ldr	r3, [pc, #60]	; (d5644 <_ZN7FatFile5writeEPKvj+0x194>)
   d5606:	681b      	ldr	r3, [r3, #0]
   d5608:	b11b      	cbz	r3, d5612 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d560a:	78a3      	ldrb	r3, [r4, #2]
   d560c:	f043 0304 	orr.w	r3, r3, #4
   d5610:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d5612:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d5616:	2b00      	cmp	r3, #0
   d5618:	db02      	blt.n	d5620 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d561a:	4640      	mov	r0, r8
   d561c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d5620:	4620      	mov	r0, r4
   d5622:	f7ff feb9 	bl	d5398 <_ZN7FatFile4syncEv>
   d5626:	2800      	cmp	r0, #0
   d5628:	d1f7      	bne.n	d561a <_ZN7FatFile5writeEPKvj+0x16a>
   d562a:	e752      	b.n	d54d2 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d562c:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5630:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5634:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5636:	e7c1      	b.n	d55bc <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5638:	6921      	ldr	r1, [r4, #16]
   d563a:	68a0      	ldr	r0, [r4, #8]
   d563c:	f000 f865 	bl	d570a <_ZNK9FatVolume17clusterFirstBlockEm>
   d5640:	4601      	mov	r1, r0
   d5642:	e783      	b.n	d554c <_ZN7FatFile5writeEPKvj+0x9c>
   d5644:	2003e3d0 	.word	0x2003e3d0

000d5648 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d5648:	f000 bff0 	b.w	d662c <HAL_Pin_Map>

000d564c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d564c:	b570      	push	{r4, r5, r6, lr}
   d564e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5650:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5652:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5654:	b149      	cbz	r1, d566a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5656:	f002 ff05 	bl	d8464 <strlen>
   d565a:	682b      	ldr	r3, [r5, #0]
   d565c:	4602      	mov	r2, r0
   d565e:	4621      	mov	r1, r4
   d5660:	4628      	mov	r0, r5
   d5662:	68db      	ldr	r3, [r3, #12]
    }
   d5664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5668:	4718      	bx	r3
    }
   d566a:	bd70      	pop	{r4, r5, r6, pc}

000d566c <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d566c:	f000 bfde 	b.w	d662c <HAL_Pin_Map>

000d5670 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5670:	f000 bfdc 	b.w	d662c <HAL_Pin_Map>

000d5674 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5674:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d5676:	7803      	ldrb	r3, [r0, #0]
   d5678:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d567a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d567c:	d51e      	bpl.n	d56bc <_ZN8FatCache4syncEv+0x48>
   d567e:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5680:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d5682:	f100 060c 	add.w	r6, r0, #12
   d5686:	4632      	mov	r2, r6
   d5688:	6818      	ldr	r0, [r3, #0]
   d568a:	f000 fb97 	bl	d5dbc <_ZN9SdSpiCard10writeBlockEmPKh>
   d568e:	4605      	mov	r5, r0
   d5690:	b908      	cbnz	r0, d5696 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d5692:	2500      	movs	r5, #0
   d5694:	e013      	b.n	d56be <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d5696:	7823      	ldrb	r3, [r4, #0]
   d5698:	079b      	lsls	r3, r3, #30
   d569a:	d404      	bmi.n	d56a6 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d569c:	7823      	ldrb	r3, [r4, #0]
   d569e:	f023 0301 	bic.w	r3, r3, #1
   d56a2:	7023      	strb	r3, [r4, #0]
   d56a4:	e00b      	b.n	d56be <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d56a6:	6863      	ldr	r3, [r4, #4]
   d56a8:	68a0      	ldr	r0, [r4, #8]
   d56aa:	6919      	ldr	r1, [r3, #16]
   d56ac:	4632      	mov	r2, r6
   d56ae:	4401      	add	r1, r0
   d56b0:	6818      	ldr	r0, [r3, #0]
   d56b2:	f000 fb83 	bl	d5dbc <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d56b6:	2800      	cmp	r0, #0
   d56b8:	d1f0      	bne.n	d569c <_ZN8FatCache4syncEv+0x28>
   d56ba:	e7ea      	b.n	d5692 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d56bc:	2501      	movs	r5, #1

fail:
  return false;
}
   d56be:	4628      	mov	r0, r5
   d56c0:	bd70      	pop	{r4, r5, r6, pc}

000d56c2 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d56c2:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d56c4:	6883      	ldr	r3, [r0, #8]
   d56c6:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d56c8:	4604      	mov	r4, r0
   d56ca:	460e      	mov	r6, r1
   d56cc:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d56ce:	d014      	beq.n	d56fa <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d56d0:	f7ff ffd0 	bl	d5674 <_ZN8FatCache4syncEv>
   d56d4:	b908      	cbnz	r0, d56da <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d56d6:	2000      	movs	r0, #0
   d56d8:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d56da:	076b      	lsls	r3, r5, #29
   d56dc:	d503      	bpl.n	d56e6 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d56de:	2300      	movs	r3, #0
   d56e0:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d56e2:	60a6      	str	r6, [r4, #8]
   d56e4:	e009      	b.n	d56fa <_ZN8FatCache4readEmh+0x38>
   d56e6:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d56e8:	f104 020c 	add.w	r2, r4, #12
   d56ec:	4631      	mov	r1, r6
   d56ee:	6818      	ldr	r0, [r3, #0]
   d56f0:	f000 fada 	bl	d5ca8 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d56f4:	2800      	cmp	r0, #0
   d56f6:	d1f2      	bne.n	d56de <_ZN8FatCache4readEmh+0x1c>
   d56f8:	e7ed      	b.n	d56d6 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d56fa:	7823      	ldrb	r3, [r4, #0]
   d56fc:	4620      	mov	r0, r4
   d56fe:	f005 0503 	and.w	r5, r5, #3
   d5702:	431d      	orrs	r5, r3
   d5704:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d5708:	bd70      	pop	{r4, r5, r6, pc}

000d570a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d570a:	7983      	ldrb	r3, [r0, #6]
   d570c:	6940      	ldr	r0, [r0, #20]
   d570e:	3902      	subs	r1, #2
   d5710:	4099      	lsls	r1, r3
}
   d5712:	4408      	add	r0, r1
   d5714:	4770      	bx	lr

000d5716 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5716:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d5718:	b570      	push	{r4, r5, r6, lr}
   d571a:	4605      	mov	r5, r0
   d571c:	460c      	mov	r4, r1
   d571e:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5720:	d802      	bhi.n	d5728 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d5722:	f04f 30ff 	mov.w	r0, #4294967295
   d5726:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5728:	69c3      	ldr	r3, [r0, #28]
   d572a:	4299      	cmp	r1, r3
   d572c:	d8f9      	bhi.n	d5722 <_ZN9FatVolume6fatGetEmPm+0xc>
   d572e:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5730:	2b20      	cmp	r3, #32
   d5732:	d110      	bne.n	d5756 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d5734:	6981      	ldr	r1, [r0, #24]
   d5736:	2202      	movs	r2, #2
   d5738:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d573c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5740:	f7ff ffbf 	bl	d56c2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5744:	2800      	cmp	r0, #0
   d5746:	d0ec      	beq.n	d5722 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d5748:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d574c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d5750:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d5754:	e00f      	b.n	d5776 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d5756:	2b10      	cmp	r3, #16
   d5758:	d1e3      	bne.n	d5722 <_ZN9FatVolume6fatGetEmPm+0xc>
   d575a:	6983      	ldr	r3, [r0, #24]
   d575c:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5760:	2202      	movs	r2, #2
   d5762:	4419      	add	r1, r3
   d5764:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5768:	f7ff ffab 	bl	d56c2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d576c:	2800      	cmp	r0, #0
   d576e:	d0d8      	beq.n	d5722 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d5770:	b2e4      	uxtb	r4, r4
   d5772:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d5776:	69ea      	ldr	r2, [r5, #28]
   d5778:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d577a:	bf9a      	itte	ls
   d577c:	6033      	strls	r3, [r6, #0]
  return 1;
   d577e:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d5780:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d5782:	bd70      	pop	{r4, r5, r6, pc}

000d5784 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5784:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d5786:	b538      	push	{r3, r4, r5, lr}
   d5788:	460c      	mov	r4, r1
   d578a:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d578c:	d801      	bhi.n	d5792 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d578e:	2000      	movs	r0, #0
   d5790:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5792:	69c3      	ldr	r3, [r0, #28]
   d5794:	4299      	cmp	r1, r3
   d5796:	d8fa      	bhi.n	d578e <_ZN9FatVolume6fatPutEmm+0xa>
   d5798:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d579a:	2b20      	cmp	r3, #32
   d579c:	d10e      	bne.n	d57bc <_ZN9FatVolume6fatPutEmm+0x38>
   d579e:	6981      	ldr	r1, [r0, #24]
   d57a0:	2203      	movs	r2, #3
   d57a2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d57a6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d57aa:	f7ff ff8a 	bl	d56c2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d57ae:	2800      	cmp	r0, #0
   d57b0:	d0ed      	beq.n	d578e <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d57b2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d57b6:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d57ba:	e00f      	b.n	d57dc <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d57bc:	2b10      	cmp	r3, #16
   d57be:	d1e6      	bne.n	d578e <_ZN9FatVolume6fatPutEmm+0xa>
   d57c0:	6983      	ldr	r3, [r0, #24]
   d57c2:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d57c6:	2203      	movs	r2, #3
   d57c8:	4419      	add	r1, r3
   d57ca:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d57ce:	f7ff ff78 	bl	d56c2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d57d2:	2800      	cmp	r0, #0
   d57d4:	d0db      	beq.n	d578e <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d57d6:	b2e4      	uxtb	r4, r4
   d57d8:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d57dc:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d57de:	bd38      	pop	{r3, r4, r5, pc}

000d57e0 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d57e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d57e4:	68c4      	ldr	r4, [r0, #12]
   d57e6:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d57e8:	4605      	mov	r5, r0
   d57ea:	460e      	mov	r6, r1
   d57ec:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d57ee:	d207      	bcs.n	d5800 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d57f0:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d57f2:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d57f4:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d57f6:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d57f8:	429c      	cmp	r4, r3
   d57fa:	d903      	bls.n	d5804 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d57fc:	b9cf      	cbnz	r7, d5832 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d57fe:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d5800:	2701      	movs	r7, #1
   d5802:	e7f7      	b.n	d57f4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d5804:	42a6      	cmp	r6, r4
   d5806:	d014      	beq.n	d5832 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d5808:	aa01      	add	r2, sp, #4
   d580a:	4621      	mov	r1, r4
   d580c:	4628      	mov	r0, r5
   d580e:	f7ff ff82 	bl	d5716 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5812:	2800      	cmp	r0, #0
   d5814:	db0d      	blt.n	d5832 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d5816:	d0ed      	beq.n	d57f4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d5818:	9b01      	ldr	r3, [sp, #4]
   d581a:	2b00      	cmp	r3, #0
   d581c:	d1ea      	bne.n	d57f4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d581e:	b107      	cbz	r7, d5822 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d5820:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d5822:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d5826:	4621      	mov	r1, r4
   d5828:	4628      	mov	r0, r5
   d582a:	f7ff ffab 	bl	d5784 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d582e:	4607      	mov	r7, r0
   d5830:	b908      	cbnz	r0, d5836 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d5832:	2700      	movs	r7, #0
   d5834:	e00b      	b.n	d584e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d5836:	b916      	cbnz	r6, d583e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d5838:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d583c:	e007      	b.n	d584e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d583e:	4622      	mov	r2, r4
   d5840:	4631      	mov	r1, r6
   d5842:	4628      	mov	r0, r5
   d5844:	f7ff ff9e 	bl	d5784 <_ZN9FatVolume6fatPutEmm>
   d5848:	2800      	cmp	r0, #0
   d584a:	d1f5      	bne.n	d5838 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d584c:	e7f1      	b.n	d5832 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d584e:	4638      	mov	r0, r7
   d5850:	b002      	add	sp, #8
   d5852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5856 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d5856:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5858:	4605      	mov	r5, r0
   d585a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d585c:	aa01      	add	r2, sp, #4
   d585e:	4621      	mov	r1, r4
   d5860:	4628      	mov	r0, r5
   d5862:	f7ff ff58 	bl	d5716 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5866:	1e06      	subs	r6, r0, #0
   d5868:	da01      	bge.n	d586e <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d586a:	2000      	movs	r0, #0
   d586c:	e00f      	b.n	d588e <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d586e:	2200      	movs	r2, #0
   d5870:	4621      	mov	r1, r4
   d5872:	4628      	mov	r0, r5
   d5874:	f7ff ff86 	bl	d5784 <_ZN9FatVolume6fatPutEmm>
   d5878:	2800      	cmp	r0, #0
   d587a:	d0f6      	beq.n	d586a <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d587c:	68eb      	ldr	r3, [r5, #12]
   d587e:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d5880:	bf9c      	itt	ls
   d5882:	f104 34ff 	addls.w	r4, r4, #4294967295
   d5886:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d5888:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d588a:	2e00      	cmp	r6, #0
   d588c:	d1e6      	bne.n	d585c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d588e:	b002      	add	sp, #8
   d5890:	bd70      	pop	{r4, r5, r6, pc}

000d5892 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d5892:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d5894:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d5896:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d5898:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d589a:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d589c:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d58a0:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d58a2:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d58a4:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d58a6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d58aa:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d58ac:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d58b0:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d58b4:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d58b8:	b1a1      	cbz	r1, d58e4 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d58ba:	2904      	cmp	r1, #4
   d58bc:	d85d      	bhi.n	d597a <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d58be:	4611      	mov	r1, r2
   d58c0:	3024      	adds	r0, #36	; 0x24
   d58c2:	f7ff fefe 	bl	d56c2 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d58c6:	2800      	cmp	r0, #0
   d58c8:	d057      	beq.n	d597a <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d58ca:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d58ce:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d58d2:	065b      	lsls	r3, r3, #25
   d58d4:	d151      	bne.n	d597a <_ZN9FatVolume4initEh+0xe8>
   d58d6:	351b      	adds	r5, #27
   d58d8:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d58dc:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d58e0:	2d00      	cmp	r5, #0
   d58e2:	d04a      	beq.n	d597a <_ZN9FatVolume4initEh+0xe8>
   d58e4:	2200      	movs	r2, #0
   d58e6:	4629      	mov	r1, r5
   d58e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d58ec:	f7ff fee9 	bl	d56c2 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d58f0:	2800      	cmp	r0, #0
   d58f2:	d042      	beq.n	d597a <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d58f4:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d58f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d58fc:	d13d      	bne.n	d597a <_ZN9FatVolume4initEh+0xe8>
   d58fe:	7c03      	ldrb	r3, [r0, #16]
   d5900:	2b02      	cmp	r3, #2
   d5902:	d13a      	bne.n	d597a <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d5904:	89c3      	ldrh	r3, [r0, #14]
   d5906:	2b00      	cmp	r3, #0
   d5908:	d037      	beq.n	d597a <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d590a:	7b41      	ldrb	r1, [r0, #13]
   d590c:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d590e:	1e4b      	subs	r3, r1, #1
   d5910:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d5912:	2300      	movs	r3, #0
   d5914:	71a3      	strb	r3, [r4, #6]
   d5916:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5918:	2301      	movs	r3, #1
   d591a:	428b      	cmp	r3, r1
   d591c:	d007      	beq.n	d592e <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d591e:	3e01      	subs	r6, #1
   d5920:	d02b      	beq.n	d597a <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5922:	79a2      	ldrb	r2, [r4, #6]
   d5924:	005b      	lsls	r3, r3, #1
   d5926:	3201      	adds	r2, #1
   d5928:	b2db      	uxtb	r3, r3
   d592a:	71a2      	strb	r2, [r4, #6]
   d592c:	e7f5      	b.n	d591a <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d592e:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d5930:	b902      	cbnz	r2, d5934 <_ZN9FatVolume4initEh+0xa2>
   d5932:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d5934:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d5936:	89c6      	ldrh	r6, [r0, #14]
   d5938:	442e      	add	r6, r5
   d593a:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d593c:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d5940:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d5942:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d5946:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d5948:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d594c:	0152      	lsls	r2, r2, #5
   d594e:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d5952:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d5956:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d5958:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d595c:	b903      	cbnz	r3, d5960 <_ZN9FatVolume4initEh+0xce>
   d595e:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d5960:	1aad      	subs	r5, r5, r2
   d5962:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d5964:	79a5      	ldrb	r5, [r4, #6]
   d5966:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d596a:	1c6b      	adds	r3, r5, #1
   d596c:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d596e:	f640 73f4 	movw	r3, #4084	; 0xff4
   d5972:	429d      	cmp	r5, r3
   d5974:	d803      	bhi.n	d597e <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d5976:	230c      	movs	r3, #12
   d5978:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d597a:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d597c:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d597e:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d5982:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d5984:	bf85      	ittet	hi
   d5986:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d5988:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d598a:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d598c:	2320      	movhi	r3, #32
   d598e:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d5990:	2001      	movs	r0, #1

fail:
  return false;
}
   d5992:	bd70      	pop	{r4, r5, r6, pc}

000d5994 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d5994:	f000 be4a 	b.w	d662c <HAL_Pin_Map>

000d5998 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d5998:	f000 be48 	b.w	d662c <HAL_Pin_Map>

000d599c <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d599c:	f000 be46 	b.w	d662c <HAL_Pin_Map>

000d59a0 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d59a0:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d59a2:	4c0e      	ldr	r4, [pc, #56]	; (d59dc <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d59a4:	460e      	mov	r6, r1
   d59a6:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d59a8:	f000 fec8 	bl	d673c <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d59ac:	6823      	ldr	r3, [r4, #0]
   d59ae:	1ac0      	subs	r0, r0, r3
   d59b0:	4b0b      	ldr	r3, [pc, #44]	; (d59e0 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d59b2:	4298      	cmp	r0, r3
   d59b4:	d908      	bls.n	d59c8 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d59b6:	f000 fec9 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d59ba:	4b0a      	ldr	r3, [pc, #40]	; (d59e4 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d59bc:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d59be:	f001 f839 	bl	d6a34 <spark_process>
   d59c2:	f000 febb 	bl	d673c <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d59c6:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d59c8:	f000 fec0 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d59cc:	b280      	uxth	r0, r0
   d59ce:	1b80      	subs	r0, r0, r6
}
   d59d0:	42a8      	cmp	r0, r5
   d59d2:	bfd4      	ite	le
   d59d4:	2000      	movle	r0, #0
   d59d6:	2001      	movgt	r0, #1
   d59d8:	bd70      	pop	{r4, r5, r6, pc}
   d59da:	bf00      	nop
   d59dc:	2003e3d4 	.word	0x2003e3d4
   d59e0:	000186a0 	.word	0x000186a0
   d59e4:	2003e730 	.word	0x2003e730

000d59e8 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d59e8:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d59ea:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d59ec:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d59ee:	b94d      	cbnz	r5, d5a04 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d59f0:	6840      	ldr	r0, [r0, #4]
   d59f2:	f000 fa7d 	bl	d5ef0 <_ZN14SdSpiAltDriver8activateEv>
   d59f6:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d59f8:	4629      	mov	r1, r5
   d59fa:	7d18      	ldrb	r0, [r3, #20]
   d59fc:	f001 fe99 	bl	d7732 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d5a00:	2301      	movs	r3, #1
   d5a02:	7223      	strb	r3, [r4, #8]
   d5a04:	bd38      	pop	{r3, r4, r5, pc}

000d5a06 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d5a06:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d5a08:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d5a0a:	4604      	mov	r4, r0
  if (m_spiActive) {
   d5a0c:	b16b      	cbz	r3, d5a2a <_ZN9SdSpiCard7spiStopEv+0x24>
   d5a0e:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d5a10:	2101      	movs	r1, #1
   d5a12:	7d18      	ldrb	r0, [r3, #20]
   d5a14:	f001 fe8d 	bl	d7732 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5a18:	21ff      	movs	r1, #255	; 0xff
   d5a1a:	6860      	ldr	r0, [r4, #4]
   d5a1c:	f000 fa9a 	bl	d5f54 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d5a20:	6860      	ldr	r0, [r4, #4]
   d5a22:	f000 fa79 	bl	d5f18 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d5a26:	2300      	movs	r3, #0
   d5a28:	7223      	strb	r3, [r4, #8]
   d5a2a:	bd10      	pop	{r4, pc}

000d5a2c <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d5a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a2e:	4604      	mov	r4, r0
   d5a30:	460d      	mov	r5, r1
   d5a32:	4616      	mov	r6, r2
   d5a34:	f000 fe8a 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d5a38:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5a3a:	6860      	ldr	r0, [r4, #4]
   d5a3c:	f000 fa6f 	bl	d5f1e <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d5a40:	28ff      	cmp	r0, #255	; 0xff
   d5a42:	7260      	strb	r0, [r4, #9]
   d5a44:	d109      	bne.n	d5a5a <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d5a46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5a4a:	4639      	mov	r1, r7
   d5a4c:	4620      	mov	r0, r4
   d5a4e:	f7ff ffa7 	bl	d59a0 <_ZN9SdSpiCard10isTimedOutEtt>
   d5a52:	2800      	cmp	r0, #0
   d5a54:	d0f1      	beq.n	d5a3a <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5a56:	2355      	movs	r3, #85	; 0x55
   d5a58:	e00b      	b.n	d5a72 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d5a5a:	28fe      	cmp	r0, #254	; 0xfe
   d5a5c:	d001      	beq.n	d5a62 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d5a5e:	2350      	movs	r3, #80	; 0x50
   d5a60:	e007      	b.n	d5a72 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d5a62:	4632      	mov	r2, r6
   d5a64:	4629      	mov	r1, r5
   d5a66:	6860      	ldr	r0, [r4, #4]
   d5a68:	f000 fa5e 	bl	d5f28 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d5a6c:	7260      	strb	r0, [r4, #9]
   d5a6e:	b130      	cbz	r0, d5a7e <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5a70:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d5a72:	4620      	mov	r0, r4
   d5a74:	7023      	strb	r3, [r4, #0]
   d5a76:	f7ff ffc6 	bl	d5a06 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5a7a:	2000      	movs	r0, #0
}
   d5a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5a7e:	6860      	ldr	r0, [r4, #4]
   d5a80:	f000 fa4d 	bl	d5f1e <_ZN14SdSpiAltDriver7receiveEv>
   d5a84:	6860      	ldr	r0, [r4, #4]
   d5a86:	f000 fa4a 	bl	d5f1e <_ZN14SdSpiAltDriver7receiveEv>
   d5a8a:	2001      	movs	r0, #1
   d5a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a8e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d5a8e:	b570      	push	{r4, r5, r6, lr}
   d5a90:	4604      	mov	r4, r0
   d5a92:	460e      	mov	r6, r1
   d5a94:	f000 fe5a 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
   d5a98:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d5a9a:	4632      	mov	r2, r6
   d5a9c:	4629      	mov	r1, r5
   d5a9e:	4620      	mov	r0, r4
   d5aa0:	f7ff ff7e 	bl	d59a0 <_ZN9SdSpiCard10isTimedOutEtt>
   d5aa4:	b930      	cbnz	r0, d5ab4 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d5aa6:	6860      	ldr	r0, [r4, #4]
   d5aa8:	f000 fa39 	bl	d5f1e <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d5aac:	28ff      	cmp	r0, #255	; 0xff
   d5aae:	d1f4      	bne.n	d5a9a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d5ab0:	2001      	movs	r0, #1
   d5ab2:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d5ab4:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d5ab6:	bd70      	pop	{r4, r5, r6, pc}

000d5ab8 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d5ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d5aba:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d5abc:	9201      	str	r2, [sp, #4]
   d5abe:	4604      	mov	r4, r0
   d5ac0:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d5ac2:	b90b      	cbnz	r3, d5ac8 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d5ac4:	f7ff ff90 	bl	d59e8 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d5ac8:	b125      	cbz	r5, d5ad4 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d5aca:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d5ace:	4620      	mov	r0, r4
   d5ad0:	f7ff ffdd 	bl	d5a8e <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5ad4:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d5ad8:	6860      	ldr	r0, [r4, #4]
   d5ada:	f000 fa3b 	bl	d5f54 <_ZN14SdSpiAltDriver4sendEh>
   d5ade:	f10d 0607 	add.w	r6, sp, #7
   d5ae2:	f10d 0703 	add.w	r7, sp, #3
   d5ae6:	f816 1901 	ldrb.w	r1, [r6], #-1
   d5aea:	6860      	ldr	r0, [r4, #4]
   d5aec:	f000 fa32 	bl	d5f54 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d5af0:	42be      	cmp	r6, r7
   d5af2:	d1f8      	bne.n	d5ae6 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d5af4:	2d00      	cmp	r5, #0
   d5af6:	bf0c      	ite	eq
   d5af8:	2195      	moveq	r1, #149	; 0x95
   d5afa:	2187      	movne	r1, #135	; 0x87
   d5afc:	6860      	ldr	r0, [r4, #4]
   d5afe:	f000 fa29 	bl	d5f54 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5b02:	6860      	ldr	r0, [r4, #4]
   d5b04:	f000 fa0b 	bl	d5f1e <_ZN14SdSpiAltDriver7receiveEv>
   d5b08:	250b      	movs	r5, #11
   d5b0a:	6860      	ldr	r0, [r4, #4]
   d5b0c:	f000 fa07 	bl	d5f1e <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d5b10:	0603      	lsls	r3, r0, #24
   d5b12:	7260      	strb	r0, [r4, #9]
   d5b14:	d503      	bpl.n	d5b1e <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d5b16:	3d01      	subs	r5, #1
   d5b18:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5b1c:	d1f5      	bne.n	d5b0a <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d5b1e:	b003      	add	sp, #12
   d5b20:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b22 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d5b22:	b570      	push	{r4, r5, r6, lr}
   d5b24:	4604      	mov	r4, r0
   d5b26:	460d      	mov	r5, r1
   d5b28:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d5b2a:	2137      	movs	r1, #55	; 0x37
   d5b2c:	2200      	movs	r2, #0
   d5b2e:	f7ff ffc3 	bl	d5ab8 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d5b32:	4632      	mov	r2, r6
   d5b34:	4629      	mov	r1, r5
   d5b36:	4620      	mov	r0, r4
  }
   d5b38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d5b3c:	f7ff bfbc 	b.w	d5ab8 <_ZN9SdSpiCard11cardCommandEhm>

000d5b40 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d5b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d5b44:	2500      	movs	r5, #0
   d5b46:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d5b48:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d5b4a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d5b4c:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d5b4e:	4604      	mov	r4, r0
   d5b50:	4690      	mov	r8, r2
   d5b52:	461e      	mov	r6, r3
   d5b54:	f000 fdfa 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d5b58:	4641      	mov	r1, r8
   d5b5a:	4607      	mov	r7, r0
   d5b5c:	6860      	ldr	r0, [r4, #4]
   d5b5e:	f000 f9cb 	bl	d5ef8 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d5b62:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d5b64:	4a4f      	ldr	r2, [pc, #316]	; (d5ca4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d5b66:	721d      	strb	r5, [r3, #8]
   d5b68:	f04f 0801 	mov.w	r8, #1
   d5b6c:	60da      	str	r2, [r3, #12]
   d5b6e:	745d      	strb	r5, [r3, #17]
   d5b70:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d5b74:	4620      	mov	r0, r4
   d5b76:	f7ff ff37 	bl	d59e8 <_ZN9SdSpiCard8spiStartEv>
   d5b7a:	6863      	ldr	r3, [r4, #4]
   d5b7c:	4641      	mov	r1, r8
   d5b7e:	7d18      	ldrb	r0, [r3, #20]
   d5b80:	f001 fdd7 	bl	d7732 <digitalWrite>
   d5b84:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5b86:	21ff      	movs	r1, #255	; 0xff
   d5b88:	6860      	ldr	r0, [r4, #4]
   d5b8a:	3d01      	subs	r5, #1
   d5b8c:	f000 f9e2 	bl	d5f54 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d5b90:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5b94:	d1f7      	bne.n	d5b86 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d5b96:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d5b98:	4629      	mov	r1, r5
   d5b9a:	7d18      	ldrb	r0, [r3, #20]
   d5b9c:	f001 fdc9 	bl	d7732 <digitalWrite>
   d5ba0:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d5ba2:	2200      	movs	r2, #0
   d5ba4:	4611      	mov	r1, r2
   d5ba6:	4620      	mov	r0, r4
   d5ba8:	f7ff ff86 	bl	d5ab8 <_ZN9SdSpiCard11cardCommandEhm>
   d5bac:	2801      	cmp	r0, #1
   d5bae:	4680      	mov	r8, r0
   d5bb0:	d012      	beq.n	d5bd8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d5bb2:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d5bb4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5bb8:	d101      	bne.n	d5bbe <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5bba:	2320      	movs	r3, #32
   d5bbc:	e057      	b.n	d5c6e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5bbe:	21fd      	movs	r1, #253	; 0xfd
   d5bc0:	6860      	ldr	r0, [r4, #4]
   d5bc2:	f000 f9c7 	bl	d5f54 <_ZN14SdSpiAltDriver4sendEh>
   d5bc6:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5bca:	6860      	ldr	r0, [r4, #4]
   d5bcc:	f000 f9a7 	bl	d5f1e <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d5bd0:	f1b8 0801 	subs.w	r8, r8, #1
   d5bd4:	d1f9      	bne.n	d5bca <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d5bd6:	e7e4      	b.n	d5ba2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d5bd8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d5bdc:	2108      	movs	r1, #8
   d5bde:	4620      	mov	r0, r4
   d5be0:	f7ff ff6a 	bl	d5ab8 <_ZN9SdSpiCard11cardCommandEhm>
   d5be4:	2805      	cmp	r0, #5
   d5be6:	d102      	bne.n	d5bee <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d5be8:	f884 800a 	strb.w	r8, [r4, #10]
   d5bec:	e00f      	b.n	d5c0e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d5bee:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5bf0:	6860      	ldr	r0, [r4, #4]
   d5bf2:	f000 f994 	bl	d5f1e <_ZN14SdSpiAltDriver7receiveEv>
   d5bf6:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d5bf8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d5bfc:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d5bfe:	d1f7      	bne.n	d5bf0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d5c00:	28aa      	cmp	r0, #170	; 0xaa
   d5c02:	d102      	bne.n	d5c0a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d5c04:	2302      	movs	r3, #2
   d5c06:	72a3      	strb	r3, [r4, #10]
   d5c08:	e001      	b.n	d5c0e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5c0a:	2325      	movs	r3, #37	; 0x25
   d5c0c:	e02f      	b.n	d5c6e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d5c0e:	7aa3      	ldrb	r3, [r4, #10]
   d5c10:	2b02      	cmp	r3, #2
   d5c12:	bf0c      	ite	eq
   d5c14:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d5c18:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d5c1a:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d5c1c:	462a      	mov	r2, r5
   d5c1e:	2129      	movs	r1, #41	; 0x29
   d5c20:	4620      	mov	r0, r4
   d5c22:	f7ff ff7e 	bl	d5b22 <_ZN9SdSpiCard8cardAcmdEhm>
   d5c26:	4602      	mov	r2, r0
   d5c28:	b148      	cbz	r0, d5c3e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d5c2a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d5c2e:	4639      	mov	r1, r7
   d5c30:	4620      	mov	r0, r4
   d5c32:	f7ff feb5 	bl	d59a0 <_ZN9SdSpiCard10isTimedOutEtt>
   d5c36:	2800      	cmp	r0, #0
   d5c38:	d0f0      	beq.n	d5c1c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d5c3a:	2343      	movs	r3, #67	; 0x43
   d5c3c:	e017      	b.n	d5c6e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d5c3e:	7aa3      	ldrb	r3, [r4, #10]
   d5c40:	2b02      	cmp	r3, #2
   d5c42:	d00e      	beq.n	d5c62 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d5c44:	4620      	mov	r0, r4
   d5c46:	f7ff fede 	bl	d5a06 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d5c4a:	6863      	ldr	r3, [r4, #4]
   d5c4c:	68b0      	ldr	r0, [r6, #8]
   d5c4e:	7934      	ldrb	r4, [r6, #4]
   d5c50:	7b31      	ldrb	r1, [r6, #12]
   d5c52:	7b72      	ldrb	r2, [r6, #13]
   d5c54:	745a      	strb	r2, [r3, #17]
   d5c56:	60d8      	str	r0, [r3, #12]
   d5c58:	721c      	strb	r4, [r3, #8]
   d5c5a:	7419      	strb	r1, [r3, #16]
  return true;
   d5c5c:	2001      	movs	r0, #1
   d5c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d5c62:	213a      	movs	r1, #58	; 0x3a
   d5c64:	4620      	mov	r0, r4
   d5c66:	f7ff ff27 	bl	d5ab8 <_ZN9SdSpiCard11cardCommandEhm>
   d5c6a:	b138      	cbz	r0, d5c7c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d5c6c:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d5c6e:	4620      	mov	r0, r4
   d5c70:	7023      	strb	r3, [r4, #0]
   d5c72:	f7ff fec8 	bl	d5a06 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5c76:	2000      	movs	r0, #0
}
   d5c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5c7c:	6860      	ldr	r0, [r4, #4]
   d5c7e:	f000 f94e 	bl	d5f1e <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d5c82:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d5c86:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d5c88:	bf04      	itt	eq
   d5c8a:	2303      	moveq	r3, #3
   d5c8c:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5c8e:	6860      	ldr	r0, [r4, #4]
   d5c90:	f000 f945 	bl	d5f1e <_ZN14SdSpiAltDriver7receiveEv>
   d5c94:	6860      	ldr	r0, [r4, #4]
   d5c96:	f000 f942 	bl	d5f1e <_ZN14SdSpiAltDriver7receiveEv>
   d5c9a:	6860      	ldr	r0, [r4, #4]
   d5c9c:	f000 f93f 	bl	d5f1e <_ZN14SdSpiAltDriver7receiveEv>
   d5ca0:	e7d0      	b.n	d5c44 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d5ca2:	bf00      	nop
   d5ca4:	0003d090 	.word	0x0003d090

000d5ca8 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5ca8:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5caa:	7a83      	ldrb	r3, [r0, #10]
   d5cac:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d5cae:	bf18      	it	ne
   d5cb0:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5cb2:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d5cb4:	460a      	mov	r2, r1
   d5cb6:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5cb8:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d5cba:	f7ff fefd 	bl	d5ab8 <_ZN9SdSpiCard11cardCommandEhm>
   d5cbe:	b110      	cbz	r0, d5cc6 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5cc0:	2330      	movs	r3, #48	; 0x30
   d5cc2:	7023      	strb	r3, [r4, #0]
   d5cc4:	e00b      	b.n	d5cde <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d5cc6:	4629      	mov	r1, r5
   d5cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5ccc:	4620      	mov	r0, r4
   d5cce:	f7ff fead 	bl	d5a2c <_ZN9SdSpiCard8readDataEPhj>
   d5cd2:	4605      	mov	r5, r0
   d5cd4:	b118      	cbz	r0, d5cde <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d5cd6:	4620      	mov	r0, r4
   d5cd8:	f7ff fe95 	bl	d5a06 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5cdc:	e003      	b.n	d5ce6 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d5cde:	4620      	mov	r0, r4
   d5ce0:	f7ff fe91 	bl	d5a06 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5ce4:	2500      	movs	r5, #0
}
   d5ce6:	4628      	mov	r0, r5
   d5ce8:	bd38      	pop	{r3, r4, r5, pc}

000d5cea <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5cea:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d5cec:	7a83      	ldrb	r3, [r0, #10]
   d5cee:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5cf0:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5cf2:	bf18      	it	ne
   d5cf4:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d5cf6:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5cf8:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d5cfa:	f7ff fedd 	bl	d5ab8 <_ZN9SdSpiCard11cardCommandEhm>
   d5cfe:	b130      	cbz	r0, d5d0e <_ZN9SdSpiCard9readStartEm+0x24>
   d5d00:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d5d02:	4620      	mov	r0, r4
   d5d04:	7023      	strb	r3, [r4, #0]
   d5d06:	f7ff fe7e 	bl	d5a06 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5d0a:	2000      	movs	r0, #0
   d5d0c:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d5d0e:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5d10:	bd10      	pop	{r4, pc}

000d5d12 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d5d12:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d5d14:	2200      	movs	r2, #0
   d5d16:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d5d18:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d5d1a:	f7ff fecd 	bl	d5ab8 <_ZN9SdSpiCard11cardCommandEhm>
   d5d1e:	b130      	cbz	r0, d5d2e <_ZN9SdSpiCard8readStopEv+0x1c>
   d5d20:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d5d22:	4620      	mov	r0, r4
   d5d24:	7023      	strb	r3, [r4, #0]
   d5d26:	f7ff fe6e 	bl	d5a06 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5d2a:	2000      	movs	r0, #0
   d5d2c:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d5d2e:	4620      	mov	r0, r4
   d5d30:	f7ff fe69 	bl	d5a06 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5d34:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5d36:	bd10      	pop	{r4, pc}

000d5d38 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d5d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d3a:	4605      	mov	r5, r0
   d5d3c:	4616      	mov	r6, r2
   d5d3e:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d5d40:	f7ff ffd3 	bl	d5cea <_ZN9SdSpiCard9readStartEm>
   d5d44:	b198      	cbz	r0, d5d6e <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d5d46:	2400      	movs	r4, #0
   d5d48:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d5d4a:	429f      	cmp	r7, r3
   d5d4c:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d5d50:	d908      	bls.n	d5d64 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d5d52:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5d56:	4628      	mov	r0, r5
   d5d58:	f7ff fe68 	bl	d5a2c <_ZN9SdSpiCard8readDataEPhj>
   d5d5c:	3401      	adds	r4, #1
   d5d5e:	2800      	cmp	r0, #0
   d5d60:	d1f2      	bne.n	d5d48 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d5d62:	e004      	b.n	d5d6e <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d5d64:	4628      	mov	r0, r5
}
   d5d66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d5d6a:	f7ff bfd2 	b.w	d5d12 <_ZN9SdSpiCard8readStopEv>
}
   d5d6e:	2000      	movs	r0, #0
   d5d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5d72 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d5d72:	b538      	push	{r3, r4, r5, lr}
   d5d74:	4604      	mov	r4, r0
   d5d76:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5d78:	6840      	ldr	r0, [r0, #4]
   d5d7a:	f000 f8eb 	bl	d5f54 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d5d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5d82:	4629      	mov	r1, r5
   d5d84:	6860      	ldr	r0, [r4, #4]
   d5d86:	f000 f8e9 	bl	d5f5c <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5d8a:	21ff      	movs	r1, #255	; 0xff
   d5d8c:	6860      	ldr	r0, [r4, #4]
   d5d8e:	f000 f8e1 	bl	d5f54 <_ZN14SdSpiAltDriver4sendEh>
   d5d92:	21ff      	movs	r1, #255	; 0xff
   d5d94:	6860      	ldr	r0, [r4, #4]
   d5d96:	f000 f8dd 	bl	d5f54 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5d9a:	6860      	ldr	r0, [r4, #4]
   d5d9c:	f000 f8bf 	bl	d5f1e <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d5da0:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d5da2:	f000 001f 	and.w	r0, r0, #31
   d5da6:	2805      	cmp	r0, #5
   d5da8:	d006      	beq.n	d5db8 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5daa:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5dac:	4620      	mov	r0, r4
   d5dae:	7023      	strb	r3, [r4, #0]
   d5db0:	f7ff fe29 	bl	d5a06 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5db4:	2000      	movs	r0, #0
   d5db6:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d5db8:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5dba:	bd38      	pop	{r3, r4, r5, pc}

000d5dbc <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5dbc:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5dbe:	7a83      	ldrb	r3, [r0, #10]
   d5dc0:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d5dc2:	bf18      	it	ne
   d5dc4:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5dc6:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d5dc8:	460a      	mov	r2, r1
   d5dca:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5dcc:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d5dce:	f7ff fe73 	bl	d5ab8 <_ZN9SdSpiCard11cardCommandEhm>
   d5dd2:	4606      	mov	r6, r0
   d5dd4:	b108      	cbz	r0, d5dda <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d5dd6:	2332      	movs	r3, #50	; 0x32
   d5dd8:	e01d      	b.n	d5e16 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d5dda:	462a      	mov	r2, r5
   d5ddc:	21fe      	movs	r1, #254	; 0xfe
   d5dde:	4620      	mov	r0, r4
   d5de0:	f7ff ffc7 	bl	d5d72 <_ZN9SdSpiCard9writeDataEhPKh>
   d5de4:	b1c0      	cbz	r0, d5e18 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5de6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d5dea:	4620      	mov	r0, r4
   d5dec:	f7ff fe4f 	bl	d5a8e <_ZN9SdSpiCard11waitNotBusyEt>
   d5df0:	4605      	mov	r5, r0
   d5df2:	b908      	cbnz	r0, d5df8 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d5df4:	235a      	movs	r3, #90	; 0x5a
   d5df6:	e00e      	b.n	d5e16 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d5df8:	4632      	mov	r2, r6
   d5dfa:	210d      	movs	r1, #13
   d5dfc:	4620      	mov	r0, r4
   d5dfe:	f7ff fe5b 	bl	d5ab8 <_ZN9SdSpiCard11cardCommandEhm>
   d5e02:	b938      	cbnz	r0, d5e14 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5e04:	6860      	ldr	r0, [r4, #4]
   d5e06:	f000 f88a 	bl	d5f1e <_ZN14SdSpiAltDriver7receiveEv>
   d5e0a:	b918      	cbnz	r0, d5e14 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d5e0c:	4620      	mov	r0, r4
   d5e0e:	f7ff fdfa 	bl	d5a06 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5e12:	e005      	b.n	d5e20 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5e14:	2329      	movs	r3, #41	; 0x29
   d5e16:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d5e18:	4620      	mov	r0, r4
   d5e1a:	f7ff fdf4 	bl	d5a06 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5e1e:	2500      	movs	r5, #0
}
   d5e20:	4628      	mov	r0, r5
   d5e22:	bd70      	pop	{r4, r5, r6, pc}

000d5e24 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5e24:	b538      	push	{r3, r4, r5, lr}
   d5e26:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5e28:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5e2c:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5e2e:	f7ff fe2e 	bl	d5a8e <_ZN9SdSpiCard11waitNotBusyEt>
   d5e32:	b910      	cbnz	r0, d5e3a <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d5e34:	235b      	movs	r3, #91	; 0x5b
   d5e36:	7023      	strb	r3, [r4, #0]
   d5e38:	e005      	b.n	d5e46 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d5e3a:	462a      	mov	r2, r5
   d5e3c:	21fc      	movs	r1, #252	; 0xfc
   d5e3e:	4620      	mov	r0, r4
   d5e40:	f7ff ff97 	bl	d5d72 <_ZN9SdSpiCard9writeDataEhPKh>
   d5e44:	b918      	cbnz	r0, d5e4e <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5e46:	4620      	mov	r0, r4
   d5e48:	f7ff fddd 	bl	d5a06 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5e4c:	2000      	movs	r0, #0
}
   d5e4e:	bd38      	pop	{r3, r4, r5, pc}

000d5e50 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5e50:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5e52:	7a83      	ldrb	r3, [r0, #10]
   d5e54:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5e56:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5e58:	bf18      	it	ne
   d5e5a:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5e5c:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5e5e:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5e60:	f7ff fe2a 	bl	d5ab8 <_ZN9SdSpiCard11cardCommandEhm>
   d5e64:	b130      	cbz	r0, d5e74 <_ZN9SdSpiCard10writeStartEm+0x24>
   d5e66:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5e68:	4620      	mov	r0, r4
   d5e6a:	7023      	strb	r3, [r4, #0]
   d5e6c:	f7ff fdcb 	bl	d5a06 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5e70:	2000      	movs	r0, #0
   d5e72:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d5e74:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5e76:	bd10      	pop	{r4, pc}

000d5e78 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5e78:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5e7a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5e7e:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5e80:	f7ff fe05 	bl	d5a8e <_ZN9SdSpiCard11waitNotBusyEt>
   d5e84:	4605      	mov	r5, r0
   d5e86:	b120      	cbz	r0, d5e92 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5e88:	21fd      	movs	r1, #253	; 0xfd
   d5e8a:	6860      	ldr	r0, [r4, #4]
   d5e8c:	f000 f862 	bl	d5f54 <_ZN14SdSpiAltDriver4sendEh>
   d5e90:	e001      	b.n	d5e96 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5e92:	2356      	movs	r3, #86	; 0x56
   d5e94:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d5e96:	4620      	mov	r0, r4
   d5e98:	f7ff fdb5 	bl	d5a06 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5e9c:	4628      	mov	r0, r5
   d5e9e:	bd38      	pop	{r3, r4, r5, pc}

000d5ea0 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d5ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ea2:	4605      	mov	r5, r0
   d5ea4:	4616      	mov	r6, r2
   d5ea6:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d5ea8:	f7ff ffd2 	bl	d5e50 <_ZN9SdSpiCard10writeStartEm>
   d5eac:	b170      	cbz	r0, d5ecc <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d5eae:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5eb0:	42bc      	cmp	r4, r7
   d5eb2:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5eb6:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5eb8:	d004      	beq.n	d5ec4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d5eba:	f7ff ffb3 	bl	d5e24 <_ZN9SdSpiCard9writeDataEPKh>
   d5ebe:	b128      	cbz	r0, d5ecc <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5ec0:	3401      	adds	r4, #1
   d5ec2:	e7f5      	b.n	d5eb0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d5ec4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5ec8:	f7ff bfd6 	b.w	d5e78 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d5ecc:	4628      	mov	r0, r5
   d5ece:	f7ff fd9a 	bl	d5a06 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5ed2:	2000      	movs	r0, #0
   d5ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ed6 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d5ed6:	f000 bba9 	b.w	d662c <HAL_Pin_Map>

000d5eda <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d5eda:	f000 bba7 	b.w	d662c <HAL_Pin_Map>

000d5ede <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d5ede:	f000 bba5 	b.w	d662c <HAL_Pin_Map>
	...

000d5ee4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d5ee4:	4b01      	ldr	r3, [pc, #4]	; (d5eec <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d5ee6:	2201      	movs	r2, #1
   d5ee8:	701a      	strb	r2, [r3, #0]
   d5eea:	4770      	bx	lr
   d5eec:	2003e3d8 	.word	0x2003e3d8

000d5ef0 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d5ef0:	1d01      	adds	r1, r0, #4
   d5ef2:	6800      	ldr	r0, [r0, #0]
   d5ef4:	f000 be3e 	b.w	d6b74 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d5ef8 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d5ef8:	b510      	push	{r4, lr}
   d5efa:	4604      	mov	r4, r0
  m_csPin = csPin;
   d5efc:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d5efe:	6800      	ldr	r0, [r0, #0]
   d5f00:	f000 fe0e 	bl	d6b20 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d5f04:	7d20      	ldrb	r0, [r4, #20]
   d5f06:	2101      	movs	r1, #1
   d5f08:	f001 fc02 	bl	d7710 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d5f0c:	7d20      	ldrb	r0, [r4, #20]
   d5f0e:	2101      	movs	r1, #1
}
   d5f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d5f14:	f001 bc0d 	b.w	d7732 <digitalWrite>

000d5f18 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d5f18:	6800      	ldr	r0, [r0, #0]
   d5f1a:	f000 be12 	b.w	d6b42 <_ZN8SPIClass14endTransactionEv>

000d5f1e <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d5f1e:	21ff      	movs	r1, #255	; 0xff
   d5f20:	6800      	ldr	r0, [r0, #0]
   d5f22:	f000 be97 	b.w	d6c54 <_ZN8SPIClass8transferEh>
	...

000d5f28 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d5f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5f2a:	4b08      	ldr	r3, [pc, #32]	; (d5f4c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d5f2c:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5f2e:	2500      	movs	r5, #0
   d5f30:	4c07      	ldr	r4, [pc, #28]	; (d5f50 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5f32:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5f34:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5f36:	4613      	mov	r3, r2
   d5f38:	460a      	mov	r2, r1
   d5f3a:	4629      	mov	r1, r5
   d5f3c:	f000 fe90 	bl	d6c60 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d5f40:	7823      	ldrb	r3, [r4, #0]
   d5f42:	2b00      	cmp	r3, #0
   d5f44:	d0fc      	beq.n	d5f40 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d5f46:	2000      	movs	r0, #0
   d5f48:	b003      	add	sp, #12
   d5f4a:	bd30      	pop	{r4, r5, pc}
   d5f4c:	000d5ee5 	.word	0x000d5ee5
   d5f50:	2003e3d8 	.word	0x2003e3d8

000d5f54 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d5f54:	6800      	ldr	r0, [r0, #0]
   d5f56:	f000 be7d 	b.w	d6c54 <_ZN8SPIClass8transferEh>
	...

000d5f5c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d5f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5f5e:	4b07      	ldr	r3, [pc, #28]	; (d5f7c <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d5f60:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5f62:	2500      	movs	r5, #0
   d5f64:	4c06      	ldr	r4, [pc, #24]	; (d5f80 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5f66:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5f68:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5f6a:	4613      	mov	r3, r2
   d5f6c:	462a      	mov	r2, r5
   d5f6e:	f000 fe77 	bl	d6c60 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d5f72:	7823      	ldrb	r3, [r4, #0]
   d5f74:	2b00      	cmp	r3, #0
   d5f76:	d0fc      	beq.n	d5f72 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d5f78:	b003      	add	sp, #12
   d5f7a:	bd30      	pop	{r4, r5, pc}
   d5f7c:	000d5ee5 	.word	0x000d5ee5
   d5f80:	2003e3d8 	.word	0x2003e3d8

000d5f84 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d5f84:	f000 bb52 	b.w	d662c <HAL_Pin_Map>

000d5f88 <_ZN11TinyGPSPlusC1Ev>:
   const RawDegrees &rawLat()     { updated = false; return rawLatData; }
   const RawDegrees &rawLng()     { updated = false; return rawLngData; }
   double lat();
   double lng();

   TinyGPSLocation() : valid(false), updated(false)
   d5f88:	2200      	movs	r2, #0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d5f8a:	2102      	movs	r1, #2
   d5f8c:	7002      	strb	r2, [r0, #0]
   d5f8e:	7042      	strb	r2, [r0, #1]
{
   uint16_t deg;
   uint32_t billionths;
   bool negative;
public:
   RawDegrees() : deg(0), billionths(0), negative(false)
   d5f90:	8082      	strh	r2, [r0, #4]
   d5f92:	6082      	str	r2, [r0, #8]
   d5f94:	7302      	strb	r2, [r0, #12]
   d5f96:	8202      	strh	r2, [r0, #16]
   d5f98:	6142      	str	r2, [r0, #20]
   d5f9a:	7602      	strb	r2, [r0, #24]
   d5f9c:	8382      	strh	r2, [r0, #28]
   d5f9e:	6202      	str	r2, [r0, #32]
   d5fa0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d5fa4:	8502      	strh	r2, [r0, #40]	; 0x28
   d5fa6:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5fa8:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   uint32_t value()           { updated = false; return date; }
   uint16_t year();
   uint8_t month();
   uint8_t day();

   TinyGPSDate() : valid(false), updated(false), date(0)
   d5fac:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
   d5fb0:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
   d5fb4:	63c2      	str	r2, [r0, #60]	; 0x3c
   uint8_t hour();
   uint8_t minute();
   uint8_t second();
   uint8_t centisecond();

   TinyGPSTime() : valid(false), updated(false), time(0)
   d5fb6:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
   d5fba:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
   d5fbe:	64c2      	str	r2, [r0, #76]	; 0x4c
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d5fc0:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
   d5fc4:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
   d5fc8:	6602      	str	r2, [r0, #96]	; 0x60
   d5fca:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
   d5fce:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
   d5fd2:	6702      	str	r2, [r0, #112]	; 0x70
   d5fd4:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
   d5fd8:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
   d5fdc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }

   TinyGPSInteger() : valid(false), updated(false), val(0)
   d5fe0:	f880 2088 	strb.w	r2, [r0, #136]	; 0x88
   d5fe4:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
   d5fe8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d5fec:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
   d5ff0:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
   d5ff4:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d5ff8:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
   d5ffc:	f880 20a9 	strb.w	r2, [r0, #169]	; 0xa9
   d6000:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
   d6004:	f880 20ba 	strb.w	r2, [r0, #186]	; 0xba
   d6008:	f880 20bb 	strb.w	r2, [r0, #187]	; 0xbb
   d600c:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
   d6010:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
   d6014:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   d6018:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
   d601c:	f8c0 20cc 	str.w	r2, [r0, #204]	; 0xcc
   d6020:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   d6024:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
{
  term[0] = '\0';
   d6028:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
   d602c:	4770      	bx	lr

000d602e <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d602e:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d6032:	2b05      	cmp	r3, #5
   d6034:	d802      	bhi.n	d603c <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d6036:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d603a:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d603c:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d6040:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d6042:	bf94      	ite	ls
   d6044:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d6048:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d604c:	4770      	bx	lr

000d604e <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d604e:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d6050:	7805      	ldrb	r5, [r0, #0]
}

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d6052:	4604      	mov	r4, r0
  bool negative = *term == '-';
  if (negative) ++term;
   d6054:	2d2d      	cmp	r5, #45	; 0x2d
   d6056:	bf08      	it	eq
   d6058:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d605a:	4620      	mov	r0, r4
   d605c:	f002 f95a 	bl	d8314 <atol>
   d6060:	2364      	movs	r3, #100	; 0x64
   d6062:	4358      	muls	r0, r3
   d6064:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d6066:	f814 3b01 	ldrb.w	r3, [r4], #1
   d606a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d606e:	2909      	cmp	r1, #9
   d6070:	d9f8      	bls.n	d6064 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d6072:	2b2e      	cmp	r3, #46	; 0x2e
   d6074:	d10b      	bne.n	d608e <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d6076:	7853      	ldrb	r3, [r2, #1]
   d6078:	3b30      	subs	r3, #48	; 0x30
   d607a:	2b09      	cmp	r3, #9
   d607c:	d807      	bhi.n	d608e <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d607e:	210a      	movs	r1, #10
   d6080:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d6084:	7893      	ldrb	r3, [r2, #2]
   d6086:	3b30      	subs	r3, #48	; 0x30
   d6088:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d608a:	bf98      	it	ls
   d608c:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d608e:	2d2d      	cmp	r5, #45	; 0x2d
   d6090:	bf08      	it	eq
   d6092:	4240      	negeq	r0, r0
}
   d6094:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6098 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d6098:	b538      	push	{r3, r4, r5, lr}
   d609a:	4604      	mov	r4, r0
   d609c:	460d      	mov	r5, r1
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d609e:	f002 f939 	bl	d8314 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d60a2:	2364      	movs	r3, #100	; 0x64
   d60a4:	fbb0 f2f3 	udiv	r2, r0, r3
   d60a8:	fb03 0012 	mls	r0, r3, r2, r0
   d60ac:	4b11      	ldr	r3, [pc, #68]	; (d60f4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d60ae:	802a      	strh	r2, [r5, #0]
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
  uint32_t leftOfDecimal = (uint32_t)atol(term);
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d60b0:	4343      	muls	r3, r0
   d60b2:	4620      	mov	r0, r4

  deg.deg = (int16_t)(leftOfDecimal / 100);

  while (isdigit(*term))
   d60b4:	7802      	ldrb	r2, [r0, #0]
   d60b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   d60ba:	2909      	cmp	r1, #9
   d60bc:	4604      	mov	r4, r0
   d60be:	f100 0001 	add.w	r0, r0, #1
   d60c2:	d9f7      	bls.n	d60b4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d60c4:	2a2e      	cmp	r2, #46	; 0x2e
   d60c6:	d10b      	bne.n	d60e0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
   d60c8:	490a      	ldr	r1, [pc, #40]	; (d60f4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d60ca:	200a      	movs	r0, #10

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d60cc:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   d60d0:	3a30      	subs	r2, #48	; 0x30
   d60d2:	2a09      	cmp	r2, #9
   d60d4:	d804      	bhi.n	d60e0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
    {
      multiplier /= 10;
   d60d6:	fbb1 f1f0 	udiv	r1, r1, r0
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d60da:	fb01 3302 	mla	r3, r1, r2, r3

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d60de:	e7f5      	b.n	d60cc <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    {
      multiplier /= 10;
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d60e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d60e4:	3301      	adds	r3, #1
   d60e6:	2203      	movs	r2, #3
   d60e8:	fbb3 f3f2 	udiv	r3, r3, r2
   d60ec:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d60ee:	2300      	movs	r3, #0
   d60f0:	722b      	strb	r3, [r5, #8]
   d60f2:	bd38      	pop	{r3, r4, r5, pc}
   d60f4:	00989680 	.word	0x00989680

000d60f8 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d60f8:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d60fa:	4603      	mov	r3, r0
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d60fc:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d60fe:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d6102:	6042      	str	r2, [r0, #4]
   d6104:	685a      	ldr	r2, [r3, #4]
   d6106:	6082      	str	r2, [r0, #8]
   d6108:	7a1b      	ldrb	r3, [r3, #8]
   d610a:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d610c:	4603      	mov	r3, r0
   d610e:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d6112:	6102      	str	r2, [r0, #16]
   d6114:	685a      	ldr	r2, [r3, #4]
   d6116:	6142      	str	r2, [r0, #20]
   d6118:	7a1b      	ldrb	r3, [r3, #8]
   d611a:	7603      	strb	r3, [r0, #24]
   d611c:	f000 fb16 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6120:	2301      	movs	r3, #1

void TinyGPSLocation::commit()
{
   rawLatData = rawNewLatData;
   rawLngData = rawNewLngData;
   lastCommitTime = millis();
   d6122:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d6124:	7063      	strb	r3, [r4, #1]
   d6126:	7023      	strb	r3, [r4, #0]
   d6128:	bd10      	pop	{r4, pc}
   d612a:	0000      	movs	r0, r0
   d612c:	0000      	movs	r0, r0
	...

000d6130 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d6130:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d6132:	2300      	movs	r3, #0
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d6134:	4604      	mov	r4, r0
   updated = false;
   d6136:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d6138:	6880      	ldr	r0, [r0, #8]
   d613a:	f001 fe13 	bl	d7d64 <__aeabi_ui2d>
   d613e:	a30e      	add	r3, pc, #56	; (adr r3, d6178 <_ZN15TinyGPSLocation3latEv+0x48>)
   d6140:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6144:	f001 ffae 	bl	d80a4 <__aeabi_ddiv>
   d6148:	4606      	mov	r6, r0
   d614a:	88a0      	ldrh	r0, [r4, #4]
   d614c:	460f      	mov	r7, r1
   d614e:	f001 fe19 	bl	d7d84 <__aeabi_i2d>
   d6152:	460b      	mov	r3, r1
   d6154:	4602      	mov	r2, r0
   d6156:	4639      	mov	r1, r7
   d6158:	4630      	mov	r0, r6
   d615a:	f001 fcc7 	bl	d7aec <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d615e:	7b23      	ldrb	r3, [r4, #12]
   d6160:	b11b      	cbz	r3, d616a <_ZN15TinyGPSLocation3latEv+0x3a>
   d6162:	4602      	mov	r2, r0
   d6164:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d6168:	e001      	b.n	d616e <_ZN15TinyGPSLocation3latEv+0x3e>
   d616a:	4602      	mov	r2, r0
   d616c:	460b      	mov	r3, r1
}
   d616e:	ec43 2b10 	vmov	d0, r2, r3
   d6172:	bdd0      	pop	{r4, r6, r7, pc}
   d6174:	f3af 8000 	nop.w
   d6178:	00000000 	.word	0x00000000
   d617c:	41cdcd65 	.word	0x41cdcd65

000d6180 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d6180:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d6182:	2300      	movs	r3, #0
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   return rawLatData.negative ? -ret : ret;
}

double TinyGPSLocation::lng()
{
   d6184:	4604      	mov	r4, r0
   updated = false;
   d6186:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d6188:	6940      	ldr	r0, [r0, #20]
   d618a:	f001 fdeb 	bl	d7d64 <__aeabi_ui2d>
   d618e:	a30e      	add	r3, pc, #56	; (adr r3, d61c8 <_ZN15TinyGPSLocation3lngEv+0x48>)
   d6190:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6194:	f001 ff86 	bl	d80a4 <__aeabi_ddiv>
   d6198:	4606      	mov	r6, r0
   d619a:	8a20      	ldrh	r0, [r4, #16]
   d619c:	460f      	mov	r7, r1
   d619e:	f001 fdf1 	bl	d7d84 <__aeabi_i2d>
   d61a2:	460b      	mov	r3, r1
   d61a4:	4602      	mov	r2, r0
   d61a6:	4639      	mov	r1, r7
   d61a8:	4630      	mov	r0, r6
   d61aa:	f001 fc9f 	bl	d7aec <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d61ae:	7e23      	ldrb	r3, [r4, #24]
   d61b0:	b11b      	cbz	r3, d61ba <_ZN15TinyGPSLocation3lngEv+0x3a>
   d61b2:	4602      	mov	r2, r0
   d61b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d61b8:	e001      	b.n	d61be <_ZN15TinyGPSLocation3lngEv+0x3e>
   d61ba:	4602      	mov	r2, r0
   d61bc:	460b      	mov	r3, r1
}
   d61be:	ec43 2b10 	vmov	d0, r2, r3
   d61c2:	bdd0      	pop	{r4, r6, r7, pc}
   d61c4:	f3af 8000 	nop.w
   d61c8:	00000000 	.word	0x00000000
   d61cc:	41cdcd65 	.word	0x41cdcd65

000d61d0 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d61d0:	b510      	push	{r4, lr}
   date = newDate;
   d61d2:	6883      	ldr	r3, [r0, #8]
   d61d4:	6043      	str	r3, [r0, #4]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
   d61d6:	4604      	mov	r4, r0
   d61d8:	f000 fab8 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
   date = newDate;
   lastCommitTime = millis();
   valid = updated = true;
   d61dc:	2301      	movs	r3, #1
}

void TinyGPSDate::commit()
{
   date = newDate;
   lastCommitTime = millis();
   d61de:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d61e0:	7063      	strb	r3, [r4, #1]
   d61e2:	7023      	strb	r3, [r4, #0]
   d61e4:	bd10      	pop	{r4, pc}

000d61e6 <_ZN11TinyGPSTime6commitEv>:
}

void TinyGPSTime::commit()
{
   d61e6:	b510      	push	{r4, lr}
   time = newTime;
   d61e8:	6883      	ldr	r3, [r0, #8]
   d61ea:	6043      	str	r3, [r0, #4]
   lastCommitTime = millis();
   valid = updated = true;
}

void TinyGPSTime::commit()
{
   d61ec:	4604      	mov	r4, r0
   d61ee:	f000 faad 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
   time = newTime;
   lastCommitTime = millis();
   valid = updated = true;
   d61f2:	2301      	movs	r3, #1
}

void TinyGPSTime::commit()
{
   time = newTime;
   lastCommitTime = millis();
   d61f4:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d61f6:	7063      	strb	r3, [r4, #1]
   d61f8:	7023      	strb	r3, [r4, #0]
   d61fa:	bd10      	pop	{r4, pc}

000d61fc <_ZN11TinyGPSTime7setTimeEPKc>:
}

void TinyGPSTime::setTime(const char *term)
{
   d61fc:	b510      	push	{r4, lr}
   d61fe:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d6200:	4608      	mov	r0, r1
   d6202:	f7ff ff24 	bl	d604e <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d6206:	60a0      	str	r0, [r4, #8]
   d6208:	bd10      	pop	{r4, pc}

000d620a <_ZN11TinyGPSDate7setDateEPKc>:
}

void TinyGPSDate::setDate(const char *term)
{
   d620a:	b510      	push	{r4, lr}
   d620c:	4604      	mov	r4, r0
   newDate = atol(term);
   d620e:	4608      	mov	r0, r1
   d6210:	f002 f880 	bl	d8314 <atol>
   d6214:	60a0      	str	r0, [r4, #8]
   d6216:	bd10      	pop	{r4, pc}

000d6218 <_ZN11TinyGPSDate4yearEv>:
}

uint16_t TinyGPSDate::year()
{
   updated = false;
   d6218:	2300      	movs	r3, #0
   d621a:	7043      	strb	r3, [r0, #1]
   uint16_t year = date % 100;
   return year + 2000;
   d621c:	6840      	ldr	r0, [r0, #4]
   d621e:	2264      	movs	r2, #100	; 0x64
   d6220:	fbb0 f3f2 	udiv	r3, r0, r2
   d6224:	fb02 0013 	mls	r0, r2, r3, r0
   d6228:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
}
   d622c:	b280      	uxth	r0, r0
   d622e:	4770      	bx	lr

000d6230 <_ZN11TinyGPSDate5monthEv>:

uint8_t TinyGPSDate::month()
{
   updated = false;
   d6230:	2300      	movs	r3, #0
   d6232:	7043      	strb	r3, [r0, #1]
   return (date / 100) % 100;
   d6234:	6843      	ldr	r3, [r0, #4]
   d6236:	2064      	movs	r0, #100	; 0x64
   d6238:	fbb3 f3f0 	udiv	r3, r3, r0
   d623c:	fbb3 f2f0 	udiv	r2, r3, r0
   d6240:	fb00 3012 	mls	r0, r0, r2, r3
}
   d6244:	b2c0      	uxtb	r0, r0
   d6246:	4770      	bx	lr

000d6248 <_ZN11TinyGPSDate3dayEv>:

uint8_t TinyGPSDate::day()
{
   updated = false;
   d6248:	2300      	movs	r3, #0
   d624a:	7043      	strb	r3, [r0, #1]
   return date / 10000;
   d624c:	6843      	ldr	r3, [r0, #4]
   d624e:	f242 7010 	movw	r0, #10000	; 0x2710
   d6252:	fbb3 f0f0 	udiv	r0, r3, r0
}
   d6256:	b2c0      	uxtb	r0, r0
   d6258:	4770      	bx	lr
	...

000d625c <_ZN11TinyGPSTime4hourEv>:

uint8_t TinyGPSTime::hour()
{
   updated = false;
   d625c:	2300      	movs	r3, #0
   d625e:	7043      	strb	r3, [r0, #1]
   return time / 1000000;
   d6260:	6843      	ldr	r3, [r0, #4]
   d6262:	4802      	ldr	r0, [pc, #8]	; (d626c <_ZN11TinyGPSTime4hourEv+0x10>)
   d6264:	fbb3 f0f0 	udiv	r0, r3, r0
}
   d6268:	b2c0      	uxtb	r0, r0
   d626a:	4770      	bx	lr
   d626c:	000f4240 	.word	0x000f4240

000d6270 <_ZN11TinyGPSTime6minuteEv>:

uint8_t TinyGPSTime::minute()
{
   updated = false;
   d6270:	2300      	movs	r3, #0
   d6272:	7043      	strb	r3, [r0, #1]
   return (time / 10000) % 100;
   d6274:	6843      	ldr	r3, [r0, #4]
   d6276:	f242 7010 	movw	r0, #10000	; 0x2710
   d627a:	fbb3 f3f0 	udiv	r3, r3, r0
   d627e:	2064      	movs	r0, #100	; 0x64
   d6280:	fbb3 f2f0 	udiv	r2, r3, r0
   d6284:	fb00 3012 	mls	r0, r0, r2, r3
}
   d6288:	b2c0      	uxtb	r0, r0
   d628a:	4770      	bx	lr

000d628c <_ZN11TinyGPSTime6secondEv>:

uint8_t TinyGPSTime::second()
{
   updated = false;
   d628c:	2300      	movs	r3, #0
   d628e:	7043      	strb	r3, [r0, #1]
   return (time / 100) % 100;
   d6290:	6843      	ldr	r3, [r0, #4]
   d6292:	2064      	movs	r0, #100	; 0x64
   d6294:	fbb3 f3f0 	udiv	r3, r3, r0
   d6298:	fbb3 f2f0 	udiv	r2, r3, r0
   d629c:	fb00 3012 	mls	r0, r0, r2, r3
}
   d62a0:	b2c0      	uxtb	r0, r0
   d62a2:	4770      	bx	lr

000d62a4 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d62a4:	b510      	push	{r4, lr}
   val = newval;
   d62a6:	68c3      	ldr	r3, [r0, #12]
   d62a8:	6083      	str	r3, [r0, #8]
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d62aa:	4604      	mov	r4, r0
   d62ac:	f000 fa4e 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d62b0:	2301      	movs	r3, #1
}

void TinyGPSDecimal::commit()
{
   val = newval;
   lastCommitTime = millis();
   d62b2:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d62b4:	7063      	strb	r3, [r4, #1]
   d62b6:	7023      	strb	r3, [r4, #0]
   d62b8:	bd10      	pop	{r4, pc}

000d62ba <_ZN14TinyGPSDecimal3setEPKc>:
}

void TinyGPSDecimal::set(const char *term)
{
   d62ba:	b510      	push	{r4, lr}
   d62bc:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d62be:	4608      	mov	r0, r1
   d62c0:	f7ff fec5 	bl	d604e <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d62c4:	60e0      	str	r0, [r4, #12]
   d62c6:	bd10      	pop	{r4, pc}

000d62c8 <_ZN14TinyGPSInteger6commitEv>:
}

void TinyGPSInteger::commit()
{
   d62c8:	b510      	push	{r4, lr}
   val = newval;
   d62ca:	68c3      	ldr	r3, [r0, #12]
   d62cc:	6083      	str	r3, [r0, #8]
{
   newval = TinyGPSPlus::parseDecimal(term);
}

void TinyGPSInteger::commit()
{
   d62ce:	4604      	mov	r4, r0
   d62d0:	f000 fa3c 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d62d4:	2301      	movs	r3, #1
}

void TinyGPSInteger::commit()
{
   val = newval;
   lastCommitTime = millis();
   d62d6:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d62d8:	7063      	strb	r3, [r4, #1]
   d62da:	7023      	strb	r3, [r4, #0]
   d62dc:	bd10      	pop	{r4, pc}

000d62de <_ZN14TinyGPSInteger3setEPKc>:
}

void TinyGPSInteger::set(const char *term)
{
   d62de:	b510      	push	{r4, lr}
   d62e0:	4604      	mov	r4, r0
   newval = atol(term);
   d62e2:	4608      	mov	r0, r1
   d62e4:	f002 f816 	bl	d8314 <atol>
   d62e8:	60e0      	str	r0, [r4, #12]
   d62ea:	bd10      	pop	{r4, pc}

000d62ec <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d62ec:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d62ee:	4601      	mov	r1, r0
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d62f0:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d62f2:	3010      	adds	r0, #16
   d62f4:	f002 f8ae 	bl	d8454 <strcpy>
   d62f8:	f000 fa28 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d62fc:	2301      	movs	r3, #1
}

void TinyGPSCustom::commit()
{
   strcpy(this->buffer, this->stagingBuffer);
   lastCommitTime = millis();
   d62fe:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d6300:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   d6304:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d6308:	bd10      	pop	{r4, pc}

000d630a <_ZN13TinyGPSCustom3setEPKc>:
}

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d630a:	2210      	movs	r2, #16
   d630c:	f002 b8b2 	b.w	d8474 <strncpy>

000d6310 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d6310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d6312:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d6316:	4604      	mov	r4, r0
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d6318:	2d00      	cmp	r5, #0
   d631a:	d067      	beq.n	d63ec <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xdc>
  {
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d631c:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
   d6320:	f7ff fe85 	bl	d602e <_ZN11TinyGPSPlus7fromHexEc>
   d6324:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
   d6328:	4602      	mov	r2, r0
   d632a:	4620      	mov	r0, r4
   d632c:	f7ff fe7f 	bl	d602e <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d6330:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   d6334:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   d6338:	b2c0      	uxtb	r0, r0
   d633a:	4283      	cmp	r3, r0
   d633c:	d14f      	bne.n	d63de <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xce>
    {
      passedChecksumCount++;
   d633e:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   d6342:	3301      	adds	r3, #1
   d6344:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
   d6348:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d634c:	b123      	cbz	r3, d6358 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x48>
        ++sentencesWithFixCount;
   d634e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d6352:	3301      	adds	r3, #1
   d6354:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

      switch(curSentenceType)
   d6358:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   d635c:	b1b3      	cbz	r3, d638c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7c>
   d635e:	2b01      	cmp	r3, #1
   d6360:	d12a      	bne.n	d63b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa8>
      {
      case GPS_SENTENCE_GPRMC:
        date.commit();
   d6362:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d6366:	f7ff ff33 	bl	d61d0 <_ZN11TinyGPSDate6commitEv>
        time.commit();
   d636a:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d636e:	f7ff ff3a 	bl	d61e6 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d6372:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d6376:	b1fb      	cbz	r3, d63b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa8>
        {
           location.commit();
   d6378:	4620      	mov	r0, r4
   d637a:	f7ff febd 	bl	d60f8 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
   d637e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d6382:	f7ff ff8f 	bl	d62a4 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
   d6386:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d638a:	e013      	b.n	d63b4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa4>
        }
        break;
      case GPS_SENTENCE_GPGGA:
        time.commit();
   d638c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d6390:	f7ff ff29 	bl	d61e6 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d6394:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d6398:	b133      	cbz	r3, d63a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x98>
        {
          location.commit();
   d639a:	4620      	mov	r0, r4
   d639c:	f7ff feac 	bl	d60f8 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
   d63a0:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d63a4:	f7ff ff7e 	bl	d62a4 <_ZN14TinyGPSDecimal6commitEv>
        }
        satellites.commit();
   d63a8:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d63ac:	f7ff ff8c 	bl	d62c8 <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
   d63b0:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d63b4:	f7ff ff76 	bl	d62a4 <_ZN14TinyGPSDecimal6commitEv>
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d63b8:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d63bc:	2e00      	cmp	r6, #0
   d63be:	f000 80c5 	beq.w	d654c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d63c2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d63c6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d63c8:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d63ca:	f002 f839 	bl	d8440 <strcmp>
   d63ce:	2800      	cmp	r0, #0
   d63d0:	f040 80bc 	bne.w	d654c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
         p->commit();
   d63d4:	4630      	mov	r0, r6
   d63d6:	f7ff ff89 	bl	d62ec <_ZN13TinyGPSCustom6commitEv>
        hdop.commit();
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d63da:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d63dc:	e7ee      	b.n	d63bc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xac>
      return true;
    }

    else
    {
      ++failedChecksumCount;
   d63de:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   d63e2:	3301      	adds	r3, #1
   d63e4:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    }

    return false;
   d63e8:	2500      	movs	r5, #0
   d63ea:	e0af      	b.n	d654c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0)
   d63ec:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
   d63f0:	bb2a      	cbnz	r2, d643e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x12e>
  {
    if (!strcmp(term, _GPRMCterm))
   d63f2:	f100 07aa 	add.w	r7, r0, #170	; 0xaa
   d63f6:	4956      	ldr	r1, [pc, #344]	; (d6550 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>)
   d63f8:	4638      	mov	r0, r7
   d63fa:	f002 f821 	bl	d8440 <strcmp>
   d63fe:	b908      	cbnz	r0, d6404 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d6400:	2301      	movs	r3, #1
   d6402:	e008      	b.n	d6416 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x106>
    else if (!strcmp(term, _GPGGAterm))
   d6404:	4953      	ldr	r1, [pc, #332]	; (d6554 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x244>)
   d6406:	4638      	mov	r0, r7
   d6408:	f002 f81a 	bl	d8440 <strcmp>
   d640c:	b910      	cbnz	r0, d6414 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x104>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d640e:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
   d6412:	e002      	b.n	d641a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10a>
    else
      curSentenceType = GPS_SENTENCE_OTHER;
   d6414:	2302      	movs	r3, #2
   d6416:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d641a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   d641e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d6422:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d6426:	2e00      	cmp	r6, #0
   d6428:	f000 8090 	beq.w	d654c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d642c:	4639      	mov	r1, r7
   d642e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d6430:	f002 f806 	bl	d8440 <strcmp>
   d6434:	2800      	cmp	r0, #0
   d6436:	f280 8085 	bge.w	d6544 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x234>
   d643a:	6b33      	ldr	r3, [r6, #48]	; 0x30
   d643c:	e7ef      	b.n	d641e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10e>
       customCandidates = NULL;

    return false;
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d643e:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
   d6442:	2902      	cmp	r1, #2
   d6444:	d066      	beq.n	d6514 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   d6446:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
   d644a:	2b00      	cmp	r3, #0
   d644c:	d062      	beq.n	d6514 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    switch(COMBINE(curSentenceType, curTermNumber))
   d644e:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d6452:	3a01      	subs	r2, #1
   d6454:	2a28      	cmp	r2, #40	; 0x28
   d6456:	d85d      	bhi.n	d6514 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   d6458:	e8df f002 	tbb	[pc, r2]
   d645c:	2a232015 	.word	0x2a232015
   d6460:	534d4631 	.word	0x534d4631
   d6464:	5c5c5c57 	.word	0x5c5c5c57
   d6468:	5c5c5c5c 	.word	0x5c5c5c5c
   d646c:	5c5c5c5c 	.word	0x5c5c5c5c
   d6470:	5c5c5c5c 	.word	0x5c5c5c5c
   d6474:	5c5c5c5c 	.word	0x5c5c5c5c
   d6478:	5c5c5c5c 	.word	0x5c5c5c5c
   d647c:	23201b15 	.word	0x23201b15
   d6480:	3c38312a 	.word	0x3c38312a
   d6484:	40          	.byte	0x40
   d6485:	00          	.byte	0x00
  {
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
      time.setTime(term);
   d6486:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d648a:	3048      	adds	r0, #72	; 0x48
   d648c:	f7ff feb6 	bl	d61fc <_ZN11TinyGPSTime7setTimeEPKc>
      break;
   d6490:	e040      	b.n	d6514 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      sentenceHasFix = term[0] == 'A';
   d6492:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d6496:	4243      	negs	r3, r0
   d6498:	4143      	adcs	r3, r0
   d649a:	e029      	b.n	d64f0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1e0>
   valid = updated = true;
}

void TinyGPSLocation::setLatitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d649c:	f100 011c 	add.w	r1, r0, #28
   d64a0:	e008      	b.n	d64b4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
      location.setLatitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
      location.rawNewLatData.negative = term[0] == 'S';
   d64a2:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d64a6:	424b      	negs	r3, r1
   d64a8:	414b      	adcs	r3, r1
   d64aa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      break;
   d64ae:	e031      	b.n	d6514 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
}

void TinyGPSLocation::setLongitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d64b0:	f100 0128 	add.w	r1, r0, #40	; 0x28
   d64b4:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
   d64b8:	f7ff fdee 	bl	d6098 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
   d64bc:	e02a      	b.n	d6514 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
      location.setLongitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
      location.rawNewLngData.negative = term[0] == 'W';
   d64be:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d64c2:	4253      	negs	r3, r2
   d64c4:	4153      	adcs	r3, r2
   d64c6:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
      break;
   d64ca:	e023      	b.n	d6514 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
      speed.set(term);
   d64cc:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d64d0:	3058      	adds	r0, #88	; 0x58
   d64d2:	e01d      	b.n	d6510 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
      course.set(term);
   d64d4:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d64d8:	3068      	adds	r0, #104	; 0x68
   d64da:	e019      	b.n	d6510 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
      date.setDate(term);
   d64dc:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d64e0:	3038      	adds	r0, #56	; 0x38
   d64e2:	f7ff fe92 	bl	d620a <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d64e6:	e015      	b.n	d6514 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      sentenceHasFix = term[0] > '0';
   d64e8:	2b30      	cmp	r3, #48	; 0x30
   d64ea:	bf94      	ite	ls
   d64ec:	2300      	movls	r3, #0
   d64ee:	2301      	movhi	r3, #1
   d64f0:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
   d64f4:	e00e      	b.n	d6514 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
      satellites.set(term);
   d64f6:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d64fa:	3088      	adds	r0, #136	; 0x88
   d64fc:	f7ff feef 	bl	d62de <_ZN14TinyGPSInteger3setEPKc>
      break;
   d6500:	e008      	b.n	d6514 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
      hdop.set(term);
   d6502:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d6506:	3098      	adds	r0, #152	; 0x98
   d6508:	e002      	b.n	d6510 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
      altitude.set(term);
   d650a:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d650e:	3078      	adds	r0, #120	; 0x78
   d6510:	f7ff fed3 	bl	d62ba <_ZN14TinyGPSDecimal3setEPKc>
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d6514:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
    if (p->termNumber == curTermNumber)
         p->set(term);
   d6518:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
      altitude.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d651c:	b1b6      	cbz	r6, d654c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d651e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d6522:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d6524:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d6526:	f001 ff8b 	bl	d8440 <strcmp>
   d652a:	b978      	cbnz	r0, d654c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d652c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d652e:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d6532:	429a      	cmp	r2, r3
   d6534:	dc0a      	bgt.n	d654c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
    if (p->termNumber == curTermNumber)
   d6536:	d103      	bne.n	d6540 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x230>
         p->set(term);
   d6538:	4639      	mov	r1, r7
   d653a:	4630      	mov	r0, r6
   d653c:	f7ff fee5 	bl	d630a <_ZN13TinyGPSCustom3setEPKc>
      altitude.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d6540:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d6542:	e7eb      	b.n	d651c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x20c>
    else
      curSentenceType = GPS_SENTENCE_OTHER;

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d6544:	d002      	beq.n	d654c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
       customCandidates = NULL;
   d6546:	2300      	movs	r3, #0
   d6548:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    if (p->termNumber == curTermNumber)
         p->set(term);

  return false;
}
   d654c:	4628      	mov	r0, r5
   d654e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6550:	000d88b9 	.word	0x000d88b9
   d6554:	000d88bf 	.word	0x000d88bf

000d6558 <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d6558:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d655a:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8

  switch(c)
   d655e:	2924      	cmp	r1, #36	; 0x24
// public methods
//

bool TinyGPSPlus::encode(char c)
{
  ++encodedCharCount;
   d6560:	f103 0301 	add.w	r3, r3, #1
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d6564:	4604      	mov	r4, r0
   d6566:	460d      	mov	r5, r1
  ++encodedCharCount;
   d6568:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

  switch(c)
   d656c:	d02a      	beq.n	d65c4 <_ZN11TinyGPSPlus6encodeEc+0x6c>
   d656e:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   d6572:	d804      	bhi.n	d657e <_ZN11TinyGPSPlus6encodeEc+0x26>
   d6574:	290a      	cmp	r1, #10
   d6576:	d00c      	beq.n	d6592 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d6578:	290d      	cmp	r1, #13
   d657a:	d132      	bne.n	d65e2 <_ZN11TinyGPSPlus6encodeEc+0x8a>
   d657c:	e009      	b.n	d6592 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d657e:	292a      	cmp	r1, #42	; 0x2a
   d6580:	d007      	beq.n	d6592 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d6582:	292c      	cmp	r1, #44	; 0x2c
   d6584:	d12d      	bne.n	d65e2 <_ZN11TinyGPSPlus6encodeEc+0x8a>
  {
  case ',': // term terminators
    parity ^= (uint8_t)c;
   d6586:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
   d658a:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d658e:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
  case '\r':
  case '\n':
  case '*':
    {
      bool isValidSentence = false;
      if (curTermOffset < sizeof(term))
   d6592:	2b0e      	cmp	r3, #14
   d6594:	f04f 0000 	mov.w	r0, #0
   d6598:	d805      	bhi.n	d65a6 <_ZN11TinyGPSPlus6encodeEc+0x4e>
      {
        term[curTermOffset] = 0;
   d659a:	4423      	add	r3, r4
   d659c:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
   d65a0:	4620      	mov	r0, r4
   d65a2:	f7ff feb5 	bl	d6310 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      }
      ++curTermNumber;
   d65a6:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d65aa:	3301      	adds	r3, #1
   d65ac:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
   d65b0:	2300      	movs	r3, #0
   d65b2:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
   d65b6:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d65ba:	425d      	negs	r5, r3
   d65bc:	415d      	adcs	r5, r3
   d65be:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
      return isValidSentence;
   d65c2:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d65c4:	2000      	movs	r0, #0
    parity = 0;
    curSentenceType = GPS_SENTENCE_OTHER;
   d65c6:	2302      	movs	r3, #2
      return isValidSentence;
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d65c8:	f884 00bb 	strb.w	r0, [r4, #187]	; 0xbb
   d65cc:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
    parity = 0;
   d65d0:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
   d65d4:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    isChecksumTerm = false;
   d65d8:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
    sentenceHasFix = false;
   d65dc:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    return false;
   d65e0:	bd38      	pop	{r3, r4, r5, pc}

  default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
   d65e2:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d65e4:	bf9f      	itttt	ls
   d65e6:	1c5a      	addls	r2, r3, #1
   d65e8:	191b      	addls	r3, r3, r4
   d65ea:	f884 20bb 	strbls.w	r2, [r4, #187]	; 0xbb
   d65ee:	f883 50aa 	strbls.w	r5, [r3, #170]	; 0xaa
    if (!isChecksumTerm)
   d65f2:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
   d65f6:	b928      	cbnz	r0, d6604 <_ZN11TinyGPSPlus6encodeEc+0xac>
      parity ^= c;
   d65f8:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
   d65fc:	404d      	eors	r5, r1
   d65fe:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
   d6602:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d6604:	2000      	movs	r0, #0
  }

  return false;
}
   d6606:	bd38      	pop	{r3, r4, r5, pc}

000d6608 <_GLOBAL__sub_I__ZN11TinyGPSPlusC2Ev>:
   d6608:	f000 b810 	b.w	d662c <HAL_Pin_Map>

000d660c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d660c:	b508      	push	{r3, lr}
   d660e:	4b02      	ldr	r3, [pc, #8]	; (d6618 <netdb_freeaddrinfo+0xc>)
   d6610:	681b      	ldr	r3, [r3, #0]
   d6612:	689b      	ldr	r3, [r3, #8]
   d6614:	9301      	str	r3, [sp, #4]
   d6616:	bd08      	pop	{r3, pc}
   d6618:	00030268 	.word	0x00030268

000d661c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d661c:	b508      	push	{r3, lr}
   d661e:	4b02      	ldr	r3, [pc, #8]	; (d6628 <netdb_getaddrinfo+0xc>)
   d6620:	681b      	ldr	r3, [r3, #0]
   d6622:	68db      	ldr	r3, [r3, #12]
   d6624:	9301      	str	r3, [sp, #4]
   d6626:	bd08      	pop	{r3, pc}
   d6628:	00030268 	.word	0x00030268

000d662c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d662c:	b508      	push	{r3, lr}
   d662e:	4b02      	ldr	r3, [pc, #8]	; (d6638 <HAL_Pin_Map+0xc>)
   d6630:	681b      	ldr	r3, [r3, #0]
   d6632:	681b      	ldr	r3, [r3, #0]
   d6634:	9301      	str	r3, [sp, #4]
   d6636:	bd08      	pop	{r3, pc}
   d6638:	0003022c 	.word	0x0003022c

000d663c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d663c:	b508      	push	{r3, lr}
   d663e:	4b02      	ldr	r3, [pc, #8]	; (d6648 <HAL_Pin_Mode+0xc>)
   d6640:	681b      	ldr	r3, [r3, #0]
   d6642:	689b      	ldr	r3, [r3, #8]
   d6644:	9301      	str	r3, [sp, #4]
   d6646:	bd08      	pop	{r3, pc}
   d6648:	0003022c 	.word	0x0003022c

000d664c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d664c:	b508      	push	{r3, lr}
   d664e:	4b02      	ldr	r3, [pc, #8]	; (d6658 <HAL_Get_Pin_Mode+0xc>)
   d6650:	681b      	ldr	r3, [r3, #0]
   d6652:	68db      	ldr	r3, [r3, #12]
   d6654:	9301      	str	r3, [sp, #4]
   d6656:	bd08      	pop	{r3, pc}
   d6658:	0003022c 	.word	0x0003022c

000d665c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d665c:	b508      	push	{r3, lr}
   d665e:	4b02      	ldr	r3, [pc, #8]	; (d6668 <HAL_GPIO_Write+0xc>)
   d6660:	681b      	ldr	r3, [r3, #0]
   d6662:	691b      	ldr	r3, [r3, #16]
   d6664:	9301      	str	r3, [sp, #4]
   d6666:	bd08      	pop	{r3, pc}
   d6668:	0003022c 	.word	0x0003022c

000d666c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d666c:	b508      	push	{r3, lr}
   d666e:	4b02      	ldr	r3, [pc, #8]	; (d6678 <HAL_GPIO_Read+0xc>)
   d6670:	681b      	ldr	r3, [r3, #0]
   d6672:	695b      	ldr	r3, [r3, #20]
   d6674:	9301      	str	r3, [sp, #4]
   d6676:	bd08      	pop	{r3, pc}
   d6678:	0003022c 	.word	0x0003022c

000d667c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d667c:	b508      	push	{r3, lr}
   d667e:	4b02      	ldr	r3, [pc, #8]	; (d6688 <HAL_SPI_Begin+0xc>)
   d6680:	681b      	ldr	r3, [r3, #0]
   d6682:	681b      	ldr	r3, [r3, #0]
   d6684:	9301      	str	r3, [sp, #4]
   d6686:	bd08      	pop	{r3, pc}
   d6688:	00030230 	.word	0x00030230

000d668c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d668c:	b508      	push	{r3, lr}
   d668e:	4b02      	ldr	r3, [pc, #8]	; (d6698 <HAL_SPI_Send_Receive_Data+0xc>)
   d6690:	681b      	ldr	r3, [r3, #0]
   d6692:	695b      	ldr	r3, [r3, #20]
   d6694:	9301      	str	r3, [sp, #4]
   d6696:	bd08      	pop	{r3, pc}
   d6698:	00030230 	.word	0x00030230

000d669c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d669c:	b508      	push	{r3, lr}
   d669e:	4b02      	ldr	r3, [pc, #8]	; (d66a8 <HAL_SPI_Init+0xc>)
   d66a0:	681b      	ldr	r3, [r3, #0]
   d66a2:	69db      	ldr	r3, [r3, #28]
   d66a4:	9301      	str	r3, [sp, #4]
   d66a6:	bd08      	pop	{r3, pc}
   d66a8:	00030230 	.word	0x00030230

000d66ac <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d66ac:	b508      	push	{r3, lr}
   d66ae:	4b02      	ldr	r3, [pc, #8]	; (d66b8 <HAL_SPI_Is_Enabled+0xc>)
   d66b0:	681b      	ldr	r3, [r3, #0]
   d66b2:	6a1b      	ldr	r3, [r3, #32]
   d66b4:	9301      	str	r3, [sp, #4]
   d66b6:	bd08      	pop	{r3, pc}
   d66b8:	00030230 	.word	0x00030230

000d66bc <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d66bc:	b508      	push	{r3, lr}
   d66be:	4b02      	ldr	r3, [pc, #8]	; (d66c8 <HAL_SPI_Info+0xc>)
   d66c0:	681b      	ldr	r3, [r3, #0]
   d66c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d66c4:	9301      	str	r3, [sp, #4]
   d66c6:	bd08      	pop	{r3, pc}
   d66c8:	00030230 	.word	0x00030230

000d66cc <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d66cc:	b508      	push	{r3, lr}
   d66ce:	4b02      	ldr	r3, [pc, #8]	; (d66d8 <HAL_SPI_DMA_Transfer+0xc>)
   d66d0:	681b      	ldr	r3, [r3, #0]
   d66d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d66d4:	9301      	str	r3, [sp, #4]
   d66d6:	bd08      	pop	{r3, pc}
   d66d8:	00030230 	.word	0x00030230

000d66dc <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d66dc:	b508      	push	{r3, lr}
   d66de:	4b02      	ldr	r3, [pc, #8]	; (d66e8 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d66e0:	681b      	ldr	r3, [r3, #0]
   d66e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d66e4:	9301      	str	r3, [sp, #4]
   d66e6:	bd08      	pop	{r3, pc}
   d66e8:	00030230 	.word	0x00030230

000d66ec <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d66ec:	b508      	push	{r3, lr}
   d66ee:	4b02      	ldr	r3, [pc, #8]	; (d66f8 <HAL_SPI_Set_Settings+0xc>)
   d66f0:	681b      	ldr	r3, [r3, #0]
   d66f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d66f4:	9301      	str	r3, [sp, #4]
   d66f6:	bd08      	pop	{r3, pc}
   d66f8:	00030230 	.word	0x00030230

000d66fc <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d66fc:	b508      	push	{r3, lr}
   d66fe:	4b02      	ldr	r3, [pc, #8]	; (d6708 <HAL_SPI_Acquire+0xc>)
   d6700:	681b      	ldr	r3, [r3, #0]
   d6702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6704:	9301      	str	r3, [sp, #4]
   d6706:	bd08      	pop	{r3, pc}
   d6708:	00030230 	.word	0x00030230

000d670c <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d670c:	b508      	push	{r3, lr}
   d670e:	4b02      	ldr	r3, [pc, #8]	; (d6718 <HAL_SPI_Release+0xc>)
   d6710:	681b      	ldr	r3, [r3, #0]
   d6712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6714:	9301      	str	r3, [sp, #4]
   d6716:	bd08      	pop	{r3, pc}
   d6718:	00030230 	.word	0x00030230

000d671c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d671c:	b508      	push	{r3, lr}
   d671e:	4b02      	ldr	r3, [pc, #8]	; (d6728 <HAL_RNG_GetRandomNumber+0xc>)
   d6720:	681b      	ldr	r3, [r3, #0]
   d6722:	685b      	ldr	r3, [r3, #4]
   d6724:	9301      	str	r3, [sp, #4]
   d6726:	bd08      	pop	{r3, pc}
   d6728:	00030218 	.word	0x00030218

000d672c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d672c:	b508      	push	{r3, lr}
   d672e:	4b02      	ldr	r3, [pc, #8]	; (d6738 <HAL_Delay_Microseconds+0xc>)
   d6730:	681b      	ldr	r3, [r3, #0]
   d6732:	68db      	ldr	r3, [r3, #12]
   d6734:	9301      	str	r3, [sp, #4]
   d6736:	bd08      	pop	{r3, pc}
   d6738:	00030218 	.word	0x00030218

000d673c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d673c:	b508      	push	{r3, lr}
   d673e:	4b02      	ldr	r3, [pc, #8]	; (d6748 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d6740:	681b      	ldr	r3, [r3, #0]
   d6742:	691b      	ldr	r3, [r3, #16]
   d6744:	9301      	str	r3, [sp, #4]
   d6746:	bd08      	pop	{r3, pc}
   d6748:	00030218 	.word	0x00030218

000d674c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d674c:	b508      	push	{r3, lr}
   d674e:	4b02      	ldr	r3, [pc, #8]	; (d6758 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6750:	681b      	ldr	r3, [r3, #0]
   d6752:	695b      	ldr	r3, [r3, #20]
   d6754:	9301      	str	r3, [sp, #4]
   d6756:	bd08      	pop	{r3, pc}
   d6758:	00030218 	.word	0x00030218

000d675c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d675c:	b508      	push	{r3, lr}
   d675e:	4b02      	ldr	r3, [pc, #8]	; (d6768 <os_thread_is_current+0xc>)
   d6760:	681b      	ldr	r3, [r3, #0]
   d6762:	689b      	ldr	r3, [r3, #8]
   d6764:	9301      	str	r3, [sp, #4]
   d6766:	bd08      	pop	{r3, pc}
   d6768:	00030248 	.word	0x00030248

000d676c <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d676c:	b508      	push	{r3, lr}
   d676e:	4b02      	ldr	r3, [pc, #8]	; (d6778 <os_thread_yield+0xc>)
   d6770:	681b      	ldr	r3, [r3, #0]
   d6772:	68db      	ldr	r3, [r3, #12]
   d6774:	9301      	str	r3, [sp, #4]
   d6776:	bd08      	pop	{r3, pc}
   d6778:	00030248 	.word	0x00030248

000d677c <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d677c:	b508      	push	{r3, lr}
   d677e:	4b02      	ldr	r3, [pc, #8]	; (d6788 <os_thread_join+0xc>)
   d6780:	681b      	ldr	r3, [r3, #0]
   d6782:	691b      	ldr	r3, [r3, #16]
   d6784:	9301      	str	r3, [sp, #4]
   d6786:	bd08      	pop	{r3, pc}
   d6788:	00030248 	.word	0x00030248

000d678c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d678c:	b508      	push	{r3, lr}
   d678e:	4b02      	ldr	r3, [pc, #8]	; (d6798 <os_thread_cleanup+0xc>)
   d6790:	681b      	ldr	r3, [r3, #0]
   d6792:	695b      	ldr	r3, [r3, #20]
   d6794:	9301      	str	r3, [sp, #4]
   d6796:	bd08      	pop	{r3, pc}
   d6798:	00030248 	.word	0x00030248

000d679c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d679c:	b508      	push	{r3, lr}
   d679e:	4b02      	ldr	r3, [pc, #8]	; (d67a8 <os_mutex_recursive_create+0xc>)
   d67a0:	681b      	ldr	r3, [r3, #0]
   d67a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d67a4:	9301      	str	r3, [sp, #4]
   d67a6:	bd08      	pop	{r3, pc}
   d67a8:	00030248 	.word	0x00030248

000d67ac <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d67ac:	b508      	push	{r3, lr}
   d67ae:	4b02      	ldr	r3, [pc, #8]	; (d67b8 <os_mutex_recursive_destroy+0xc>)
   d67b0:	681b      	ldr	r3, [r3, #0]
   d67b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d67b4:	9301      	str	r3, [sp, #4]
   d67b6:	bd08      	pop	{r3, pc}
   d67b8:	00030248 	.word	0x00030248

000d67bc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d67bc:	b508      	push	{r3, lr}
   d67be:	4b02      	ldr	r3, [pc, #8]	; (d67c8 <inet_inet_ntop+0xc>)
   d67c0:	681b      	ldr	r3, [r3, #0]
   d67c2:	695b      	ldr	r3, [r3, #20]
   d67c4:	9301      	str	r3, [sp, #4]
   d67c6:	bd08      	pop	{r3, pc}
   d67c8:	00030264 	.word	0x00030264

000d67cc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d67cc:	b508      	push	{r3, lr}
   d67ce:	4b02      	ldr	r3, [pc, #8]	; (d67d8 <HAL_USART_Init+0xc>)
   d67d0:	681b      	ldr	r3, [r3, #0]
   d67d2:	681b      	ldr	r3, [r3, #0]
   d67d4:	9301      	str	r3, [sp, #4]
   d67d6:	bd08      	pop	{r3, pc}
   d67d8:	0003023c 	.word	0x0003023c

000d67dc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d67dc:	b508      	push	{r3, lr}
   d67de:	4b02      	ldr	r3, [pc, #8]	; (d67e8 <HAL_USART_Write_Data+0xc>)
   d67e0:	681b      	ldr	r3, [r3, #0]
   d67e2:	68db      	ldr	r3, [r3, #12]
   d67e4:	9301      	str	r3, [sp, #4]
   d67e6:	bd08      	pop	{r3, pc}
   d67e8:	0003023c 	.word	0x0003023c

000d67ec <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d67ec:	b508      	push	{r3, lr}
   d67ee:	4b02      	ldr	r3, [pc, #8]	; (d67f8 <HAL_USART_Available_Data+0xc>)
   d67f0:	681b      	ldr	r3, [r3, #0]
   d67f2:	691b      	ldr	r3, [r3, #16]
   d67f4:	9301      	str	r3, [sp, #4]
   d67f6:	bd08      	pop	{r3, pc}
   d67f8:	0003023c 	.word	0x0003023c

000d67fc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d67fc:	b508      	push	{r3, lr}
   d67fe:	4b02      	ldr	r3, [pc, #8]	; (d6808 <HAL_USART_Read_Data+0xc>)
   d6800:	681b      	ldr	r3, [r3, #0]
   d6802:	695b      	ldr	r3, [r3, #20]
   d6804:	9301      	str	r3, [sp, #4]
   d6806:	bd08      	pop	{r3, pc}
   d6808:	0003023c 	.word	0x0003023c

000d680c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d680c:	b508      	push	{r3, lr}
   d680e:	4b02      	ldr	r3, [pc, #8]	; (d6818 <HAL_USART_Peek_Data+0xc>)
   d6810:	681b      	ldr	r3, [r3, #0]
   d6812:	699b      	ldr	r3, [r3, #24]
   d6814:	9301      	str	r3, [sp, #4]
   d6816:	bd08      	pop	{r3, pc}
   d6818:	0003023c 	.word	0x0003023c

000d681c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d681c:	b508      	push	{r3, lr}
   d681e:	4b02      	ldr	r3, [pc, #8]	; (d6828 <HAL_USART_Flush_Data+0xc>)
   d6820:	681b      	ldr	r3, [r3, #0]
   d6822:	69db      	ldr	r3, [r3, #28]
   d6824:	9301      	str	r3, [sp, #4]
   d6826:	bd08      	pop	{r3, pc}
   d6828:	0003023c 	.word	0x0003023c

000d682c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d682c:	b508      	push	{r3, lr}
   d682e:	4b02      	ldr	r3, [pc, #8]	; (d6838 <HAL_USART_Is_Enabled+0xc>)
   d6830:	681b      	ldr	r3, [r3, #0]
   d6832:	6a1b      	ldr	r3, [r3, #32]
   d6834:	9301      	str	r3, [sp, #4]
   d6836:	bd08      	pop	{r3, pc}
   d6838:	0003023c 	.word	0x0003023c

000d683c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d683c:	b508      	push	{r3, lr}
   d683e:	4b02      	ldr	r3, [pc, #8]	; (d6848 <HAL_USART_Available_Data_For_Write+0xc>)
   d6840:	681b      	ldr	r3, [r3, #0]
   d6842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6844:	9301      	str	r3, [sp, #4]
   d6846:	bd08      	pop	{r3, pc}
   d6848:	0003023c 	.word	0x0003023c

000d684c <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d684c:	b508      	push	{r3, lr}
   d684e:	4b02      	ldr	r3, [pc, #8]	; (d6858 <HAL_USART_BeginConfig+0xc>)
   d6850:	681b      	ldr	r3, [r3, #0]
   d6852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6854:	9301      	str	r3, [sp, #4]
   d6856:	bd08      	pop	{r3, pc}
   d6858:	0003023c 	.word	0x0003023c

000d685c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d685c:	b508      	push	{r3, lr}
   d685e:	4b02      	ldr	r3, [pc, #8]	; (d6868 <HAL_I2C_Write_Data+0xc>)
   d6860:	681b      	ldr	r3, [r3, #0]
   d6862:	6a1b      	ldr	r3, [r3, #32]
   d6864:	9301      	str	r3, [sp, #4]
   d6866:	bd08      	pop	{r3, pc}
   d6868:	00030228 	.word	0x00030228

000d686c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d686c:	b508      	push	{r3, lr}
   d686e:	4b02      	ldr	r3, [pc, #8]	; (d6878 <HAL_I2C_Available_Data+0xc>)
   d6870:	681b      	ldr	r3, [r3, #0]
   d6872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6874:	9301      	str	r3, [sp, #4]
   d6876:	bd08      	pop	{r3, pc}
   d6878:	00030228 	.word	0x00030228

000d687c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d687c:	b508      	push	{r3, lr}
   d687e:	4b02      	ldr	r3, [pc, #8]	; (d6888 <HAL_I2C_Read_Data+0xc>)
   d6880:	681b      	ldr	r3, [r3, #0]
   d6882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6884:	9301      	str	r3, [sp, #4]
   d6886:	bd08      	pop	{r3, pc}
   d6888:	00030228 	.word	0x00030228

000d688c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d688c:	b508      	push	{r3, lr}
   d688e:	4b02      	ldr	r3, [pc, #8]	; (d6898 <HAL_I2C_Peek_Data+0xc>)
   d6890:	681b      	ldr	r3, [r3, #0]
   d6892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6894:	9301      	str	r3, [sp, #4]
   d6896:	bd08      	pop	{r3, pc}
   d6898:	00030228 	.word	0x00030228

000d689c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d689c:	b508      	push	{r3, lr}
   d689e:	4b02      	ldr	r3, [pc, #8]	; (d68a8 <HAL_I2C_Flush_Data+0xc>)
   d68a0:	681b      	ldr	r3, [r3, #0]
   d68a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d68a4:	9301      	str	r3, [sp, #4]
   d68a6:	bd08      	pop	{r3, pc}
   d68a8:	00030228 	.word	0x00030228

000d68ac <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d68ac:	b508      	push	{r3, lr}
   d68ae:	4b02      	ldr	r3, [pc, #8]	; (d68b8 <HAL_I2C_Is_Enabled+0xc>)
   d68b0:	681b      	ldr	r3, [r3, #0]
   d68b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d68b4:	9301      	str	r3, [sp, #4]
   d68b6:	bd08      	pop	{r3, pc}
   d68b8:	00030228 	.word	0x00030228

000d68bc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d68bc:	b508      	push	{r3, lr}
   d68be:	4b02      	ldr	r3, [pc, #8]	; (d68c8 <HAL_I2C_Init+0xc>)
   d68c0:	681b      	ldr	r3, [r3, #0]
   d68c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d68c4:	9301      	str	r3, [sp, #4]
   d68c6:	bd08      	pop	{r3, pc}
   d68c8:	00030228 	.word	0x00030228

000d68cc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d68cc:	b508      	push	{r3, lr}
   d68ce:	4b02      	ldr	r3, [pc, #8]	; (d68d8 <HAL_USB_USART_Init+0xc>)
   d68d0:	681b      	ldr	r3, [r3, #0]
   d68d2:	681b      	ldr	r3, [r3, #0]
   d68d4:	9301      	str	r3, [sp, #4]
   d68d6:	bd08      	pop	{r3, pc}
   d68d8:	0003024c 	.word	0x0003024c

000d68dc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d68dc:	b508      	push	{r3, lr}
   d68de:	4b02      	ldr	r3, [pc, #8]	; (d68e8 <HAL_USB_USART_Begin+0xc>)
   d68e0:	681b      	ldr	r3, [r3, #0]
   d68e2:	685b      	ldr	r3, [r3, #4]
   d68e4:	9301      	str	r3, [sp, #4]
   d68e6:	bd08      	pop	{r3, pc}
   d68e8:	0003024c 	.word	0x0003024c

000d68ec <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d68ec:	b508      	push	{r3, lr}
   d68ee:	4b02      	ldr	r3, [pc, #8]	; (d68f8 <HAL_USB_USART_Available_Data+0xc>)
   d68f0:	681b      	ldr	r3, [r3, #0]
   d68f2:	691b      	ldr	r3, [r3, #16]
   d68f4:	9301      	str	r3, [sp, #4]
   d68f6:	bd08      	pop	{r3, pc}
   d68f8:	0003024c 	.word	0x0003024c

000d68fc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d68fc:	b508      	push	{r3, lr}
   d68fe:	4b02      	ldr	r3, [pc, #8]	; (d6908 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6900:	681b      	ldr	r3, [r3, #0]
   d6902:	695b      	ldr	r3, [r3, #20]
   d6904:	9301      	str	r3, [sp, #4]
   d6906:	bd08      	pop	{r3, pc}
   d6908:	0003024c 	.word	0x0003024c

000d690c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d690c:	b508      	push	{r3, lr}
   d690e:	4b02      	ldr	r3, [pc, #8]	; (d6918 <HAL_USB_USART_Receive_Data+0xc>)
   d6910:	681b      	ldr	r3, [r3, #0]
   d6912:	699b      	ldr	r3, [r3, #24]
   d6914:	9301      	str	r3, [sp, #4]
   d6916:	bd08      	pop	{r3, pc}
   d6918:	0003024c 	.word	0x0003024c

000d691c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d691c:	b508      	push	{r3, lr}
   d691e:	4b02      	ldr	r3, [pc, #8]	; (d6928 <HAL_USB_USART_Send_Data+0xc>)
   d6920:	681b      	ldr	r3, [r3, #0]
   d6922:	69db      	ldr	r3, [r3, #28]
   d6924:	9301      	str	r3, [sp, #4]
   d6926:	bd08      	pop	{r3, pc}
   d6928:	0003024c 	.word	0x0003024c

000d692c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d692c:	b508      	push	{r3, lr}
   d692e:	4b02      	ldr	r3, [pc, #8]	; (d6938 <HAL_USB_USART_Flush_Data+0xc>)
   d6930:	681b      	ldr	r3, [r3, #0]
   d6932:	6a1b      	ldr	r3, [r3, #32]
   d6934:	9301      	str	r3, [sp, #4]
   d6936:	bd08      	pop	{r3, pc}
   d6938:	0003024c 	.word	0x0003024c

000d693c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d693c:	b508      	push	{r3, lr}
   d693e:	4b02      	ldr	r3, [pc, #8]	; (d6948 <set_system_mode+0xc>)
   d6940:	681b      	ldr	r3, [r3, #0]
   d6942:	685b      	ldr	r3, [r3, #4]
   d6944:	9301      	str	r3, [sp, #4]
   d6946:	bd08      	pop	{r3, pc}
   d6948:	00030220 	.word	0x00030220

000d694c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d694c:	b508      	push	{r3, lr}
   d694e:	4b02      	ldr	r3, [pc, #8]	; (d6958 <system_delay_ms+0xc>)
   d6950:	681b      	ldr	r3, [r3, #0]
   d6952:	695b      	ldr	r3, [r3, #20]
   d6954:	9301      	str	r3, [sp, #4]
   d6956:	bd08      	pop	{r3, pc}
   d6958:	00030220 	.word	0x00030220

000d695c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d695c:	b508      	push	{r3, lr}
   d695e:	4b02      	ldr	r3, [pc, #8]	; (d6968 <system_thread_set_state+0xc>)
   d6960:	681b      	ldr	r3, [r3, #0]
   d6962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6964:	9301      	str	r3, [sp, #4]
   d6966:	bd08      	pop	{r3, pc}
   d6968:	00030220 	.word	0x00030220

000d696c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d696c:	b508      	push	{r3, lr}
   d696e:	4b03      	ldr	r3, [pc, #12]	; (d697c <system_ctrl_set_app_request_handler+0x10>)
   d6970:	681b      	ldr	r3, [r3, #0]
   d6972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6976:	9301      	str	r3, [sp, #4]
   d6978:	bd08      	pop	{r3, pc}
   d697a:	0000      	.short	0x0000
   d697c:	00030220 	.word	0x00030220

000d6980 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6980:	b508      	push	{r3, lr}
   d6982:	4b03      	ldr	r3, [pc, #12]	; (d6990 <system_ctrl_set_result+0x10>)
   d6984:	681b      	ldr	r3, [r3, #0]
   d6986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d698a:	9301      	str	r3, [sp, #4]
   d698c:	bd08      	pop	{r3, pc}
   d698e:	0000      	.short	0x0000
   d6990:	00030220 	.word	0x00030220

000d6994 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6994:	b508      	push	{r3, lr}
   d6996:	4b02      	ldr	r3, [pc, #8]	; (d69a0 <network_connect+0xc>)
   d6998:	681b      	ldr	r3, [r3, #0]
   d699a:	685b      	ldr	r3, [r3, #4]
   d699c:	9301      	str	r3, [sp, #4]
   d699e:	bd08      	pop	{r3, pc}
   d69a0:	00030240 	.word	0x00030240

000d69a4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d69a4:	b508      	push	{r3, lr}
   d69a6:	4b02      	ldr	r3, [pc, #8]	; (d69b0 <network_connecting+0xc>)
   d69a8:	681b      	ldr	r3, [r3, #0]
   d69aa:	689b      	ldr	r3, [r3, #8]
   d69ac:	9301      	str	r3, [sp, #4]
   d69ae:	bd08      	pop	{r3, pc}
   d69b0:	00030240 	.word	0x00030240

000d69b4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d69b4:	b508      	push	{r3, lr}
   d69b6:	4b02      	ldr	r3, [pc, #8]	; (d69c0 <network_disconnect+0xc>)
   d69b8:	681b      	ldr	r3, [r3, #0]
   d69ba:	68db      	ldr	r3, [r3, #12]
   d69bc:	9301      	str	r3, [sp, #4]
   d69be:	bd08      	pop	{r3, pc}
   d69c0:	00030240 	.word	0x00030240

000d69c4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d69c4:	b508      	push	{r3, lr}
   d69c6:	4b02      	ldr	r3, [pc, #8]	; (d69d0 <network_ready+0xc>)
   d69c8:	681b      	ldr	r3, [r3, #0]
   d69ca:	691b      	ldr	r3, [r3, #16]
   d69cc:	9301      	str	r3, [sp, #4]
   d69ce:	bd08      	pop	{r3, pc}
   d69d0:	00030240 	.word	0x00030240

000d69d4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d69d4:	b508      	push	{r3, lr}
   d69d6:	4b02      	ldr	r3, [pc, #8]	; (d69e0 <network_on+0xc>)
   d69d8:	681b      	ldr	r3, [r3, #0]
   d69da:	695b      	ldr	r3, [r3, #20]
   d69dc:	9301      	str	r3, [sp, #4]
   d69de:	bd08      	pop	{r3, pc}
   d69e0:	00030240 	.word	0x00030240

000d69e4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d69e4:	b508      	push	{r3, lr}
   d69e6:	4b02      	ldr	r3, [pc, #8]	; (d69f0 <network_off+0xc>)
   d69e8:	681b      	ldr	r3, [r3, #0]
   d69ea:	699b      	ldr	r3, [r3, #24]
   d69ec:	9301      	str	r3, [sp, #4]
   d69ee:	bd08      	pop	{r3, pc}
   d69f0:	00030240 	.word	0x00030240

000d69f4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d69f4:	b508      	push	{r3, lr}
   d69f6:	4b02      	ldr	r3, [pc, #8]	; (d6a00 <network_listen+0xc>)
   d69f8:	681b      	ldr	r3, [r3, #0]
   d69fa:	69db      	ldr	r3, [r3, #28]
   d69fc:	9301      	str	r3, [sp, #4]
   d69fe:	bd08      	pop	{r3, pc}
   d6a00:	00030240 	.word	0x00030240

000d6a04 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6a04:	b508      	push	{r3, lr}
   d6a06:	4b02      	ldr	r3, [pc, #8]	; (d6a10 <network_listening+0xc>)
   d6a08:	681b      	ldr	r3, [r3, #0]
   d6a0a:	6a1b      	ldr	r3, [r3, #32]
   d6a0c:	9301      	str	r3, [sp, #4]
   d6a0e:	bd08      	pop	{r3, pc}
   d6a10:	00030240 	.word	0x00030240

000d6a14 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6a14:	b508      	push	{r3, lr}
   d6a16:	4b02      	ldr	r3, [pc, #8]	; (d6a20 <network_set_listen_timeout+0xc>)
   d6a18:	681b      	ldr	r3, [r3, #0]
   d6a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6a1c:	9301      	str	r3, [sp, #4]
   d6a1e:	bd08      	pop	{r3, pc}
   d6a20:	00030240 	.word	0x00030240

000d6a24 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6a24:	b508      	push	{r3, lr}
   d6a26:	4b02      	ldr	r3, [pc, #8]	; (d6a30 <network_get_listen_timeout+0xc>)
   d6a28:	681b      	ldr	r3, [r3, #0]
   d6a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6a2c:	9301      	str	r3, [sp, #4]
   d6a2e:	bd08      	pop	{r3, pc}
   d6a30:	00030240 	.word	0x00030240

000d6a34 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6a34:	b508      	push	{r3, lr}
   d6a36:	4b02      	ldr	r3, [pc, #8]	; (d6a40 <spark_process+0xc>)
   d6a38:	681b      	ldr	r3, [r3, #0]
   d6a3a:	689b      	ldr	r3, [r3, #8]
   d6a3c:	9301      	str	r3, [sp, #4]
   d6a3e:	bd08      	pop	{r3, pc}
   d6a40:	00030244 	.word	0x00030244

000d6a44 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6a44:	b508      	push	{r3, lr}
   d6a46:	4b02      	ldr	r3, [pc, #8]	; (d6a50 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6a48:	681b      	ldr	r3, [r3, #0]
   d6a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6a4c:	9301      	str	r3, [sp, #4]
   d6a4e:	bd08      	pop	{r3, pc}
   d6a50:	00030244 	.word	0x00030244

000d6a54 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6a54:	b508      	push	{r3, lr}
   d6a56:	4b02      	ldr	r3, [pc, #8]	; (d6a60 <malloc+0xc>)
   d6a58:	681b      	ldr	r3, [r3, #0]
   d6a5a:	681b      	ldr	r3, [r3, #0]
   d6a5c:	9301      	str	r3, [sp, #4]
   d6a5e:	bd08      	pop	{r3, pc}
   d6a60:	0003021c 	.word	0x0003021c

000d6a64 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6a64:	b508      	push	{r3, lr}
   d6a66:	4b02      	ldr	r3, [pc, #8]	; (d6a70 <free+0xc>)
   d6a68:	681b      	ldr	r3, [r3, #0]
   d6a6a:	685b      	ldr	r3, [r3, #4]
   d6a6c:	9301      	str	r3, [sp, #4]
   d6a6e:	bd08      	pop	{r3, pc}
   d6a70:	0003021c 	.word	0x0003021c

000d6a74 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6a74:	b508      	push	{r3, lr}
   d6a76:	4b02      	ldr	r3, [pc, #8]	; (d6a80 <vsnprintf+0xc>)
   d6a78:	681b      	ldr	r3, [r3, #0]
   d6a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6a7c:	9301      	str	r3, [sp, #4]
   d6a7e:	bd08      	pop	{r3, pc}
   d6a80:	0003021c 	.word	0x0003021c

000d6a84 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6a84:	2200      	movs	r2, #0
   d6a86:	4611      	mov	r1, r2
   d6a88:	6840      	ldr	r0, [r0, #4]
   d6a8a:	f7ff bfbb 	b.w	d6a04 <network_listening>

000d6a8e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6a8e:	2200      	movs	r2, #0
   d6a90:	4611      	mov	r1, r2
   d6a92:	6840      	ldr	r0, [r0, #4]
   d6a94:	f7ff bfc6 	b.w	d6a24 <network_get_listen_timeout>

000d6a98 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6a98:	2200      	movs	r2, #0
   d6a9a:	6840      	ldr	r0, [r0, #4]
   d6a9c:	f7ff bfba 	b.w	d6a14 <network_set_listen_timeout>

000d6aa0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6aa0:	2200      	movs	r2, #0
   d6aa2:	f081 0101 	eor.w	r1, r1, #1
   d6aa6:	6840      	ldr	r0, [r0, #4]
   d6aa8:	f7ff bfa4 	b.w	d69f4 <network_listen>

000d6aac <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6aac:	2300      	movs	r3, #0
   d6aae:	461a      	mov	r2, r3
   d6ab0:	4619      	mov	r1, r3
   d6ab2:	6840      	ldr	r0, [r0, #4]
   d6ab4:	f7ff bf96 	b.w	d69e4 <network_off>

000d6ab8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6ab8:	2300      	movs	r3, #0
   d6aba:	461a      	mov	r2, r3
   d6abc:	4619      	mov	r1, r3
   d6abe:	6840      	ldr	r0, [r0, #4]
   d6ac0:	f7ff bf88 	b.w	d69d4 <network_on>

000d6ac4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6ac4:	2200      	movs	r2, #0
   d6ac6:	4611      	mov	r1, r2
   d6ac8:	6840      	ldr	r0, [r0, #4]
   d6aca:	f7ff bf7b 	b.w	d69c4 <network_ready>

000d6ace <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6ace:	2200      	movs	r2, #0
   d6ad0:	4611      	mov	r1, r2
   d6ad2:	6840      	ldr	r0, [r0, #4]
   d6ad4:	f7ff bf66 	b.w	d69a4 <network_connecting>

000d6ad8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6ad8:	2200      	movs	r2, #0
   d6ada:	2102      	movs	r1, #2
   d6adc:	6840      	ldr	r0, [r0, #4]
   d6ade:	f7ff bf69 	b.w	d69b4 <network_disconnect>

000d6ae2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6ae2:	2300      	movs	r3, #0
   d6ae4:	461a      	mov	r2, r3
   d6ae6:	6840      	ldr	r0, [r0, #4]
   d6ae8:	f7ff bf54 	b.w	d6994 <network_connect>

000d6aec <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6aec:	4b02      	ldr	r3, [pc, #8]	; (d6af8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6aee:	2203      	movs	r2, #3
   d6af0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6af2:	4a02      	ldr	r2, [pc, #8]	; (d6afc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6af4:	601a      	str	r2, [r3, #0]
   d6af6:	4770      	bx	lr
   d6af8:	2003e3dc 	.word	0x2003e3dc
   d6afc:	000d88f4 	.word	0x000d88f4

000d6b00 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d6b00:	2100      	movs	r1, #0
   d6b02:	f7ff bdfb 	b.w	d66fc <HAL_SPI_Acquire>

000d6b06 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d6b06:	2100      	movs	r1, #0
   d6b08:	f7ff be00 	b.w	d670c <HAL_SPI_Release>

000d6b0c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6b0c:	b510      	push	{r4, lr}
   d6b0e:	4604      	mov	r4, r0
{
    _spi = spi;
   d6b10:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d6b12:	4608      	mov	r0, r1
   d6b14:	f7ff fdc2 	bl	d669c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6b18:	2300      	movs	r3, #0
   d6b1a:	6063      	str	r3, [r4, #4]
}
   d6b1c:	4620      	mov	r0, r4
   d6b1e:	bd10      	pop	{r4, pc}

000d6b20 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6b20:	b510      	push	{r4, lr}
   d6b22:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6b24:	7800      	ldrb	r0, [r0, #0]
   d6b26:	f7ff ffeb 	bl	d6b00 <_ZN8SPIClass4lockEv.isra.0>
   d6b2a:	b948      	cbnz	r0, d6b40 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d6b2c:	7820      	ldrb	r0, [r4, #0]
   d6b2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6b32:	f7ff fda3 	bl	d667c <HAL_SPI_Begin>
        unlock();
   d6b36:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d6b3c:	f7ff bfe3 	b.w	d6b06 <_ZN8SPIClass6unlockEv.isra.1>
   d6b40:	bd10      	pop	{r4, pc}

000d6b42 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6b42:	7800      	ldrb	r0, [r0, #0]
   d6b44:	f7ff bfdf 	b.w	d6b06 <_ZN8SPIClass6unlockEv.isra.1>

000d6b48 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6b48:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d6b4a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6b4c:	6018      	str	r0, [r3, #0]
   d6b4e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6b50:	6818      	ldr	r0, [r3, #0]
   d6b52:	4288      	cmp	r0, r1
   d6b54:	b2e5      	uxtb	r5, r4
   d6b56:	d906      	bls.n	d6b66 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6b58:	3401      	adds	r4, #1
   d6b5a:	2c08      	cmp	r4, #8
   d6b5c:	d002      	beq.n	d6b64 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6b5e:	0840      	lsrs	r0, r0, #1
   d6b60:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d6b62:	e7f5      	b.n	d6b50 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6b64:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6b66:	4b02      	ldr	r3, [pc, #8]	; (d6b70 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6b68:	5d5b      	ldrb	r3, [r3, r5]
   d6b6a:	7013      	strb	r3, [r2, #0]
   d6b6c:	bd30      	pop	{r4, r5, pc}
   d6b6e:	bf00      	nop
   d6b70:	000d8920 	.word	0x000d8920

000d6b74 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6b78:	4607      	mov	r7, r0
   d6b7a:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d6b7c:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6b7e:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d6b80:	f7ff ffbe 	bl	d6b00 <_ZN8SPIClass4lockEv.isra.0>
   d6b84:	2800      	cmp	r0, #0
   d6b86:	db62      	blt.n	d6c4e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d6b88:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d6b8a:	2214      	movs	r2, #20
   d6b8c:	2100      	movs	r1, #0
   d6b8e:	a809      	add	r0, sp, #36	; 0x24
   d6b90:	f001 fbec 	bl	d836c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6b94:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d6b96:	4620      	mov	r0, r4
   d6b98:	2200      	movs	r2, #0
   d6b9a:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6b9c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d6ba0:	f7ff fd8c 	bl	d66bc <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d6ba4:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d6ba8:	b154      	cbz	r4, d6bc0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d6baa:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d6bae:	b935      	cbnz	r5, d6bbe <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d6bb0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6bb4:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6bb8:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d6bbc:	e003      	b.n	d6bc6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d6bbe:	2400      	movs	r4, #0
   d6bc0:	46a1      	mov	r9, r4
   d6bc2:	46a0      	mov	r8, r4
   d6bc4:	2501      	movs	r5, #1
   d6bc6:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6bc8:	b105      	cbz	r5, d6bcc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d6bca:	b9bb      	cbnz	r3, d6bfc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d6bcc:	429d      	cmp	r5, r3
   d6bce:	d10b      	bne.n	d6be8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d6bd0:	68b2      	ldr	r2, [r6, #8]
   d6bd2:	4542      	cmp	r2, r8
   d6bd4:	d108      	bne.n	d6be8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6bd6:	f88d 9020 	strb.w	r9, [sp, #32]
   d6bda:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6bde:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d6be2:	89b2      	ldrh	r2, [r6, #12]
   d6be4:	4291      	cmp	r1, r2
   d6be6:	d009      	beq.n	d6bfc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d6be8:	b153      	cbz	r3, d6c00 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d6bea:	2400      	movs	r4, #0
   d6bec:	7838      	ldrb	r0, [r7, #0]
   d6bee:	9401      	str	r4, [sp, #4]
   d6bf0:	9400      	str	r4, [sp, #0]
   d6bf2:	4623      	mov	r3, r4
   d6bf4:	4622      	mov	r2, r4
   d6bf6:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6bf8:	f7ff fd78 	bl	d66ec <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d6bfc:	2000      	movs	r0, #0
   d6bfe:	e026      	b.n	d6c4e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d6c00:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d6c04:	68b1      	ldr	r1, [r6, #8]
   d6c06:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6c08:	ab04      	add	r3, sp, #16
   d6c0a:	f10d 020f 	add.w	r2, sp, #15
   d6c0e:	f7ff ff9b 	bl	d6b48 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d6c12:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6c14:	b105      	cbz	r5, d6c18 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d6c16:	b9b1      	cbnz	r1, d6c46 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d6c18:	42a9      	cmp	r1, r5
   d6c1a:	d008      	beq.n	d6c2e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6c1c:	2400      	movs	r4, #0
   d6c1e:	7838      	ldrb	r0, [r7, #0]
   d6c20:	9401      	str	r4, [sp, #4]
   d6c22:	7b74      	ldrb	r4, [r6, #13]
   d6c24:	7b33      	ldrb	r3, [r6, #12]
   d6c26:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6c2a:	9400      	str	r4, [sp, #0]
   d6c2c:	e7e4      	b.n	d6bf8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d6c2e:	68b3      	ldr	r3, [r6, #8]
   d6c30:	4543      	cmp	r3, r8
   d6c32:	d3f3      	bcc.n	d6c1c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6c34:	f88d 9020 	strb.w	r9, [sp, #32]
   d6c38:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6c3c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6c40:	89b3      	ldrh	r3, [r6, #12]
   d6c42:	429a      	cmp	r2, r3
   d6c44:	d1ea      	bne.n	d6c1c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6c46:	9b04      	ldr	r3, [sp, #16]
   d6c48:	4543      	cmp	r3, r8
   d6c4a:	d1e7      	bne.n	d6c1c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d6c4c:	e7d6      	b.n	d6bfc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d6c4e:	b00f      	add	sp, #60	; 0x3c
   d6c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6c54 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6c54:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d6c56:	7800      	ldrb	r0, [r0, #0]
   d6c58:	f7ff fd18 	bl	d668c <HAL_SPI_Send_Receive_Data>
}
   d6c5c:	b2c0      	uxtb	r0, r0
   d6c5e:	bd08      	pop	{r3, pc}

000d6c60 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d6c60:	b530      	push	{r4, r5, lr}
   d6c62:	b087      	sub	sp, #28
   d6c64:	4604      	mov	r4, r0
   d6c66:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d6c68:	7800      	ldrb	r0, [r0, #0]
   d6c6a:	9500      	str	r5, [sp, #0]
   d6c6c:	f7ff fd2e 	bl	d66cc <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d6c70:	b93d      	cbnz	r5, d6c82 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d6c72:	a902      	add	r1, sp, #8
   d6c74:	7820      	ldrb	r0, [r4, #0]
   d6c76:	f7ff fd31 	bl	d66dc <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d6c7a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d6c7e:	07db      	lsls	r3, r3, #31
   d6c80:	d4f7      	bmi.n	d6c72 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d6c82:	b007      	add	sp, #28
   d6c84:	bd30      	pop	{r4, r5, pc}

000d6c86 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6c86:	7800      	ldrb	r0, [r0, #0]
   d6c88:	f7ff bd10 	b.w	d66ac <HAL_SPI_Is_Enabled>

000d6c8c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6c8c:	b510      	push	{r4, lr}
   d6c8e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6c90:	6800      	ldr	r0, [r0, #0]
   d6c92:	b118      	cbz	r0, d6c9c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d6c94:	f7ff fee6 	bl	d6a64 <free>
            wakeupSource_ = nullptr;
   d6c98:	2300      	movs	r3, #0
   d6c9a:	6023      	str	r3, [r4, #0]
   d6c9c:	bd10      	pop	{r4, pc}

000d6c9e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6c9e:	b510      	push	{r4, lr}
   d6ca0:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d6ca2:	f7ff fff3 	bl	d6c8c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6ca6:	4620      	mov	r0, r4
   d6ca8:	bd10      	pop	{r4, pc}
	...

000d6cac <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6cac:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6cae:	4c09      	ldr	r4, [pc, #36]	; (d6cd4 <_GLOBAL__sub_I_System+0x28>)
   d6cb0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6cb6:	6020      	str	r0, [r4, #0]
   d6cb8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6cba:	71a0      	strb	r0, [r4, #6]
   d6cbc:	8120      	strh	r0, [r4, #8]
   d6cbe:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6cc0:	f7ff fe3c 	bl	d693c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6cc4:	4620      	mov	r0, r4
   d6cc6:	4a04      	ldr	r2, [pc, #16]	; (d6cd8 <_GLOBAL__sub_I_System+0x2c>)
   d6cc8:	4904      	ldr	r1, [pc, #16]	; (d6cdc <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6cce:	f000 bd9d 	b.w	d780c <__aeabi_atexit>
   d6cd2:	bf00      	nop
   d6cd4:	2003e3e4 	.word	0x2003e3e4
   d6cd8:	2003de00 	.word	0x2003de00
   d6cdc:	000d6c9f 	.word	0x000d6c9f

000d6ce0 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6ce0:	b510      	push	{r4, lr}
   d6ce2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6ce4:	6800      	ldr	r0, [r0, #0]
   d6ce6:	b108      	cbz	r0, d6cec <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6ce8:	f7ff fd60 	bl	d67ac <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6cec:	4620      	mov	r0, r4
   d6cee:	bd10      	pop	{r4, pc}

000d6cf0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6cf0:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6cf2:	4c06      	ldr	r4, [pc, #24]	; (d6d0c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6cf4:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d6cf6:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6cf8:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6cfa:	f7ff fd4f 	bl	d679c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6cfe:	4620      	mov	r0, r4
   d6d00:	4a03      	ldr	r2, [pc, #12]	; (d6d10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6d02:	4904      	ldr	r1, [pc, #16]	; (d6d14 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6d08:	f000 bd80 	b.w	d780c <__aeabi_atexit>
   d6d0c:	2003e3f0 	.word	0x2003e3f0
   d6d10:	2003de00 	.word	0x2003de00
   d6d14:	000d6ce1 	.word	0x000d6ce1

000d6d18 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d1a:	4606      	mov	r6, r0
   d6d1c:	460d      	mov	r5, r1
   d6d1e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6d20:	2400      	movs	r4, #0
  while (size--) {
   d6d22:	42bd      	cmp	r5, r7
   d6d24:	d00c      	beq.n	d6d40 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6d26:	6833      	ldr	r3, [r6, #0]
   d6d28:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6d2c:	689b      	ldr	r3, [r3, #8]
   d6d2e:	4630      	mov	r0, r6
   d6d30:	4798      	blx	r3
     if (chunk>=0)
   d6d32:	2800      	cmp	r0, #0
   d6d34:	db01      	blt.n	d6d3a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6d36:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6d38:	e7f3      	b.n	d6d22 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6d3a:	2c00      	cmp	r4, #0
   d6d3c:	bf08      	it	eq
   d6d3e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6d40:	4620      	mov	r0, r4
   d6d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d44 <_ZN5Print5printEPKc>:
   d6d44:	b508      	push	{r3, lr}
   d6d46:	f7fe fc81 	bl	d564c <_ZN5Print5writeEPKc>
   d6d4a:	bd08      	pop	{r3, pc}

000d6d4c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6d4c:	6803      	ldr	r3, [r0, #0]
   d6d4e:	689b      	ldr	r3, [r3, #8]
   d6d50:	4718      	bx	r3

000d6d52 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d6d52:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6d54:	f7fe fc7a 	bl	d564c <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
   d6d58:	bd08      	pop	{r3, pc}

000d6d5a <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d6d5a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6d5c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6d5e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6d60:	f7ff fff4 	bl	d6d4c <_ZN5Print5printEc>
  n += print('\n');
   d6d64:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6d66:	4604      	mov	r4, r0
  n += print('\n');
   d6d68:	4628      	mov	r0, r5
   d6d6a:	f7ff ffef 	bl	d6d4c <_ZN5Print5printEc>
  return n;
}
   d6d6e:	4420      	add	r0, r4
   d6d70:	bd38      	pop	{r3, r4, r5, pc}

000d6d72 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6d72:	b538      	push	{r3, r4, r5, lr}
   d6d74:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6d76:	f7fe fc69 	bl	d564c <_ZN5Print5writeEPKc>
   d6d7a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6d7c:	4628      	mov	r0, r5
   d6d7e:	f7ff ffec 	bl	d6d5a <_ZN5Print7printlnEv>
  return n;
}
   d6d82:	4420      	add	r0, r4
   d6d84:	bd38      	pop	{r3, r4, r5, pc}

000d6d86 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d6d86:	f7ff bff4 	b.w	d6d72 <_ZN5Print7printlnEPKc>

000d6d8a <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6d8a:	b530      	push	{r4, r5, lr}
   d6d8c:	b08b      	sub	sp, #44	; 0x2c
   d6d8e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6d90:	2100      	movs	r1, #0
   d6d92:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6d96:	2a01      	cmp	r2, #1
   d6d98:	bf98      	it	ls
   d6d9a:	220a      	movls	r2, #10
   d6d9c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6da0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6da4:	fb05 3312 	mls	r3, r5, r2, r3
   d6da8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6dac:	2b09      	cmp	r3, #9
   d6dae:	bf94      	ite	ls
   d6db0:	3330      	addls	r3, #48	; 0x30
   d6db2:	3337      	addhi	r3, #55	; 0x37
   d6db4:	b2db      	uxtb	r3, r3
   d6db6:	4621      	mov	r1, r4
   d6db8:	f804 3901 	strb.w	r3, [r4], #-1
   d6dbc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6dbe:	2d00      	cmp	r5, #0
   d6dc0:	d1ee      	bne.n	d6da0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6dc2:	f7fe fc43 	bl	d564c <_ZN5Print5writeEPKc>
}
   d6dc6:	b00b      	add	sp, #44	; 0x2c
   d6dc8:	bd30      	pop	{r4, r5, pc}

000d6dca <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6dca:	b40c      	push	{r2, r3}
   d6dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6dd0:	b087      	sub	sp, #28
   d6dd2:	af00      	add	r7, sp, #0
   d6dd4:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6dd8:	4605      	mov	r5, r0
   d6dda:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6dde:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6de0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6de2:	4623      	mov	r3, r4
   d6de4:	464a      	mov	r2, r9
   d6de6:	2114      	movs	r1, #20
   d6de8:	1d38      	adds	r0, r7, #4
   d6dea:	f7ff fe43 	bl	d6a74 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6dee:	2813      	cmp	r0, #19
   d6df0:	d805      	bhi.n	d6dfe <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6df2:	1d39      	adds	r1, r7, #4
   d6df4:	4628      	mov	r0, r5
   d6df6:	f7fe fc29 	bl	d564c <_ZN5Print5writeEPKc>
   d6dfa:	4604      	mov	r4, r0
   d6dfc:	e013      	b.n	d6e26 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6dfe:	f100 0308 	add.w	r3, r0, #8
   d6e02:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6e06:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6e08:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6e0c:	1c41      	adds	r1, r0, #1
   d6e0e:	4623      	mov	r3, r4
   d6e10:	464a      	mov	r2, r9
   d6e12:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6e14:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6e16:	f7ff fe2d 	bl	d6a74 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6e1a:	4669      	mov	r1, sp
   d6e1c:	4628      	mov	r0, r5
   d6e1e:	f7fe fc15 	bl	d564c <_ZN5Print5writeEPKc>
   d6e22:	4604      	mov	r4, r0
   d6e24:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6e26:	b11e      	cbz	r6, d6e30 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6e28:	4628      	mov	r0, r5
   d6e2a:	f7ff ff96 	bl	d6d5a <_ZN5Print7printlnEv>
   d6e2e:	4404      	add	r4, r0
    return n;
}
   d6e30:	4620      	mov	r0, r4
   d6e32:	371c      	adds	r7, #28
   d6e34:	46bd      	mov	sp, r7
   d6e36:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6e3a:	b002      	add	sp, #8
   d6e3c:	4770      	bx	lr
	...

000d6e40 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6e40:	4b01      	ldr	r3, [pc, #4]	; (d6e48 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6e42:	4a02      	ldr	r2, [pc, #8]	; (d6e4c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6e44:	601a      	str	r2, [r3, #0]
   d6e46:	4770      	bx	lr
   d6e48:	2003e3f4 	.word	0x2003e3f4
   d6e4c:	000d899b 	.word	0x000d899b

000d6e50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6e50:	4b02      	ldr	r3, [pc, #8]	; (d6e5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6e52:	681a      	ldr	r2, [r3, #0]
   d6e54:	4b02      	ldr	r3, [pc, #8]	; (d6e60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6e56:	601a      	str	r2, [r3, #0]
   d6e58:	4770      	bx	lr
   d6e5a:	bf00      	nop
   d6e5c:	2003dd94 	.word	0x2003dd94
   d6e60:	2003e3f8 	.word	0x2003e3f8

000d6e64 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6e64:	2100      	movs	r1, #0
   d6e66:	f7ff bd71 	b.w	d694c <system_delay_ms>

000d6e6a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6e6a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6e6c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6e6e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6e70:	b113      	cbz	r3, d6e78 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6e72:	2203      	movs	r2, #3
   d6e74:	4601      	mov	r1, r0
   d6e76:	4798      	blx	r3
    }
   d6e78:	4620      	mov	r0, r4
   d6e7a:	bd10      	pop	{r4, pc}

000d6e7c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6e7c:	b510      	push	{r4, lr}
   d6e7e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6e80:	f7ff fff3 	bl	d6e6a <_ZNSt14_Function_baseD1Ev>
   d6e84:	4620      	mov	r0, r4
   d6e86:	bd10      	pop	{r4, pc}

000d6e88 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6e88:	4803      	ldr	r0, [pc, #12]	; (d6e98 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6e8a:	4a04      	ldr	r2, [pc, #16]	; (d6e9c <_GLOBAL__sub_I_RGB+0x14>)
   d6e8c:	4904      	ldr	r1, [pc, #16]	; (d6ea0 <_GLOBAL__sub_I_RGB+0x18>)
   d6e8e:	2300      	movs	r3, #0
   d6e90:	6083      	str	r3, [r0, #8]
   d6e92:	f000 bcbb 	b.w	d780c <__aeabi_atexit>
   d6e96:	bf00      	nop
   d6e98:	2003e3fc 	.word	0x2003e3fc
   d6e9c:	2003de00 	.word	0x2003de00
   d6ea0:	000d6e7d 	.word	0x000d6e7d

000d6ea4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6ea4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6ea6:	4b0c      	ldr	r3, [pc, #48]	; (d6ed8 <serialEventRun+0x34>)
   d6ea8:	b133      	cbz	r3, d6eb8 <serialEventRun+0x14>
   d6eaa:	f000 f957 	bl	d715c <_Z16_fetch_usbserialv>
   d6eae:	6803      	ldr	r3, [r0, #0]
   d6eb0:	691b      	ldr	r3, [r3, #16]
   d6eb2:	4798      	blx	r3
   d6eb4:	2800      	cmp	r0, #0
   d6eb6:	dc09      	bgt.n	d6ecc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6eb8:	4b08      	ldr	r3, [pc, #32]	; (d6edc <serialEventRun+0x38>)
   d6eba:	b163      	cbz	r3, d6ed6 <serialEventRun+0x32>
   d6ebc:	f000 f9d6 	bl	d726c <_Z22__fetch_global_Serial1v>
   d6ec0:	6803      	ldr	r3, [r0, #0]
   d6ec2:	691b      	ldr	r3, [r3, #16]
   d6ec4:	4798      	blx	r3
   d6ec6:	2800      	cmp	r0, #0
   d6ec8:	dc03      	bgt.n	d6ed2 <serialEventRun+0x2e>
   d6eca:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6ecc:	f3af 8000 	nop.w
   d6ed0:	e7f2      	b.n	d6eb8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6ed2:	f3af 8000 	nop.w
   d6ed6:	bd08      	pop	{r3, pc}
	...

000d6ee0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6ee0:	b508      	push	{r3, lr}
	serialEventRun();
   d6ee2:	f7ff ffdf 	bl	d6ea4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6ee6:	f7ff fc31 	bl	d674c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6eea:	4b01      	ldr	r3, [pc, #4]	; (d6ef0 <_post_loop+0x10>)
   d6eec:	6018      	str	r0, [r3, #0]
   d6eee:	bd08      	pop	{r3, pc}
   d6ef0:	2003e730 	.word	0x2003e730

000d6ef4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6ef4:	4802      	ldr	r0, [pc, #8]	; (d6f00 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6ef6:	4a03      	ldr	r2, [pc, #12]	; (d6f04 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6ef8:	4903      	ldr	r1, [pc, #12]	; (d6f08 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6efa:	1a12      	subs	r2, r2, r0
   d6efc:	f001 ba2b 	b.w	d8356 <memcpy>
   d6f00:	2003f400 	.word	0x2003f400
   d6f04:	2003f404 	.word	0x2003f404
   d6f08:	000d8d60 	.word	0x000d8d60

000d6f0c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6f0c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6f0e:	2300      	movs	r3, #0
   d6f10:	9300      	str	r3, [sp, #0]
   d6f12:	461a      	mov	r2, r3
   d6f14:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6f18:	f7ff fd32 	bl	d6980 <system_ctrl_set_result>
}
   d6f1c:	b003      	add	sp, #12
   d6f1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6f24 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6f24:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6f26:	8843      	ldrh	r3, [r0, #2]
   d6f28:	2b0a      	cmp	r3, #10
   d6f2a:	d008      	beq.n	d6f3e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6f2c:	2b50      	cmp	r3, #80	; 0x50
   d6f2e:	d109      	bne.n	d6f44 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6f30:	4b09      	ldr	r3, [pc, #36]	; (d6f58 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6f32:	681b      	ldr	r3, [r3, #0]
   d6f34:	b13b      	cbz	r3, d6f46 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6f36:	b003      	add	sp, #12
   d6f38:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6f3c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6f3e:	f7ff ffe5 	bl	d6f0c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6f42:	e006      	b.n	d6f52 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6f44:	2300      	movs	r3, #0
   d6f46:	9300      	str	r3, [sp, #0]
   d6f48:	461a      	mov	r2, r3
   d6f4a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6f4e:	f7ff fd17 	bl	d6980 <system_ctrl_set_result>
        break;
    }
}
   d6f52:	b003      	add	sp, #12
   d6f54:	f85d fb04 	ldr.w	pc, [sp], #4
   d6f58:	2003e40c 	.word	0x2003e40c

000d6f5c <module_user_init_hook>:

void module_user_init_hook()
{
   d6f5c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6f5e:	4c10      	ldr	r4, [pc, #64]	; (d6fa0 <module_user_init_hook+0x44>)
   d6f60:	4d10      	ldr	r5, [pc, #64]	; (d6fa4 <module_user_init_hook+0x48>)
   d6f62:	6823      	ldr	r3, [r4, #0]
   d6f64:	42ab      	cmp	r3, r5
   d6f66:	4b10      	ldr	r3, [pc, #64]	; (d6fa8 <module_user_init_hook+0x4c>)
   d6f68:	bf0c      	ite	eq
   d6f6a:	2201      	moveq	r2, #1
   d6f6c:	2200      	movne	r2, #0
   d6f6e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6f70:	d002      	beq.n	d6f78 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6f72:	f7ff ffbf 	bl	d6ef4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6f76:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6f78:	f7ff fbd0 	bl	d671c <HAL_RNG_GetRandomNumber>
   d6f7c:	4604      	mov	r4, r0
    srand(seed);
   d6f7e:	f001 f9fd 	bl	d837c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6f82:	4b0a      	ldr	r3, [pc, #40]	; (d6fac <module_user_init_hook+0x50>)
   d6f84:	b113      	cbz	r3, d6f8c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d6f86:	4620      	mov	r0, r4
   d6f88:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6f8c:	2100      	movs	r1, #0
   d6f8e:	4807      	ldr	r0, [pc, #28]	; (d6fac <module_user_init_hook+0x50>)
   d6f90:	f7ff fd58 	bl	d6a44 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6f94:	2100      	movs	r1, #0
   d6f96:	4806      	ldr	r0, [pc, #24]	; (d6fb0 <module_user_init_hook+0x54>)
}
   d6f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6f9c:	f7ff bce6 	b.w	d696c <system_ctrl_set_app_request_handler>
   d6fa0:	2003f400 	.word	0x2003f400
   d6fa4:	9a271c1e 	.word	0x9a271c1e
   d6fa8:	2003e410 	.word	0x2003e410
   d6fac:	00000000 	.word	0x00000000
   d6fb0:	000d6f25 	.word	0x000d6f25

000d6fb4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6fb4:	4770      	bx	lr

000d6fb6 <_ZN9IPAddressD0Ev>:
   d6fb6:	b510      	push	{r4, lr}
   d6fb8:	2118      	movs	r1, #24
   d6fba:	4604      	mov	r4, r0
   d6fbc:	f000 fc34 	bl	d7828 <_ZdlPvj>
   d6fc0:	4620      	mov	r0, r4
   d6fc2:	bd10      	pop	{r4, pc}

000d6fc4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6fc6:	7d03      	ldrb	r3, [r0, #20]
   d6fc8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6fca:	b08d      	sub	sp, #52	; 0x34
   d6fcc:	460e      	mov	r6, r1
   d6fce:	f100 0704 	add.w	r7, r0, #4
   d6fd2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6fd6:	d002      	beq.n	d6fde <_ZNK9IPAddress7printToER5Print+0x1a>
   d6fd8:	f100 0508 	add.w	r5, r0, #8
   d6fdc:	e018      	b.n	d7010 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6fde:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6fe0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6fe2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6fe6:	232f      	movs	r3, #47	; 0x2f
   d6fe8:	462a      	mov	r2, r5
   d6fea:	200a      	movs	r0, #10
   d6fec:	f7ff fbe6 	bl	d67bc <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6ff0:	4628      	mov	r0, r5
   d6ff2:	f001 fa37 	bl	d8464 <strlen>
   d6ff6:	6833      	ldr	r3, [r6, #0]
   d6ff8:	4602      	mov	r2, r0
   d6ffa:	68db      	ldr	r3, [r3, #12]
   d6ffc:	4629      	mov	r1, r5
   d6ffe:	4630      	mov	r0, r6
   d7000:	4798      	blx	r3
   d7002:	e00f      	b.n	d7024 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7004:	b124      	cbz	r4, d7010 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7006:	212e      	movs	r1, #46	; 0x2e
   d7008:	4630      	mov	r0, r6
   d700a:	f7ff fe9f 	bl	d6d4c <_ZN5Print5printEc>
   d700e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7010:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7014:	220a      	movs	r2, #10
   d7016:	4630      	mov	r0, r6
   d7018:	f7ff feb7 	bl	d6d8a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d701c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d701e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7020:	d1f0      	bne.n	d7004 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7022:	4620      	mov	r0, r4
    }
    return n;
}
   d7024:	b00d      	add	sp, #52	; 0x34
   d7026:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7028 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7028:	b510      	push	{r4, lr}
   d702a:	4b05      	ldr	r3, [pc, #20]	; (d7040 <_ZN9IPAddressC1Ev+0x18>)
   d702c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d702e:	2211      	movs	r2, #17
   d7030:	f840 3b04 	str.w	r3, [r0], #4
   d7034:	2100      	movs	r1, #0
   d7036:	f001 f999 	bl	d836c <memset>
{
    clear();
}
   d703a:	4620      	mov	r0, r4
   d703c:	bd10      	pop	{r4, pc}
   d703e:	bf00      	nop
   d7040:	000d8a3c 	.word	0x000d8a3c

000d7044 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7044:	4603      	mov	r3, r0
   d7046:	4a07      	ldr	r2, [pc, #28]	; (d7064 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7048:	b510      	push	{r4, lr}
   d704a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d704e:	f101 0210 	add.w	r2, r1, #16
   d7052:	f851 4b04 	ldr.w	r4, [r1], #4
   d7056:	f843 4b04 	str.w	r4, [r3], #4
   d705a:	4291      	cmp	r1, r2
   d705c:	d1f9      	bne.n	d7052 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d705e:	780a      	ldrb	r2, [r1, #0]
   d7060:	701a      	strb	r2, [r3, #0]
}
   d7062:	bd10      	pop	{r4, pc}
   d7064:	000d8a3c 	.word	0x000d8a3c

000d7068 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7068:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d706a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d706e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7072:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7076:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d707a:	2304      	movs	r3, #4
   d707c:	6041      	str	r1, [r0, #4]
   d707e:	7503      	strb	r3, [r0, #20]
   d7080:	bd10      	pop	{r4, pc}

000d7082 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7082:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7084:	780d      	ldrb	r5, [r1, #0]
   d7086:	788b      	ldrb	r3, [r1, #2]
   d7088:	784a      	ldrb	r2, [r1, #1]
   d708a:	78c9      	ldrb	r1, [r1, #3]
   d708c:	9100      	str	r1, [sp, #0]
   d708e:	4629      	mov	r1, r5
   d7090:	f7ff ffea 	bl	d7068 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7094:	b003      	add	sp, #12
   d7096:	bd30      	pop	{r4, r5, pc}

000d7098 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7098:	7441      	strb	r1, [r0, #17]
   d709a:	4770      	bx	lr

000d709c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d709c:	4770      	bx	lr

000d709e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d709e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d70a0:	2100      	movs	r1, #0
   d70a2:	7c00      	ldrb	r0, [r0, #16]
   d70a4:	f7ff fc32 	bl	d690c <HAL_USB_USART_Receive_Data>
}
   d70a8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d70ac:	bf28      	it	cs
   d70ae:	f04f 30ff 	movcs.w	r0, #4294967295
   d70b2:	bd08      	pop	{r3, pc}

000d70b4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d70b4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d70b6:	2101      	movs	r1, #1
   d70b8:	7c00      	ldrb	r0, [r0, #16]
   d70ba:	f7ff fc27 	bl	d690c <HAL_USB_USART_Receive_Data>
}
   d70be:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d70c2:	bf28      	it	cs
   d70c4:	f04f 30ff 	movcs.w	r0, #4294967295
   d70c8:	bd08      	pop	{r3, pc}

000d70ca <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d70ca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d70cc:	7c00      	ldrb	r0, [r0, #16]
   d70ce:	f7ff fc15 	bl	d68fc <HAL_USB_USART_Available_Data_For_Write>
}
   d70d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d70d6:	bd08      	pop	{r3, pc}

000d70d8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d70d8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d70da:	7c00      	ldrb	r0, [r0, #16]
   d70dc:	f7ff fc06 	bl	d68ec <HAL_USB_USART_Available_Data>
}
   d70e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d70e4:	bd08      	pop	{r3, pc}

000d70e6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d70e6:	7c00      	ldrb	r0, [r0, #16]
   d70e8:	f7ff bc20 	b.w	d692c <HAL_USB_USART_Flush_Data>

000d70ec <_ZN9USBSerialD0Ev>:
   d70ec:	b510      	push	{r4, lr}
   d70ee:	2114      	movs	r1, #20
   d70f0:	4604      	mov	r4, r0
   d70f2:	f000 fb99 	bl	d7828 <_ZdlPvj>
   d70f6:	4620      	mov	r0, r4
   d70f8:	bd10      	pop	{r4, pc}

000d70fa <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d70fa:	b538      	push	{r3, r4, r5, lr}
   d70fc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d70fe:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7100:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7102:	f7ff fbfb 	bl	d68fc <HAL_USB_USART_Available_Data_For_Write>
   d7106:	2800      	cmp	r0, #0
   d7108:	dc01      	bgt.n	d710e <_ZN9USBSerial5writeEh+0x14>
   d710a:	7c60      	ldrb	r0, [r4, #17]
   d710c:	b128      	cbz	r0, d711a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d710e:	4629      	mov	r1, r5
   d7110:	7c20      	ldrb	r0, [r4, #16]
   d7112:	f7ff fc03 	bl	d691c <HAL_USB_USART_Send_Data>
   d7116:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d711a:	bd38      	pop	{r3, r4, r5, pc}

000d711c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d711c:	b510      	push	{r4, lr}
   d711e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7120:	2300      	movs	r3, #0
   d7122:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7128:	60a3      	str	r3, [r4, #8]
   d712a:	4b05      	ldr	r3, [pc, #20]	; (d7140 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d712c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d712e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7130:	4608      	mov	r0, r1
{
  _serial = serial;
   d7132:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7134:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7136:	4611      	mov	r1, r2
   d7138:	f7ff fbc8 	bl	d68cc <HAL_USB_USART_Init>
}
   d713c:	4620      	mov	r0, r4
   d713e:	bd10      	pop	{r4, pc}
   d7140:	000d8a50 	.word	0x000d8a50

000d7144 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7144:	2200      	movs	r2, #0
   d7146:	7c00      	ldrb	r0, [r0, #16]
   d7148:	f7ff bbc8 	b.w	d68dc <HAL_USB_USART_Begin>

000d714c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d714c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d714e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7150:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7152:	2100      	movs	r1, #0
   d7154:	f001 f90a 	bl	d836c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7158:	4620      	mov	r0, r4
   d715a:	bd10      	pop	{r4, pc}

000d715c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d715c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d715e:	4d0e      	ldr	r5, [pc, #56]	; (d7198 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7160:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7162:	a801      	add	r0, sp, #4
   d7164:	f7ff fff2 	bl	d714c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7168:	6829      	ldr	r1, [r5, #0]
   d716a:	f011 0401 	ands.w	r4, r1, #1
   d716e:	d110      	bne.n	d7192 <_Z16_fetch_usbserialv+0x36>
   d7170:	4628      	mov	r0, r5
   d7172:	f7fc ff96 	bl	d40a2 <__cxa_guard_acquire>
   d7176:	b160      	cbz	r0, d7192 <_Z16_fetch_usbserialv+0x36>
   d7178:	aa01      	add	r2, sp, #4
   d717a:	4621      	mov	r1, r4
   d717c:	4807      	ldr	r0, [pc, #28]	; (d719c <_Z16_fetch_usbserialv+0x40>)
   d717e:	f7ff ffcd 	bl	d711c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7182:	4628      	mov	r0, r5
   d7184:	f7fc ff92 	bl	d40ac <__cxa_guard_release>
   d7188:	4a05      	ldr	r2, [pc, #20]	; (d71a0 <_Z16_fetch_usbserialv+0x44>)
   d718a:	4906      	ldr	r1, [pc, #24]	; (d71a4 <_Z16_fetch_usbserialv+0x48>)
   d718c:	4803      	ldr	r0, [pc, #12]	; (d719c <_Z16_fetch_usbserialv+0x40>)
   d718e:	f000 fb3d 	bl	d780c <__aeabi_atexit>
	return _usbserial;
}
   d7192:	4802      	ldr	r0, [pc, #8]	; (d719c <_Z16_fetch_usbserialv+0x40>)
   d7194:	b007      	add	sp, #28
   d7196:	bd30      	pop	{r4, r5, pc}
   d7198:	2003e414 	.word	0x2003e414
   d719c:	2003e418 	.word	0x2003e418
   d71a0:	2003de00 	.word	0x2003de00
   d71a4:	000d709d 	.word	0x000d709d

000d71a8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d71a8:	4770      	bx	lr

000d71aa <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d71aa:	7441      	strb	r1, [r0, #17]
   d71ac:	4770      	bx	lr

000d71ae <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d71ae:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d71b0:	7c00      	ldrb	r0, [r0, #16]
   d71b2:	f7ff fb43 	bl	d683c <HAL_USART_Available_Data_For_Write>
}
   d71b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d71ba:	bd08      	pop	{r3, pc}

000d71bc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d71bc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d71be:	7c00      	ldrb	r0, [r0, #16]
   d71c0:	f7ff fb14 	bl	d67ec <HAL_USART_Available_Data>
}
   d71c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d71c8:	bd08      	pop	{r3, pc}

000d71ca <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d71ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d71cc:	7c00      	ldrb	r0, [r0, #16]
   d71ce:	f7ff fb1d 	bl	d680c <HAL_USART_Peek_Data>
}
   d71d2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d71d6:	bf28      	it	cs
   d71d8:	f04f 30ff 	movcs.w	r0, #4294967295
   d71dc:	bd08      	pop	{r3, pc}

000d71de <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d71de:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d71e0:	7c00      	ldrb	r0, [r0, #16]
   d71e2:	f7ff fb0b 	bl	d67fc <HAL_USART_Read_Data>
}
   d71e6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d71ea:	bf28      	it	cs
   d71ec:	f04f 30ff 	movcs.w	r0, #4294967295
   d71f0:	bd08      	pop	{r3, pc}

000d71f2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d71f2:	7c00      	ldrb	r0, [r0, #16]
   d71f4:	f7ff bb12 	b.w	d681c <HAL_USART_Flush_Data>

000d71f8 <_ZN11USARTSerialD0Ev>:
   d71f8:	b510      	push	{r4, lr}
   d71fa:	2114      	movs	r1, #20
   d71fc:	4604      	mov	r4, r0
   d71fe:	f000 fb13 	bl	d7828 <_ZdlPvj>
   d7202:	4620      	mov	r0, r4
   d7204:	bd10      	pop	{r4, pc}

000d7206 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7206:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7208:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d720a:	4604      	mov	r4, r0
   d720c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d720e:	b925      	cbnz	r5, d721a <_ZN11USARTSerial5writeEh+0x14>
   d7210:	7c00      	ldrb	r0, [r0, #16]
   d7212:	f7ff fb13 	bl	d683c <HAL_USART_Available_Data_For_Write>
   d7216:	2800      	cmp	r0, #0
   d7218:	dd05      	ble.n	d7226 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d721a:	4631      	mov	r1, r6
   d721c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d721e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7222:	f7ff badb 	b.w	d67dc <HAL_USART_Write_Data>
  }
  return 0;
}
   d7226:	4628      	mov	r0, r5
   d7228:	bd70      	pop	{r4, r5, r6, pc}
	...

000d722c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d722c:	b510      	push	{r4, lr}
   d722e:	4604      	mov	r4, r0
   d7230:	4608      	mov	r0, r1
   d7232:	4611      	mov	r1, r2
   d7234:	2200      	movs	r2, #0
   d7236:	6062      	str	r2, [r4, #4]
   d7238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d723c:	60a2      	str	r2, [r4, #8]
   d723e:	4a05      	ldr	r2, [pc, #20]	; (d7254 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7240:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7242:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7244:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7246:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7248:	461a      	mov	r2, r3
   d724a:	f7ff fabf 	bl	d67cc <HAL_USART_Init>
}
   d724e:	4620      	mov	r0, r4
   d7250:	bd10      	pop	{r4, pc}
   d7252:	bf00      	nop
   d7254:	000d8a80 	.word	0x000d8a80

000d7258 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7258:	2300      	movs	r3, #0
   d725a:	7c00      	ldrb	r0, [r0, #16]
   d725c:	f7ff baf6 	b.w	d684c <HAL_USART_BeginConfig>

000d7260 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d7260:	2200      	movs	r2, #0
   d7262:	f7ff bff9 	b.w	d7258 <_ZN11USARTSerial5beginEmm>

000d7266 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7266:	7c00      	ldrb	r0, [r0, #16]
   d7268:	f7ff bae0 	b.w	d682c <HAL_USART_Is_Enabled>

000d726c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d726c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d726e:	4d0c      	ldr	r5, [pc, #48]	; (d72a0 <_Z22__fetch_global_Serial1v+0x34>)
   d7270:	6829      	ldr	r1, [r5, #0]
   d7272:	f011 0401 	ands.w	r4, r1, #1
   d7276:	d111      	bne.n	d729c <_Z22__fetch_global_Serial1v+0x30>
   d7278:	4628      	mov	r0, r5
   d727a:	f7fc ff12 	bl	d40a2 <__cxa_guard_acquire>
   d727e:	b168      	cbz	r0, d729c <_Z22__fetch_global_Serial1v+0x30>
   d7280:	4a08      	ldr	r2, [pc, #32]	; (d72a4 <_Z22__fetch_global_Serial1v+0x38>)
   d7282:	4b09      	ldr	r3, [pc, #36]	; (d72a8 <_Z22__fetch_global_Serial1v+0x3c>)
   d7284:	4809      	ldr	r0, [pc, #36]	; (d72ac <_Z22__fetch_global_Serial1v+0x40>)
   d7286:	4621      	mov	r1, r4
   d7288:	f7ff ffd0 	bl	d722c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d728c:	4628      	mov	r0, r5
   d728e:	f7fc ff0d 	bl	d40ac <__cxa_guard_release>
   d7292:	4a07      	ldr	r2, [pc, #28]	; (d72b0 <_Z22__fetch_global_Serial1v+0x44>)
   d7294:	4907      	ldr	r1, [pc, #28]	; (d72b4 <_Z22__fetch_global_Serial1v+0x48>)
   d7296:	4805      	ldr	r0, [pc, #20]	; (d72ac <_Z22__fetch_global_Serial1v+0x40>)
   d7298:	f000 fab8 	bl	d780c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d729c:	4803      	ldr	r0, [pc, #12]	; (d72ac <_Z22__fetch_global_Serial1v+0x40>)
   d729e:	bd38      	pop	{r3, r4, r5, pc}
   d72a0:	2003e4c4 	.word	0x2003e4c4
   d72a4:	2003e4c8 	.word	0x2003e4c8
   d72a8:	2003e440 	.word	0x2003e440
   d72ac:	2003e42c 	.word	0x2003e42c
   d72b0:	2003de00 	.word	0x2003de00
   d72b4:	000d71a9 	.word	0x000d71a9

000d72b8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d72b8:	4770      	bx	lr

000d72ba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d72ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d72bc:	4606      	mov	r6, r0
   d72be:	4615      	mov	r5, r2
   d72c0:	460c      	mov	r4, r1
   d72c2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d72c4:	42bc      	cmp	r4, r7
   d72c6:	d006      	beq.n	d72d6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d72c8:	6833      	ldr	r3, [r6, #0]
   d72ca:	f814 1b01 	ldrb.w	r1, [r4], #1
   d72ce:	689b      	ldr	r3, [r3, #8]
   d72d0:	4630      	mov	r0, r6
   d72d2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d72d4:	e7f6      	b.n	d72c4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d72d6:	4628      	mov	r0, r5
   d72d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d72da <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d72da:	2200      	movs	r2, #0
   d72dc:	7c00      	ldrb	r0, [r0, #16]
   d72de:	f7ff babd 	b.w	d685c <HAL_I2C_Write_Data>

000d72e2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d72e2:	2100      	movs	r1, #0
   d72e4:	7c00      	ldrb	r0, [r0, #16]
   d72e6:	f7ff bac1 	b.w	d686c <HAL_I2C_Available_Data>

000d72ea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d72ea:	2100      	movs	r1, #0
   d72ec:	7c00      	ldrb	r0, [r0, #16]
   d72ee:	f7ff bac5 	b.w	d687c <HAL_I2C_Read_Data>

000d72f2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d72f2:	2100      	movs	r1, #0
   d72f4:	7c00      	ldrb	r0, [r0, #16]
   d72f6:	f7ff bac9 	b.w	d688c <HAL_I2C_Peek_Data>

000d72fa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d72fa:	2100      	movs	r1, #0
   d72fc:	7c00      	ldrb	r0, [r0, #16]
   d72fe:	f7ff bacd 	b.w	d689c <HAL_I2C_Flush_Data>

000d7302 <_ZN7TwoWireD0Ev>:
   d7302:	b510      	push	{r4, lr}
   d7304:	2114      	movs	r1, #20
   d7306:	4604      	mov	r4, r0
   d7308:	f000 fa8e 	bl	d7828 <_ZdlPvj>
   d730c:	4620      	mov	r0, r4
   d730e:	bd10      	pop	{r4, pc}

000d7310 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7310:	b510      	push	{r4, lr}
   d7312:	4604      	mov	r4, r0
   d7314:	2300      	movs	r3, #0
   d7316:	6063      	str	r3, [r4, #4]
   d7318:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d731c:	60a3      	str	r3, [r4, #8]
   d731e:	4b04      	ldr	r3, [pc, #16]	; (d7330 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7320:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7322:	4608      	mov	r0, r1
   d7324:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d7326:	4611      	mov	r1, r2
   d7328:	f7ff fac8 	bl	d68bc <HAL_I2C_Init>
}
   d732c:	4620      	mov	r0, r4
   d732e:	bd10      	pop	{r4, pc}
   d7330:	000d8ab0 	.word	0x000d8ab0

000d7334 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7334:	2100      	movs	r1, #0
   d7336:	7c00      	ldrb	r0, [r0, #16]
   d7338:	f7ff bab8 	b.w	d68ac <HAL_I2C_Is_Enabled>

000d733c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d733c:	b510      	push	{r4, lr}
  if (0 == max) {
   d733e:	4604      	mov	r4, r0
   d7340:	b130      	cbz	r0, d7350 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d7342:	f001 f843 	bl	d83cc <rand>
   d7346:	fb90 f3f4 	sdiv	r3, r0, r4
   d734a:	fb03 0014 	mls	r0, r3, r4, r0
   d734e:	bd10      	pop	{r4, pc}
}
   d7350:	bd10      	pop	{r4, pc}

000d7352 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d7352:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d7354:	b510      	push	{r4, lr}
   d7356:	4604      	mov	r4, r0
  if (min >= max) {
   d7358:	da04      	bge.n	d7364 <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d735a:	1a08      	subs	r0, r1, r0
   d735c:	f7ff ffee 	bl	d733c <_Z6randomi>
   d7360:	4420      	add	r0, r4
   d7362:	bd10      	pop	{r4, pc}
}
   d7364:	bd10      	pop	{r4, pc}

000d7366 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7366:	2200      	movs	r2, #0
   d7368:	4611      	mov	r1, r2
   d736a:	6840      	ldr	r0, [r0, #4]
   d736c:	f7ff bb4a 	b.w	d6a04 <network_listening>

000d7370 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7370:	2200      	movs	r2, #0
   d7372:	4611      	mov	r1, r2
   d7374:	6840      	ldr	r0, [r0, #4]
   d7376:	f7ff bb55 	b.w	d6a24 <network_get_listen_timeout>

000d737a <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d737a:	2200      	movs	r2, #0
   d737c:	6840      	ldr	r0, [r0, #4]
   d737e:	f7ff bb49 	b.w	d6a14 <network_set_listen_timeout>

000d7382 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7382:	2200      	movs	r2, #0
   d7384:	f081 0101 	eor.w	r1, r1, #1
   d7388:	6840      	ldr	r0, [r0, #4]
   d738a:	f7ff bb33 	b.w	d69f4 <network_listen>

000d738e <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d738e:	2300      	movs	r3, #0
   d7390:	461a      	mov	r2, r3
   d7392:	2101      	movs	r1, #1
   d7394:	6840      	ldr	r0, [r0, #4]
   d7396:	f7ff bb25 	b.w	d69e4 <network_off>

000d739a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d739a:	2300      	movs	r3, #0
   d739c:	461a      	mov	r2, r3
   d739e:	4619      	mov	r1, r3
   d73a0:	6840      	ldr	r0, [r0, #4]
   d73a2:	f7ff bb17 	b.w	d69d4 <network_on>

000d73a6 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d73a6:	2200      	movs	r2, #0
   d73a8:	4611      	mov	r1, r2
   d73aa:	6840      	ldr	r0, [r0, #4]
   d73ac:	f7ff bb0a 	b.w	d69c4 <network_ready>

000d73b0 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d73b0:	2200      	movs	r2, #0
   d73b2:	4611      	mov	r1, r2
   d73b4:	6840      	ldr	r0, [r0, #4]
   d73b6:	f7ff baf5 	b.w	d69a4 <network_connecting>

000d73ba <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d73ba:	2200      	movs	r2, #0
   d73bc:	2102      	movs	r1, #2
   d73be:	6840      	ldr	r0, [r0, #4]
   d73c0:	f7ff baf8 	b.w	d69b4 <network_disconnect>

000d73c4 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d73c4:	2300      	movs	r3, #0
   d73c6:	461a      	mov	r2, r3
   d73c8:	6840      	ldr	r0, [r0, #4]
   d73ca:	f7ff bae3 	b.w	d6994 <network_connect>

000d73ce <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d73ce:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d73d0:	4605      	mov	r5, r0
   d73d2:	b188      	cbz	r0, d73f8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d73d4:	6804      	ldr	r4, [r0, #0]
   d73d6:	b14c      	cbz	r4, d73ec <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d73d8:	68a3      	ldr	r3, [r4, #8]
   d73da:	b11b      	cbz	r3, d73e4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d73dc:	2203      	movs	r2, #3
   d73de:	4621      	mov	r1, r4
   d73e0:	4620      	mov	r0, r4
   d73e2:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d73e4:	2110      	movs	r1, #16
   d73e6:	4620      	mov	r0, r4
   d73e8:	f000 fa1e 	bl	d7828 <_ZdlPvj>
   d73ec:	4628      	mov	r0, r5
   d73ee:	2114      	movs	r1, #20
      }
   d73f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d73f4:	f000 ba18 	b.w	d7828 <_ZdlPvj>
   d73f8:	bd38      	pop	{r3, r4, r5, pc}

000d73fa <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d73fa:	b110      	cbz	r0, d7402 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d73fc:	6803      	ldr	r3, [r0, #0]
   d73fe:	685b      	ldr	r3, [r3, #4]
   d7400:	4718      	bx	r3
   d7402:	4770      	bx	lr

000d7404 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7404:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7406:	6803      	ldr	r3, [r0, #0]
   d7408:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d740a:	b1bb      	cbz	r3, d743c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d740c:	6858      	ldr	r0, [r3, #4]
   d740e:	f7ff f9a5 	bl	d675c <os_thread_is_current>
   d7412:	b978      	cbnz	r0, d7434 <_ZN6ThreadD1Ev+0x30>
   d7414:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7416:	7c5a      	ldrb	r2, [r3, #17]
   d7418:	b912      	cbnz	r2, d7420 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d741a:	6858      	ldr	r0, [r3, #4]
   d741c:	f7ff f9ae 	bl	d677c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7420:	6823      	ldr	r3, [r4, #0]
   d7422:	6858      	ldr	r0, [r3, #4]
   d7424:	f7ff f9b2 	bl	d678c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7428:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d742a:	2300      	movs	r3, #0
   d742c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d742e:	b128      	cbz	r0, d743c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7430:	f7ff ffcd 	bl	d73ce <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7434:	6820      	ldr	r0, [r4, #0]
   d7436:	b108      	cbz	r0, d743c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7438:	f7ff ffc9 	bl	d73ce <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d743c:	4620      	mov	r0, r4
   d743e:	bd10      	pop	{r4, pc}

000d7440 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7440:	b538      	push	{r3, r4, r5, lr}
   d7442:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7444:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7448:	b108      	cbz	r0, d744e <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d744a:	f7fc fe28 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d744e:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7452:	b108      	cbz	r0, d7458 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7454:	f7ff f9aa 	bl	d67ac <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7458:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d745c:	b135      	cbz	r5, d746c <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d745e:	4628      	mov	r0, r5
   d7460:	f7ff ffd0 	bl	d7404 <_ZN6ThreadD1Ev>
   d7464:	2104      	movs	r1, #4
   d7466:	4628      	mov	r0, r5
   d7468:	f000 f9de 	bl	d7828 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d746c:	6820      	ldr	r0, [r4, #0]
   d746e:	b108      	cbz	r0, d7474 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7470:	f7ff ffc3 	bl	d73fa <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7474:	4620      	mov	r0, r4
   d7476:	bd38      	pop	{r3, r4, r5, pc}

000d7478 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7478:	b510      	push	{r4, lr}
   d747a:	4b04      	ldr	r3, [pc, #16]	; (d748c <_ZN5spark9MeshClassD1Ev+0x14>)
   d747c:	4604      	mov	r4, r0
   d747e:	f840 3b08 	str.w	r3, [r0], #8
   d7482:	f7ff ffdd 	bl	d7440 <_ZN5spark11MeshPublishD1Ev>
   d7486:	4620      	mov	r0, r4
   d7488:	bd10      	pop	{r4, pc}
   d748a:	bf00      	nop
   d748c:	000d8ad8 	.word	0x000d8ad8

000d7490 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7490:	b538      	push	{r3, r4, r5, lr}
   d7492:	4c0e      	ldr	r4, [pc, #56]	; (d74cc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7494:	4b0e      	ldr	r3, [pc, #56]	; (d74d0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7496:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7498:	2500      	movs	r5, #0
   d749a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d749c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d74a0:	6063      	str	r3, [r4, #4]
   d74a2:	60a5      	str	r5, [r4, #8]
   d74a4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d74a8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d74ac:	f7ff f976 	bl	d679c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d74b0:	4b08      	ldr	r3, [pc, #32]	; (d74d4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d74b2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d74b6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d74ba:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d74bc:	4620      	mov	r0, r4
   d74be:	4a06      	ldr	r2, [pc, #24]	; (d74d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d74c0:	4906      	ldr	r1, [pc, #24]	; (d74dc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d74c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d74c6:	f000 b9a1 	b.w	d780c <__aeabi_atexit>
   d74ca:	bf00      	nop
   d74cc:	2003e54c 	.word	0x2003e54c
   d74d0:	000d8b40 	.word	0x000d8b40
   d74d4:	000d8ad8 	.word	0x000d8ad8
   d74d8:	2003de00 	.word	0x2003de00
   d74dc:	000d7479 	.word	0x000d7479

000d74e0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d74e0:	2200      	movs	r2, #0
   d74e2:	4611      	mov	r1, r2
   d74e4:	6840      	ldr	r0, [r0, #4]
   d74e6:	f7ff ba6d 	b.w	d69c4 <network_ready>

000d74ea <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d74ea:	2200      	movs	r2, #0
   d74ec:	4611      	mov	r1, r2
   d74ee:	6840      	ldr	r0, [r0, #4]
   d74f0:	f7ff ba88 	b.w	d6a04 <network_listening>

000d74f4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d74f4:	2200      	movs	r2, #0
   d74f6:	4611      	mov	r1, r2
   d74f8:	6840      	ldr	r0, [r0, #4]
   d74fa:	f7ff ba93 	b.w	d6a24 <network_get_listen_timeout>

000d74fe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d74fe:	2200      	movs	r2, #0
   d7500:	6840      	ldr	r0, [r0, #4]
   d7502:	f7ff ba87 	b.w	d6a14 <network_set_listen_timeout>

000d7506 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7506:	2200      	movs	r2, #0
   d7508:	f081 0101 	eor.w	r1, r1, #1
   d750c:	6840      	ldr	r0, [r0, #4]
   d750e:	f7ff ba71 	b.w	d69f4 <network_listen>

000d7512 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7512:	2300      	movs	r3, #0
   d7514:	461a      	mov	r2, r3
   d7516:	4619      	mov	r1, r3
   d7518:	6840      	ldr	r0, [r0, #4]
   d751a:	f7ff ba63 	b.w	d69e4 <network_off>

000d751e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d751e:	2300      	movs	r3, #0
   d7520:	461a      	mov	r2, r3
   d7522:	4619      	mov	r1, r3
   d7524:	6840      	ldr	r0, [r0, #4]
   d7526:	f7ff ba55 	b.w	d69d4 <network_on>

000d752a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d752a:	2200      	movs	r2, #0
   d752c:	4611      	mov	r1, r2
   d752e:	6840      	ldr	r0, [r0, #4]
   d7530:	f7ff ba38 	b.w	d69a4 <network_connecting>

000d7534 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7534:	2200      	movs	r2, #0
   d7536:	2102      	movs	r1, #2
   d7538:	6840      	ldr	r0, [r0, #4]
   d753a:	f7ff ba3b 	b.w	d69b4 <network_disconnect>

000d753e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d753e:	2300      	movs	r3, #0
   d7540:	461a      	mov	r2, r3
   d7542:	6840      	ldr	r0, [r0, #4]
   d7544:	f7ff ba26 	b.w	d6994 <network_connect>

000d7548 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7548:	4b02      	ldr	r3, [pc, #8]	; (d7554 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d754a:	2204      	movs	r2, #4
   d754c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d754e:	4a02      	ldr	r2, [pc, #8]	; (d7558 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7550:	601a      	str	r2, [r3, #0]
   d7552:	4770      	bx	lr
   d7554:	2003e720 	.word	0x2003e720
   d7558:	000d8b0c 	.word	0x000d8b0c

000d755c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d755c:	2300      	movs	r3, #0
   d755e:	461a      	mov	r2, r3
   d7560:	6840      	ldr	r0, [r0, #4]
   d7562:	f7ff ba17 	b.w	d6994 <network_connect>

000d7566 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7566:	2200      	movs	r2, #0
   d7568:	2102      	movs	r1, #2
   d756a:	6840      	ldr	r0, [r0, #4]
   d756c:	f7ff ba22 	b.w	d69b4 <network_disconnect>

000d7570 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7570:	2200      	movs	r2, #0
   d7572:	4611      	mov	r1, r2
   d7574:	6840      	ldr	r0, [r0, #4]
   d7576:	f7ff ba15 	b.w	d69a4 <network_connecting>

000d757a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d757a:	2200      	movs	r2, #0
   d757c:	4611      	mov	r1, r2
   d757e:	6840      	ldr	r0, [r0, #4]
   d7580:	f7ff ba20 	b.w	d69c4 <network_ready>

000d7584 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7584:	2300      	movs	r3, #0
   d7586:	461a      	mov	r2, r3
   d7588:	4619      	mov	r1, r3
   d758a:	6840      	ldr	r0, [r0, #4]
   d758c:	f7ff ba22 	b.w	d69d4 <network_on>

000d7590 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7590:	2300      	movs	r3, #0
   d7592:	461a      	mov	r2, r3
   d7594:	4619      	mov	r1, r3
   d7596:	6840      	ldr	r0, [r0, #4]
   d7598:	f7ff ba24 	b.w	d69e4 <network_off>

000d759c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d759c:	2200      	movs	r2, #0
   d759e:	f081 0101 	eor.w	r1, r1, #1
   d75a2:	6840      	ldr	r0, [r0, #4]
   d75a4:	f7ff ba26 	b.w	d69f4 <network_listen>

000d75a8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d75a8:	2200      	movs	r2, #0
   d75aa:	6840      	ldr	r0, [r0, #4]
   d75ac:	f7ff ba32 	b.w	d6a14 <network_set_listen_timeout>

000d75b0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d75b0:	2200      	movs	r2, #0
   d75b2:	4611      	mov	r1, r2
   d75b4:	6840      	ldr	r0, [r0, #4]
   d75b6:	f7ff ba35 	b.w	d6a24 <network_get_listen_timeout>

000d75ba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d75ba:	2200      	movs	r2, #0
   d75bc:	4611      	mov	r1, r2
   d75be:	6840      	ldr	r0, [r0, #4]
   d75c0:	f7ff ba20 	b.w	d6a04 <network_listening>

000d75c4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d75c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d75c8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d75ca:	b095      	sub	sp, #84	; 0x54
   d75cc:	4616      	mov	r6, r2
   d75ce:	460d      	mov	r5, r1
   d75d0:	4607      	mov	r7, r0
    IPAddress addr;
   d75d2:	f7ff fd29 	bl	d7028 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d75d6:	4621      	mov	r1, r4
   d75d8:	2220      	movs	r2, #32
   d75da:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d75dc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d75de:	f000 fec5 	bl	d836c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d75e2:	2340      	movs	r3, #64	; 0x40
   d75e4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d75e6:	4621      	mov	r1, r4
   d75e8:	466b      	mov	r3, sp
   d75ea:	aa0c      	add	r2, sp, #48	; 0x30
   d75ec:	4630      	mov	r0, r6
   d75ee:	f7ff f815 	bl	d661c <netdb_getaddrinfo>
    if (!r) {
   d75f2:	4604      	mov	r4, r0
   d75f4:	2800      	cmp	r0, #0
   d75f6:	d144      	bne.n	d7682 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d75f8:	4602      	mov	r2, r0
   d75fa:	2101      	movs	r1, #1
   d75fc:	6868      	ldr	r0, [r5, #4]
   d75fe:	f7ff f9e1 	bl	d69c4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7602:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7604:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7606:	4622      	mov	r2, r4
   d7608:	6868      	ldr	r0, [r5, #4]
   d760a:	f7ff f9db 	bl	d69c4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d760e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7610:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7612:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7614:	2e00      	cmp	r6, #0
   d7616:	d034      	beq.n	d7682 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7618:	2900      	cmp	r1, #0
   d761a:	d132      	bne.n	d7682 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d761c:	6873      	ldr	r3, [r6, #4]
   d761e:	2b02      	cmp	r3, #2
   d7620:	d002      	beq.n	d7628 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7622:	2b0a      	cmp	r3, #10
   d7624:	d009      	beq.n	d763a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7626:	e02a      	b.n	d767e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7628:	f1b8 0f00 	cmp.w	r8, #0
   d762c:	d027      	beq.n	d767e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d762e:	6971      	ldr	r1, [r6, #20]
   d7630:	4638      	mov	r0, r7
   d7632:	3104      	adds	r1, #4
   d7634:	f7ff fd25 	bl	d7082 <_ZN9IPAddressaSEPKh>
   d7638:	e020      	b.n	d767c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d763a:	f1b9 0f00 	cmp.w	r9, #0
   d763e:	d01e      	beq.n	d767e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7640:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7642:	2211      	movs	r2, #17
   d7644:	a801      	add	r0, sp, #4
   d7646:	f000 fe91 	bl	d836c <memset>
                    a.v = 6;
   d764a:	2306      	movs	r3, #6
   d764c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7650:	ad01      	add	r5, sp, #4
   d7652:	f104 0308 	add.w	r3, r4, #8
   d7656:	3418      	adds	r4, #24
   d7658:	6818      	ldr	r0, [r3, #0]
   d765a:	6859      	ldr	r1, [r3, #4]
   d765c:	462a      	mov	r2, r5
   d765e:	c203      	stmia	r2!, {r0, r1}
   d7660:	3308      	adds	r3, #8
   d7662:	42a3      	cmp	r3, r4
   d7664:	4615      	mov	r5, r2
   d7666:	d1f7      	bne.n	d7658 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7668:	a901      	add	r1, sp, #4
   d766a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d766c:	ad07      	add	r5, sp, #28
   d766e:	f7ff fce9 	bl	d7044 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7674:	1d3c      	adds	r4, r7, #4
   d7676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7678:	682b      	ldr	r3, [r5, #0]
   d767a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d767c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d767e:	69f6      	ldr	r6, [r6, #28]
   d7680:	e7c8      	b.n	d7614 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7682:	9800      	ldr	r0, [sp, #0]
   d7684:	f7fe ffc2 	bl	d660c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7688:	4638      	mov	r0, r7
   d768a:	b015      	add	sp, #84	; 0x54
   d768c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7690 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7690:	4b02      	ldr	r3, [pc, #8]	; (d769c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7692:	4a03      	ldr	r2, [pc, #12]	; (d76a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7694:	601a      	str	r2, [r3, #0]
   d7696:	2200      	movs	r2, #0
   d7698:	605a      	str	r2, [r3, #4]
   d769a:	4770      	bx	lr
   d769c:	2003e728 	.word	0x2003e728
   d76a0:	000d8b40 	.word	0x000d8b40

000d76a4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d76a4:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d76a6:	4e18      	ldr	r6, [pc, #96]	; (d7708 <pinAvailable+0x64>)
   d76a8:	6831      	ldr	r1, [r6, #0]
   d76aa:	f011 0501 	ands.w	r5, r1, #1
   d76ae:	4604      	mov	r4, r0
   d76b0:	d10a      	bne.n	d76c8 <pinAvailable+0x24>
   d76b2:	4630      	mov	r0, r6
   d76b4:	f7fc fcf5 	bl	d40a2 <__cxa_guard_acquire>
   d76b8:	b130      	cbz	r0, d76c8 <pinAvailable+0x24>
   d76ba:	4629      	mov	r1, r5
   d76bc:	4813      	ldr	r0, [pc, #76]	; (d770c <pinAvailable+0x68>)
   d76be:	f7ff fa25 	bl	d6b0c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d76c2:	4630      	mov	r0, r6
   d76c4:	f7fc fcf2 	bl	d40ac <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d76c8:	4810      	ldr	r0, [pc, #64]	; (d770c <pinAvailable+0x68>)
   d76ca:	f7ff fadc 	bl	d6c86 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d76ce:	b128      	cbz	r0, d76dc <pinAvailable+0x38>
   d76d0:	f1a4 030b 	sub.w	r3, r4, #11
   d76d4:	2b02      	cmp	r3, #2
   d76d6:	d801      	bhi.n	d76dc <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d76d8:	2000      	movs	r0, #0
   d76da:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d76dc:	f000 f870 	bl	d77c0 <_Z19__fetch_global_Wirev>
   d76e0:	f7ff fe28 	bl	d7334 <_ZN7TwoWire9isEnabledEv>
   d76e4:	b108      	cbz	r0, d76ea <pinAvailable+0x46>
   d76e6:	2c01      	cmp	r4, #1
   d76e8:	d9f6      	bls.n	d76d8 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d76ea:	f7ff fdbf 	bl	d726c <_Z22__fetch_global_Serial1v>
   d76ee:	f7ff fdba 	bl	d7266 <_ZN11USARTSerial9isEnabledEv>
   d76f2:	b118      	cbz	r0, d76fc <pinAvailable+0x58>
   d76f4:	f1a4 0309 	sub.w	r3, r4, #9
   d76f8:	2b01      	cmp	r3, #1
   d76fa:	d9ed      	bls.n	d76d8 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d76fc:	2c23      	cmp	r4, #35	; 0x23
   d76fe:	bf8c      	ite	hi
   d7700:	2000      	movhi	r0, #0
   d7702:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7704:	bd70      	pop	{r4, r5, r6, pc}
   d7706:	bf00      	nop
   d7708:	2003de04 	.word	0x2003de04
   d770c:	2003de08 	.word	0x2003de08

000d7710 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7710:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7712:	b538      	push	{r3, r4, r5, lr}
   d7714:	4604      	mov	r4, r0
   d7716:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7718:	d80a      	bhi.n	d7730 <pinMode+0x20>
   d771a:	29ff      	cmp	r1, #255	; 0xff
   d771c:	d008      	beq.n	d7730 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d771e:	f7ff ffc1 	bl	d76a4 <pinAvailable>
   d7722:	b128      	cbz	r0, d7730 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7724:	4629      	mov	r1, r5
   d7726:	4620      	mov	r0, r4
}
   d7728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d772c:	f7fe bf86 	b.w	d663c <HAL_Pin_Mode>
   d7730:	bd38      	pop	{r3, r4, r5, pc}

000d7732 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7732:	b538      	push	{r3, r4, r5, lr}
   d7734:	4604      	mov	r4, r0
   d7736:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7738:	f7fe ff88 	bl	d664c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d773c:	28ff      	cmp	r0, #255	; 0xff
   d773e:	d010      	beq.n	d7762 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7740:	2806      	cmp	r0, #6
   d7742:	d804      	bhi.n	d774e <digitalWrite+0x1c>
   d7744:	234d      	movs	r3, #77	; 0x4d
   d7746:	fa23 f000 	lsr.w	r0, r3, r0
   d774a:	07c3      	lsls	r3, r0, #31
   d774c:	d409      	bmi.n	d7762 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d774e:	4620      	mov	r0, r4
   d7750:	f7ff ffa8 	bl	d76a4 <pinAvailable>
   d7754:	b128      	cbz	r0, d7762 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7756:	4629      	mov	r1, r5
   d7758:	4620      	mov	r0, r4
}
   d775a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d775e:	f7fe bf7d 	b.w	d665c <HAL_GPIO_Write>
   d7762:	bd38      	pop	{r3, r4, r5, pc}

000d7764 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7764:	b510      	push	{r4, lr}
   d7766:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7768:	f7fe ff70 	bl	d664c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d776c:	3804      	subs	r0, #4
   d776e:	b2c0      	uxtb	r0, r0
   d7770:	2801      	cmp	r0, #1
   d7772:	d908      	bls.n	d7786 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7774:	4620      	mov	r0, r4
   d7776:	f7ff ff95 	bl	d76a4 <pinAvailable>
   d777a:	b120      	cbz	r0, d7786 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d777c:	4620      	mov	r0, r4
}
   d777e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7782:	f7fe bf73 	b.w	d666c <HAL_GPIO_Read>
}
   d7786:	2000      	movs	r0, #0
   d7788:	bd10      	pop	{r4, pc}
	...

000d778c <_Z17acquireWireBufferv>:
   d778c:	b570      	push	{r4, r5, r6, lr}
   d778e:	4604      	mov	r4, r0
   d7790:	2514      	movs	r5, #20
   d7792:	462a      	mov	r2, r5
   d7794:	4e09      	ldr	r6, [pc, #36]	; (d77bc <_Z17acquireWireBufferv+0x30>)
   d7796:	2100      	movs	r1, #0
   d7798:	f000 fde8 	bl	d836c <memset>
   d779c:	8025      	strh	r5, [r4, #0]
   d779e:	2520      	movs	r5, #32
   d77a0:	4631      	mov	r1, r6
   d77a2:	60a5      	str	r5, [r4, #8]
   d77a4:	6125      	str	r5, [r4, #16]
   d77a6:	4628      	mov	r0, r5
   d77a8:	f000 f840 	bl	d782c <_ZnajRKSt9nothrow_t>
   d77ac:	4631      	mov	r1, r6
   d77ae:	6060      	str	r0, [r4, #4]
   d77b0:	4628      	mov	r0, r5
   d77b2:	f000 f83b 	bl	d782c <_ZnajRKSt9nothrow_t>
   d77b6:	60e0      	str	r0, [r4, #12]
   d77b8:	4620      	mov	r0, r4
   d77ba:	bd70      	pop	{r4, r5, r6, pc}
   d77bc:	000d8b6c 	.word	0x000d8b6c

000d77c0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d77c0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d77c2:	4d0e      	ldr	r5, [pc, #56]	; (d77fc <_Z19__fetch_global_Wirev+0x3c>)
   d77c4:	6829      	ldr	r1, [r5, #0]
   d77c6:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d77ca:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d77cc:	d113      	bne.n	d77f6 <_Z19__fetch_global_Wirev+0x36>
   d77ce:	4628      	mov	r0, r5
   d77d0:	f7fc fc67 	bl	d40a2 <__cxa_guard_acquire>
   d77d4:	b178      	cbz	r0, d77f6 <_Z19__fetch_global_Wirev+0x36>
   d77d6:	a801      	add	r0, sp, #4
   d77d8:	f7ff ffd8 	bl	d778c <_Z17acquireWireBufferv>
   d77dc:	aa01      	add	r2, sp, #4
   d77de:	4621      	mov	r1, r4
   d77e0:	4807      	ldr	r0, [pc, #28]	; (d7800 <_Z19__fetch_global_Wirev+0x40>)
   d77e2:	f7ff fd95 	bl	d7310 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d77e6:	4628      	mov	r0, r5
   d77e8:	f7fc fc60 	bl	d40ac <__cxa_guard_release>
   d77ec:	4a05      	ldr	r2, [pc, #20]	; (d7804 <_Z19__fetch_global_Wirev+0x44>)
   d77ee:	4906      	ldr	r1, [pc, #24]	; (d7808 <_Z19__fetch_global_Wirev+0x48>)
   d77f0:	4803      	ldr	r0, [pc, #12]	; (d7800 <_Z19__fetch_global_Wirev+0x40>)
   d77f2:	f000 f80b 	bl	d780c <__aeabi_atexit>
	return wire;
}
   d77f6:	4802      	ldr	r0, [pc, #8]	; (d7800 <_Z19__fetch_global_Wirev+0x40>)
   d77f8:	b007      	add	sp, #28
   d77fa:	bd30      	pop	{r4, r5, pc}
   d77fc:	2003e734 	.word	0x2003e734
   d7800:	2003e738 	.word	0x2003e738
   d7804:	2003de00 	.word	0x2003de00
   d7808:	000d72b9 	.word	0x000d72b9

000d780c <__aeabi_atexit>:
   d780c:	460b      	mov	r3, r1
   d780e:	4601      	mov	r1, r0
   d7810:	4618      	mov	r0, r3
   d7812:	f000 bd83 	b.w	d831c <__cxa_atexit>
	...

000d7818 <_ZSt15get_new_handlerv>:
   d7818:	4b02      	ldr	r3, [pc, #8]	; (d7824 <_ZSt15get_new_handlerv+0xc>)
   d781a:	6818      	ldr	r0, [r3, #0]
   d781c:	f3bf 8f5f 	dmb	sy
   d7820:	4770      	bx	lr
   d7822:	bf00      	nop
   d7824:	2003e74c 	.word	0x2003e74c

000d7828 <_ZdlPvj>:
   d7828:	f7fc bc37 	b.w	d409a <_ZdlPv>

000d782c <_ZnajRKSt9nothrow_t>:
   d782c:	f000 b800 	b.w	d7830 <_ZnwjRKSt9nothrow_t>

000d7830 <_ZnwjRKSt9nothrow_t>:
   d7830:	b510      	push	{r4, lr}
   d7832:	2800      	cmp	r0, #0
   d7834:	bf14      	ite	ne
   d7836:	4604      	movne	r4, r0
   d7838:	2401      	moveq	r4, #1
   d783a:	4620      	mov	r0, r4
   d783c:	f7ff f90a 	bl	d6a54 <malloc>
   d7840:	b920      	cbnz	r0, d784c <_ZnwjRKSt9nothrow_t+0x1c>
   d7842:	f7ff ffe9 	bl	d7818 <_ZSt15get_new_handlerv>
   d7846:	b108      	cbz	r0, d784c <_ZnwjRKSt9nothrow_t+0x1c>
   d7848:	4780      	blx	r0
   d784a:	e7f6      	b.n	d783a <_ZnwjRKSt9nothrow_t+0xa>
   d784c:	bd10      	pop	{r4, pc}
	...

000d7850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7850:	4b18      	ldr	r3, [pc, #96]	; (d78b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7852:	681a      	ldr	r2, [r3, #0]
   d7854:	07d1      	lsls	r1, r2, #31
   d7856:	bf5c      	itt	pl
   d7858:	2201      	movpl	r2, #1
   d785a:	601a      	strpl	r2, [r3, #0]
   d785c:	4b16      	ldr	r3, [pc, #88]	; (d78b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d785e:	681a      	ldr	r2, [r3, #0]
   d7860:	07d2      	lsls	r2, r2, #31
   d7862:	bf5c      	itt	pl
   d7864:	2201      	movpl	r2, #1
   d7866:	601a      	strpl	r2, [r3, #0]
   d7868:	4b14      	ldr	r3, [pc, #80]	; (d78bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d786a:	681a      	ldr	r2, [r3, #0]
   d786c:	07d0      	lsls	r0, r2, #31
   d786e:	bf5c      	itt	pl
   d7870:	2201      	movpl	r2, #1
   d7872:	601a      	strpl	r2, [r3, #0]
   d7874:	4b12      	ldr	r3, [pc, #72]	; (d78c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7876:	681a      	ldr	r2, [r3, #0]
   d7878:	07d1      	lsls	r1, r2, #31
   d787a:	bf5c      	itt	pl
   d787c:	2201      	movpl	r2, #1
   d787e:	601a      	strpl	r2, [r3, #0]
   d7880:	4b10      	ldr	r3, [pc, #64]	; (d78c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7882:	681a      	ldr	r2, [r3, #0]
   d7884:	07d2      	lsls	r2, r2, #31
   d7886:	bf5c      	itt	pl
   d7888:	2201      	movpl	r2, #1
   d788a:	601a      	strpl	r2, [r3, #0]
   d788c:	4b0e      	ldr	r3, [pc, #56]	; (d78c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d788e:	681a      	ldr	r2, [r3, #0]
   d7890:	07d0      	lsls	r0, r2, #31
   d7892:	bf5c      	itt	pl
   d7894:	2201      	movpl	r2, #1
   d7896:	601a      	strpl	r2, [r3, #0]
   d7898:	4b0c      	ldr	r3, [pc, #48]	; (d78cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d789a:	681a      	ldr	r2, [r3, #0]
   d789c:	07d1      	lsls	r1, r2, #31
   d789e:	bf5c      	itt	pl
   d78a0:	2201      	movpl	r2, #1
   d78a2:	601a      	strpl	r2, [r3, #0]
   d78a4:	4b0a      	ldr	r3, [pc, #40]	; (d78d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d78a6:	681a      	ldr	r2, [r3, #0]
   d78a8:	07d2      	lsls	r2, r2, #31
   d78aa:	bf5c      	itt	pl
   d78ac:	2201      	movpl	r2, #1
   d78ae:	601a      	strpl	r2, [r3, #0]
   d78b0:	4770      	bx	lr
   d78b2:	bf00      	nop
   d78b4:	2003e76c 	.word	0x2003e76c
   d78b8:	2003e768 	.word	0x2003e768
   d78bc:	2003e764 	.word	0x2003e764
   d78c0:	2003e760 	.word	0x2003e760
   d78c4:	2003e75c 	.word	0x2003e75c
   d78c8:	2003e758 	.word	0x2003e758
   d78cc:	2003e754 	.word	0x2003e754
   d78d0:	2003e750 	.word	0x2003e750

000d78d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d78d4:	4b24      	ldr	r3, [pc, #144]	; (d7968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d78d6:	681a      	ldr	r2, [r3, #0]
   d78d8:	07d0      	lsls	r0, r2, #31
   d78da:	bf5c      	itt	pl
   d78dc:	2201      	movpl	r2, #1
   d78de:	601a      	strpl	r2, [r3, #0]
   d78e0:	4b22      	ldr	r3, [pc, #136]	; (d796c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d78e2:	681a      	ldr	r2, [r3, #0]
   d78e4:	07d1      	lsls	r1, r2, #31
   d78e6:	bf5c      	itt	pl
   d78e8:	2201      	movpl	r2, #1
   d78ea:	601a      	strpl	r2, [r3, #0]
   d78ec:	4b20      	ldr	r3, [pc, #128]	; (d7970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d78ee:	681a      	ldr	r2, [r3, #0]
   d78f0:	07d2      	lsls	r2, r2, #31
   d78f2:	bf5c      	itt	pl
   d78f4:	2201      	movpl	r2, #1
   d78f6:	601a      	strpl	r2, [r3, #0]
   d78f8:	4b1e      	ldr	r3, [pc, #120]	; (d7974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d78fa:	681a      	ldr	r2, [r3, #0]
   d78fc:	07d0      	lsls	r0, r2, #31
   d78fe:	bf5c      	itt	pl
   d7900:	2201      	movpl	r2, #1
   d7902:	601a      	strpl	r2, [r3, #0]
   d7904:	4b1c      	ldr	r3, [pc, #112]	; (d7978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7906:	681a      	ldr	r2, [r3, #0]
   d7908:	07d1      	lsls	r1, r2, #31
   d790a:	bf5c      	itt	pl
   d790c:	2201      	movpl	r2, #1
   d790e:	601a      	strpl	r2, [r3, #0]
   d7910:	4b1a      	ldr	r3, [pc, #104]	; (d797c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7912:	681a      	ldr	r2, [r3, #0]
   d7914:	07d2      	lsls	r2, r2, #31
   d7916:	bf5c      	itt	pl
   d7918:	2201      	movpl	r2, #1
   d791a:	601a      	strpl	r2, [r3, #0]
   d791c:	4b18      	ldr	r3, [pc, #96]	; (d7980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d791e:	681a      	ldr	r2, [r3, #0]
   d7920:	07d0      	lsls	r0, r2, #31
   d7922:	bf5c      	itt	pl
   d7924:	2201      	movpl	r2, #1
   d7926:	601a      	strpl	r2, [r3, #0]
   d7928:	4b16      	ldr	r3, [pc, #88]	; (d7984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d792a:	681a      	ldr	r2, [r3, #0]
   d792c:	07d1      	lsls	r1, r2, #31
   d792e:	bf5c      	itt	pl
   d7930:	2201      	movpl	r2, #1
   d7932:	601a      	strpl	r2, [r3, #0]
   d7934:	4b14      	ldr	r3, [pc, #80]	; (d7988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7936:	681a      	ldr	r2, [r3, #0]
   d7938:	07d2      	lsls	r2, r2, #31
   d793a:	bf5c      	itt	pl
   d793c:	2201      	movpl	r2, #1
   d793e:	601a      	strpl	r2, [r3, #0]
   d7940:	4b12      	ldr	r3, [pc, #72]	; (d798c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7942:	681a      	ldr	r2, [r3, #0]
   d7944:	07d0      	lsls	r0, r2, #31
   d7946:	bf5c      	itt	pl
   d7948:	2201      	movpl	r2, #1
   d794a:	601a      	strpl	r2, [r3, #0]
   d794c:	4b10      	ldr	r3, [pc, #64]	; (d7990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d794e:	681a      	ldr	r2, [r3, #0]
   d7950:	07d1      	lsls	r1, r2, #31
   d7952:	bf5c      	itt	pl
   d7954:	2201      	movpl	r2, #1
   d7956:	601a      	strpl	r2, [r3, #0]
   d7958:	4b0e      	ldr	r3, [pc, #56]	; (d7994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d795a:	681a      	ldr	r2, [r3, #0]
   d795c:	07d2      	lsls	r2, r2, #31
   d795e:	bf5c      	itt	pl
   d7960:	2201      	movpl	r2, #1
   d7962:	601a      	strpl	r2, [r3, #0]
   d7964:	4770      	bx	lr
   d7966:	bf00      	nop
   d7968:	2003e79c 	.word	0x2003e79c
   d796c:	2003e798 	.word	0x2003e798
   d7970:	2003e794 	.word	0x2003e794
   d7974:	2003e790 	.word	0x2003e790
   d7978:	2003e78c 	.word	0x2003e78c
   d797c:	2003e788 	.word	0x2003e788
   d7980:	2003e784 	.word	0x2003e784
   d7984:	2003e780 	.word	0x2003e780
   d7988:	2003e77c 	.word	0x2003e77c
   d798c:	2003e778 	.word	0x2003e778
   d7990:	2003e774 	.word	0x2003e774
   d7994:	2003e770 	.word	0x2003e770

000d7998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7998:	4b24      	ldr	r3, [pc, #144]	; (d7a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d799a:	681a      	ldr	r2, [r3, #0]
   d799c:	07d0      	lsls	r0, r2, #31
   d799e:	bf5c      	itt	pl
   d79a0:	2201      	movpl	r2, #1
   d79a2:	601a      	strpl	r2, [r3, #0]
   d79a4:	4b22      	ldr	r3, [pc, #136]	; (d7a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d79a6:	681a      	ldr	r2, [r3, #0]
   d79a8:	07d1      	lsls	r1, r2, #31
   d79aa:	bf5c      	itt	pl
   d79ac:	2201      	movpl	r2, #1
   d79ae:	601a      	strpl	r2, [r3, #0]
   d79b0:	4b20      	ldr	r3, [pc, #128]	; (d7a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d79b2:	681a      	ldr	r2, [r3, #0]
   d79b4:	07d2      	lsls	r2, r2, #31
   d79b6:	bf5c      	itt	pl
   d79b8:	2201      	movpl	r2, #1
   d79ba:	601a      	strpl	r2, [r3, #0]
   d79bc:	4b1e      	ldr	r3, [pc, #120]	; (d7a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d79be:	681a      	ldr	r2, [r3, #0]
   d79c0:	07d0      	lsls	r0, r2, #31
   d79c2:	bf5c      	itt	pl
   d79c4:	2201      	movpl	r2, #1
   d79c6:	601a      	strpl	r2, [r3, #0]
   d79c8:	4b1c      	ldr	r3, [pc, #112]	; (d7a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d79ca:	681a      	ldr	r2, [r3, #0]
   d79cc:	07d1      	lsls	r1, r2, #31
   d79ce:	bf5c      	itt	pl
   d79d0:	2201      	movpl	r2, #1
   d79d2:	601a      	strpl	r2, [r3, #0]
   d79d4:	4b1a      	ldr	r3, [pc, #104]	; (d7a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d79d6:	681a      	ldr	r2, [r3, #0]
   d79d8:	07d2      	lsls	r2, r2, #31
   d79da:	bf5c      	itt	pl
   d79dc:	2201      	movpl	r2, #1
   d79de:	601a      	strpl	r2, [r3, #0]
   d79e0:	4b18      	ldr	r3, [pc, #96]	; (d7a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d79e2:	681a      	ldr	r2, [r3, #0]
   d79e4:	07d0      	lsls	r0, r2, #31
   d79e6:	bf5c      	itt	pl
   d79e8:	2201      	movpl	r2, #1
   d79ea:	601a      	strpl	r2, [r3, #0]
   d79ec:	4b16      	ldr	r3, [pc, #88]	; (d7a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d79ee:	681a      	ldr	r2, [r3, #0]
   d79f0:	07d1      	lsls	r1, r2, #31
   d79f2:	bf5c      	itt	pl
   d79f4:	2201      	movpl	r2, #1
   d79f6:	601a      	strpl	r2, [r3, #0]
   d79f8:	4b14      	ldr	r3, [pc, #80]	; (d7a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d79fa:	681a      	ldr	r2, [r3, #0]
   d79fc:	07d2      	lsls	r2, r2, #31
   d79fe:	bf5c      	itt	pl
   d7a00:	2201      	movpl	r2, #1
   d7a02:	601a      	strpl	r2, [r3, #0]
   d7a04:	4b12      	ldr	r3, [pc, #72]	; (d7a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7a06:	681a      	ldr	r2, [r3, #0]
   d7a08:	07d0      	lsls	r0, r2, #31
   d7a0a:	bf5c      	itt	pl
   d7a0c:	2201      	movpl	r2, #1
   d7a0e:	601a      	strpl	r2, [r3, #0]
   d7a10:	4b10      	ldr	r3, [pc, #64]	; (d7a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7a12:	681a      	ldr	r2, [r3, #0]
   d7a14:	07d1      	lsls	r1, r2, #31
   d7a16:	bf5c      	itt	pl
   d7a18:	2201      	movpl	r2, #1
   d7a1a:	601a      	strpl	r2, [r3, #0]
   d7a1c:	4b0e      	ldr	r3, [pc, #56]	; (d7a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7a1e:	681a      	ldr	r2, [r3, #0]
   d7a20:	07d2      	lsls	r2, r2, #31
   d7a22:	bf5c      	itt	pl
   d7a24:	2201      	movpl	r2, #1
   d7a26:	601a      	strpl	r2, [r3, #0]
   d7a28:	4770      	bx	lr
   d7a2a:	bf00      	nop
   d7a2c:	2003e7cc 	.word	0x2003e7cc
   d7a30:	2003e7c8 	.word	0x2003e7c8
   d7a34:	2003e7c4 	.word	0x2003e7c4
   d7a38:	2003e7c0 	.word	0x2003e7c0
   d7a3c:	2003e7bc 	.word	0x2003e7bc
   d7a40:	2003e7b8 	.word	0x2003e7b8
   d7a44:	2003e7b4 	.word	0x2003e7b4
   d7a48:	2003e7b0 	.word	0x2003e7b0
   d7a4c:	2003e7ac 	.word	0x2003e7ac
   d7a50:	2003e7a8 	.word	0x2003e7a8
   d7a54:	2003e7a4 	.word	0x2003e7a4
   d7a58:	2003e7a0 	.word	0x2003e7a0

000d7a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7a5c:	4b18      	ldr	r3, [pc, #96]	; (d7ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7a5e:	681a      	ldr	r2, [r3, #0]
   d7a60:	07d1      	lsls	r1, r2, #31
   d7a62:	bf5c      	itt	pl
   d7a64:	2201      	movpl	r2, #1
   d7a66:	601a      	strpl	r2, [r3, #0]
   d7a68:	4b16      	ldr	r3, [pc, #88]	; (d7ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7a6a:	681a      	ldr	r2, [r3, #0]
   d7a6c:	07d2      	lsls	r2, r2, #31
   d7a6e:	bf5c      	itt	pl
   d7a70:	2201      	movpl	r2, #1
   d7a72:	601a      	strpl	r2, [r3, #0]
   d7a74:	4b14      	ldr	r3, [pc, #80]	; (d7ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7a76:	681a      	ldr	r2, [r3, #0]
   d7a78:	07d0      	lsls	r0, r2, #31
   d7a7a:	bf5c      	itt	pl
   d7a7c:	2201      	movpl	r2, #1
   d7a7e:	601a      	strpl	r2, [r3, #0]
   d7a80:	4b12      	ldr	r3, [pc, #72]	; (d7acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7a82:	681a      	ldr	r2, [r3, #0]
   d7a84:	07d1      	lsls	r1, r2, #31
   d7a86:	bf5c      	itt	pl
   d7a88:	2201      	movpl	r2, #1
   d7a8a:	601a      	strpl	r2, [r3, #0]
   d7a8c:	4b10      	ldr	r3, [pc, #64]	; (d7ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7a8e:	681a      	ldr	r2, [r3, #0]
   d7a90:	07d2      	lsls	r2, r2, #31
   d7a92:	bf5c      	itt	pl
   d7a94:	2201      	movpl	r2, #1
   d7a96:	601a      	strpl	r2, [r3, #0]
   d7a98:	4b0e      	ldr	r3, [pc, #56]	; (d7ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7a9a:	681a      	ldr	r2, [r3, #0]
   d7a9c:	07d0      	lsls	r0, r2, #31
   d7a9e:	bf5c      	itt	pl
   d7aa0:	2201      	movpl	r2, #1
   d7aa2:	601a      	strpl	r2, [r3, #0]
   d7aa4:	4b0c      	ldr	r3, [pc, #48]	; (d7ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7aa6:	681a      	ldr	r2, [r3, #0]
   d7aa8:	07d1      	lsls	r1, r2, #31
   d7aaa:	bf5c      	itt	pl
   d7aac:	2201      	movpl	r2, #1
   d7aae:	601a      	strpl	r2, [r3, #0]
   d7ab0:	4b0a      	ldr	r3, [pc, #40]	; (d7adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7ab2:	681a      	ldr	r2, [r3, #0]
   d7ab4:	07d2      	lsls	r2, r2, #31
   d7ab6:	bf5c      	itt	pl
   d7ab8:	2201      	movpl	r2, #1
   d7aba:	601a      	strpl	r2, [r3, #0]
   d7abc:	4770      	bx	lr
   d7abe:	bf00      	nop
   d7ac0:	2003e7ec 	.word	0x2003e7ec
   d7ac4:	2003e7e8 	.word	0x2003e7e8
   d7ac8:	2003e7e4 	.word	0x2003e7e4
   d7acc:	2003e7e0 	.word	0x2003e7e0
   d7ad0:	2003e7dc 	.word	0x2003e7dc
   d7ad4:	2003e7d8 	.word	0x2003e7d8
   d7ad8:	2003e7d4 	.word	0x2003e7d4
   d7adc:	2003e7d0 	.word	0x2003e7d0

000d7ae0 <__aeabi_drsub>:
   d7ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7ae4:	e002      	b.n	d7aec <__adddf3>
   d7ae6:	bf00      	nop

000d7ae8 <__aeabi_dsub>:
   d7ae8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7aec <__adddf3>:
   d7aec:	b530      	push	{r4, r5, lr}
   d7aee:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7af2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7af6:	ea94 0f05 	teq	r4, r5
   d7afa:	bf08      	it	eq
   d7afc:	ea90 0f02 	teqeq	r0, r2
   d7b00:	bf1f      	itttt	ne
   d7b02:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7b06:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7b0a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7b0e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7b12:	f000 80e2 	beq.w	d7cda <__adddf3+0x1ee>
   d7b16:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7b1a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7b1e:	bfb8      	it	lt
   d7b20:	426d      	neglt	r5, r5
   d7b22:	dd0c      	ble.n	d7b3e <__adddf3+0x52>
   d7b24:	442c      	add	r4, r5
   d7b26:	ea80 0202 	eor.w	r2, r0, r2
   d7b2a:	ea81 0303 	eor.w	r3, r1, r3
   d7b2e:	ea82 0000 	eor.w	r0, r2, r0
   d7b32:	ea83 0101 	eor.w	r1, r3, r1
   d7b36:	ea80 0202 	eor.w	r2, r0, r2
   d7b3a:	ea81 0303 	eor.w	r3, r1, r3
   d7b3e:	2d36      	cmp	r5, #54	; 0x36
   d7b40:	bf88      	it	hi
   d7b42:	bd30      	pophi	{r4, r5, pc}
   d7b44:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7b48:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7b4c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7b50:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7b54:	d002      	beq.n	d7b5c <__adddf3+0x70>
   d7b56:	4240      	negs	r0, r0
   d7b58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7b5c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7b60:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7b64:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7b68:	d002      	beq.n	d7b70 <__adddf3+0x84>
   d7b6a:	4252      	negs	r2, r2
   d7b6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7b70:	ea94 0f05 	teq	r4, r5
   d7b74:	f000 80a7 	beq.w	d7cc6 <__adddf3+0x1da>
   d7b78:	f1a4 0401 	sub.w	r4, r4, #1
   d7b7c:	f1d5 0e20 	rsbs	lr, r5, #32
   d7b80:	db0d      	blt.n	d7b9e <__adddf3+0xb2>
   d7b82:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7b86:	fa22 f205 	lsr.w	r2, r2, r5
   d7b8a:	1880      	adds	r0, r0, r2
   d7b8c:	f141 0100 	adc.w	r1, r1, #0
   d7b90:	fa03 f20e 	lsl.w	r2, r3, lr
   d7b94:	1880      	adds	r0, r0, r2
   d7b96:	fa43 f305 	asr.w	r3, r3, r5
   d7b9a:	4159      	adcs	r1, r3
   d7b9c:	e00e      	b.n	d7bbc <__adddf3+0xd0>
   d7b9e:	f1a5 0520 	sub.w	r5, r5, #32
   d7ba2:	f10e 0e20 	add.w	lr, lr, #32
   d7ba6:	2a01      	cmp	r2, #1
   d7ba8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7bac:	bf28      	it	cs
   d7bae:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7bb2:	fa43 f305 	asr.w	r3, r3, r5
   d7bb6:	18c0      	adds	r0, r0, r3
   d7bb8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7bbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7bc0:	d507      	bpl.n	d7bd2 <__adddf3+0xe6>
   d7bc2:	f04f 0e00 	mov.w	lr, #0
   d7bc6:	f1dc 0c00 	rsbs	ip, ip, #0
   d7bca:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7bce:	eb6e 0101 	sbc.w	r1, lr, r1
   d7bd2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7bd6:	d31b      	bcc.n	d7c10 <__adddf3+0x124>
   d7bd8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7bdc:	d30c      	bcc.n	d7bf8 <__adddf3+0x10c>
   d7bde:	0849      	lsrs	r1, r1, #1
   d7be0:	ea5f 0030 	movs.w	r0, r0, rrx
   d7be4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7be8:	f104 0401 	add.w	r4, r4, #1
   d7bec:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7bf0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7bf4:	f080 809a 	bcs.w	d7d2c <__adddf3+0x240>
   d7bf8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7bfc:	bf08      	it	eq
   d7bfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7c02:	f150 0000 	adcs.w	r0, r0, #0
   d7c06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7c0a:	ea41 0105 	orr.w	r1, r1, r5
   d7c0e:	bd30      	pop	{r4, r5, pc}
   d7c10:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7c14:	4140      	adcs	r0, r0
   d7c16:	eb41 0101 	adc.w	r1, r1, r1
   d7c1a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7c1e:	f1a4 0401 	sub.w	r4, r4, #1
   d7c22:	d1e9      	bne.n	d7bf8 <__adddf3+0x10c>
   d7c24:	f091 0f00 	teq	r1, #0
   d7c28:	bf04      	itt	eq
   d7c2a:	4601      	moveq	r1, r0
   d7c2c:	2000      	moveq	r0, #0
   d7c2e:	fab1 f381 	clz	r3, r1
   d7c32:	bf08      	it	eq
   d7c34:	3320      	addeq	r3, #32
   d7c36:	f1a3 030b 	sub.w	r3, r3, #11
   d7c3a:	f1b3 0220 	subs.w	r2, r3, #32
   d7c3e:	da0c      	bge.n	d7c5a <__adddf3+0x16e>
   d7c40:	320c      	adds	r2, #12
   d7c42:	dd08      	ble.n	d7c56 <__adddf3+0x16a>
   d7c44:	f102 0c14 	add.w	ip, r2, #20
   d7c48:	f1c2 020c 	rsb	r2, r2, #12
   d7c4c:	fa01 f00c 	lsl.w	r0, r1, ip
   d7c50:	fa21 f102 	lsr.w	r1, r1, r2
   d7c54:	e00c      	b.n	d7c70 <__adddf3+0x184>
   d7c56:	f102 0214 	add.w	r2, r2, #20
   d7c5a:	bfd8      	it	le
   d7c5c:	f1c2 0c20 	rsble	ip, r2, #32
   d7c60:	fa01 f102 	lsl.w	r1, r1, r2
   d7c64:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7c68:	bfdc      	itt	le
   d7c6a:	ea41 010c 	orrle.w	r1, r1, ip
   d7c6e:	4090      	lslle	r0, r2
   d7c70:	1ae4      	subs	r4, r4, r3
   d7c72:	bfa2      	ittt	ge
   d7c74:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7c78:	4329      	orrge	r1, r5
   d7c7a:	bd30      	popge	{r4, r5, pc}
   d7c7c:	ea6f 0404 	mvn.w	r4, r4
   d7c80:	3c1f      	subs	r4, #31
   d7c82:	da1c      	bge.n	d7cbe <__adddf3+0x1d2>
   d7c84:	340c      	adds	r4, #12
   d7c86:	dc0e      	bgt.n	d7ca6 <__adddf3+0x1ba>
   d7c88:	f104 0414 	add.w	r4, r4, #20
   d7c8c:	f1c4 0220 	rsb	r2, r4, #32
   d7c90:	fa20 f004 	lsr.w	r0, r0, r4
   d7c94:	fa01 f302 	lsl.w	r3, r1, r2
   d7c98:	ea40 0003 	orr.w	r0, r0, r3
   d7c9c:	fa21 f304 	lsr.w	r3, r1, r4
   d7ca0:	ea45 0103 	orr.w	r1, r5, r3
   d7ca4:	bd30      	pop	{r4, r5, pc}
   d7ca6:	f1c4 040c 	rsb	r4, r4, #12
   d7caa:	f1c4 0220 	rsb	r2, r4, #32
   d7cae:	fa20 f002 	lsr.w	r0, r0, r2
   d7cb2:	fa01 f304 	lsl.w	r3, r1, r4
   d7cb6:	ea40 0003 	orr.w	r0, r0, r3
   d7cba:	4629      	mov	r1, r5
   d7cbc:	bd30      	pop	{r4, r5, pc}
   d7cbe:	fa21 f004 	lsr.w	r0, r1, r4
   d7cc2:	4629      	mov	r1, r5
   d7cc4:	bd30      	pop	{r4, r5, pc}
   d7cc6:	f094 0f00 	teq	r4, #0
   d7cca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7cce:	bf06      	itte	eq
   d7cd0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7cd4:	3401      	addeq	r4, #1
   d7cd6:	3d01      	subne	r5, #1
   d7cd8:	e74e      	b.n	d7b78 <__adddf3+0x8c>
   d7cda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7cde:	bf18      	it	ne
   d7ce0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7ce4:	d029      	beq.n	d7d3a <__adddf3+0x24e>
   d7ce6:	ea94 0f05 	teq	r4, r5
   d7cea:	bf08      	it	eq
   d7cec:	ea90 0f02 	teqeq	r0, r2
   d7cf0:	d005      	beq.n	d7cfe <__adddf3+0x212>
   d7cf2:	ea54 0c00 	orrs.w	ip, r4, r0
   d7cf6:	bf04      	itt	eq
   d7cf8:	4619      	moveq	r1, r3
   d7cfa:	4610      	moveq	r0, r2
   d7cfc:	bd30      	pop	{r4, r5, pc}
   d7cfe:	ea91 0f03 	teq	r1, r3
   d7d02:	bf1e      	ittt	ne
   d7d04:	2100      	movne	r1, #0
   d7d06:	2000      	movne	r0, #0
   d7d08:	bd30      	popne	{r4, r5, pc}
   d7d0a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7d0e:	d105      	bne.n	d7d1c <__adddf3+0x230>
   d7d10:	0040      	lsls	r0, r0, #1
   d7d12:	4149      	adcs	r1, r1
   d7d14:	bf28      	it	cs
   d7d16:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7d1a:	bd30      	pop	{r4, r5, pc}
   d7d1c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7d20:	bf3c      	itt	cc
   d7d22:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7d26:	bd30      	popcc	{r4, r5, pc}
   d7d28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7d2c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7d30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7d34:	f04f 0000 	mov.w	r0, #0
   d7d38:	bd30      	pop	{r4, r5, pc}
   d7d3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7d3e:	bf1a      	itte	ne
   d7d40:	4619      	movne	r1, r3
   d7d42:	4610      	movne	r0, r2
   d7d44:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7d48:	bf1c      	itt	ne
   d7d4a:	460b      	movne	r3, r1
   d7d4c:	4602      	movne	r2, r0
   d7d4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7d52:	bf06      	itte	eq
   d7d54:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7d58:	ea91 0f03 	teqeq	r1, r3
   d7d5c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7d60:	bd30      	pop	{r4, r5, pc}
   d7d62:	bf00      	nop

000d7d64 <__aeabi_ui2d>:
   d7d64:	f090 0f00 	teq	r0, #0
   d7d68:	bf04      	itt	eq
   d7d6a:	2100      	moveq	r1, #0
   d7d6c:	4770      	bxeq	lr
   d7d6e:	b530      	push	{r4, r5, lr}
   d7d70:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7d74:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7d78:	f04f 0500 	mov.w	r5, #0
   d7d7c:	f04f 0100 	mov.w	r1, #0
   d7d80:	e750      	b.n	d7c24 <__adddf3+0x138>
   d7d82:	bf00      	nop

000d7d84 <__aeabi_i2d>:
   d7d84:	f090 0f00 	teq	r0, #0
   d7d88:	bf04      	itt	eq
   d7d8a:	2100      	moveq	r1, #0
   d7d8c:	4770      	bxeq	lr
   d7d8e:	b530      	push	{r4, r5, lr}
   d7d90:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7d94:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7d98:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7d9c:	bf48      	it	mi
   d7d9e:	4240      	negmi	r0, r0
   d7da0:	f04f 0100 	mov.w	r1, #0
   d7da4:	e73e      	b.n	d7c24 <__adddf3+0x138>
   d7da6:	bf00      	nop

000d7da8 <__aeabi_f2d>:
   d7da8:	0042      	lsls	r2, r0, #1
   d7daa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7dae:	ea4f 0131 	mov.w	r1, r1, rrx
   d7db2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7db6:	bf1f      	itttt	ne
   d7db8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7dbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7dc0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7dc4:	4770      	bxne	lr
   d7dc6:	f092 0f00 	teq	r2, #0
   d7dca:	bf14      	ite	ne
   d7dcc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7dd0:	4770      	bxeq	lr
   d7dd2:	b530      	push	{r4, r5, lr}
   d7dd4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7dd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7ddc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7de0:	e720      	b.n	d7c24 <__adddf3+0x138>
   d7de2:	bf00      	nop

000d7de4 <__aeabi_ul2d>:
   d7de4:	ea50 0201 	orrs.w	r2, r0, r1
   d7de8:	bf08      	it	eq
   d7dea:	4770      	bxeq	lr
   d7dec:	b530      	push	{r4, r5, lr}
   d7dee:	f04f 0500 	mov.w	r5, #0
   d7df2:	e00a      	b.n	d7e0a <__aeabi_l2d+0x16>

000d7df4 <__aeabi_l2d>:
   d7df4:	ea50 0201 	orrs.w	r2, r0, r1
   d7df8:	bf08      	it	eq
   d7dfa:	4770      	bxeq	lr
   d7dfc:	b530      	push	{r4, r5, lr}
   d7dfe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7e02:	d502      	bpl.n	d7e0a <__aeabi_l2d+0x16>
   d7e04:	4240      	negs	r0, r0
   d7e06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7e0a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7e0e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7e12:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7e16:	f43f aedc 	beq.w	d7bd2 <__adddf3+0xe6>
   d7e1a:	f04f 0203 	mov.w	r2, #3
   d7e1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7e22:	bf18      	it	ne
   d7e24:	3203      	addne	r2, #3
   d7e26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7e2a:	bf18      	it	ne
   d7e2c:	3203      	addne	r2, #3
   d7e2e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7e32:	f1c2 0320 	rsb	r3, r2, #32
   d7e36:	fa00 fc03 	lsl.w	ip, r0, r3
   d7e3a:	fa20 f002 	lsr.w	r0, r0, r2
   d7e3e:	fa01 fe03 	lsl.w	lr, r1, r3
   d7e42:	ea40 000e 	orr.w	r0, r0, lr
   d7e46:	fa21 f102 	lsr.w	r1, r1, r2
   d7e4a:	4414      	add	r4, r2
   d7e4c:	e6c1      	b.n	d7bd2 <__adddf3+0xe6>
   d7e4e:	bf00      	nop

000d7e50 <__aeabi_dmul>:
   d7e50:	b570      	push	{r4, r5, r6, lr}
   d7e52:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7e56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7e5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7e5e:	bf1d      	ittte	ne
   d7e60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7e64:	ea94 0f0c 	teqne	r4, ip
   d7e68:	ea95 0f0c 	teqne	r5, ip
   d7e6c:	f000 f8de 	bleq	d802c <__aeabi_dmul+0x1dc>
   d7e70:	442c      	add	r4, r5
   d7e72:	ea81 0603 	eor.w	r6, r1, r3
   d7e76:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7e7a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7e7e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7e82:	bf18      	it	ne
   d7e84:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7e88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7e8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7e90:	d038      	beq.n	d7f04 <__aeabi_dmul+0xb4>
   d7e92:	fba0 ce02 	umull	ip, lr, r0, r2
   d7e96:	f04f 0500 	mov.w	r5, #0
   d7e9a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7e9e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7ea2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7ea6:	f04f 0600 	mov.w	r6, #0
   d7eaa:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7eae:	f09c 0f00 	teq	ip, #0
   d7eb2:	bf18      	it	ne
   d7eb4:	f04e 0e01 	orrne.w	lr, lr, #1
   d7eb8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7ebc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7ec0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7ec4:	d204      	bcs.n	d7ed0 <__aeabi_dmul+0x80>
   d7ec6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7eca:	416d      	adcs	r5, r5
   d7ecc:	eb46 0606 	adc.w	r6, r6, r6
   d7ed0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7ed4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7ed8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7edc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7ee0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7ee4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7ee8:	bf88      	it	hi
   d7eea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7eee:	d81e      	bhi.n	d7f2e <__aeabi_dmul+0xde>
   d7ef0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7ef4:	bf08      	it	eq
   d7ef6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7efa:	f150 0000 	adcs.w	r0, r0, #0
   d7efe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7f02:	bd70      	pop	{r4, r5, r6, pc}
   d7f04:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7f08:	ea46 0101 	orr.w	r1, r6, r1
   d7f0c:	ea40 0002 	orr.w	r0, r0, r2
   d7f10:	ea81 0103 	eor.w	r1, r1, r3
   d7f14:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7f18:	bfc2      	ittt	gt
   d7f1a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7f1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7f22:	bd70      	popgt	{r4, r5, r6, pc}
   d7f24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7f28:	f04f 0e00 	mov.w	lr, #0
   d7f2c:	3c01      	subs	r4, #1
   d7f2e:	f300 80ab 	bgt.w	d8088 <__aeabi_dmul+0x238>
   d7f32:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7f36:	bfde      	ittt	le
   d7f38:	2000      	movle	r0, #0
   d7f3a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7f3e:	bd70      	pople	{r4, r5, r6, pc}
   d7f40:	f1c4 0400 	rsb	r4, r4, #0
   d7f44:	3c20      	subs	r4, #32
   d7f46:	da35      	bge.n	d7fb4 <__aeabi_dmul+0x164>
   d7f48:	340c      	adds	r4, #12
   d7f4a:	dc1b      	bgt.n	d7f84 <__aeabi_dmul+0x134>
   d7f4c:	f104 0414 	add.w	r4, r4, #20
   d7f50:	f1c4 0520 	rsb	r5, r4, #32
   d7f54:	fa00 f305 	lsl.w	r3, r0, r5
   d7f58:	fa20 f004 	lsr.w	r0, r0, r4
   d7f5c:	fa01 f205 	lsl.w	r2, r1, r5
   d7f60:	ea40 0002 	orr.w	r0, r0, r2
   d7f64:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7f68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7f6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7f70:	fa21 f604 	lsr.w	r6, r1, r4
   d7f74:	eb42 0106 	adc.w	r1, r2, r6
   d7f78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7f7c:	bf08      	it	eq
   d7f7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7f82:	bd70      	pop	{r4, r5, r6, pc}
   d7f84:	f1c4 040c 	rsb	r4, r4, #12
   d7f88:	f1c4 0520 	rsb	r5, r4, #32
   d7f8c:	fa00 f304 	lsl.w	r3, r0, r4
   d7f90:	fa20 f005 	lsr.w	r0, r0, r5
   d7f94:	fa01 f204 	lsl.w	r2, r1, r4
   d7f98:	ea40 0002 	orr.w	r0, r0, r2
   d7f9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7fa0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7fa4:	f141 0100 	adc.w	r1, r1, #0
   d7fa8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7fac:	bf08      	it	eq
   d7fae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7fb2:	bd70      	pop	{r4, r5, r6, pc}
   d7fb4:	f1c4 0520 	rsb	r5, r4, #32
   d7fb8:	fa00 f205 	lsl.w	r2, r0, r5
   d7fbc:	ea4e 0e02 	orr.w	lr, lr, r2
   d7fc0:	fa20 f304 	lsr.w	r3, r0, r4
   d7fc4:	fa01 f205 	lsl.w	r2, r1, r5
   d7fc8:	ea43 0302 	orr.w	r3, r3, r2
   d7fcc:	fa21 f004 	lsr.w	r0, r1, r4
   d7fd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7fd4:	fa21 f204 	lsr.w	r2, r1, r4
   d7fd8:	ea20 0002 	bic.w	r0, r0, r2
   d7fdc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7fe0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7fe4:	bf08      	it	eq
   d7fe6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7fea:	bd70      	pop	{r4, r5, r6, pc}
   d7fec:	f094 0f00 	teq	r4, #0
   d7ff0:	d10f      	bne.n	d8012 <__aeabi_dmul+0x1c2>
   d7ff2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7ff6:	0040      	lsls	r0, r0, #1
   d7ff8:	eb41 0101 	adc.w	r1, r1, r1
   d7ffc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8000:	bf08      	it	eq
   d8002:	3c01      	subeq	r4, #1
   d8004:	d0f7      	beq.n	d7ff6 <__aeabi_dmul+0x1a6>
   d8006:	ea41 0106 	orr.w	r1, r1, r6
   d800a:	f095 0f00 	teq	r5, #0
   d800e:	bf18      	it	ne
   d8010:	4770      	bxne	lr
   d8012:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8016:	0052      	lsls	r2, r2, #1
   d8018:	eb43 0303 	adc.w	r3, r3, r3
   d801c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8020:	bf08      	it	eq
   d8022:	3d01      	subeq	r5, #1
   d8024:	d0f7      	beq.n	d8016 <__aeabi_dmul+0x1c6>
   d8026:	ea43 0306 	orr.w	r3, r3, r6
   d802a:	4770      	bx	lr
   d802c:	ea94 0f0c 	teq	r4, ip
   d8030:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8034:	bf18      	it	ne
   d8036:	ea95 0f0c 	teqne	r5, ip
   d803a:	d00c      	beq.n	d8056 <__aeabi_dmul+0x206>
   d803c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8040:	bf18      	it	ne
   d8042:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8046:	d1d1      	bne.n	d7fec <__aeabi_dmul+0x19c>
   d8048:	ea81 0103 	eor.w	r1, r1, r3
   d804c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8050:	f04f 0000 	mov.w	r0, #0
   d8054:	bd70      	pop	{r4, r5, r6, pc}
   d8056:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d805a:	bf06      	itte	eq
   d805c:	4610      	moveq	r0, r2
   d805e:	4619      	moveq	r1, r3
   d8060:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8064:	d019      	beq.n	d809a <__aeabi_dmul+0x24a>
   d8066:	ea94 0f0c 	teq	r4, ip
   d806a:	d102      	bne.n	d8072 <__aeabi_dmul+0x222>
   d806c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8070:	d113      	bne.n	d809a <__aeabi_dmul+0x24a>
   d8072:	ea95 0f0c 	teq	r5, ip
   d8076:	d105      	bne.n	d8084 <__aeabi_dmul+0x234>
   d8078:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d807c:	bf1c      	itt	ne
   d807e:	4610      	movne	r0, r2
   d8080:	4619      	movne	r1, r3
   d8082:	d10a      	bne.n	d809a <__aeabi_dmul+0x24a>
   d8084:	ea81 0103 	eor.w	r1, r1, r3
   d8088:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d808c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8090:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8094:	f04f 0000 	mov.w	r0, #0
   d8098:	bd70      	pop	{r4, r5, r6, pc}
   d809a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d809e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d80a2:	bd70      	pop	{r4, r5, r6, pc}

000d80a4 <__aeabi_ddiv>:
   d80a4:	b570      	push	{r4, r5, r6, lr}
   d80a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d80aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d80ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d80b2:	bf1d      	ittte	ne
   d80b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d80b8:	ea94 0f0c 	teqne	r4, ip
   d80bc:	ea95 0f0c 	teqne	r5, ip
   d80c0:	f000 f8a7 	bleq	d8212 <__aeabi_ddiv+0x16e>
   d80c4:	eba4 0405 	sub.w	r4, r4, r5
   d80c8:	ea81 0e03 	eor.w	lr, r1, r3
   d80cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d80d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d80d4:	f000 8088 	beq.w	d81e8 <__aeabi_ddiv+0x144>
   d80d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d80dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d80e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d80e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d80e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d80ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d80f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d80f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d80f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d80fc:	429d      	cmp	r5, r3
   d80fe:	bf08      	it	eq
   d8100:	4296      	cmpeq	r6, r2
   d8102:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8106:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d810a:	d202      	bcs.n	d8112 <__aeabi_ddiv+0x6e>
   d810c:	085b      	lsrs	r3, r3, #1
   d810e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8112:	1ab6      	subs	r6, r6, r2
   d8114:	eb65 0503 	sbc.w	r5, r5, r3
   d8118:	085b      	lsrs	r3, r3, #1
   d811a:	ea4f 0232 	mov.w	r2, r2, rrx
   d811e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8122:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8126:	ebb6 0e02 	subs.w	lr, r6, r2
   d812a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d812e:	bf22      	ittt	cs
   d8130:	1ab6      	subcs	r6, r6, r2
   d8132:	4675      	movcs	r5, lr
   d8134:	ea40 000c 	orrcs.w	r0, r0, ip
   d8138:	085b      	lsrs	r3, r3, #1
   d813a:	ea4f 0232 	mov.w	r2, r2, rrx
   d813e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8142:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8146:	bf22      	ittt	cs
   d8148:	1ab6      	subcs	r6, r6, r2
   d814a:	4675      	movcs	r5, lr
   d814c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8150:	085b      	lsrs	r3, r3, #1
   d8152:	ea4f 0232 	mov.w	r2, r2, rrx
   d8156:	ebb6 0e02 	subs.w	lr, r6, r2
   d815a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d815e:	bf22      	ittt	cs
   d8160:	1ab6      	subcs	r6, r6, r2
   d8162:	4675      	movcs	r5, lr
   d8164:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8168:	085b      	lsrs	r3, r3, #1
   d816a:	ea4f 0232 	mov.w	r2, r2, rrx
   d816e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8172:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8176:	bf22      	ittt	cs
   d8178:	1ab6      	subcs	r6, r6, r2
   d817a:	4675      	movcs	r5, lr
   d817c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8180:	ea55 0e06 	orrs.w	lr, r5, r6
   d8184:	d018      	beq.n	d81b8 <__aeabi_ddiv+0x114>
   d8186:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d818a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d818e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8192:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8196:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d819a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d819e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d81a2:	d1c0      	bne.n	d8126 <__aeabi_ddiv+0x82>
   d81a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d81a8:	d10b      	bne.n	d81c2 <__aeabi_ddiv+0x11e>
   d81aa:	ea41 0100 	orr.w	r1, r1, r0
   d81ae:	f04f 0000 	mov.w	r0, #0
   d81b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d81b6:	e7b6      	b.n	d8126 <__aeabi_ddiv+0x82>
   d81b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d81bc:	bf04      	itt	eq
   d81be:	4301      	orreq	r1, r0
   d81c0:	2000      	moveq	r0, #0
   d81c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d81c6:	bf88      	it	hi
   d81c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d81cc:	f63f aeaf 	bhi.w	d7f2e <__aeabi_dmul+0xde>
   d81d0:	ebb5 0c03 	subs.w	ip, r5, r3
   d81d4:	bf04      	itt	eq
   d81d6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d81da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d81de:	f150 0000 	adcs.w	r0, r0, #0
   d81e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d81e6:	bd70      	pop	{r4, r5, r6, pc}
   d81e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d81ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d81f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d81f4:	bfc2      	ittt	gt
   d81f6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d81fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d81fe:	bd70      	popgt	{r4, r5, r6, pc}
   d8200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8204:	f04f 0e00 	mov.w	lr, #0
   d8208:	3c01      	subs	r4, #1
   d820a:	e690      	b.n	d7f2e <__aeabi_dmul+0xde>
   d820c:	ea45 0e06 	orr.w	lr, r5, r6
   d8210:	e68d      	b.n	d7f2e <__aeabi_dmul+0xde>
   d8212:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8216:	ea94 0f0c 	teq	r4, ip
   d821a:	bf08      	it	eq
   d821c:	ea95 0f0c 	teqeq	r5, ip
   d8220:	f43f af3b 	beq.w	d809a <__aeabi_dmul+0x24a>
   d8224:	ea94 0f0c 	teq	r4, ip
   d8228:	d10a      	bne.n	d8240 <__aeabi_ddiv+0x19c>
   d822a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d822e:	f47f af34 	bne.w	d809a <__aeabi_dmul+0x24a>
   d8232:	ea95 0f0c 	teq	r5, ip
   d8236:	f47f af25 	bne.w	d8084 <__aeabi_dmul+0x234>
   d823a:	4610      	mov	r0, r2
   d823c:	4619      	mov	r1, r3
   d823e:	e72c      	b.n	d809a <__aeabi_dmul+0x24a>
   d8240:	ea95 0f0c 	teq	r5, ip
   d8244:	d106      	bne.n	d8254 <__aeabi_ddiv+0x1b0>
   d8246:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d824a:	f43f aefd 	beq.w	d8048 <__aeabi_dmul+0x1f8>
   d824e:	4610      	mov	r0, r2
   d8250:	4619      	mov	r1, r3
   d8252:	e722      	b.n	d809a <__aeabi_dmul+0x24a>
   d8254:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8258:	bf18      	it	ne
   d825a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d825e:	f47f aec5 	bne.w	d7fec <__aeabi_dmul+0x19c>
   d8262:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8266:	f47f af0d 	bne.w	d8084 <__aeabi_dmul+0x234>
   d826a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d826e:	f47f aeeb 	bne.w	d8048 <__aeabi_dmul+0x1f8>
   d8272:	e712      	b.n	d809a <__aeabi_dmul+0x24a>

000d8274 <__aeabi_d2f>:
   d8274:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8278:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d827c:	bf24      	itt	cs
   d827e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8282:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8286:	d90d      	bls.n	d82a4 <__aeabi_d2f+0x30>
   d8288:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d828c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8290:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8294:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8298:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d829c:	bf08      	it	eq
   d829e:	f020 0001 	biceq.w	r0, r0, #1
   d82a2:	4770      	bx	lr
   d82a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d82a8:	d121      	bne.n	d82ee <__aeabi_d2f+0x7a>
   d82aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d82ae:	bfbc      	itt	lt
   d82b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d82b4:	4770      	bxlt	lr
   d82b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d82ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d82be:	f1c2 0218 	rsb	r2, r2, #24
   d82c2:	f1c2 0c20 	rsb	ip, r2, #32
   d82c6:	fa10 f30c 	lsls.w	r3, r0, ip
   d82ca:	fa20 f002 	lsr.w	r0, r0, r2
   d82ce:	bf18      	it	ne
   d82d0:	f040 0001 	orrne.w	r0, r0, #1
   d82d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d82d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d82dc:	fa03 fc0c 	lsl.w	ip, r3, ip
   d82e0:	ea40 000c 	orr.w	r0, r0, ip
   d82e4:	fa23 f302 	lsr.w	r3, r3, r2
   d82e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d82ec:	e7cc      	b.n	d8288 <__aeabi_d2f+0x14>
   d82ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d82f2:	d107      	bne.n	d8304 <__aeabi_d2f+0x90>
   d82f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d82f8:	bf1e      	ittt	ne
   d82fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d82fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8302:	4770      	bxne	lr
   d8304:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8308:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d830c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8310:	4770      	bx	lr
   d8312:	bf00      	nop

000d8314 <atol>:
   d8314:	220a      	movs	r2, #10
   d8316:	2100      	movs	r1, #0
   d8318:	f000 b946 	b.w	d85a8 <strtol>

000d831c <__cxa_atexit>:
   d831c:	b510      	push	{r4, lr}
   d831e:	4c05      	ldr	r4, [pc, #20]	; (d8334 <__cxa_atexit+0x18>)
   d8320:	4613      	mov	r3, r2
   d8322:	b12c      	cbz	r4, d8330 <__cxa_atexit+0x14>
   d8324:	460a      	mov	r2, r1
   d8326:	4601      	mov	r1, r0
   d8328:	2002      	movs	r0, #2
   d832a:	f3af 8000 	nop.w
   d832e:	bd10      	pop	{r4, pc}
   d8330:	4620      	mov	r0, r4
   d8332:	bd10      	pop	{r4, pc}
   d8334:	00000000 	.word	0x00000000

000d8338 <memcmp>:
   d8338:	b510      	push	{r4, lr}
   d833a:	3901      	subs	r1, #1
   d833c:	4402      	add	r2, r0
   d833e:	4290      	cmp	r0, r2
   d8340:	d007      	beq.n	d8352 <memcmp+0x1a>
   d8342:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8346:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d834a:	42a3      	cmp	r3, r4
   d834c:	d0f7      	beq.n	d833e <memcmp+0x6>
   d834e:	1b18      	subs	r0, r3, r4
   d8350:	bd10      	pop	{r4, pc}
   d8352:	2000      	movs	r0, #0
   d8354:	bd10      	pop	{r4, pc}

000d8356 <memcpy>:
   d8356:	b510      	push	{r4, lr}
   d8358:	1e43      	subs	r3, r0, #1
   d835a:	440a      	add	r2, r1
   d835c:	4291      	cmp	r1, r2
   d835e:	d004      	beq.n	d836a <memcpy+0x14>
   d8360:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8364:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8368:	e7f8      	b.n	d835c <memcpy+0x6>
   d836a:	bd10      	pop	{r4, pc}

000d836c <memset>:
   d836c:	4402      	add	r2, r0
   d836e:	4603      	mov	r3, r0
   d8370:	4293      	cmp	r3, r2
   d8372:	d002      	beq.n	d837a <memset+0xe>
   d8374:	f803 1b01 	strb.w	r1, [r3], #1
   d8378:	e7fa      	b.n	d8370 <memset+0x4>
   d837a:	4770      	bx	lr

000d837c <srand>:
   d837c:	b538      	push	{r3, r4, r5, lr}
   d837e:	4b12      	ldr	r3, [pc, #72]	; (d83c8 <srand+0x4c>)
   d8380:	681c      	ldr	r4, [r3, #0]
   d8382:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8384:	4605      	mov	r5, r0
   d8386:	b9d3      	cbnz	r3, d83be <srand+0x42>
   d8388:	2018      	movs	r0, #24
   d838a:	f7fe fb63 	bl	d6a54 <malloc>
   d838e:	f243 330e 	movw	r3, #13070	; 0x330e
   d8392:	63a0      	str	r0, [r4, #56]	; 0x38
   d8394:	8003      	strh	r3, [r0, #0]
   d8396:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d839a:	8043      	strh	r3, [r0, #2]
   d839c:	f241 2334 	movw	r3, #4660	; 0x1234
   d83a0:	8083      	strh	r3, [r0, #4]
   d83a2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d83a6:	80c3      	strh	r3, [r0, #6]
   d83a8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d83ac:	8103      	strh	r3, [r0, #8]
   d83ae:	2305      	movs	r3, #5
   d83b0:	8143      	strh	r3, [r0, #10]
   d83b2:	230b      	movs	r3, #11
   d83b4:	8183      	strh	r3, [r0, #12]
   d83b6:	2201      	movs	r2, #1
   d83b8:	2300      	movs	r3, #0
   d83ba:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d83be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d83c0:	2200      	movs	r2, #0
   d83c2:	611d      	str	r5, [r3, #16]
   d83c4:	615a      	str	r2, [r3, #20]
   d83c6:	bd38      	pop	{r3, r4, r5, pc}
   d83c8:	2003ddfc 	.word	0x2003ddfc

000d83cc <rand>:
   d83cc:	4b19      	ldr	r3, [pc, #100]	; (d8434 <rand+0x68>)
   d83ce:	b510      	push	{r4, lr}
   d83d0:	681c      	ldr	r4, [r3, #0]
   d83d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d83d4:	b9d3      	cbnz	r3, d840c <rand+0x40>
   d83d6:	2018      	movs	r0, #24
   d83d8:	f7fe fb3c 	bl	d6a54 <malloc>
   d83dc:	f243 330e 	movw	r3, #13070	; 0x330e
   d83e0:	63a0      	str	r0, [r4, #56]	; 0x38
   d83e2:	8003      	strh	r3, [r0, #0]
   d83e4:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d83e8:	8043      	strh	r3, [r0, #2]
   d83ea:	f241 2334 	movw	r3, #4660	; 0x1234
   d83ee:	8083      	strh	r3, [r0, #4]
   d83f0:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d83f4:	80c3      	strh	r3, [r0, #6]
   d83f6:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d83fa:	8103      	strh	r3, [r0, #8]
   d83fc:	2305      	movs	r3, #5
   d83fe:	8143      	strh	r3, [r0, #10]
   d8400:	230b      	movs	r3, #11
   d8402:	8183      	strh	r3, [r0, #12]
   d8404:	2201      	movs	r2, #1
   d8406:	2300      	movs	r3, #0
   d8408:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d840c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d840e:	4c0a      	ldr	r4, [pc, #40]	; (d8438 <rand+0x6c>)
   d8410:	690b      	ldr	r3, [r1, #16]
   d8412:	6948      	ldr	r0, [r1, #20]
   d8414:	4a09      	ldr	r2, [pc, #36]	; (d843c <rand+0x70>)
   d8416:	435c      	muls	r4, r3
   d8418:	fb02 4000 	mla	r0, r2, r0, r4
   d841c:	fba3 2302 	umull	r2, r3, r3, r2
   d8420:	3201      	adds	r2, #1
   d8422:	4403      	add	r3, r0
   d8424:	f143 0300 	adc.w	r3, r3, #0
   d8428:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d842c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d8430:	bd10      	pop	{r4, pc}
   d8432:	bf00      	nop
   d8434:	2003ddfc 	.word	0x2003ddfc
   d8438:	5851f42d 	.word	0x5851f42d
   d843c:	4c957f2d 	.word	0x4c957f2d

000d8440 <strcmp>:
   d8440:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8444:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8448:	2a01      	cmp	r2, #1
   d844a:	bf28      	it	cs
   d844c:	429a      	cmpcs	r2, r3
   d844e:	d0f7      	beq.n	d8440 <strcmp>
   d8450:	1ad0      	subs	r0, r2, r3
   d8452:	4770      	bx	lr

000d8454 <strcpy>:
   d8454:	4603      	mov	r3, r0
   d8456:	f811 2b01 	ldrb.w	r2, [r1], #1
   d845a:	f803 2b01 	strb.w	r2, [r3], #1
   d845e:	2a00      	cmp	r2, #0
   d8460:	d1f9      	bne.n	d8456 <strcpy+0x2>
   d8462:	4770      	bx	lr

000d8464 <strlen>:
   d8464:	4603      	mov	r3, r0
   d8466:	f813 2b01 	ldrb.w	r2, [r3], #1
   d846a:	2a00      	cmp	r2, #0
   d846c:	d1fb      	bne.n	d8466 <strlen+0x2>
   d846e:	1a18      	subs	r0, r3, r0
   d8470:	3801      	subs	r0, #1
   d8472:	4770      	bx	lr

000d8474 <strncpy>:
   d8474:	b510      	push	{r4, lr}
   d8476:	4603      	mov	r3, r0
   d8478:	b142      	cbz	r2, d848c <strncpy+0x18>
   d847a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d847e:	f803 4b01 	strb.w	r4, [r3], #1
   d8482:	3a01      	subs	r2, #1
   d8484:	2c00      	cmp	r4, #0
   d8486:	d1f7      	bne.n	d8478 <strncpy+0x4>
   d8488:	441a      	add	r2, r3
   d848a:	e000      	b.n	d848e <strncpy+0x1a>
   d848c:	bd10      	pop	{r4, pc}
   d848e:	4293      	cmp	r3, r2
   d8490:	d002      	beq.n	d8498 <strncpy+0x24>
   d8492:	f803 4b01 	strb.w	r4, [r3], #1
   d8496:	e7fa      	b.n	d848e <strncpy+0x1a>
   d8498:	bd10      	pop	{r4, pc}
	...

000d849c <_strtol_r>:
   d849c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d84a0:	4680      	mov	r8, r0
   d84a2:	4840      	ldr	r0, [pc, #256]	; (d85a4 <_strtol_r+0x108>)
   d84a4:	f8d0 9000 	ldr.w	r9, [r0]
   d84a8:	460f      	mov	r7, r1
   d84aa:	463d      	mov	r5, r7
   d84ac:	f815 4b01 	ldrb.w	r4, [r5], #1
   d84b0:	eb09 0004 	add.w	r0, r9, r4
   d84b4:	7840      	ldrb	r0, [r0, #1]
   d84b6:	f000 0008 	and.w	r0, r0, #8
   d84ba:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d84be:	b108      	cbz	r0, d84c4 <_strtol_r+0x28>
   d84c0:	462f      	mov	r7, r5
   d84c2:	e7f2      	b.n	d84aa <_strtol_r+0xe>
   d84c4:	2c2d      	cmp	r4, #45	; 0x2d
   d84c6:	d103      	bne.n	d84d0 <_strtol_r+0x34>
   d84c8:	1cbd      	adds	r5, r7, #2
   d84ca:	787c      	ldrb	r4, [r7, #1]
   d84cc:	2601      	movs	r6, #1
   d84ce:	e003      	b.n	d84d8 <_strtol_r+0x3c>
   d84d0:	2c2b      	cmp	r4, #43	; 0x2b
   d84d2:	bf04      	itt	eq
   d84d4:	787c      	ldrbeq	r4, [r7, #1]
   d84d6:	1cbd      	addeq	r5, r7, #2
   d84d8:	b113      	cbz	r3, d84e0 <_strtol_r+0x44>
   d84da:	2b10      	cmp	r3, #16
   d84dc:	d10a      	bne.n	d84f4 <_strtol_r+0x58>
   d84de:	e05b      	b.n	d8598 <_strtol_r+0xfc>
   d84e0:	2c30      	cmp	r4, #48	; 0x30
   d84e2:	d157      	bne.n	d8594 <_strtol_r+0xf8>
   d84e4:	7828      	ldrb	r0, [r5, #0]
   d84e6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d84ea:	2858      	cmp	r0, #88	; 0x58
   d84ec:	d14d      	bne.n	d858a <_strtol_r+0xee>
   d84ee:	786c      	ldrb	r4, [r5, #1]
   d84f0:	2310      	movs	r3, #16
   d84f2:	3502      	adds	r5, #2
   d84f4:	2e00      	cmp	r6, #0
   d84f6:	bf14      	ite	ne
   d84f8:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d84fc:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d8500:	2700      	movs	r7, #0
   d8502:	fbbc faf3 	udiv	sl, ip, r3
   d8506:	4638      	mov	r0, r7
   d8508:	fb03 cc1a 	mls	ip, r3, sl, ip
   d850c:	eb09 0e04 	add.w	lr, r9, r4
   d8510:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8514:	f01e 0f04 	tst.w	lr, #4
   d8518:	d001      	beq.n	d851e <_strtol_r+0x82>
   d851a:	3c30      	subs	r4, #48	; 0x30
   d851c:	e00b      	b.n	d8536 <_strtol_r+0x9a>
   d851e:	f01e 0e03 	ands.w	lr, lr, #3
   d8522:	d01b      	beq.n	d855c <_strtol_r+0xc0>
   d8524:	f1be 0f01 	cmp.w	lr, #1
   d8528:	bf0c      	ite	eq
   d852a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d852e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8532:	ebce 0404 	rsb	r4, lr, r4
   d8536:	42a3      	cmp	r3, r4
   d8538:	dd10      	ble.n	d855c <_strtol_r+0xc0>
   d853a:	f1b7 3fff 	cmp.w	r7, #4294967295
   d853e:	d00a      	beq.n	d8556 <_strtol_r+0xba>
   d8540:	4550      	cmp	r0, sl
   d8542:	d806      	bhi.n	d8552 <_strtol_r+0xb6>
   d8544:	d101      	bne.n	d854a <_strtol_r+0xae>
   d8546:	4564      	cmp	r4, ip
   d8548:	dc03      	bgt.n	d8552 <_strtol_r+0xb6>
   d854a:	fb03 4000 	mla	r0, r3, r0, r4
   d854e:	2701      	movs	r7, #1
   d8550:	e001      	b.n	d8556 <_strtol_r+0xba>
   d8552:	f04f 37ff 	mov.w	r7, #4294967295
   d8556:	f815 4b01 	ldrb.w	r4, [r5], #1
   d855a:	e7d7      	b.n	d850c <_strtol_r+0x70>
   d855c:	1c7b      	adds	r3, r7, #1
   d855e:	d10c      	bne.n	d857a <_strtol_r+0xde>
   d8560:	2e00      	cmp	r6, #0
   d8562:	f04f 0322 	mov.w	r3, #34	; 0x22
   d8566:	bf14      	ite	ne
   d8568:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d856c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8570:	f8c8 3000 	str.w	r3, [r8]
   d8574:	b92a      	cbnz	r2, d8582 <_strtol_r+0xe6>
   d8576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d857a:	b106      	cbz	r6, d857e <_strtol_r+0xe2>
   d857c:	4240      	negs	r0, r0
   d857e:	b172      	cbz	r2, d859e <_strtol_r+0x102>
   d8580:	b107      	cbz	r7, d8584 <_strtol_r+0xe8>
   d8582:	1e69      	subs	r1, r5, #1
   d8584:	6011      	str	r1, [r2, #0]
   d8586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d858a:	2430      	movs	r4, #48	; 0x30
   d858c:	2b00      	cmp	r3, #0
   d858e:	d1b1      	bne.n	d84f4 <_strtol_r+0x58>
   d8590:	2308      	movs	r3, #8
   d8592:	e7af      	b.n	d84f4 <_strtol_r+0x58>
   d8594:	230a      	movs	r3, #10
   d8596:	e7ad      	b.n	d84f4 <_strtol_r+0x58>
   d8598:	2c30      	cmp	r4, #48	; 0x30
   d859a:	d0a3      	beq.n	d84e4 <_strtol_r+0x48>
   d859c:	e7aa      	b.n	d84f4 <_strtol_r+0x58>
   d859e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d85a2:	bf00      	nop
   d85a4:	2003dd98 	.word	0x2003dd98

000d85a8 <strtol>:
   d85a8:	4613      	mov	r3, r2
   d85aa:	460a      	mov	r2, r1
   d85ac:	4601      	mov	r1, r0
   d85ae:	4802      	ldr	r0, [pc, #8]	; (d85b8 <strtol+0x10>)
   d85b0:	6800      	ldr	r0, [r0, #0]
   d85b2:	f7ff bf73 	b.w	d849c <_strtol_r>
   d85b6:	bf00      	nop
   d85b8:	2003ddfc 	.word	0x2003ddfc

000d85bc <dynalib_user>:
   d85bc:	000d4021 000d405d 000d4089 000d408d     !@..]@...@...@..
   d85cc:	00000000                                ....

000d85d0 <_ZTVN8particle13__SPISettingsE>:
	...
   d85d8:	000d40bd                                .@..

000d85dc <_ZTV6SdFile>:
	...
   d85e4:	000d40b3 000d4115 000d4123 000d40b5     .@...A..#A...@..
   d85f4:	61666564 20746c75 42534d00 42534c00     default .MSB.LSB
   d8604:	50533c00 74655349 676e6974 65642073     .<SPISettings de
   d8614:	6c756166 3c003e74 53495053 69747465     fault>.<SPISetti
   d8624:	2073676e 6c257325 73252075 444f4d20     ngs %s%lu %s MOD
   d8634:	3e642545 73694400 636e6174 6e692065     E%d>.Distance in
   d8644:	3a4d4320 2e302520 0a206632 20692500      CM: %0.2f ..%i 
   d8654:	65746173 74696c6c 69207365 6976206e     satellites in vi
   d8664:	2d207765 00202d2d 656d6954 3025203a     ew --- .Time: %0
   d8674:	253a6932 3a693230 69323025 2d2d2d20     2i:%02i:%02i ---
   d8684:	616c0020 25203a74 6c202c66 3a676e6f      .lat: %f, long:
   d8694:	2c662520 746c6120 6625203a 25000a20      %f, alt: %f ..%
   d86a4:	6d20756c 696c6c69 6f636573 2073646e     lu milliseconds 
   d86b4:	67206f74 47207465 66205350 6e007869     to get GPS fix.n
   d86c4:	6f6c206f 69746163 6c006e6f 20737365     o location.less 
   d86d4:	6e616874 35323120 63006d63 7261656c     than 125cm.clear
   d86e4:	69725700 676e6974 74616420 6f742061     .Writing data to
   d86f4:	63445320 20647261 6144000a 25203a79      SDcard ..Day: %
   d8704:	4d202c69 68746e6f 2c692520 61655920     i, Month %i, Yea
   d8714:	69252072 54000a20 3a656d69 32302520     r %i ..Time: %02
   d8724:	30253a69 253a6932 20693230 616c000a     i:%02i:%02i ..la
   d8734:	25202074 6c0a2066 20676e6f 0a206625     t  %f .long %f .
   d8744:	20746c61 000a6625 65746153 74696c6c     alt %f..Satellit
   d8754:	69207365 6976206e 203a7765 0a206925     es in view: %i .
   d8764:	6e614300 61207427 73656363 44532073     .Can't access SD
   d8774:	72616320 44202e64 6f6e206f 65722074      card. Do not re
   d8784:	6d726f66 002e7461 63206f4e 2c647261     format..No card,
   d8794:	6f727720 6320676e 20706968 656c6573      wrong chip sele
   d87a4:	70207463 202c6e69 5320726f 70204950     ct pin, or SPI p
   d87b4:	6c626f72 003f6d65 65204453 726f7272     roblem?.SD error
   d87c4:	65646f43 5830203a 58302c00 766e4900     Code: 0X.,0X.Inv
   d87d4:	64696c61 726f6620 2c74616d 66657220     alid format, ref
   d87e4:	616d726f 44532074 6143002e 2074276e     ormat SD..Can't 
   d87f4:	6e65706f 6f6f7220 69642074 74636572     open root direct
   d8804:	2e79726f 206f4e00 6f727265 6f662072     ory..No error fo
   d8814:	2e646e75 61745300 6e697472 61442067     und..Starting Da
   d8824:	4c206174 6967676f 0a20676e 6e614300     ta Logging ..Can
   d8834:	63207427 74616572 69662065 6e20656c     't create file n
   d8844:	00656d61 656c6966 65706f2e 6f4c006e     ame.file.open.Lo
   d8854:	6e696767 6f742067 7325203a 44000a20     gging to: %s ..D
   d8864:	20656e6f 6552000a 20796461 20726f66     one ..Ready for 
   d8874:	7478656e 74616420 6f6c2061 000a2067     next data log ..
   d8884:	74697277 72652065 20726f72 6954000a     write error ..Ti
   d8894:	7453656d 2c706d61 6e615220 206d6f64     meStamp, Random 
   d88a4:	61746144 20692520 7461000a 706d6574     Data %i ..attemp
   d88b4:	39312074 52504700 4700434d 41474750     t 19.GPRMC.GPGGA
   d88c4:	4e004e00 4500454e 4500454e 53004553     .N.NNE.ENE.ESE.S
   d88d4:	53004553 57535300 57535700 574e5700     SE.S.SSW.WSW.WNW
   d88e4:	574e4e00 00000000                       .NNW....

000d88ec <_ZTVN5spark13EthernetClassE>:
	...
   d88f4:	000d6ae3 000d6ad9 000d6acf 000d6ac5     .j...j...j...j..
   d8904:	000d6ab9 000d6aad 000d6aa1 000d6a99     .j...j...j...j..
   d8914:	000d6a8f 000d6a85 000d75c5              .j...j...u..

000d8920 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d8920:	18100800 38302820 64756162 72655300     .... (08baud.Ser
   d8930:	006c6169 69726553 00316c61 65707974     ial.Serial1.type
   d8940:	72617000 63006d61 6900646d 6e680064     .param.cmd.id.hn
   d8950:	74730064 66006d72 00746c69 006c766c     d.strm.filt.lvl.
   d8960:	48646461 6c646e61 72007265 766f6d65     addHandler.remov
   d8970:	6e614865 72656c64 756e6500 6e61486d     eHandler.enumHan
   d8980:	72656c64 534a0073 74534e4f 6d616572     dlers.JSONStream
   d8990:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   d89a0:	75303130 205d0020 00642500 2800202c     010u .] .%d., .(
   d89b0:	00203a29 63005b20 2065646f 2500203d     ): . [.code = .%
   d89c0:	65640069 6c696174 203d2073 000a0d00     i.details = ....
   d89d0:	6e6c0066 006e6600 65646f63 74656400     f.ln.fn.code.det
   d89e0:	006c6961 656e6f6e 61727400 69006563     ail.none.trace.i
   d89f0:	006f666e 6e726177 72726500 7000726f     nfo.warn.error.p
   d8a00:	63696e61 6c6c6100 25005a00 6433302b     anic.all.Z.%+03d
   d8a10:	3230253a 59250075 2d6d252d 25546425     :%02u.%Y-%m-%dT%
   d8a20:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   d8a30:	00000065                                e...

000d8a34 <_ZTV9IPAddress>:
	...
   d8a3c:	000d6fc5 000d6fb5 000d6fb7              .o...o...o..

000d8a48 <_ZTV9USBSerial>:
	...
   d8a50:	000d709d 000d70ed 000d70fb 000d6d19     .p...p...p...m..
   d8a60:	000d70d9 000d709f 000d70b5 000d70e7     .p...p...p...p..
   d8a70:	000d70cb 000d7099                       .p...p..

000d8a78 <_ZTV11USARTSerial>:
	...
   d8a80:	000d71a9 000d71f9 000d7207 000d6d19     .q...q...r...m..
   d8a90:	000d71bd 000d71df 000d71cb 000d71f3     .q...q...q...q..
   d8aa0:	000d71ab 000d71af                       .q...q..

000d8aa8 <_ZTV7TwoWire>:
	...
   d8ab0:	000d72b9 000d7303 000d72db 000d72bb     .r...s...r...r..
   d8ac0:	000d72e3 000d72eb 000d72f3 000d72fb     .r...r...r...r..

000d8ad0 <_ZTVN5spark9MeshClassE>:
	...
   d8ad8:	000d73c5 000d73bb 000d73b1 000d73a7     .s...s...s...s..
   d8ae8:	000d739b 000d738f 000d7383 000d737b     .s...s...s..{s..
   d8af8:	000d7371 000d7367 000d75c5              qs..gs...u..

000d8b04 <_ZTVN5spark9WiFiClassE>:
	...
   d8b0c:	000d753f 000d7535 000d752b 000d74e1     ?u..5u..+u...t..
   d8b1c:	000d751f 000d7513 000d7507 000d74ff     .u...u...u...t..
   d8b2c:	000d74f5 000d74eb 000d75c5              .t...t...u..

000d8b38 <_ZTVN5spark12NetworkClassE>:
	...
   d8b40:	000d755d 000d7567 000d7571 000d757b     ]u..gu..qu..{u..
   d8b50:	000d7585 000d7591 000d759d 000d75a9     .u...u...u...u..
   d8b60:	000d75b1 000d75bb 000d75c5              .u...u...u..

000d8b6c <_ZSt7nothrow>:
	...

000d8b6d <_ctype_>:
   d8b6d:	20202000 20202020 28282020 20282828     .         ((((( 
   d8b7d:	20202020 20202020 20202020 20202020                     
   d8b8d:	10108820 10101010 10101010 10101010      ...............
   d8b9d:	04040410 04040404 10040404 10101010     ................
   d8bad:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d8bbd:	01010101 01010101 01010101 10101010     ................
   d8bcd:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d8bdd:	02020202 02020202 02020202 10101010     ................
   d8bed:	00000020 00000000 00000000 00000000      ...............
	...

000d8c70 <__sf_fake_stdin>:
	...

000d8c90 <__sf_fake_stdout>:
	...

000d8cb0 <__sf_fake_stderr>:
	...

000d8cd0 <link_const_variable_data_end>:
   d8cd0:	000d48b1 	.word	0x000d48b1
   d8cd4:	000d495d 	.word	0x000d495d
   d8cd8:	000d4961 	.word	0x000d4961
   d8cdc:	000d4965 	.word	0x000d4965
   d8ce0:	000d4969 	.word	0x000d4969
   d8ce4:	000d496d 	.word	0x000d496d
   d8ce8:	000d4971 	.word	0x000d4971
   d8cec:	000d4f99 	.word	0x000d4f99
   d8cf0:	000d4f9d 	.word	0x000d4f9d
   d8cf4:	000d4fa1 	.word	0x000d4fa1
   d8cf8:	000d4fa5 	.word	0x000d4fa5
   d8cfc:	000d5649 	.word	0x000d5649
   d8d00:	000d566d 	.word	0x000d566d
   d8d04:	000d5671 	.word	0x000d5671
   d8d08:	000d5995 	.word	0x000d5995
   d8d0c:	000d5999 	.word	0x000d5999
   d8d10:	000d599d 	.word	0x000d599d
   d8d14:	000d5ed7 	.word	0x000d5ed7
   d8d18:	000d5edb 	.word	0x000d5edb
   d8d1c:	000d5edf 	.word	0x000d5edf
   d8d20:	000d5f85 	.word	0x000d5f85
   d8d24:	000d6609 	.word	0x000d6609
   d8d28:	000d6aed 	.word	0x000d6aed
   d8d2c:	000d6cad 	.word	0x000d6cad
   d8d30:	000d6cf1 	.word	0x000d6cf1
   d8d34:	000d6e41 	.word	0x000d6e41
   d8d38:	000d6e51 	.word	0x000d6e51
   d8d3c:	000d6e89 	.word	0x000d6e89
   d8d40:	000d7491 	.word	0x000d7491
   d8d44:	000d7549 	.word	0x000d7549
   d8d48:	000d7691 	.word	0x000d7691
   d8d4c:	000d7851 	.word	0x000d7851
   d8d50:	000d78d5 	.word	0x000d78d5
   d8d54:	000d7999 	.word	0x000d7999
   d8d58:	000d7a5d 	.word	0x000d7a5d

000d8d5c <link_constructors_end>:
   d8d5c:	00000000 	.word	0x00000000
