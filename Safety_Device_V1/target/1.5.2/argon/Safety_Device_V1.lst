
c:/Users/nmlab/Documents/IoT/ClassAssignments/BikeSafety/Safety_Device_V1/target/1.5.2/argon/Safety_Device_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000060d0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000da0f0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  2003dc64  000da0f4  0001dc64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000b08  2003dce8  2003dce8  0002dce8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000da178  000da178  0002a178  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da1a0  000da1a0  0002a1a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001ae5bc  00000000  00000000  0002a1a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000217fe  00000000  00000000  001d8760  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002ceb0  00000000  00000000  001f9f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003298  00000000  00000000  00226e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005dd8  00000000  00000000  0022a0a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00051b4b  00000000  00000000  0022fe7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005addf  00000000  00000000  002819c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011218a  00000000  00000000  002dc7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000f4b8  00000000  00000000  003ee934  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f93a 	bl	d92aa <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f95a 	bl	d92f6 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dc64 	.word	0x2003dc64
   d404c:	000da0f4 	.word	0x000da0f4
   d4050:	2003dce8 	.word	0x2003dce8
   d4054:	2003dce8 	.word	0x2003dce8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 fc49 	bl	d78f4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000da0e8 	.word	0x000da0e8
   d4084:	000da05c 	.word	0x000da05c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bcc4 	b.w	d4a14 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fbfb 	bl	d4888 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 bbef 	b.w	d7878 <_post_loop>

000d409a <_Znwj>:
   d409a:	f003 b997 	b.w	d73cc <malloc>

000d409e <_ZdlPv>:
   d409e:	f003 b99d 	b.w	d73dc <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f003 b99b 	b.w	d73dc <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f003 f8e0 	bl	d7274 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d6fe5 	.word	0x000d6fe5

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d40cc:	4770      	bx	lr

000d40ce <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40ce:	4770      	bx	lr

000d40d0 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40d2:	4602      	mov	r2, r0
   d40d4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40d6:	7913      	ldrb	r3, [r2, #4]
   d40d8:	6895      	ldr	r5, [r2, #8]
   d40da:	b133      	cbz	r3, d40ea <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40dc:	b93d      	cbnz	r5, d40ee <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40de:	490c      	ldr	r1, [pc, #48]	; (d4110 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40e0:	b004      	add	sp, #16
   d40e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40e6:	f003 baf9 	b.w	d76dc <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d40ea:	4b0a      	ldr	r3, [pc, #40]	; (d4114 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d40ec:	e000      	b.n	d40f0 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d40ee:	4b0a      	ldr	r3, [pc, #40]	; (d4118 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d40f0:	7b16      	ldrb	r6, [r2, #12]
   d40f2:	4c0a      	ldr	r4, [pc, #40]	; (d411c <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d40f4:	490a      	ldr	r1, [pc, #40]	; (d4120 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40f6:	7b52      	ldrb	r2, [r2, #13]
   d40f8:	9202      	str	r2, [sp, #8]
   d40fa:	2e01      	cmp	r6, #1
   d40fc:	bf08      	it	eq
   d40fe:	4621      	moveq	r1, r4
   d4100:	9101      	str	r1, [sp, #4]
   d4102:	9500      	str	r5, [sp, #0]
   d4104:	4a07      	ldr	r2, [pc, #28]	; (d4124 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4106:	2100      	movs	r1, #0
   d4108:	f003 fb2b 	bl	d7762 <_ZN5Print11printf_implEbPKcz>
  }
   d410c:	b004      	add	sp, #16
   d410e:	bd70      	pop	{r4, r5, r6, pc}
   d4110:	000d9591 	.word	0x000d9591
   d4114:	000d99f1 	.word	0x000d99f1
   d4118:	000d9580 	.word	0x000d9580
   d411c:	000d9589 	.word	0x000d9589
   d4120:	000d958d 	.word	0x000d958d
   d4124:	000d95a7 	.word	0x000d95a7

000d4128 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4128:	3008      	adds	r0, #8
   d412a:	f001 be17 	b.w	d5d5c <_ZN7FatFile5writeEPKvj>

000d412e <_ZN6SdFileD0Ev>:
   d412e:	b510      	push	{r4, lr}
   d4130:	212c      	movs	r1, #44	; 0x2c
   d4132:	4604      	mov	r4, r0
   d4134:	f004 fb22 	bl	d877c <_ZdlPvj>
   d4138:	4620      	mov	r0, r4
   d413a:	bd10      	pop	{r4, pc}

000d413c <_ZN10CloudClass8syncTimeEv.isra.2>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   d413c:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d413e:	f003 f92d 	bl	d739c <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4142:	b120      	cbz	r0, d414e <_ZN10CloudClass8syncTimeEv.isra.2+0x12>
            return false;
        }
        return spark_sync_time(NULL);
   d4144:	2000      	movs	r0, #0
    }
   d4146:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bool syncTime(void)
    {
        if (!connected()) {
            return false;
        }
        return spark_sync_time(NULL);
   d414a:	f003 b92f 	b.w	d73ac <spark_sync_time>
    }
   d414e:	bd08      	pop	{r3, pc}

000d4150 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4150:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4152:	6984      	ldr	r4, [r0, #24]
   d4154:	4b0a      	ldr	r3, [pc, #40]	; (d4180 <_ZN9TCPClientD1Ev+0x30>)
   d4156:	6003      	str	r3, [r0, #0]
   d4158:	4605      	mov	r5, r0
   d415a:	b17c      	cbz	r4, d417c <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d415c:	6863      	ldr	r3, [r4, #4]
   d415e:	3b01      	subs	r3, #1
   d4160:	6063      	str	r3, [r4, #4]
   d4162:	b95b      	cbnz	r3, d417c <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d4164:	6823      	ldr	r3, [r4, #0]
   d4166:	4620      	mov	r0, r4
   d4168:	689b      	ldr	r3, [r3, #8]
   d416a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d416c:	68a3      	ldr	r3, [r4, #8]
   d416e:	3b01      	subs	r3, #1
   d4170:	60a3      	str	r3, [r4, #8]
   d4172:	b91b      	cbnz	r3, d417c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4174:	6823      	ldr	r3, [r4, #0]
   d4176:	4620      	mov	r0, r4
   d4178:	68db      	ldr	r3, [r3, #12]
   d417a:	4798      	blx	r3
   d417c:	4628      	mov	r0, r5
   d417e:	bd38      	pop	{r3, r4, r5, pc}
   d4180:	000d9e34 	.word	0x000d9e34

000d4184 <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4184:	b507      	push	{r0, r1, r2, lr}
   d4186:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4188:	2201      	movs	r2, #1
   d418a:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d418e:	3008      	adds	r0, #8
   d4190:	4619      	mov	r1, r3
   d4192:	f001 fde3 	bl	d5d5c <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4196:	b003      	add	sp, #12
   d4198:	f85d fb04 	ldr.w	pc, [sp], #4

000d419c <_ZN9TCPClientD0Ev>:
   d419c:	b510      	push	{r4, lr}
   d419e:	4604      	mov	r4, r0
   d41a0:	f7ff ffd6 	bl	d4150 <_ZN9TCPClientD1Ev>
   d41a4:	4620      	mov	r0, r4
   d41a6:	211c      	movs	r1, #28
   d41a8:	f004 fae8 	bl	d877c <_ZdlPvj>
   d41ac:	4620      	mov	r0, r4
   d41ae:	bd10      	pop	{r4, pc}

000d41b0 <_Z12MQTT_connectv>:
SDwriteFunction();
}

// Function to connect and reconnect as necessary to the MQTT server.
// Should be called in the loop function and it will take care if connecting.
void MQTT_connect() {
   d41b0:	b538      	push	{r3, r4, r5, lr}
  int8_t ret;

  // Stop if already connected.
  if (mqtt.connected()) {
   d41b2:	4817      	ldr	r0, [pc, #92]	; (d4210 <_Z12MQTT_connectv+0x60>)
   d41b4:	f000 fd2c 	bl	d4c10 <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   d41b8:	bb40      	cbnz	r0, d420c <_Z12MQTT_connectv+0x5c>
    return; 
  }

  Serial.print("Connecting to MQTT... ");
   d41ba:	f003 fcb1 	bl	d7b20 <_Z16_fetch_usbserialv>
   d41be:	4915      	ldr	r1, [pc, #84]	; (d4214 <_Z12MQTT_connectv+0x64>)
   d41c0:	f003 fa8c 	bl	d76dc <_ZN5Print5printEPKc>

  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   d41c4:	4812      	ldr	r0, [pc, #72]	; (d4210 <_Z12MQTT_connectv+0x60>)
   d41c6:	f000 ffa8 	bl	d511a <_ZN13Adafruit_MQTT7connectEv>
   d41ca:	4604      	mov	r4, r0
   d41cc:	b1b8      	cbz	r0, d41fe <_Z12MQTT_connectv+0x4e>
       Serial.println(mqtt.connectErrorString(ret));
   d41ce:	f003 fca7 	bl	d7b20 <_Z16_fetch_usbserialv>
   d41d2:	4621      	mov	r1, r4
   d41d4:	4605      	mov	r5, r0
   d41d6:	480e      	ldr	r0, [pc, #56]	; (d4210 <_Z12MQTT_connectv+0x60>)
   d41d8:	f000 fe54 	bl	d4e84 <_ZN13Adafruit_MQTT18connectErrorStringEa>
   d41dc:	4601      	mov	r1, r0
   d41de:	4628      	mov	r0, r5
   d41e0:	f003 fa93 	bl	d770a <_ZN5Print7printlnEPKc>
       Serial.println("Retrying MQTT connection in 5 seconds...");
   d41e4:	f003 fc9c 	bl	d7b20 <_Z16_fetch_usbserialv>
   d41e8:	490b      	ldr	r1, [pc, #44]	; (d4218 <_Z12MQTT_connectv+0x68>)
   d41ea:	f003 fa8e 	bl	d770a <_ZN5Print7printlnEPKc>
       mqtt.disconnect();
   d41ee:	4808      	ldr	r0, [pc, #32]	; (d4210 <_Z12MQTT_connectv+0x60>)
   d41f0:	f000 fe56 	bl	d4ea0 <_ZN13Adafruit_MQTT10disconnectEv>
       delay(5000);  // wait 5 seconds
   d41f4:	f241 3088 	movw	r0, #5000	; 0x1388
   d41f8:	f003 fb00 	bl	d77fc <delay>
   d41fc:	e7e2      	b.n	d41c4 <_Z12MQTT_connectv+0x14>
  }
  Serial.println("MQTT Connected!");
   d41fe:	f003 fc8f 	bl	d7b20 <_Z16_fetch_usbserialv>
   d4202:	4906      	ldr	r1, [pc, #24]	; (d421c <_Z12MQTT_connectv+0x6c>)
}
   d4204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  // wait 5 seconds
  }
  Serial.println("MQTT Connected!");
   d4208:	f003 ba7f 	b.w	d770a <_ZN5Print7printlnEPKc>
   d420c:	bd38      	pop	{r3, r4, r5, pc}
   d420e:	bf00      	nop
   d4210:	2003e1a8 	.word	0x2003e1a8
   d4214:	000d95c5 	.word	0x000d95c5
   d4218:	000d95dc 	.word	0x000d95dc
   d421c:	000d9605 	.word	0x000d9605

000d4220 <_Z11displayInfov>:
      }
      last = currentMil;
  }
}

void displayInfo() {
   d4220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// float lat,lon,alt;
	// uint8_t hr,mn,se,sat;
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d4224:	4c7b      	ldr	r4, [pc, #492]	; (d4414 <_Z11displayInfov+0x1f4>)
      }
      last = currentMil;
  }
}

void displayInfo() {
   d4226:	b0a9      	sub	sp, #164	; 0xa4

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4228:	f002 feec 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
	// float lat,lon,alt;
	// uint8_t hr,mn,se,sat;
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d422c:	6823      	ldr	r3, [r4, #0]
   d422e:	1ac0      	subs	r0, r0, r3
   d4230:	f241 3387 	movw	r3, #4999	; 0x1387
   d4234:	4298      	cmp	r0, r3
   d4236:	f240 80e9 	bls.w	d440c <_Z11displayInfov+0x1ec>
   d423a:	f002 fee3 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
		lastSerial = millis();
   d423e:	6020      	str	r0, [r4, #0]

		char buf[128];
		Serial.println(gps.location.isValid());
   d4240:	f003 fc6e 	bl	d7b20 <_Z16_fetch_usbserialv>
   d4244:	4c74      	ldr	r4, [pc, #464]	; (d4418 <_Z11displayInfov+0x1f8>)
   d4246:	4605      	mov	r5, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4248:	220a      	movs	r2, #10
   d424a:	7821      	ldrb	r1, [r4, #0]
   d424c:	f003 fa69 	bl	d7722 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4250:	4628      	mov	r0, r5
   d4252:	f003 fa4e 	bl	d76f2 <_ZN5Print7printlnEv>
	    Serial.println(gps.location.age());
   d4256:	f003 fc63 	bl	d7b20 <_Z16_fetch_usbserialv>
{
   friend class TinyGPSPlus;
public:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   d425a:	7823      	ldrb	r3, [r4, #0]
   d425c:	4606      	mov	r6, r0
   d425e:	4625      	mov	r5, r4
   d4260:	b123      	cbz	r3, d426c <_Z11displayInfov+0x4c>
   d4262:	f002 fecf 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
   d4266:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d4268:	1a41      	subs	r1, r0, r1
   d426a:	e001      	b.n	d4270 <_Z11displayInfov+0x50>
   d426c:	f04f 31ff 	mov.w	r1, #4294967295
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4270:	220a      	movs	r2, #10
   d4272:	4630      	mov	r0, r6
   d4274:	f003 fa55 	bl	d7722 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4278:	4630      	mov	r0, r6
   d427a:	f003 fa3a 	bl	d76f2 <_ZN5Print7printlnEv>
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
   d427e:	782b      	ldrb	r3, [r5, #0]
   d4280:	4c65      	ldr	r4, [pc, #404]	; (d4418 <_Z11displayInfov+0x1f8>)
   d4282:	f8df a19c 	ldr.w	sl, [pc, #412]	; d4420 <_Z11displayInfov+0x200>
   d4286:	b13b      	cbz	r3, d4298 <_Z11displayInfov+0x78>
   d4288:	f002 febc 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
   d428c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d428e:	1ac0      	subs	r0, r0, r3
   d4290:	f242 730f 	movw	r3, #9999	; 0x270f
   d4294:	4298      	cmp	r0, r3
   d4296:	d910      	bls.n	d42ba <_Z11displayInfov+0x9a>
			display.printf("Distance in CM: %0.2f \n",cm);
			display.display(); 
      */
		}
		else {
			strcpy(buf, "no location");
   d4298:	4960      	ldr	r1, [pc, #384]	; (d441c <_Z11displayInfov+0x1fc>)
   d429a:	a808      	add	r0, sp, #32
   d429c:	f005 f8a0 	bl	d93e0 <strcpy>
			if (!gettingFix) {
   d42a0:	f89a 3000 	ldrb.w	r3, [sl]
   d42a4:	2b00      	cmp	r3, #0
   d42a6:	f040 80b1 	bne.w	d440c <_Z11displayInfov+0x1ec>
				gettingFix = true;
   d42aa:	4b5d      	ldr	r3, [pc, #372]	; (d4420 <_Z11displayInfov+0x200>)
   d42ac:	2201      	movs	r2, #1
   d42ae:	701a      	strb	r2, [r3, #0]
   d42b0:	f002 fea8 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
				startFix = millis();
   d42b4:	4b5b      	ldr	r3, [pc, #364]	; (d4424 <_Z11displayInfov+0x204>)
   d42b6:	6018      	str	r0, [r3, #0]
			}
		}
	}
}
   d42b8:	e0a8      	b.n	d440c <_Z11displayInfov+0x1ec>

		char buf[128];
		Serial.println(gps.location.isValid());
	    Serial.println(gps.location.age());
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
			lat = gps.location.lat();
   d42ba:	4620      	mov	r0, r4
   d42bc:	f002 fb8c 	bl	d69d8 <_ZN15TinyGPSLocation3latEv>
   d42c0:	ec51 0b10 	vmov	r0, r1, d0
   d42c4:	f004 ff80 	bl	d91c8 <__aeabi_d2f>
   d42c8:	f8df 9190 	ldr.w	r9, [pc, #400]	; d445c <_Z11displayInfov+0x23c>
			lon = gps.location.lng(); 
   d42cc:	f8df 8190 	ldr.w	r8, [pc, #400]	; d4460 <_Z11displayInfov+0x240>

		char buf[128];
		Serial.println(gps.location.isValid());
	    Serial.println(gps.location.age());
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
			lat = gps.location.lat();
   d42d0:	f8c9 0000 	str.w	r0, [r9]
			lon = gps.location.lng(); 
   d42d4:	4620      	mov	r0, r4
   d42d6:	f002 fba7 	bl	d6a28 <_ZN15TinyGPSLocation3lngEv>
   d42da:	ec51 0b10 	vmov	r0, r1, d0
   d42de:	f004 ff73 	bl	d91c8 <__aeabi_d2f>
   friend class TinyGPSPlus;
public:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }
   d42e2:	2500      	movs	r5, #0
   d42e4:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
   d42e8:	f8c8 0000 	str.w	r0, [r8]
			alt = gps.altitude.meters();
   d42ec:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   d42f0:	4f4d      	ldr	r7, [pc, #308]	; (d4428 <_Z11displayInfov+0x208>)
			hr = gps.time.hour();
			mn = gps.time.minute();
   d42f2:	f8df b170 	ldr.w	fp, [pc, #368]	; d4464 <_Z11displayInfov+0x244>
			se = gps.time.second();
   d42f6:	4e4d      	ldr	r6, [pc, #308]	; (d442c <_Z11displayInfov+0x20c>)
		Serial.println(gps.location.isValid());
	    Serial.println(gps.location.age());
		if (gps.location.isValid() && gps.location.age() < MAX_GPS_AGE_MS) {
			lat = gps.location.lat();
			lon = gps.location.lng(); 
			alt = gps.altitude.meters();
   d42f8:	f004 fcee 	bl	d8cd8 <__aeabi_i2d>
   d42fc:	4b4c      	ldr	r3, [pc, #304]	; (d4430 <_Z11displayInfov+0x210>)
   d42fe:	2200      	movs	r2, #0
   d4300:	f004 fe7a 	bl	d8ff8 <__aeabi_ddiv>
   d4304:	f004 ff60 	bl	d91c8 <__aeabi_d2f>
   d4308:	6038      	str	r0, [r7, #0]
			hr = gps.time.hour();
   d430a:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d430e:	f002 fbf9 	bl	d6b04 <_ZN11TinyGPSTime4hourEv>
   d4312:	4a48      	ldr	r2, [pc, #288]	; (d4434 <_Z11displayInfov+0x214>)
   d4314:	9207      	str	r2, [sp, #28]
   d4316:	7010      	strb	r0, [r2, #0]
			mn = gps.time.minute();
   d4318:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d431c:	f002 fbfc 	bl	d6b18 <_ZN11TinyGPSTime6minuteEv>
   d4320:	f88b 0000 	strb.w	r0, [fp]
			se = gps.time.second();
   d4324:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d4328:	f002 fc04 	bl	d6b34 <_ZN11TinyGPSTime6secondEv>
   friend class TinyGPSPlus;
public:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }
   d432c:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
			sat = gps.satellites.value();
   d4330:	4d41      	ldr	r5, [pc, #260]	; (d4438 <_Z11displayInfov+0x218>)
   d4332:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
			lat = gps.location.lat();
			lon = gps.location.lng(); 
			alt = gps.altitude.meters();
			hr = gps.time.hour();
			mn = gps.time.minute();
			se = gps.time.second();
   d4336:	7030      	strb	r0, [r6, #0]
			sat = gps.satellites.value();
      dy - gps.date.day();
   d4338:	f104 0038 	add.w	r0, r4, #56	; 0x38
			lon = gps.location.lng(); 
			alt = gps.altitude.meters();
			hr = gps.time.hour();
			mn = gps.time.minute();
			se = gps.time.second();
			sat = gps.satellites.value();
   d433c:	702b      	strb	r3, [r5, #0]
      dy - gps.date.day();
   d433e:	f002 fbd7 	bl	d6af0 <_ZN11TinyGPSDate3dayEv>
      mth = gps.date.month();
   d4342:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4346:	f002 fbc7 	bl	d6ad8 <_ZN11TinyGPSDate5monthEv>
   d434a:	4b3c      	ldr	r3, [pc, #240]	; (d443c <_Z11displayInfov+0x21c>)
   d434c:	7018      	strb	r0, [r3, #0]
      yr = gps.date.year();
   d434e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4352:	f002 fbb5 	bl	d6ac0 <_ZN11TinyGPSDate4yearEv>
   d4356:	4b3a      	ldr	r3, [pc, #232]	; (d4440 <_Z11displayInfov+0x220>)
			if(hr > 7) {
   d4358:	9a07      	ldr	r2, [sp, #28]
			mn = gps.time.minute();
			se = gps.time.second();
			sat = gps.satellites.value();
      dy - gps.date.day();
      mth = gps.date.month();
      yr = gps.date.year();
   d435a:	7018      	strb	r0, [r3, #0]
			if(hr > 7) {
   d435c:	7813      	ldrb	r3, [r2, #0]
   d435e:	2b07      	cmp	r3, #7
   d4360:	4614      	mov	r4, r2
   d4362:	d901      	bls.n	d4368 <_Z11displayInfov+0x148>
				hr = hr + UTC_offset;
   d4364:	3b06      	subs	r3, #6
   d4366:	e000      	b.n	d436a <_Z11displayInfov+0x14a>
			}
			else {
				hr = hr + 24 + UTC_offset;
   d4368:	3312      	adds	r3, #18
   d436a:	7023      	strb	r3, [r4, #0]
			}
			Serial.printf("Distance in CM: %0.2f \n",cm);
   d436c:	f003 fbd8 	bl	d7b20 <_Z16_fetch_usbserialv>
   d4370:	4a34      	ldr	r2, [pc, #208]	; (d4444 <_Z11displayInfov+0x224>)
   d4372:	9007      	str	r0, [sp, #28]
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4374:	6810      	ldr	r0, [r2, #0]
   d4376:	f004 fcc1 	bl	d8cfc <__aeabi_f2d>
   d437a:	9b07      	ldr	r3, [sp, #28]
   d437c:	4a32      	ldr	r2, [pc, #200]	; (d4448 <_Z11displayInfov+0x228>)
   d437e:	e9cd 0100 	strd	r0, r1, [sp]
   d4382:	2100      	movs	r1, #0
   d4384:	4618      	mov	r0, r3
   d4386:	f003 f9ec 	bl	d7762 <_ZN5Print11printf_implEbPKcz>
			Serial.printf("%i satellites in view --- ",sat);
   d438a:	f003 fbc9 	bl	d7b20 <_Z16_fetch_usbserialv>
   d438e:	782b      	ldrb	r3, [r5, #0]
   d4390:	4a2e      	ldr	r2, [pc, #184]	; (d444c <_Z11displayInfov+0x22c>)
   d4392:	2100      	movs	r1, #0
   d4394:	f003 f9e5 	bl	d7762 <_ZN5Print11printf_implEbPKcz>
			Serial.printf("Time: %02i:%02i:%02i --- ",hr,mn,se);
   d4398:	f003 fbc2 	bl	d7b20 <_Z16_fetch_usbserialv>
   d439c:	7832      	ldrb	r2, [r6, #0]
   d439e:	7823      	ldrb	r3, [r4, #0]
   d43a0:	9201      	str	r2, [sp, #4]
   d43a2:	f89b 2000 	ldrb.w	r2, [fp]
   d43a6:	9200      	str	r2, [sp, #0]
   d43a8:	2100      	movs	r1, #0
   d43aa:	4a29      	ldr	r2, [pc, #164]	; (d4450 <_Z11displayInfov+0x230>)
   d43ac:	f003 f9d9 	bl	d7762 <_ZN5Print11printf_implEbPKcz>
			Serial.printf("lat: %f, long: %f, alt: %f \n", lat,lon,alt);
   d43b0:	f003 fbb6 	bl	d7b20 <_Z16_fetch_usbserialv>
   d43b4:	4604      	mov	r4, r0
   d43b6:	6838      	ldr	r0, [r7, #0]
   d43b8:	f004 fca0 	bl	d8cfc <__aeabi_f2d>
   d43bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d43c0:	f8d8 0000 	ldr.w	r0, [r8]
   d43c4:	f004 fc9a 	bl	d8cfc <__aeabi_f2d>
   d43c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d43cc:	f8d9 0000 	ldr.w	r0, [r9]
   d43d0:	f004 fc94 	bl	d8cfc <__aeabi_f2d>
   d43d4:	4a1f      	ldr	r2, [pc, #124]	; (d4454 <_Z11displayInfov+0x234>)
   d43d6:	e9cd 0100 	strd	r0, r1, [sp]
   d43da:	2100      	movs	r1, #0
   d43dc:	4620      	mov	r0, r4
   d43de:	f003 f9c0 	bl	d7762 <_ZN5Print11printf_implEbPKcz>
			if (gettingFix) {
   d43e2:	f89a 3000 	ldrb.w	r3, [sl]
   d43e6:	b18b      	cbz	r3, d440c <_Z11displayInfov+0x1ec>
				gettingFix = false;
   d43e8:	4b0d      	ldr	r3, [pc, #52]	; (d4420 <_Z11displayInfov+0x200>)
   d43ea:	2200      	movs	r2, #0
   d43ec:	701a      	strb	r2, [r3, #0]
   d43ee:	f002 fe09 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
				unsigned long elapsed = millis() - startFix;
   d43f2:	4b0c      	ldr	r3, [pc, #48]	; (d4424 <_Z11displayInfov+0x204>)
   d43f4:	681c      	ldr	r4, [r3, #0]
   d43f6:	1b04      	subs	r4, r0, r4
				Serial.printlnf("%lu milliseconds to get GPS fix", elapsed);
   d43f8:	f003 fb92 	bl	d7b20 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d43fc:	4a16      	ldr	r2, [pc, #88]	; (d4458 <_Z11displayInfov+0x238>)
   d43fe:	4623      	mov	r3, r4
   d4400:	2101      	movs	r1, #1
				gettingFix = true;
				startFix = millis();
			}
		}
	}
}
   d4402:	b029      	add	sp, #164	; 0xa4
   d4404:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4408:	f003 b9ab 	b.w	d7762 <_ZN5Print11printf_implEbPKcz>
   d440c:	b029      	add	sp, #164	; 0xa4
   d440e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4412:	bf00      	nop
   d4414:	2003e3c4 	.word	0x2003e3c4
   d4418:	2003e280 	.word	0x2003e280
   d441c:	000d969f 	.word	0x000d969f
   d4420:	2003e36e 	.word	0x2003e36e
   d4424:	2003e370 	.word	0x2003e370
   d4428:	2003e368 	.word	0x2003e368
   d442c:	2003e3c8 	.word	0x2003e3c8
   d4430:	40590000 	.word	0x40590000
   d4434:	2003e188 	.word	0x2003e188
   d4438:	2003e3c9 	.word	0x2003e3c9
   d443c:	2003e18a 	.word	0x2003e18a
   d4440:	2003e3bc 	.word	0x2003e3bc
   d4444:	2003e27c 	.word	0x2003e27c
   d4448:	000d9615 	.word	0x000d9615
   d444c:	000d962d 	.word	0x000d962d
   d4450:	000d9648 	.word	0x000d9648
   d4454:	000d9662 	.word	0x000d9662
   d4458:	000d967f 	.word	0x000d967f
   d445c:	2003e3c0 	.word	0x2003e3c0
   d4460:	2003e18c 	.word	0x2003e18c
   d4464:	2003e36d 	.word	0x2003e36d

000d4468 <_Z11waitForEchoiil>:
  cm = duration / 58.0; //the speed of sound?//
    // Serial.printf("Duration = %0.2f, Distance in CM: %0.2f \n",duration,cm);
    delay(100);
}

void waitForEcho(int pin, int value, long timeout){
   d4468:	b570      	push	{r4, r5, r6, lr}
   d446a:	4605      	mov	r5, r0
   d446c:	4614      	mov	r4, r2
   d446e:	460e      	mov	r6, r1
   d4470:	f002 fdc8 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
  //-----this listens for the pulse to return---//
    long giveupTime = millis() + timeout;
    while (digitalRead(pin) != value && millis() < giveupTime) {}
   d4474:	b2ad      	uxth	r5, r5
    delay(100);
}

void waitForEcho(int pin, int value, long timeout){
  //-----this listens for the pulse to return---//
    long giveupTime = millis() + timeout;
   d4476:	4404      	add	r4, r0
    while (digitalRead(pin) != value && millis() < giveupTime) {}
   d4478:	4628      	mov	r0, r5
   d447a:	f004 f91d 	bl	d86b8 <digitalRead>
   d447e:	42b0      	cmp	r0, r6
   d4480:	d003      	beq.n	d448a <_Z11waitForEchoiil+0x22>
   d4482:	f002 fdbf 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
   d4486:	42a0      	cmp	r0, r4
   d4488:	d3f6      	bcc.n	d4478 <_Z11waitForEchoiil+0x10>
   d448a:	bd70      	pop	{r4, r5, r6, pc}

000d448c <_Z16sendTriggerPulsei>:
}

void sendTriggerPulse(int pin){
   d448c:	b510      	push	{r4, lr}
  //------this sends the pulse----//
    digitalWrite(pin, HIGH);
   d448e:	b284      	uxth	r4, r0
   d4490:	2101      	movs	r1, #1
   d4492:	4620      	mov	r0, r4
   d4494:	f004 f8f7 	bl	d8686 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4498:	200a      	movs	r0, #10
   d449a:	f002 fda3 	bl	d6fe4 <HAL_Delay_Microseconds>
    delayMicroseconds(10);
    digitalWrite(pin, LOW);
   d449e:	4620      	mov	r0, r4
   d44a0:	2100      	movs	r1, #0
}
   d44a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void sendTriggerPulse(int pin){
  //------this sends the pulse----//
    digitalWrite(pin, HIGH);
    delayMicroseconds(10);
    digitalWrite(pin, LOW);
   d44a6:	f004 b8ee 	b.w	d8686 <digitalWrite>
	...

000d44ac <_Z18UltraSonicFunctionv>:
  display.setCursor(20,5);
  display.println("GPS Initializing");
	display.display();
}
*/
void UltraSonicFunction(){
   d44ac:	b538      	push	{r3, r4, r5, lr}
  //----- this calculates the disance every 3 to 4 seconds -----//
  sendTriggerPulse(trigPin);
   d44ae:	4b12      	ldr	r3, [pc, #72]	; (d44f8 <_Z18UltraSonicFunctionv+0x4c>)
  waitForEcho(echoPin, HIGH, 100);
   d44b0:	4d12      	ldr	r5, [pc, #72]	; (d44fc <_Z18UltraSonicFunctionv+0x50>)
	display.display();
}
*/
void UltraSonicFunction(){
  //----- this calculates the disance every 3 to 4 seconds -----//
  sendTriggerPulse(trigPin);
   d44b2:	6818      	ldr	r0, [r3, #0]
   d44b4:	f7ff ffea 	bl	d448c <_Z16sendTriggerPulsei>
  waitForEcho(echoPin, HIGH, 100);
   d44b8:	2264      	movs	r2, #100	; 0x64
   d44ba:	2101      	movs	r1, #1
   d44bc:	6828      	ldr	r0, [r5, #0]
   d44be:	f7ff ffd3 	bl	d4468 <_Z11waitForEchoiil>
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d44c2:	f002 fd97 	bl	d6ff4 <HAL_Timer_Get_Micro_Seconds>
  long startTime = micros();
  waitForEcho(echoPin, LOW, 100);
   d44c6:	2264      	movs	r2, #100	; 0x64
   d44c8:	4604      	mov	r4, r0
   d44ca:	2100      	movs	r1, #0
   d44cc:	6828      	ldr	r0, [r5, #0]
   d44ce:	f7ff ffcb 	bl	d4468 <_Z11waitForEchoiil>
   d44d2:	f002 fd8f 	bl	d6ff4 <HAL_Timer_Get_Micro_Seconds>
  long endTime = micros();
  float duration = endTime - startTime;
  cm = duration / 58.0; //the speed of sound?//
   d44d6:	1b00      	subs	r0, r0, r4
   d44d8:	ee07 0a90 	vmov	s15, r0
   d44dc:	eddf 6a08 	vldr	s13, [pc, #32]	; d4500 <_Z18UltraSonicFunctionv+0x54>
   d44e0:	4b08      	ldr	r3, [pc, #32]	; (d4504 <_Z18UltraSonicFunctionv+0x58>)
   d44e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    // Serial.printf("Duration = %0.2f, Distance in CM: %0.2f \n",duration,cm);
    delay(100);
   d44e6:	2064      	movs	r0, #100	; 0x64
  waitForEcho(echoPin, HIGH, 100);
  long startTime = micros();
  waitForEcho(echoPin, LOW, 100);
  long endTime = micros();
  float duration = endTime - startTime;
  cm = duration / 58.0; //the speed of sound?//
   d44e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d44ec:	ed83 7a00 	vstr	s14, [r3]
    // Serial.printf("Duration = %0.2f, Distance in CM: %0.2f \n",duration,cm);
    delay(100);
}
   d44f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  waitForEcho(echoPin, LOW, 100);
  long endTime = micros();
  float duration = endTime - startTime;
  cm = duration / 58.0; //the speed of sound?//
    // Serial.printf("Duration = %0.2f, Distance in CM: %0.2f \n",duration,cm);
    delay(100);
   d44f4:	f003 b982 	b.w	d77fc <delay>
   d44f8:	2003dc64 	.word	0x2003dc64
   d44fc:	2003dc68 	.word	0x2003dc68
   d4500:	42680000 	.word	0x42680000
   d4504:	2003e27c 	.word	0x2003e27c

000d4508 <_Z25doSomethingWhenDistanceIsi>:
    digitalWrite(pin, HIGH);
    delayMicroseconds(10);
    digitalWrite(pin, LOW);
}

void doSomethingWhenDistanceIs(int distanceIs){
   d4508:	b510      	push	{r4, lr}
  //-----this is the alarm set to go off at 1 meter----//
  // UltraSonicFunction();
    if (cm<distanceIs){
   d450a:	ee07 0a90 	vmov	s15, r0
   d450e:	4b13      	ldr	r3, [pc, #76]	; (d455c <_Z25doSomethingWhenDistanceIsi+0x54>)
   d4510:	4c13      	ldr	r4, [pc, #76]	; (d4560 <_Z25doSomethingWhenDistanceIsi+0x58>)
   d4512:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d4516:	edd3 7a00 	vldr	s15, [r3]
        if (beam_status==false){
   d451a:	7823      	ldrb	r3, [r4, #0]
}

void doSomethingWhenDistanceIs(int distanceIs){
  //-----this is the alarm set to go off at 1 meter----//
  // UltraSonicFunction();
    if (cm<distanceIs){
   d451c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4524:	dd0c      	ble.n	d4540 <_Z25doSomethingWhenDistanceIsi+0x38>
        if (beam_status==false){
   d4526:	b99b      	cbnz	r3, d4550 <_Z25doSomethingWhenDistanceIsi+0x48>
            
            Serial.println("less than 125cm");
   d4528:	f003 fafa 	bl	d7b20 <_Z16_fetch_usbserialv>
   d452c:	490d      	ldr	r1, [pc, #52]	; (d4564 <_Z25doSomethingWhenDistanceIsi+0x5c>)
   d452e:	f003 f8ec 	bl	d770a <_ZN5Print7printlnEPKc>
            logStart = !logStart;
   d4532:	4a0d      	ldr	r2, [pc, #52]	; (d4568 <_Z25doSomethingWhenDistanceIsi+0x60>)
   d4534:	7813      	ldrb	r3, [r2, #0]
   d4536:	f083 0301 	eor.w	r3, r3, #1
   d453a:	7013      	strb	r3, [r2, #0]
            beam_status = true;   
   d453c:	2301      	movs	r3, #1
   d453e:	e006      	b.n	d454e <_Z25doSomethingWhenDistanceIsi+0x46>
        }
    } else {
        if (beam_status==false){
   d4540:	b133      	cbz	r3, d4550 <_Z25doSomethingWhenDistanceIsi+0x48>
            
        } else {
            Serial.print("clear");
   d4542:	f003 faed 	bl	d7b20 <_Z16_fetch_usbserialv>
   d4546:	4909      	ldr	r1, [pc, #36]	; (d456c <_Z25doSomethingWhenDistanceIsi+0x64>)
   d4548:	f003 f8c8 	bl	d76dc <_ZN5Print5printEPKc>
            beam_status = false;
   d454c:	2300      	movs	r3, #0
   d454e:	7023      	strb	r3, [r4, #0]
        }
    }
    delay(1000);
   d4550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   d4554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        } else {
            Serial.print("clear");
            beam_status = false;
        }
    }
    delay(1000);
   d4558:	f003 b950 	b.w	d77fc <delay>
   d455c:	2003e27c 	.word	0x2003e27c
   d4560:	2003e189 	.word	0x2003e189
   d4564:	000d96ab 	.word	0x000d96ab
   d4568:	2003e36c 	.word	0x2003e36c
   d456c:	000d96bb 	.word	0x000d96bb

000d4570 <_Z8logData2v>:
      delay(2000);
      Serial.printf("Ready for next data log \n");
    }
  }
}
void logData2() {
   d4570:	b510      	push	{r4, lr}
   d4572:	b086      	sub	sp, #24
 
  Serial.print("Writing data to SDcard \n");
   d4574:	f003 fad4 	bl	d7b20 <_Z16_fetch_usbserialv>
   d4578:	4926      	ldr	r1, [pc, #152]	; (d4614 <_Z8logData2v+0xa4>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d457a:	4c27      	ldr	r4, [pc, #156]	; (d4618 <_Z8logData2v+0xa8>)
   d457c:	f003 f8ae 	bl	d76dc <_ZN5Print5printEPKc>
  file.printf("Day: %i, Month %i, Year %i \n", dy, mth, yr);
   d4580:	4a26      	ldr	r2, [pc, #152]	; (d461c <_Z8logData2v+0xac>)
   d4582:	4b27      	ldr	r3, [pc, #156]	; (d4620 <_Z8logData2v+0xb0>)
   d4584:	7812      	ldrb	r2, [r2, #0]
   d4586:	781b      	ldrb	r3, [r3, #0]
   d4588:	9201      	str	r2, [sp, #4]
   d458a:	4a26      	ldr	r2, [pc, #152]	; (d4624 <_Z8logData2v+0xb4>)
   d458c:	7812      	ldrb	r2, [r2, #0]
   d458e:	9200      	str	r2, [sp, #0]
   d4590:	2100      	movs	r1, #0
   d4592:	4a25      	ldr	r2, [pc, #148]	; (d4628 <_Z8logData2v+0xb8>)
   d4594:	4620      	mov	r0, r4
   d4596:	f003 f8e4 	bl	d7762 <_ZN5Print11printf_implEbPKcz>
  file.printf("Time: %02i:%02i:%02i \n",hr,mn,se);
   d459a:	4a24      	ldr	r2, [pc, #144]	; (d462c <_Z8logData2v+0xbc>)
   d459c:	4b24      	ldr	r3, [pc, #144]	; (d4630 <_Z8logData2v+0xc0>)
   d459e:	7812      	ldrb	r2, [r2, #0]
   d45a0:	781b      	ldrb	r3, [r3, #0]
   d45a2:	9201      	str	r2, [sp, #4]
   d45a4:	4a23      	ldr	r2, [pc, #140]	; (d4634 <_Z8logData2v+0xc4>)
   d45a6:	7812      	ldrb	r2, [r2, #0]
   d45a8:	9200      	str	r2, [sp, #0]
   d45aa:	2100      	movs	r1, #0
   d45ac:	4a22      	ldr	r2, [pc, #136]	; (d4638 <_Z8logData2v+0xc8>)
   d45ae:	4620      	mov	r0, r4
   d45b0:	f003 f8d7 	bl	d7762 <_ZN5Print11printf_implEbPKcz>
	file.printf("lat  %f \nlong %f \nalt %f\n", lat,lon,alt);
   d45b4:	4b21      	ldr	r3, [pc, #132]	; (d463c <_Z8logData2v+0xcc>)
   d45b6:	6818      	ldr	r0, [r3, #0]
   d45b8:	f004 fba0 	bl	d8cfc <__aeabi_f2d>
   d45bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d45c0:	4b1f      	ldr	r3, [pc, #124]	; (d4640 <_Z8logData2v+0xd0>)
   d45c2:	6818      	ldr	r0, [r3, #0]
   d45c4:	f004 fb9a 	bl	d8cfc <__aeabi_f2d>
   d45c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d45cc:	4b1d      	ldr	r3, [pc, #116]	; (d4644 <_Z8logData2v+0xd4>)
   d45ce:	6818      	ldr	r0, [r3, #0]
   d45d0:	f004 fb94 	bl	d8cfc <__aeabi_f2d>
   d45d4:	4a1c      	ldr	r2, [pc, #112]	; (d4648 <_Z8logData2v+0xd8>)
   d45d6:	e9cd 0100 	strd	r0, r1, [sp]
   d45da:	2100      	movs	r1, #0
   d45dc:	4620      	mov	r0, r4
   d45de:	f003 f8c0 	bl	d7762 <_ZN5Print11printf_implEbPKcz>
   d45e2:	4b1a      	ldr	r3, [pc, #104]	; (d464c <_Z8logData2v+0xdc>)
   d45e4:	4a1a      	ldr	r2, [pc, #104]	; (d4650 <_Z8logData2v+0xe0>)
   d45e6:	781b      	ldrb	r3, [r3, #0]
   d45e8:	2100      	movs	r1, #0
   d45ea:	4620      	mov	r0, r4
   d45ec:	f003 f8b9 	bl	d7762 <_ZN5Print11printf_implEbPKcz>
	file.printf("Satellites in view: %i \n",sat);
	file.println("");
   d45f0:	4918      	ldr	r1, [pc, #96]	; (d4654 <_Z8logData2v+0xe4>)
   d45f2:	4620      	mov	r0, r4
   d45f4:	f003 f889 	bl	d770a <_ZN5Print7printlnEPKc>
	file.printf("Distance in CM: %0.2f \n",cm);
   d45f8:	4b17      	ldr	r3, [pc, #92]	; (d4658 <_Z8logData2v+0xe8>)
   d45fa:	6818      	ldr	r0, [r3, #0]
   d45fc:	f004 fb7e 	bl	d8cfc <__aeabi_f2d>
   d4600:	4a16      	ldr	r2, [pc, #88]	; (d465c <_Z8logData2v+0xec>)
   d4602:	e9cd 0100 	strd	r0, r1, [sp]
   d4606:	2100      	movs	r1, #0
   d4608:	4620      	mov	r0, r4
   d460a:	f003 f8aa 	bl	d7762 <_ZN5Print11printf_implEbPKcz>
}
   d460e:	b006      	add	sp, #24
   d4610:	bd10      	pop	{r4, pc}
   d4612:	bf00      	nop
   d4614:	000d96c1 	.word	0x000d96c1
   d4618:	2003e374 	.word	0x2003e374
   d461c:	2003e3bc 	.word	0x2003e3bc
   d4620:	2003e3bd 	.word	0x2003e3bd
   d4624:	2003e18a 	.word	0x2003e18a
   d4628:	000d96da 	.word	0x000d96da
   d462c:	2003e3c8 	.word	0x2003e3c8
   d4630:	2003e188 	.word	0x2003e188
   d4634:	2003e36d 	.word	0x2003e36d
   d4638:	000d96f7 	.word	0x000d96f7
   d463c:	2003e368 	.word	0x2003e368
   d4640:	2003e18c 	.word	0x2003e18c
   d4644:	2003e3c0 	.word	0x2003e3c0
   d4648:	000d970e 	.word	0x000d970e
   d464c:	2003e3c9 	.word	0x2003e3c9
   d4650:	000d9728 	.word	0x000d9728
   d4654:	000d99f1 	.word	0x000d99f1
   d4658:	2003e27c 	.word	0x2003e27c
   d465c:	000d9615 	.word	0x000d9615

000d4660 <_ZN5Print6printfIIEEEjPKcDpT_>:
   d4660:	460a      	mov	r2, r1
   d4662:	2100      	movs	r1, #0
   d4664:	f003 b87d 	b.w	d7762 <_ZN5Print11printf_implEbPKcz>

000d4668 <_Z12packetGroperv>:
  }
  Serial.println("MQTT Connected!");
}


void packetGroper(){
   d4668:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d466a:	f002 fccb 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
   d466e:	f002 fcc9 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
  unsigned long last;
  unsigned long currentMil;

  currentMil = millis();
  if ((millis()-last)>120000) {
   d4672:	4b0c      	ldr	r3, [pc, #48]	; (d46a4 <_Z12packetGroperv+0x3c>)
   d4674:	4298      	cmp	r0, r3
   d4676:	d913      	bls.n	d46a0 <_Z12packetGroperv+0x38>
      Serial.printf("Pinging MQTT \n");
   d4678:	f003 fa52 	bl	d7b20 <_Z16_fetch_usbserialv>
   d467c:	490a      	ldr	r1, [pc, #40]	; (d46a8 <_Z12packetGroperv+0x40>)
   d467e:	f7ff ffef 	bl	d4660 <_ZN5Print6printfIIEEEjPKcDpT_>
      if(! mqtt.ping()) {
   d4682:	2101      	movs	r1, #1
   d4684:	4809      	ldr	r0, [pc, #36]	; (d46ac <_Z12packetGroperv+0x44>)
   d4686:	f000 fc1f 	bl	d4ec8 <_ZN13Adafruit_MQTT4pingEh>
   d468a:	b948      	cbnz	r0, d46a0 <_Z12packetGroperv+0x38>
        Serial.printf("Disconnecting \n");
   d468c:	f003 fa48 	bl	d7b20 <_Z16_fetch_usbserialv>
   d4690:	4907      	ldr	r1, [pc, #28]	; (d46b0 <_Z12packetGroperv+0x48>)
   d4692:	f7ff ffe5 	bl	d4660 <_ZN5Print6printfIIEEEjPKcDpT_>
        mqtt.disconnect();
   d4696:	4805      	ldr	r0, [pc, #20]	; (d46ac <_Z12packetGroperv+0x44>)
      }
      last = currentMil;
  }
}
   d4698:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  currentMil = millis();
  if ((millis()-last)>120000) {
      Serial.printf("Pinging MQTT \n");
      if(! mqtt.ping()) {
        Serial.printf("Disconnecting \n");
        mqtt.disconnect();
   d469c:	f000 bc00 	b.w	d4ea0 <_ZN13Adafruit_MQTT10disconnectEv>
   d46a0:	bd08      	pop	{r3, pc}
   d46a2:	bf00      	nop
   d46a4:	0001d4c0 	.word	0x0001d4c0
   d46a8:	000d9741 	.word	0x000d9741
   d46ac:	2003e1a8 	.word	0x2003e1a8
   d46b0:	000d9750 	.word	0x000d9750

000d46b4 <_Z16subscribePublishv>:
	file.printf("Satellites in view: %i \n",sat);
	file.println("");
	file.printf("Distance in CM: %0.2f \n",cm);
}

void subscribePublish(){
   d46b4:	b508      	push	{r3, lr}
   d46b6:	f002 fca5 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
  unsigned long lastTime;

  // this is our 'wait for incoming subscription packets' busy subloop
  // try to spend your time here

    if((millis()-lastTime > 10000)) {
   d46ba:	f242 7310 	movw	r3, #10000	; 0x2710
   d46be:	4298      	cmp	r0, r3
   d46c0:	d934      	bls.n	d472c <_Z16subscribePublishv+0x78>
    if(mqtt.Update()) {
   d46c2:	481b      	ldr	r0, [pc, #108]	; (d4730 <_Z16subscribePublishv+0x7c>)
   d46c4:	f000 fb22 	bl	d4d0c <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d46c8:	b360      	cbz	r0, d4724 <_Z16subscribePublishv+0x70>
     latWrite.publish(lat);
   d46ca:	4b1a      	ldr	r3, [pc, #104]	; (d4734 <_Z16subscribePublishv+0x80>)
   d46cc:	6818      	ldr	r0, [r3, #0]
   d46ce:	f004 fb15 	bl	d8cfc <__aeabi_f2d>
   d46d2:	ec41 0b10 	vmov	d0, r0, r1
   d46d6:	2102      	movs	r1, #2
   d46d8:	4817      	ldr	r0, [pc, #92]	; (d4738 <_Z16subscribePublishv+0x84>)
   d46da:	f000 fd7d 	bl	d51d8 <_ZN21Adafruit_MQTT_Publish7publishEdh>
     longWrite.publish(lon);
   d46de:	4b17      	ldr	r3, [pc, #92]	; (d473c <_Z16subscribePublishv+0x88>)
   d46e0:	6818      	ldr	r0, [r3, #0]
   d46e2:	f004 fb0b 	bl	d8cfc <__aeabi_f2d>
   d46e6:	ec41 0b10 	vmov	d0, r0, r1
   d46ea:	2102      	movs	r1, #2
   d46ec:	4814      	ldr	r0, [pc, #80]	; (d4740 <_Z16subscribePublishv+0x8c>)
   d46ee:	f000 fd73 	bl	d51d8 <_ZN21Adafruit_MQTT_Publish7publishEdh>
     altWrite.publish(alt);
   d46f2:	4b14      	ldr	r3, [pc, #80]	; (d4744 <_Z16subscribePublishv+0x90>)
   d46f4:	6818      	ldr	r0, [r3, #0]
   d46f6:	f004 fb01 	bl	d8cfc <__aeabi_f2d>
   d46fa:	ec41 0b10 	vmov	d0, r0, r1
   d46fe:	2102      	movs	r1, #2
   d4700:	4811      	ldr	r0, [pc, #68]	; (d4748 <_Z16subscribePublishv+0x94>)
   d4702:	f000 fd69 	bl	d51d8 <_ZN21Adafruit_MQTT_Publish7publishEdh>
     distanceWrite.publish(cm);
   d4706:	4b11      	ldr	r3, [pc, #68]	; (d474c <_Z16subscribePublishv+0x98>)
   d4708:	6818      	ldr	r0, [r3, #0]
   d470a:	f004 faf7 	bl	d8cfc <__aeabi_f2d>
   d470e:	ec41 0b10 	vmov	d0, r0, r1
   d4712:	2102      	movs	r1, #2
   d4714:	480e      	ldr	r0, [pc, #56]	; (d4750 <_Z16subscribePublishv+0x9c>)
   d4716:	f000 fd5f 	bl	d51d8 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      Serial.printf("Publishing Data \n");
   d471a:	f003 fa01 	bl	d7b20 <_Z16_fetch_usbserialv>
   d471e:	490d      	ldr	r1, [pc, #52]	; (d4754 <_Z16subscribePublishv+0xa0>)
   d4720:	f7ff ff9e 	bl	d4660 <_ZN5Print6printfIIEEEjPKcDpT_>
      }
    lastTime = millis();
  }
   d4724:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4728:	f002 bc6c 	b.w	d7004 <HAL_Timer_Get_Milli_Seconds>
   d472c:	bd08      	pop	{r3, pc}
   d472e:	bf00      	nop
   d4730:	2003e1a8 	.word	0x2003e1a8
   d4734:	2003e3c0 	.word	0x2003e3c0
   d4738:	2003e358 	.word	0x2003e358
   d473c:	2003e18c 	.word	0x2003e18c
   d4740:	2003e190 	.word	0x2003e190
   d4744:	2003e368 	.word	0x2003e368
   d4748:	2003e19c 	.word	0x2003e19c
   d474c:	2003e27c 	.word	0x2003e27c
   d4750:	2003e17c 	.word	0x2003e17c
   d4754:	000d9760 	.word	0x000d9760

000d4758 <_Z15SDwriteFunctionv>:
  }
  // Write data header.
  file.printf("TimeStamp, Random Data %i \n");
  // Start on a multiple of the sample interval.
}
void SDwriteFunction(){
   d4758:	b570      	push	{r4, r5, r6, lr}
  // logStart=true; // use a button nomrally
if (logStart==true) {
   d475a:	4c3c      	ldr	r4, [pc, #240]	; (d484c <_Z15SDwriteFunctionv+0xf4>)
   d475c:	7823      	ldrb	r3, [r4, #0]
  }
  // Write data header.
  file.printf("TimeStamp, Random Data %i \n");
  // Start on a multiple of the sample interval.
}
void SDwriteFunction(){
   d475e:	b08a      	sub	sp, #40	; 0x28
  // logStart=true; // use a button nomrally
if (logStart==true) {
   d4760:	2b00      	cmp	r3, #0
   d4762:	d070      	beq.n	d4846 <_Z15SDwriteFunctionv+0xee>
  Serial.printf("Starting Data Logging \n");
   d4764:	f003 f9dc 	bl	d7b20 <_Z16_fetch_usbserialv>
   d4768:	4939      	ldr	r1, [pc, #228]	; (d4850 <_Z15SDwriteFunctionv+0xf8>)
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d476a:	4d3a      	ldr	r5, [pc, #232]	; (d4854 <_Z15SDwriteFunctionv+0xfc>)
   d476c:	f7ff ff78 	bl	d4660 <_ZN5Print6printfIIEEEjPKcDpT_>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4770:	2600      	movs	r6, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d4772:	2300      	movs	r3, #0
   d4774:	4a37      	ldr	r2, [pc, #220]	; (d4854 <_Z15SDwriteFunctionv+0xfc>)
   d4776:	4938      	ldr	r1, [pc, #224]	; (d4858 <_Z15SDwriteFunctionv+0x100>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4778:	f88d 6004 	strb.w	r6, [sp, #4]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d477c:	a801      	add	r0, sp, #4
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d477e:	f88d 6005 	strb.w	r6, [sp, #5]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d4782:	f001 fa9c 	bl	d5cbe <_ZN7FatFile4openEPS_PKci>
  while (sd.exists(fileName)) {
   d4786:	b198      	cbz	r0, d47b0 <_Z15SDwriteFunctionv+0x58>
    if (fileName[BASE_NAME_SIZE + 1] != '9') {
   d4788:	796b      	ldrb	r3, [r5, #5]
   d478a:	2b39      	cmp	r3, #57	; 0x39
   d478c:	d002      	beq.n	d4794 <_Z15SDwriteFunctionv+0x3c>
      fileName[BASE_NAME_SIZE + 1]++;
   d478e:	3301      	adds	r3, #1
   d4790:	716b      	strb	r3, [r5, #5]
   d4792:	e7ee      	b.n	d4772 <_Z15SDwriteFunctionv+0x1a>
    } else if (fileName[BASE_NAME_SIZE] != '9') {
   d4794:	792b      	ldrb	r3, [r5, #4]
   d4796:	2b39      	cmp	r3, #57	; 0x39
   d4798:	d004      	beq.n	d47a4 <_Z15SDwriteFunctionv+0x4c>
      fileName[BASE_NAME_SIZE + 1] = '0';
   d479a:	2230      	movs	r2, #48	; 0x30
      fileName[BASE_NAME_SIZE]++;
   d479c:	3301      	adds	r3, #1
  Serial.printf("Starting Data Logging \n");
  while (sd.exists(fileName)) {
    if (fileName[BASE_NAME_SIZE + 1] != '9') {
      fileName[BASE_NAME_SIZE + 1]++;
    } else if (fileName[BASE_NAME_SIZE] != '9') {
      fileName[BASE_NAME_SIZE + 1] = '0';
   d479e:	716a      	strb	r2, [r5, #5]
      fileName[BASE_NAME_SIZE]++;
   d47a0:	712b      	strb	r3, [r5, #4]
   d47a2:	e7e6      	b.n	d4772 <_Z15SDwriteFunctionv+0x1a>
    } else {
      Serial.println("Can't create file name");
   d47a4:	f003 f9bc 	bl	d7b20 <_Z16_fetch_usbserialv>
   d47a8:	492c      	ldr	r1, [pc, #176]	; (d485c <_Z15SDwriteFunctionv+0x104>)
   d47aa:	f002 ffae 	bl	d770a <_ZN5Print7printlnEPKc>
   d47ae:	e7fe      	b.n	d47ae <_Z15SDwriteFunctionv+0x56>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d47b0:	492b      	ldr	r1, [pc, #172]	; (d4860 <_Z15SDwriteFunctionv+0x108>)
   d47b2:	4a28      	ldr	r2, [pc, #160]	; (d4854 <_Z15SDwriteFunctionv+0xfc>)
   d47b4:	6809      	ldr	r1, [r1, #0]
   d47b6:	482b      	ldr	r0, [pc, #172]	; (d4864 <_Z15SDwriteFunctionv+0x10c>)
   d47b8:	f640 2301 	movw	r3, #2561	; 0xa01
   d47bc:	f001 fa7f 	bl	d5cbe <_ZN7FatFile4openEPS_PKci>
      while(1);
    }
  }
  if (!file.open(fileName, O_WRONLY | O_CREAT | O_EXCL)) {
   d47c0:	b920      	cbnz	r0, d47cc <_Z15SDwriteFunctionv+0x74>
    Serial.println("file.open");
   d47c2:	f003 f9ad 	bl	d7b20 <_Z16_fetch_usbserialv>
   d47c6:	4928      	ldr	r1, [pc, #160]	; (d4868 <_Z15SDwriteFunctionv+0x110>)
   d47c8:	f002 ff9f 	bl	d770a <_ZN5Print7printlnEPKc>
  }
  Serial.printf("Logging to: %s \n",fileName);
   d47cc:	f003 f9a8 	bl	d7b20 <_Z16_fetch_usbserialv>
   d47d0:	4b20      	ldr	r3, [pc, #128]	; (d4854 <_Z15SDwriteFunctionv+0xfc>)
   d47d2:	4a26      	ldr	r2, [pc, #152]	; (d486c <_Z15SDwriteFunctionv+0x114>)
      Serial.print(".");
      
      logData2();

      // Force data to SD and update the directory entry to avoid data loss.
      if (!file.sync() || file.getWriteError()) {
   d47d4:	4d26      	ldr	r5, [pc, #152]	; (d4870 <_Z15SDwriteFunctionv+0x118>)
   d47d6:	2100      	movs	r1, #0
   d47d8:	f002 ffc3 	bl	d7762 <_ZN5Print11printf_implEbPKcz>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d47dc:	f002 fc0a 	bl	d6ff4 <HAL_Timer_Get_Micro_Seconds>
  }
  if (!file.open(fileName, O_WRONLY | O_CREAT | O_EXCL)) {
    Serial.println("file.open");
  }
  Serial.printf("Logging to: %s \n",fileName);
  startTime = micros();
   d47e0:	4b24      	ldr	r3, [pc, #144]	; (d4874 <_Z15SDwriteFunctionv+0x11c>)
   d47e2:	6018      	str	r0, [r3, #0]
}
  while(logStart==true) {
   d47e4:	7823      	ldrb	r3, [r4, #0]
   d47e6:	b373      	cbz	r3, d4846 <_Z15SDwriteFunctionv+0xee>
    // for (i=0;i<100;i++) {

      // logTime = micros() - startTime;
      Serial.print(".");
   d47e8:	f003 f99a 	bl	d7b20 <_Z16_fetch_usbserialv>
   d47ec:	4922      	ldr	r1, [pc, #136]	; (d4878 <_Z15SDwriteFunctionv+0x120>)
   d47ee:	f002 ff75 	bl	d76dc <_ZN5Print5printEPKc>
      
      logData2();
   d47f2:	f7ff febd 	bl	d4570 <_Z8logData2v>

      // Force data to SD and update the directory entry to avoid data loss.
      if (!file.sync() || file.getWriteError()) {
   d47f6:	481b      	ldr	r0, [pc, #108]	; (d4864 <_Z15SDwriteFunctionv+0x10c>)
   d47f8:	f001 fa24 	bl	d5c44 <_ZN7FatFile4syncEv>
   d47fc:	b1e8      	cbz	r0, d483a <_Z15SDwriteFunctionv+0xe2>
   d47fe:	7a6b      	ldrb	r3, [r5, #9]
   d4800:	07db      	lsls	r3, r3, #31
   d4802:	d41a      	bmi.n	d483a <_Z15SDwriteFunctionv+0xe2>
      Serial.printf("write error \n");
      }
      delay(random(100,500));
   d4804:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   d4808:	2064      	movs	r0, #100	; 0x64
   d480a:	f003 fa84 	bl	d7d16 <_Z6randomii>
   d480e:	f002 fff5 	bl	d77fc <delay>
    // }
    logStart = false;   // button release
   d4812:	2300      	movs	r3, #0
    if (logStart==false) {
      file.close();
   d4814:	4813      	ldr	r0, [pc, #76]	; (d4864 <_Z15SDwriteFunctionv+0x10c>)
      if (!file.sync() || file.getWriteError()) {
      Serial.printf("write error \n");
      }
      delay(random(100,500));
    // }
    logStart = false;   // button release
   d4816:	7023      	strb	r3, [r4, #0]
    if (logStart==false) {
      file.close();
   d4818:	f001 fa4a 	bl	d5cb0 <_ZN7FatFile5closeEv>
      Serial.printf("Done \n");
   d481c:	f003 f980 	bl	d7b20 <_Z16_fetch_usbserialv>
   d4820:	4916      	ldr	r1, [pc, #88]	; (d487c <_Z15SDwriteFunctionv+0x124>)
   d4822:	f7ff ff1d 	bl	d4660 <_ZN5Print6printfIIEEEjPKcDpT_>
      delay(2000);
   d4826:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d482a:	f002 ffe7 	bl	d77fc <delay>
      Serial.printf("Ready for next data log \n");
   d482e:	f003 f977 	bl	d7b20 <_Z16_fetch_usbserialv>
   d4832:	4913      	ldr	r1, [pc, #76]	; (d4880 <_Z15SDwriteFunctionv+0x128>)
   d4834:	f7ff ff14 	bl	d4660 <_ZN5Print6printfIIEEEjPKcDpT_>
   d4838:	e7d4      	b.n	d47e4 <_Z15SDwriteFunctionv+0x8c>
      
      logData2();

      // Force data to SD and update the directory entry to avoid data loss.
      if (!file.sync() || file.getWriteError()) {
      Serial.printf("write error \n");
   d483a:	f003 f971 	bl	d7b20 <_Z16_fetch_usbserialv>
   d483e:	4911      	ldr	r1, [pc, #68]	; (d4884 <_Z15SDwriteFunctionv+0x12c>)
   d4840:	f7ff ff0e 	bl	d4660 <_ZN5Print6printfIIEEEjPKcDpT_>
   d4844:	e7de      	b.n	d4804 <_Z15SDwriteFunctionv+0xac>
      Serial.printf("Done \n");
      delay(2000);
      Serial.printf("Ready for next data log \n");
    }
  }
}
   d4846:	b00a      	add	sp, #40	; 0x28
   d4848:	bd70      	pop	{r4, r5, r6, pc}
   d484a:	bf00      	nop
   d484c:	2003e36c 	.word	0x2003e36c
   d4850:	000d9772 	.word	0x000d9772
   d4854:	2003dc6c 	.word	0x2003dc6c
   d4858:	2003e134 	.word	0x2003e134
   d485c:	000d978a 	.word	0x000d978a
   d4860:	2003e3cc 	.word	0x2003e3cc
   d4864:	2003e37c 	.word	0x2003e37c
   d4868:	000d97a1 	.word	0x000d97a1
   d486c:	000d97ab 	.word	0x000d97ab
   d4870:	2003e374 	.word	0x2003e374
   d4874:	2003e364 	.word	0x2003e364
   d4878:	000d9603 	.word	0x000d9603
   d487c:	000d97bc 	.word	0x000d97bc
   d4880:	000d97c3 	.word	0x000d97c3
   d4884:	000d97dd 	.word	0x000d97dd

000d4888 <loop>:
	delay(500);

}

void loop()
{
   d4888:	b508      	push	{r3, lr}
  packetGroper();
   d488a:	f7ff feed 	bl	d4668 <_Z12packetGroperv>
  MQTT_connect();
   d488e:	f7ff fc8f 	bl	d41b0 <_Z12MQTT_connectv>
	UltraSonicFunction();
   d4892:	f7ff fe0b 	bl	d44ac <_Z18UltraSonicFunctionv>
	while (Serial1.available() > 0) {
   d4896:	f003 f9cb 	bl	d7c30 <_Z22__fetch_global_Serial1v>
   d489a:	6803      	ldr	r3, [r0, #0]
   d489c:	691b      	ldr	r3, [r3, #16]
   d489e:	4798      	blx	r3
   d48a0:	2800      	cmp	r0, #0
   d48a2:	dd12      	ble.n	d48ca <loop+0x42>
		if (gps.encode(Serial1.read())) {
   d48a4:	f003 f9c4 	bl	d7c30 <_Z22__fetch_global_Serial1v>
   d48a8:	6803      	ldr	r3, [r0, #0]
   d48aa:	695b      	ldr	r3, [r3, #20]
   d48ac:	4798      	blx	r3
   d48ae:	b2c1      	uxtb	r1, r0
   d48b0:	4808      	ldr	r0, [pc, #32]	; (d48d4 <loop+0x4c>)
   d48b2:	f002 faa5 	bl	d6e00 <_ZN11TinyGPSPlus6encodeEc>
   d48b6:	2800      	cmp	r0, #0
   d48b8:	d0ed      	beq.n	d4896 <loop+0xe>
			displayInfo();
   d48ba:	f7ff fcb1 	bl	d4220 <_Z11displayInfov>
      subscribePublish();
   d48be:	f7ff fef9 	bl	d46b4 <_Z16subscribePublishv>
      doSomethingWhenDistanceIs(100);
   d48c2:	2064      	movs	r0, #100	; 0x64
   d48c4:	f7ff fe20 	bl	d4508 <_Z25doSomethingWhenDistanceIsi>
   d48c8:	e7e5      	b.n	d4896 <loop+0xe>
		}
	}

SDwriteFunction();
}
   d48ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      subscribePublish();
      doSomethingWhenDistanceIs(100);
		}
	}

SDwriteFunction();
   d48ce:	f7ff bf43 	b.w	d4758 <_Z15SDwriteFunctionv>
   d48d2:	bf00      	nop
   d48d4:	2003e280 	.word	0x2003e280

000d48d8 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv>:
    pr->print(F("error: "));
    pr->println(msg);
    errorPrint(pr);
  }
  /** %Print any SD error code and halt. */
  void initErrorHalt() {
   d48d8:	b508      	push	{r3, lr}
   d48da:	4604      	mov	r4, r0
    initErrorHalt(&Serial);
   d48dc:	f003 f920 	bl	d7b20 <_Z16_fetch_usbserialv>
  /** Print error details after begin() fails.
   *
   * \param[in] pr Print destination.
   */
  void initErrorPrint(Print* pr) {
    if (cardErrorCode()) {
   d48e0:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
    pr->println(msg);
    errorPrint(pr);
  }
  /** %Print any SD error code and halt. */
  void initErrorHalt() {
    initErrorHalt(&Serial);
   d48e4:	4605      	mov	r5, r0
  /** Print error details after begin() fails.
   *
   * \param[in] pr Print destination.
   */
  void initErrorPrint(Print* pr) {
    if (cardErrorCode()) {
   d48e6:	b32b      	cbz	r3, d4934 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x5c>
      pr->println(F("Can't access SD card. Do not reformat."));
   d48e8:	491a      	ldr	r1, [pc, #104]	; (d4954 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x7c>)
   d48ea:	f002 ff18 	bl	d771e <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
   d48ee:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
   d48f2:	2b20      	cmp	r3, #32
   d48f4:	d103      	bne.n	d48fe <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x26>
        pr->println(F("No card, wrong chip select pin, or SPI problem?"));
   d48f6:	4918      	ldr	r1, [pc, #96]	; (d4958 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x80>)
   d48f8:	4628      	mov	r0, r5
   d48fa:	f002 ff10 	bl	d771e <_ZN5Print7printlnEPK19__FlashStringHelper>
  }
  /** %Print any SD error code.
   * \param[in] pr Print device.
   */
  void errorPrint(Print* pr) {
    if (!cardErrorCode()) {
   d48fe:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
   d4902:	b31b      	cbz	r3, d494c <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x74>
      return;
    }
    pr->print(F("SD errorCode: 0X"));
   d4904:	4915      	ldr	r1, [pc, #84]	; (d495c <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x84>)
   d4906:	4628      	mov	r0, r5
   d4908:	f002 feef 	bl	d76ea <_ZN5Print5printEPK19__FlashStringHelper>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d490c:	2210      	movs	r2, #16
   d490e:	f894 1460 	ldrb.w	r1, [r4, #1120]	; 0x460
   d4912:	4628      	mov	r0, r5
   d4914:	f002 ff05 	bl	d7722 <_ZN5Print11printNumberEmh>
    pr->print(cardErrorCode(), HEX);
    pr->print(F(",0X"));
   d4918:	4911      	ldr	r1, [pc, #68]	; (d4960 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x88>)
   d491a:	4628      	mov	r0, r5
   d491c:	f002 fee5 	bl	d76ea <_ZN5Print5printEPK19__FlashStringHelper>
   d4920:	2210      	movs	r2, #16
   d4922:	f894 1469 	ldrb.w	r1, [r4, #1129]	; 0x469
   d4926:	4628      	mov	r0, r5
   d4928:	f002 fefb 	bl	d7722 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d492c:	4628      	mov	r0, r5
   d492e:	f002 fee0 	bl	d76f2 <_ZN5Print7printlnEv>
   d4932:	e00b      	b.n	d494c <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x74>
      pr->println(F("Can't access SD card. Do not reformat."));
      if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
        pr->println(F("No card, wrong chip select pin, or SPI problem?"));
      }
      errorPrint(pr);
    } else if (vol()->fatType() == 0) {
   d4934:	79e3      	ldrb	r3, [r4, #7]
   d4936:	b90b      	cbnz	r3, d493c <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x64>
      pr->println(F("Invalid format, reformat SD."));
   d4938:	490a      	ldr	r1, [pc, #40]	; (d4964 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x8c>)
   d493a:	e005      	b.n	d4948 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x70>
    } else if (!vwd()->isOpen()) {
   d493c:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d4940:	b90b      	cbnz	r3, d4946 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x6e>
      pr->println(F("Can't open root directory."));
   d4942:	4909      	ldr	r1, [pc, #36]	; (d4968 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x90>)
   d4944:	e000      	b.n	d4948 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x70>
    } else {
      pr->println(F("No error found."));
   d4946:	4909      	ldr	r1, [pc, #36]	; (d496c <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x94>)
   d4948:	f002 fee9 	bl	d771e <_ZN5Print7printlnEPK19__FlashStringHelper>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   d494c:	f002 fb6a 	bl	d7024 <os_thread_yield>
   d4950:	e7fc      	b.n	d494c <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x74>
   d4952:	bf00      	nop
   d4954:	000d97eb 	.word	0x000d97eb
   d4958:	000d9812 	.word	0x000d9812
   d495c:	000d9842 	.word	0x000d9842
   d4960:	000d9853 	.word	0x000d9853
   d4964:	000d9857 	.word	0x000d9857
   d4968:	000d9874 	.word	0x000d9874
   d496c:	000d988f 	.word	0x000d988f

000d4970 <_Z11SDcardSetupv>:
//   while ((currentTime - lastSecond) < timer){
//          //do nothing//
//   }
//   lastSecond = millis();
// }
void SDcardSetup(){
   d4970:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	logStart = false;
   d4972:	4a21      	ldr	r2, [pc, #132]	; (d49f8 <_Z11SDcardSetupv+0x88>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4974:	4c21      	ldr	r4, [pc, #132]	; (d49fc <_Z11SDcardSetupv+0x8c>)
   d4976:	2300      	movs	r3, #0
   d4978:	7013      	strb	r3, [r2, #0]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d497a:	4a21      	ldr	r2, [pc, #132]	; (d4a00 <_Z11SDcardSetupv+0x90>)
   d497c:	9200      	str	r2, [sp, #0]
   d497e:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d4982:	4a20      	ldr	r2, [pc, #128]	; (d4a04 <_Z11SDcardSetupv+0x94>)
   d4984:	f88d 3004 	strb.w	r3, [sp, #4]
   d4988:	9202      	str	r2, [sp, #8]
   d498a:	2501      	movs	r5, #1
   d498c:	f88d 300d 	strb.w	r3, [sp, #13]
   d4990:	220e      	movs	r2, #14
   d4992:	466b      	mov	r3, sp
   d4994:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d4998:	4630      	mov	r0, r6
   d499a:	f88d 500c 	strb.w	r5, [sp, #12]
   d499e:	f001 fd25 	bl	d63ec <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d49a2:	b330      	cbz	r0, d49f2 <_Z11SDcardSetupv+0x82>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d49a4:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d49a8:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d49aa:	f001 f981 	bl	d5cb0 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d49ae:	4629      	mov	r1, r5
   d49b0:	4620      	mov	r0, r4
   d49b2:	f001 fbc4 	bl	d613e <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d49b6:	4601      	mov	r1, r0
   d49b8:	b140      	cbz	r0, d49cc <_Z11SDcardSetupv+0x5c>
   d49ba:	4c10      	ldr	r4, [pc, #64]	; (d49fc <_Z11SDcardSetupv+0x8c>)
   d49bc:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   d49c0:	4621      	mov	r1, r4
   d49c2:	4628      	mov	r0, r5
   d49c4:	f000 ff9f 	bl	d5906 <_ZN7FatFile8openRootEP9FatVolume>
   d49c8:	b198      	cbz	r0, d49f2 <_Z11SDcardSetupv+0x82>
   d49ca:	e005      	b.n	d49d8 <_Z11SDcardSetupv+0x68>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d49cc:	4620      	mov	r0, r4
   d49ce:	f001 fbb6 	bl	d613e <_ZN9FatVolume4initEh>
   d49d2:	2800      	cmp	r0, #0
   d49d4:	d1f1      	bne.n	d49ba <_Z11SDcardSetupv+0x4a>
   d49d6:	e00c      	b.n	d49f2 <_Z11SDcardSetupv+0x82>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d49d8:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d49dc:	f013 0f70 	tst.w	r3, #112	; 0x70
   d49e0:	d007      	beq.n	d49f2 <_Z11SDcardSetupv+0x82>
      return false;
    }
    m_cwd = dir;
   d49e2:	4b09      	ldr	r3, [pc, #36]	; (d4a08 <_Z11SDcardSetupv+0x98>)
  if (BASE_NAME_SIZE > 6) {
    Serial.println("FILE_BASE_NAME too long");
    while(1);
  }
  // Write data header.
  file.printf("TimeStamp, Random Data %i \n");
   d49e4:	4909      	ldr	r1, [pc, #36]	; (d4a0c <_Z11SDcardSetupv+0x9c>)
   d49e6:	480a      	ldr	r0, [pc, #40]	; (d4a10 <_Z11SDcardSetupv+0xa0>)
   d49e8:	601d      	str	r5, [r3, #0]
   d49ea:	f7ff fe39 	bl	d4660 <_ZN5Print6printfIIEEEjPKcDpT_>
  // Start on a multiple of the sample interval.
}
   d49ee:	b004      	add	sp, #16
   d49f0:	bd70      	pop	{r4, r5, r6, pc}
void SDcardSetup(){
	logStart = false;
  // Initialize at the highest speed supported by the board that is
  // not over 50 MHz. Try a lower speed if SPI errors occur.cc
  if (!sd.begin(chipSelect, SD_SCK_MHZ(50))) {
    sd.initErrorHalt();  
   d49f2:	4802      	ldr	r0, [pc, #8]	; (d49fc <_Z11SDcardSetupv+0x8c>)
   d49f4:	f7ff ff70 	bl	d48d8 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv>
   d49f8:	2003e36c 	.word	0x2003e36c
   d49fc:	2003dcf8 	.word	0x2003dcf8
   d4a00:	000d9564 	.word	0x000d9564
   d4a04:	02faf080 	.word	0x02faf080
   d4a08:	2003e3cc 	.word	0x2003e3cc
   d4a0c:	000d989f 	.word	0x000d989f
   d4a10:	2003e374 	.word	0x2003e374

000d4a14 <setup>:
// Error messages stored in flash.
#define error(msg) sd.errorHalt(msg)
//------------------------------------------------------------------------------

void setup()
{
   d4a14:	b508      	push	{r3, lr}
	Serial.begin(9600);
   d4a16:	f003 f883 	bl	d7b20 <_Z16_fetch_usbserialv>
   d4a1a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4a1e:	f003 f873 	bl	d7b08 <_ZN9USBSerial5beginEl>

	delay(500);
   d4a22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4a26:	f002 fee9 	bl	d77fc <delay>
   pinMode(trigPin, OUTPUT);
   d4a2a:	4b19      	ldr	r3, [pc, #100]	; (d4a90 <setup+0x7c>)
   d4a2c:	2101      	movs	r1, #1
   d4a2e:	8818      	ldrh	r0, [r3, #0]
   d4a30:	f003 fe18 	bl	d8664 <pinMode>
   pinMode(echoPin, INPUT);
   d4a34:	4b17      	ldr	r3, [pc, #92]	; (d4a94 <setup+0x80>)
   d4a36:	2100      	movs	r1, #0
   d4a38:	8818      	ldrh	r0, [r3, #0]
   d4a3a:	f003 fe13 	bl	d8664 <pinMode>

	Serial1.begin(9600);
   d4a3e:	f003 f8f7 	bl	d7c30 <_Z22__fetch_global_Serial1v>
   d4a42:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4a46:	f003 f8ed 	bl	d7c24 <_ZN11USARTSerial5beginEm>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4a4a:	f002 fadb 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
    startFix = millis();
   d4a4e:	4b12      	ldr	r3, [pc, #72]	; (d4a98 <setup+0x84>)
   d4a50:	6018      	str	r0, [r3, #0]
    gettingFix = true;
   d4a52:	4b12      	ldr	r3, [pc, #72]	; (d4a9c <setup+0x88>)
   d4a54:	2201      	movs	r2, #1
   d4a56:	701a      	strb	r2, [r3, #0]

    Particle.syncTime();
   d4a58:	f7ff fb70 	bl	d413c <_ZN10CloudClass8syncTimeEv.isra.2>
  waitUntil(Particle.syncTime);
   d4a5c:	f7ff fb6e 	bl	d413c <_ZN10CloudClass8syncTimeEv.isra.2>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4a60:	b190      	cbz	r0, d4a88 <setup+0x74>
   d4a62:	f7ff fb6b 	bl	d413c <_ZN10CloudClass8syncTimeEv.isra.2>
	
	// OLED Display initialization
	//display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
	//helloWorld();
  
  SDcardSetup();
   d4a66:	f7ff ff83 	bl	d4970 <_Z11SDcardSetupv>

	delay(500);
   d4a6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4a6e:	f002 fec5 	bl	d77fc <delay>
	Serial.println("attempt 19");
   d4a72:	f003 f855 	bl	d7b20 <_Z16_fetch_usbserialv>
   d4a76:	490a      	ldr	r1, [pc, #40]	; (d4aa0 <setup+0x8c>)
   d4a78:	f002 fe47 	bl	d770a <_ZN5Print7printlnEPKc>
	delay(500);
   d4a7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4

}
   d4a80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  SDcardSetup();

	delay(500);
	Serial.println("attempt 19");
	delay(500);
   d4a84:	f002 beba 	b.w	d77fc <delay>
            spark_process();
   d4a88:	f002 fc80 	bl	d738c <spark_process>
   d4a8c:	e7e6      	b.n	d4a5c <setup+0x48>
   d4a8e:	bf00      	nop
   d4a90:	2003dc64 	.word	0x2003dc64
   d4a94:	2003dc68 	.word	0x2003dc68
   d4a98:	2003e370 	.word	0x2003e370
   d4a9c:	2003e36e 	.word	0x2003e36e
   d4aa0:	000d98bb 	.word	0x000d98bb

000d4aa4 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d4aa4:	b510      	push	{r4, lr}
   d4aa6:	21d4      	movs	r1, #212	; 0xd4
   d4aa8:	4604      	mov	r4, r0
   d4aaa:	f003 fe67 	bl	d877c <_ZdlPvj>
   d4aae:	4620      	mov	r0, r4
   d4ab0:	bd10      	pop	{r4, pc}
	...

000d4ab4 <_GLOBAL__sub_I_TheClient>:
     distanceWrite.publish(cm);
      Serial.printf("Publishing Data \n");
      }
    lastTime = millis();
  }
   d4ab4:	b573      	push	{r0, r1, r4, r5, r6, lr}
const unsigned long PUBLISH_PERIOD = 120000;
const unsigned long SERIAL_PERIOD = 5000;
const unsigned long MAX_GPS_AGE_MS = 10000; // GPS location must be newer than this to be considered valid

/************ Global State (you don't need to change this!) ***   ***************/
TCPClient TheClient;
   d4ab6:	4d3b      	ldr	r5, [pc, #236]	; (d4ba4 <_GLOBAL__sub_I_TheClient+0xf0>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d4ab8:	4c3b      	ldr	r4, [pc, #236]	; (d4ba8 <_GLOBAL__sub_I_TheClient+0xf4>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4aba:	4e3c      	ldr	r6, [pc, #240]	; (d4bac <_GLOBAL__sub_I_TheClient+0xf8>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4abc:	f002 fa0a 	bl	d6ed4 <HAL_Pin_Map>
//---oled code---//
//#define OLED_RESET D4
//Adafruit_SSD1306 display(OLED_RESET);

//---gps constants ---//
SYSTEM_THREAD(ENABLED);
   d4ac0:	2100      	movs	r1, #0
   d4ac2:	2001      	movs	r0, #1
   d4ac4:	f002 fbf6 	bl	d72b4 <system_thread_set_state>
const unsigned long PUBLISH_PERIOD = 120000;
const unsigned long SERIAL_PERIOD = 5000;
const unsigned long MAX_GPS_AGE_MS = 10000; // GPS location must be newer than this to be considered valid

/************ Global State (you don't need to change this!) ***   ***************/
TCPClient TheClient;
   d4ac8:	4628      	mov	r0, r5
   d4aca:	f003 fc95 	bl	d83f8 <_ZN9TCPClientC1Ev>
   d4ace:	4a38      	ldr	r2, [pc, #224]	; (d4bb0 <_GLOBAL__sub_I_TheClient+0xfc>)
   d4ad0:	4938      	ldr	r1, [pc, #224]	; (d4bb4 <_GLOBAL__sub_I_TheClient+0x100>)
   d4ad2:	4628      	mov	r0, r5
   d4ad4:	f003 fe44 	bl	d8760 <__aeabi_atexit>
   d4ad8:	4b37      	ldr	r3, [pc, #220]	; (d4bb8 <_GLOBAL__sub_I_TheClient+0x104>)
   d4ada:	9300      	str	r3, [sp, #0]
   d4adc:	f240 725b 	movw	r2, #1883	; 0x75b
   d4ae0:	4b36      	ldr	r3, [pc, #216]	; (d4bbc <_GLOBAL__sub_I_TheClient+0x108>)
   d4ae2:	4937      	ldr	r1, [pc, #220]	; (d4bc0 <_GLOBAL__sub_I_TheClient+0x10c>)
   d4ae4:	4620      	mov	r0, r4
   d4ae6:	f000 f947 	bl	d4d78 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d4aea:	4b36      	ldr	r3, [pc, #216]	; (d4bc4 <_GLOBAL__sub_I_TheClient+0x110>)

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details.
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY);
   d4aec:	4a30      	ldr	r2, [pc, #192]	; (d4bb0 <_GLOBAL__sub_I_TheClient+0xfc>)
   d4aee:	4936      	ldr	r1, [pc, #216]	; (d4bc8 <_GLOBAL__sub_I_TheClient+0x114>)
   d4af0:	6023      	str	r3, [r4, #0]
   d4af2:	4620      	mov	r0, r4
   d4af4:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
   d4af8:	f003 fe32 	bl	d8760 <__aeabi_atexit>

/****************************** Feeds ***************************************/
// Setup Feeds to publish or subscribe
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname>
Adafruit_MQTT_Publish latWrite = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Latitude");
   d4afc:	4621      	mov	r1, r4
   d4afe:	2300      	movs	r3, #0
   d4b00:	4a32      	ldr	r2, [pc, #200]	; (d4bcc <_GLOBAL__sub_I_TheClient+0x118>)
   d4b02:	4833      	ldr	r0, [pc, #204]	; (d4bd0 <_GLOBAL__sub_I_TheClient+0x11c>)
   d4b04:	f000 fb62 	bl	d51cc <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish longWrite = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Longitude");
   d4b08:	4621      	mov	r1, r4
   d4b0a:	2300      	movs	r3, #0
   d4b0c:	4a31      	ldr	r2, [pc, #196]	; (d4bd4 <_GLOBAL__sub_I_TheClient+0x120>)
   d4b0e:	4832      	ldr	r0, [pc, #200]	; (d4bd8 <_GLOBAL__sub_I_TheClient+0x124>)
   d4b10:	f000 fb5c 	bl	d51cc <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish altWrite = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Altitude");
   d4b14:	4621      	mov	r1, r4
   d4b16:	2300      	movs	r3, #0
   d4b18:	4a30      	ldr	r2, [pc, #192]	; (d4bdc <_GLOBAL__sub_I_TheClient+0x128>)
   d4b1a:	4831      	ldr	r0, [pc, #196]	; (d4be0 <_GLOBAL__sub_I_TheClient+0x12c>)
   d4b1c:	f000 fb56 	bl	d51cc <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish distanceWrite = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Distance in CM");
   d4b20:	4621      	mov	r1, r4
   d4b22:	2300      	movs	r3, #0
   d4b24:	4a2f      	ldr	r2, [pc, #188]	; (d4be4 <_GLOBAL__sub_I_TheClient+0x130>)
   d4b26:	4830      	ldr	r0, [pc, #192]	; (d4be8 <_GLOBAL__sub_I_TheClient+0x134>)
   d4b28:	f000 fb50 	bl	d51cc <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>

// The TinyGPS++ object
TinyGPSPlus gps;
   d4b2c:	482f      	ldr	r0, [pc, #188]	; (d4bec <_GLOBAL__sub_I_TheClient+0x138>)
   d4b2e:	f001 fe81 	bl	d6834 <_ZN11TinyGPSPlusC1Ev>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4b32:	4b2f      	ldr	r3, [pc, #188]	; (d4bf0 <_GLOBAL__sub_I_TheClient+0x13c>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4b34:	2164      	movs	r1, #100	; 0x64
   d4b36:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4b3a:	492e      	ldr	r1, [pc, #184]	; (d4bf4 <_GLOBAL__sub_I_TheClient+0x140>)
   d4b3c:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d4b40:	2101      	movs	r1, #1
   d4b42:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d4b46:	6831      	ldr	r1, [r6, #0]
   d4b48:	2200      	movs	r2, #0
   d4b4a:	f011 0501 	ands.w	r5, r1, #1
   d4b4e:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4b50:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d4b54:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d4b58:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d4b5c:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d4b60:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d4b64:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d4b68:	461c      	mov	r4, r3
   d4b6a:	d10a      	bne.n	d4b82 <_GLOBAL__sub_I_TheClient+0xce>
   d4b6c:	4630      	mov	r0, r6
   d4b6e:	f7ff faa5 	bl	d40bc <__cxa_guard_acquire>
   d4b72:	b130      	cbz	r0, d4b82 <_GLOBAL__sub_I_TheClient+0xce>
   d4b74:	4629      	mov	r1, r5
   d4b76:	4820      	ldr	r0, [pc, #128]	; (d4bf8 <_GLOBAL__sub_I_TheClient+0x144>)
   d4b78:	f002 fc94 	bl	d74a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4b7c:	4630      	mov	r0, r6
   d4b7e:	f7ff faa2 	bl	d40c6 <__cxa_guard_release>
   d4b82:	481e      	ldr	r0, [pc, #120]	; (d4bfc <_GLOBAL__sub_I_TheClient+0x148>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4b84:	4b1c      	ldr	r3, [pc, #112]	; (d4bf8 <_GLOBAL__sub_I_TheClient+0x144>)
   d4b86:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d4b8a:	2300      	movs	r3, #0
   d4b8c:	7203      	strb	r3, [r0, #8]
   d4b8e:	7243      	strb	r3, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4b90:	6043      	str	r3, [r0, #4]

#define FILE_BASE_NAME "Data"

// Create file system object.
SdFat sd;
SdFile file;
   d4b92:	4a07      	ldr	r2, [pc, #28]	; (d4bb0 <_GLOBAL__sub_I_TheClient+0xfc>)
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
   d4b94:	4b1a      	ldr	r3, [pc, #104]	; (d4c00 <_GLOBAL__sub_I_TheClient+0x14c>)
   d4b96:	491b      	ldr	r1, [pc, #108]	; (d4c04 <_GLOBAL__sub_I_TheClient+0x150>)
   d4b98:	6003      	str	r3, [r0, #0]
     distanceWrite.publish(cm);
      Serial.printf("Publishing Data \n");
      }
    lastTime = millis();
  }
   d4b9a:	b002      	add	sp, #8
   d4b9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

#define FILE_BASE_NAME "Data"

// Create file system object.
SdFat sd;
SdFile file;
   d4ba0:	f003 bdde 	b.w	d8760 <__aeabi_atexit>
   d4ba4:	2003e3a0 	.word	0x2003e3a0
   d4ba8:	2003e1a8 	.word	0x2003e1a8
   d4bac:	2003dcec 	.word	0x2003dcec
   d4bb0:	2003dce8 	.word	0x2003dce8
   d4bb4:	000d4151 	.word	0x000d4151
   d4bb8:	000d98e1 	.word	0x000d98e1
   d4bbc:	000d98c6 	.word	0x000d98c6
   d4bc0:	000d98d1 	.word	0x000d98d1
   d4bc4:	000d997c 	.word	0x000d997c
   d4bc8:	000d40cf 	.word	0x000d40cf
   d4bcc:	000d9902 	.word	0x000d9902
   d4bd0:	2003e358 	.word	0x2003e358
   d4bd4:	000d991c 	.word	0x000d991c
   d4bd8:	2003e190 	.word	0x2003e190
   d4bdc:	000d9937 	.word	0x000d9937
   d4be0:	2003e19c 	.word	0x2003e19c
   d4be4:	000d9951 	.word	0x000d9951
   d4be8:	2003e17c 	.word	0x2003e17c
   d4bec:	2003e280 	.word	0x2003e280
   d4bf0:	2003dcf8 	.word	0x2003dcf8
   d4bf4:	000d9564 	.word	0x000d9564
   d4bf8:	2003dcf0 	.word	0x2003dcf0
   d4bfc:	2003e374 	.word	0x2003e374
   d4c00:	000d9570 	.word	0x000d9570
   d4c04:	000d40cd 	.word	0x000d40cd

000d4c08 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d4c08:	f002 b964 	b.w	d6ed4 <HAL_Pin_Map>

000d4c0c <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d4c0c:	f002 b962 	b.w	d6ed4 <HAL_Pin_Map>

000d4c10 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d4c10:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d4c12:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d4c16:	6803      	ldr	r3, [r0, #0]
   d4c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c1a:	4798      	blx	r3
}
   d4c1c:	3000      	adds	r0, #0
   d4c1e:	bf18      	it	ne
   d4c20:	2001      	movne	r0, #1
   d4c22:	bd08      	pop	{r3, pc}

000d4c24 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d4c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c26:	4606      	mov	r6, r0
   d4c28:	460f      	mov	r7, r1
   d4c2a:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d4c2c:	b1c4      	cbz	r4, d4c60 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d4c2e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4c32:	6803      	ldr	r3, [r0, #0]
   d4c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c36:	4798      	blx	r3
   d4c38:	b908      	cbnz	r0, d4c3e <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d4c3a:	2000      	movs	r0, #0
   d4c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d4c3e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d4c42:	2cfa      	cmp	r4, #250	; 0xfa
   d4c44:	6803      	ldr	r3, [r0, #0]
   d4c46:	4625      	mov	r5, r4
   d4c48:	bfa8      	it	ge
   d4c4a:	25fa      	movge	r5, #250	; 0xfa
   d4c4c:	68db      	ldr	r3, [r3, #12]
   d4c4e:	462a      	mov	r2, r5
   d4c50:	4639      	mov	r1, r7
   d4c52:	4798      	blx	r3
   d4c54:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d4c56:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d4c58:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d4c5a:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d4c5c:	d0e6      	beq.n	d4c2c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d4c5e:	e7ec      	b.n	d4c3a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d4c60:	2001      	movs	r0, #1
}
   d4c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c64 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d4c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4c68:	4606      	mov	r6, r0
   d4c6a:	4688      	mov	r8, r1
   d4c6c:	4691      	mov	r9, r2
   d4c6e:	461f      	mov	r7, r3
   d4c70:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d4c72:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d4c74:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4c78:	6803      	ldr	r3, [r0, #0]
   d4c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c7c:	4798      	blx	r3
   d4c7e:	b1d0      	cbz	r0, d4cb6 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d4c80:	2d00      	cmp	r5, #0
   d4c82:	db18      	blt.n	d4cb6 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d4c84:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4c88:	6803      	ldr	r3, [r0, #0]
   d4c8a:	691b      	ldr	r3, [r3, #16]
   d4c8c:	4798      	blx	r3
   d4c8e:	b160      	cbz	r0, d4caa <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d4c90:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4c94:	6803      	ldr	r3, [r0, #0]
   d4c96:	695b      	ldr	r3, [r3, #20]
   d4c98:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d4c9a:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d4c9e:	3401      	adds	r4, #1
   d4ca0:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d4ca2:	454c      	cmp	r4, r9
   d4ca4:	d007      	beq.n	d4cb6 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d4ca6:	463d      	mov	r5, r7
   d4ca8:	e7ec      	b.n	d4c84 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d4caa:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d4cac:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d4cae:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d4cb0:	f002 fda4 	bl	d77fc <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d4cb4:	e7de      	b.n	d4c74 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d4cb6:	4620      	mov	r0, r4
   d4cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4cbc <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d4cbc:	b570      	push	{r4, r5, r6, lr}
   d4cbe:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d4cc0:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d4cc4:	2296      	movs	r2, #150	; 0x96
   d4cc6:	2100      	movs	r1, #0
   d4cc8:	4628      	mov	r0, r5
   d4cca:	f004 fb14 	bl	d92f6 <memset>
  strcpy((char *)buffer, servername);
   d4cce:	6861      	ldr	r1, [r4, #4]
   d4cd0:	4628      	mov	r0, r5
   d4cd2:	f004 fb85 	bl	d93e0 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d4cd6:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d4cda:	8922      	ldrh	r2, [r4, #8]
   d4cdc:	6803      	ldr	r3, [r0, #0]
   d4cde:	4629      	mov	r1, r5
   d4ce0:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d4ce2:	2300      	movs	r3, #0
   d4ce4:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d4ce6:	3000      	adds	r0, #0
   d4ce8:	bf18      	it	ne
   d4cea:	2001      	movne	r0, #1
   d4cec:	bd70      	pop	{r4, r5, r6, pc}

000d4cee <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d4cee:	b510      	push	{r4, lr}
   d4cf0:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d4cf2:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d4cf6:	6803      	ldr	r3, [r0, #0]
   d4cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4cfa:	4798      	blx	r3
   d4cfc:	b120      	cbz	r0, d4d08 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d4cfe:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d4d02:	6803      	ldr	r3, [r0, #0]
   d4d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d06:	4798      	blx	r3
  }
  return true;
}
   d4d08:	2001      	movs	r0, #1
   d4d0a:	bd10      	pop	{r4, pc}

000d4d0c <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d4d0c:	b570      	push	{r4, r5, r6, lr}
    // Stop if already connected.
    if (!connected())
   d4d0e:	6803      	ldr	r3, [r0, #0]
   d4d10:	689b      	ldr	r3, [r3, #8]
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d4d12:	4604      	mov	r4, r0
    // Stop if already connected.
    if (!connected())
   d4d14:	4798      	blx	r3
   d4d16:	b9c8      	cbnz	r0, d4d4c <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d4d18:	4620      	mov	r0, r4
   d4d1a:	f000 f9fe 	bl	d511a <_ZN13Adafruit_MQTT7connectEv>
   d4d1e:	2504      	movs	r5, #4
   d4d20:	b170      	cbz	r0, d4d40 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d4d22:	3d01      	subs	r5, #1
   d4d24:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d4d28:	d00a      	beq.n	d4d40 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
        { // connect will return 0 for connected
            DEBUG_PRINT(connectErrorString(ret));
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
   d4d2a:	4620      	mov	r0, r4
   d4d2c:	f000 f8b8 	bl	d4ea0 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d4d30:	f241 3088 	movw	r0, #5000	; 0x1388
   d4d34:	f002 fd62 	bl	d77fc <delay>
    if (!connected())
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d4d38:	4620      	mov	r0, r4
   d4d3a:	f000 f9ee 	bl	d511a <_ZN13Adafruit_MQTT7connectEv>
   d4d3e:	e7ef      	b.n	d4d20 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d4d40:	6823      	ldr	r3, [r4, #0]
   d4d42:	4620      	mov	r0, r4
   d4d44:	689b      	ldr	r3, [r3, #8]
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d4d46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d4d4a:	4718      	bx	r3
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d4d4c:	bd70      	pop	{r4, r5, r6, pc}

000d4d4e <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d4d4e:	f002 b8c1 	b.w	d6ed4 <HAL_Pin_Map>

000d4d52 <_ZL11stringprintPhPKct.constprop.3>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d4d52:	b570      	push	{r4, r5, r6, lr}
   d4d54:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d4d56:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d4d58:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d4d5a:	f004 fb49 	bl	d93f0 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d4d5e:	1203      	asrs	r3, r0, #8
   d4d60:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d4d62:	7060      	strb	r0, [r4, #1]
   d4d64:	b285      	uxth	r5, r0
   d4d66:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d4d68:	462a      	mov	r2, r5
   d4d6a:	4631      	mov	r1, r6
   d4d6c:	4620      	mov	r0, r4
   d4d6e:	f004 fb47 	bl	d9400 <strncpy>
  return p+len;
}
   d4d72:	1960      	adds	r0, r4, r5
   d4d74:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4d78 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d4d78:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d4d7a:	6103      	str	r3, [r0, #16]
  password = pass;
   d4d7c:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d4d7e:	4d0d      	ldr	r5, [pc, #52]	; (d4db4 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d4d80:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d4d82:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d4d84:	4a0c      	ldr	r2, [pc, #48]	; (d4db8 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d4d86:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d4d88:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d4d8a:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d4d8c:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d4d8e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d4d92:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d4d96:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d4d9a:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d4d9e:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d4da2:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d4da4:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d4da6:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d4daa:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d4dae:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d4db2:	bd30      	pop	{r4, r5, pc}
   d4db4:	000d99a0 	.word	0x000d99a0
   d4db8:	000d99f1 	.word	0x000d99f1

000d4dbc <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d4dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d4dc0:	fa0f fa83 	sxth.w	sl, r3
   d4dc4:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d4dc6:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d4dc8:	699d      	ldr	r5, [r3, #24]
   d4dca:	2201      	movs	r2, #1
   d4dcc:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d4dce:	4606      	mov	r6, r0
   d4dd0:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d4dd2:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d4dd4:	b2c0      	uxtb	r0, r0
   d4dd6:	2801      	cmp	r0, #1
   d4dd8:	d001      	beq.n	d4dde <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d4dda:	2000      	movs	r0, #0
   d4ddc:	e034      	b.n	d4e48 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d4dde:	1c65      	adds	r5, r4, #1
   d4de0:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d4de4:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d4de6:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d4dea:	6833      	ldr	r3, [r6, #0]
   d4dec:	699b      	ldr	r3, [r3, #24]
   d4dee:	2201      	movs	r2, #1
   d4df0:	461f      	mov	r7, r3
   d4df2:	4629      	mov	r1, r5
   d4df4:	4653      	mov	r3, sl
   d4df6:	4630      	mov	r0, r6
   d4df8:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d4dfa:	b2c0      	uxtb	r0, r0
   d4dfc:	2801      	cmp	r0, #1
   d4dfe:	d1ec      	bne.n	d4dda <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d4e00:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d4e04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d4e08:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d4e0a:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d4e0e:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d4e12:	d0e2      	beq.n	d4dda <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d4e14:	061b      	lsls	r3, r3, #24
   d4e16:	d4e8      	bmi.n	d4dea <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d4e18:	9b01      	ldr	r3, [sp, #4]
   d4e1a:	1b2c      	subs	r4, r5, r4
   d4e1c:	1b1b      	subs	r3, r3, r4
   d4e1e:	3b01      	subs	r3, #1
   d4e20:	4599      	cmp	r9, r3
   d4e22:	6833      	ldr	r3, [r6, #0]
   d4e24:	d906      	bls.n	d4e34 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d4e26:	9a01      	ldr	r2, [sp, #4]
   d4e28:	699f      	ldr	r7, [r3, #24]
   d4e2a:	3a01      	subs	r2, #1
   d4e2c:	1b12      	subs	r2, r2, r4
   d4e2e:	4653      	mov	r3, sl
   d4e30:	b292      	uxth	r2, r2
   d4e32:	e003      	b.n	d4e3c <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d4e34:	699f      	ldr	r7, [r3, #24]
   d4e36:	fa1f f289 	uxth.w	r2, r9
   d4e3a:	4653      	mov	r3, sl
   d4e3c:	4629      	mov	r1, r5
   d4e3e:	4630      	mov	r0, r6
   d4e40:	47b8      	blx	r7
   d4e42:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d4e44:	4420      	add	r0, r4
   d4e46:	b280      	uxth	r0, r0
}
   d4e48:	b003      	add	sp, #12
   d4e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d4e50 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d4e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e52:	4605      	mov	r5, r0
   d4e54:	460c      	mov	r4, r1
   d4e56:	4616      	mov	r6, r2
   d4e58:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d4e5a:	463b      	mov	r3, r7
   d4e5c:	2296      	movs	r2, #150	; 0x96
   d4e5e:	4621      	mov	r1, r4
   d4e60:	4628      	mov	r0, r5
   d4e62:	f7ff ffab 	bl	d4dbc <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d4e66:	b148      	cbz	r0, d4e7c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d4e68:	7823      	ldrb	r3, [r4, #0]
   d4e6a:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d4e6e:	d005      	beq.n	d4e7c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d4e70:	f002 fe56 	bl	d7b20 <_Z16_fetch_usbserialv>
   d4e74:	4902      	ldr	r1, [pc, #8]	; (d4e80 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d4e76:	f002 fc48 	bl	d770a <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d4e7a:	e7ee      	b.n	d4e5a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d4e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4e7e:	bf00      	nop
   d4e80:	000d99f2 	.word	0x000d99f2

000d4e84 <_ZN13Adafruit_MQTT18connectErrorStringEa>:

  return ((pbuff - buffer)+rlen);
}

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   d4e84:	3102      	adds	r1, #2
   d4e86:	b2c9      	uxtb	r1, r1
   d4e88:	2909      	cmp	r1, #9
   d4e8a:	bf9a      	itte	ls
   d4e8c:	4b02      	ldrls	r3, [pc, #8]	; (d4e98 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   d4e8e:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   switch (code) {
   d4e92:	4802      	ldrhi	r0, [pc, #8]	; (d4e9c <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   d4e94:	4770      	bx	lr
   d4e96:	bf00      	nop
   d4e98:	000d99bc 	.word	0x000d99bc
   d4e9c:	000d9a03 	.word	0x000d9a03

000d4ea0 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   d4ea0:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d4ea2:	23e0      	movs	r3, #224	; 0xe0
   d4ea4:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d4ea8:	2300      	movs	r3, #0
   d4eaa:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d4eae:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d4eb0:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d4eb2:	695b      	ldr	r3, [r3, #20]
   d4eb4:	2202      	movs	r2, #2
   d4eb6:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d4eba:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d4ebc:	6823      	ldr	r3, [r4, #0]
   d4ebe:	4620      	mov	r0, r4
   d4ec0:	691b      	ldr	r3, [r3, #16]

}
   d4ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d4ec6:	4718      	bx	r3

000d4ec8 <_ZN13Adafruit_MQTT4pingEh>:
  // flush input!
  DEBUG_PRINTLN(F("Flushing input buffer"));
  while (readPacket(buffer, MAXBUFFERSIZE, timeout));
}

bool Adafruit_MQTT::ping(uint8_t num) {
   d4ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4ecc:	4604      	mov	r4, r0
   d4ece:	460d      	mov	r5, r1
   d4ed0:	f04f 0800 	mov.w	r8, #0
  return len;

}

uint8_t Adafruit_MQTT::pingPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d4ed4:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  //flushIncoming(100);

  while (num--) {
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d4ed8:	f100 0722 	add.w	r7, r0, #34	; 0x22
}

bool Adafruit_MQTT::ping(uint8_t num) {
  //flushIncoming(100);

  while (num--) {
   d4edc:	b1d5      	cbz	r5, d4f14 <_ZN13Adafruit_MQTT4pingEh+0x4c>
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d4ede:	6823      	ldr	r3, [r4, #0]
  return len;

}

uint8_t Adafruit_MQTT::pingPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d4ee0:	f884 9022 	strb.w	r9, [r4, #34]	; 0x22
  packet[1] = 0;
   d4ee4:	f884 8023 	strb.w	r8, [r4, #35]	; 0x23
  //flushIncoming(100);

  while (num--) {
    // Construct and send ping packet.
    uint8_t len = pingPacket(buffer);
    if (!sendPacket(buffer, len))
   d4ee8:	695b      	ldr	r3, [r3, #20]
   d4eea:	2202      	movs	r2, #2
   d4eec:	4639      	mov	r1, r7
   d4eee:	4620      	mov	r0, r4
   d4ef0:	4798      	blx	r3
   d4ef2:	4606      	mov	r6, r0
   d4ef4:	b910      	cbnz	r0, d4efc <_ZN13Adafruit_MQTT4pingEh+0x34>
   d4ef6:	3d01      	subs	r5, #1
   d4ef8:	b2ed      	uxtb	r5, r5
   d4efa:	e7ef      	b.n	d4edc <_ZN13Adafruit_MQTT4pingEh+0x14>
      continue;

    // Process ping reply.
    len = processPacketsUntil(buffer, MQTT_CTRL_PINGRESP, PING_TIMEOUT_MS);
   d4efc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4f00:	220d      	movs	r2, #13
   d4f02:	4639      	mov	r1, r7
   d4f04:	4620      	mov	r0, r4
   d4f06:	f7ff ffa3 	bl	d4e50 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
    if (buffer[0] == (MQTT_CTRL_PINGRESP << 4))
   d4f0a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4f0e:	2bd0      	cmp	r3, #208	; 0xd0
   d4f10:	d1f1      	bne.n	d4ef6 <_ZN13Adafruit_MQTT4pingEh+0x2e>
   d4f12:	e000      	b.n	d4f16 <_ZN13Adafruit_MQTT4pingEh+0x4e>
      return true;
  }

  return false;
   d4f14:	462e      	mov	r6, r5
}
   d4f16:	4630      	mov	r0, r6
   d4f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4f1c <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d4f1c:	b538      	push	{r3, r4, r5, lr}
   d4f1e:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d4f20:	4608      	mov	r0, r1
   d4f22:	2310      	movs	r3, #16
   d4f24:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d4f28:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d4f2a:	4929      	ldr	r1, [pc, #164]	; (d4fd0 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d4f2c:	f7ff ff11 	bl	d4d52 <_ZL11stringprintPhPKct.constprop.3>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d4f30:	2304      	movs	r3, #4
   d4f32:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d4f34:	2302      	movs	r3, #2
   d4f36:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d4f38:	69a3      	ldr	r3, [r4, #24]
   d4f3a:	b1ab      	cbz	r3, d4f68 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d4f3c:	781b      	ldrb	r3, [r3, #0]
   d4f3e:	b19b      	cbz	r3, d4f68 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d4f40:	2306      	movs	r3, #6
   d4f42:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d4f44:	f894 3020 	ldrb.w	r3, [r4, #32]
   d4f48:	2b01      	cmp	r3, #1
   d4f4a:	d101      	bne.n	d4f50 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d4f4c:	230e      	movs	r3, #14
   d4f4e:	e002      	b.n	d4f56 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d4f50:	2b02      	cmp	r3, #2
   d4f52:	d101      	bne.n	d4f58 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d4f54:	231e      	movs	r3, #30
   d4f56:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d4f58:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d4f5c:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d4f5e:	bf02      	ittt	eq
   d4f60:	7843      	ldrbeq	r3, [r0, #1]
   d4f62:	f043 0320 	orreq.w	r3, r3, #32
   d4f66:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d4f68:	6923      	ldr	r3, [r4, #16]
   d4f6a:	781b      	ldrb	r3, [r3, #0]
   d4f6c:	b11b      	cbz	r3, d4f76 <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d4f6e:	7843      	ldrb	r3, [r0, #1]
   d4f70:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d4f74:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d4f76:	6963      	ldr	r3, [r4, #20]
   d4f78:	781b      	ldrb	r3, [r3, #0]
   d4f7a:	b11b      	cbz	r3, d4f84 <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d4f7c:	7843      	ldrb	r3, [r0, #1]
   d4f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d4f82:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d4f84:	2301      	movs	r3, #1
   d4f86:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d4f88:	232c      	movs	r3, #44	; 0x2c
   d4f8a:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d4f8c:	68e1      	ldr	r1, [r4, #12]
   d4f8e:	780b      	ldrb	r3, [r1, #0]
   d4f90:	b11b      	cbz	r3, d4f9a <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d4f92:	3004      	adds	r0, #4
   d4f94:	f7ff fedd 	bl	d4d52 <_ZL11stringprintPhPKct.constprop.3>
   d4f98:	e002      	b.n	d4fa0 <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d4f9a:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d4f9c:	7143      	strb	r3, [r0, #5]
      p++;
   d4f9e:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d4fa0:	69a1      	ldr	r1, [r4, #24]
   d4fa2:	b131      	cbz	r1, d4fb2 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d4fa4:	780b      	ldrb	r3, [r1, #0]
   d4fa6:	b123      	cbz	r3, d4fb2 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d4fa8:	f7ff fed3 	bl	d4d52 <_ZL11stringprintPhPKct.constprop.3>
    p = stringprint(p, will_payload);
   d4fac:	69e1      	ldr	r1, [r4, #28]
   d4fae:	f7ff fed0 	bl	d4d52 <_ZL11stringprintPhPKct.constprop.3>
  }

  if (pgm_read_byte(username) != 0) {
   d4fb2:	6921      	ldr	r1, [r4, #16]
   d4fb4:	780b      	ldrb	r3, [r1, #0]
   d4fb6:	b10b      	cbz	r3, d4fbc <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d4fb8:	f7ff fecb 	bl	d4d52 <_ZL11stringprintPhPKct.constprop.3>
  }
  if (pgm_read_byte(password) != 0) {
   d4fbc:	6961      	ldr	r1, [r4, #20]
   d4fbe:	780b      	ldrb	r3, [r1, #0]
   d4fc0:	b10b      	cbz	r3, d4fc6 <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d4fc2:	f7ff fec6 	bl	d4d52 <_ZL11stringprintPhPKct.constprop.3>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d4fc6:	1b40      	subs	r0, r0, r5
   d4fc8:	b2c0      	uxtb	r0, r0
   d4fca:	1e83      	subs	r3, r0, #2
   d4fcc:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d4fce:	bd38      	pop	{r3, r4, r5, pc}
   d4fd0:	000d9a11 	.word	0x000d9a11

000d4fd4 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d4fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4fd8:	4605      	mov	r5, r0
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d4fda:	4610      	mov	r0, r2
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d4fdc:	460e      	mov	r6, r1
   d4fde:	4691      	mov	r9, r2
   d4fe0:	461f      	mov	r7, r3
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d4fe2:	f004 fa05 	bl	d93f0 <strlen>
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d4fe6:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
   d4fea:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d4fee:	b280      	uxth	r0, r0
  if(qos > 0) { 
   d4ff0:	f1b8 0f00 	cmp.w	r8, #0
   d4ff4:	d101      	bne.n	d4ffa <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d4ff6:	1c83      	adds	r3, r0, #2
   d4ff8:	e000      	b.n	d4ffc <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x28>
  if(qos > 0) { 
    len += 2; // qos packet id
   d4ffa:	1d03      	adds	r3, r0, #4
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d4ffc:	ea4f 0248 	mov.w	r2, r8, lsl #1
   d5000:	4630      	mov	r0, r6

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
   d5002:	b29b      	uxth	r3, r3
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5004:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d5008:	4423      	add	r3, r4

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d500a:	f800 2b01 	strb.w	r2, [r0], #1
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d500e:	b29b      	uxth	r3, r3
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
  p++;

  // fill in packet[1] last
  do {
    uint8_t encodedByte = len % 128;
   d5010:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    len /= 128;
    // if there are more data to encode, set the top bit of this byte
    if ( len > 0 ) {
   d5014:	09db      	lsrs	r3, r3, #7
      encodedByte |= 0x80;
   d5016:	bf18      	it	ne
   d5018:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    }
    p[0] = encodedByte;
   d501c:	f800 2b01 	strb.w	r2, [r0], #1
    p++;
  } while ( len > 0 );
   d5020:	2b00      	cmp	r3, #0
   d5022:	d1f5      	bne.n	d5010 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3c>

  // topic comes before packet identifier
  p = stringprint(p, topic);
   d5024:	4649      	mov	r1, r9
   d5026:	f7ff fe94 	bl	d4d52 <_ZL11stringprintPhPKct.constprop.3>
   d502a:	4603      	mov	r3, r0

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
   d502c:	f1b8 0f00 	cmp.w	r8, #0
   d5030:	d00c      	beq.n	d504c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x78>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d5032:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5036:	0a12      	lsrs	r2, r2, #8
   d5038:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d503a:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d503e:	7042      	strb	r2, [r0, #1]
    p+=2;

    // increment the packet id
    packet_id_counter++;
   d5040:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5044:	3201      	adds	r2, #1

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
    p[0] = (packet_id_counter >> 8) & 0xFF;
    p[1] = packet_id_counter & 0xFF;
    p+=2;
   d5046:	3302      	adds	r3, #2

    // increment the packet id
    packet_id_counter++;
   d5048:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  }

  memmove(p, data, bLen);
   d504c:	4622      	mov	r2, r4
   d504e:	4639      	mov	r1, r7
   d5050:	4618      	mov	r0, r3
   d5052:	f004 f935 	bl	d92c0 <memmove>
  p+= bLen;
  len = p - packet;
  DEBUG_PRINTLN(F("MQTT publish packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
   d5056:	4420      	add	r0, r4
   d5058:	1b80      	subs	r0, r0, r6
}
   d505a:	b280      	uxth	r0, r0
   d505c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5060 <_ZN13Adafruit_MQTT7publishEPKcPhth>:

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5060:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5062:	f89d 6018 	ldrb.w	r6, [sp, #24]
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5066:	f100 0522 	add.w	r5, r0, #34	; 0x22

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d506a:	4604      	mov	r4, r0
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d506c:	e88d 0048 	stmia.w	sp, {r3, r6}
   d5070:	4613      	mov	r3, r2
   d5072:	460a      	mov	r2, r1
   d5074:	4629      	mov	r1, r5
   d5076:	f7ff ffad 	bl	d4fd4 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d507a:	6823      	ldr	r3, [r4, #0]
   d507c:	4602      	mov	r2, r0
   d507e:	695b      	ldr	r3, [r3, #20]
   d5080:	4629      	mov	r1, r5
   d5082:	4620      	mov	r0, r4
   d5084:	4798      	blx	r3
   d5086:	b908      	cbnz	r0, d508c <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2c>
    return false;
   d5088:	2000      	movs	r0, #0
   d508a:	e017      	b.n	d50bc <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>

  // If QOS level is high enough verify the response packet.
  if (qos > 0) {
   d508c:	b1b6      	cbz	r6, d50bc <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d508e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5092:	2296      	movs	r2, #150	; 0x96
   d5094:	4629      	mov	r1, r5
   d5096:	4620      	mov	r0, r4
   d5098:	f7ff fe90 	bl	d4dbc <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    DEBUG_PRINT(F("Publish QOS1+ reply:\t"));
    DEBUG_PRINTBUFFER(buffer, len);
    if (len != 4)
   d509c:	2804      	cmp	r0, #4
   d509e:	d1f3      	bne.n	d5088 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
      return false;
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d50a0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d50a4:	111b      	asrs	r3, r3, #4
   d50a6:	2b04      	cmp	r3, #4
   d50a8:	d1ee      	bne.n	d5088 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
   d50aa:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    packnum <<= 8;
    packnum |= buffer[3];

    // we increment the packet_id_counter right after publishing so inc here too to match
    packnum++;
    if (packnum != packet_id_counter)
   d50ac:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d50b0:	ba5b      	rev16	r3, r3
   d50b2:	3301      	adds	r3, #1
   d50b4:	b29b      	uxth	r3, r3
   d50b6:	1ac3      	subs	r3, r0, r3
   d50b8:	4258      	negs	r0, r3
   d50ba:	4158      	adcs	r0, r3
      return false;
  }

  return true;
}
   d50bc:	b002      	add	sp, #8
   d50be:	bd70      	pop	{r4, r5, r6, pc}

000d50c0 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d50c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d50c2:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d50c4:	4610      	mov	r0, r2
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d50c6:	461f      	mov	r7, r3
   d50c8:	460e      	mov	r6, r1
   d50ca:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d50cc:	f004 f990 	bl	d93f0 <strlen>
   d50d0:	9700      	str	r7, [sp, #0]
   d50d2:	b283      	uxth	r3, r0
   d50d4:	4622      	mov	r2, r4
   d50d6:	4631      	mov	r1, r6
   d50d8:	4628      	mov	r0, r5
   d50da:	f7ff ffc1 	bl	d5060 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d50de:	b003      	add	sp, #12
   d50e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d50e2 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d50e2:	b538      	push	{r3, r4, r5, lr}
   d50e4:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d50e6:	2382      	movs	r3, #130	; 0x82
   d50e8:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d50ea:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d50ec:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d50f0:	0a09      	lsrs	r1, r1, #8
   d50f2:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d50f4:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d50f8:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d50fa:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d50fe:	3101      	adds	r1, #1
   d5100:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d5104:	4611      	mov	r1, r2
   d5106:	1d20      	adds	r0, r4, #4
   d5108:	f7ff fe23 	bl	d4d52 <_ZL11stringprintPhPKct.constprop.3>

  p[0] = qos;
   d510c:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d5110:	1b00      	subs	r0, r0, r4
   d5112:	b2c0      	uxtb	r0, r0
   d5114:	1e83      	subs	r3, r0, #2
   d5116:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5118:	bd38      	pop	{r3, r4, r5, pc}

000d511a <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d511a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d511e:	6803      	ldr	r3, [r0, #0]
   d5120:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5122:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d5124:	4798      	blx	r3
   d5126:	b918      	cbnz	r0, d5130 <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d5128:	f04f 30ff 	mov.w	r0, #4294967295
   d512c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d5130:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d5134:	4629      	mov	r1, r5
   d5136:	4620      	mov	r0, r4
   d5138:	f7ff fef0 	bl	d4f1c <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d513c:	6823      	ldr	r3, [r4, #0]
   d513e:	b282      	uxth	r2, r0
   d5140:	695b      	ldr	r3, [r3, #20]
   d5142:	4629      	mov	r1, r5
   d5144:	4620      	mov	r0, r4
   d5146:	4798      	blx	r3
   d5148:	2800      	cmp	r0, #0
   d514a:	d0ed      	beq.n	d5128 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d514c:	f241 7370 	movw	r3, #6000	; 0x1770
   d5150:	2296      	movs	r2, #150	; 0x96
   d5152:	4629      	mov	r1, r5
   d5154:	4620      	mov	r0, r4
   d5156:	f7ff fe31 	bl	d4dbc <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d515a:	b2c0      	uxtb	r0, r0
   d515c:	2804      	cmp	r0, #4
   d515e:	d1e3      	bne.n	d5128 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d5160:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5162:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d5166:	d1df      	bne.n	d5128 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d5168:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d516c:	b110      	cbz	r0, d5174 <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d516e:	b240      	sxtb	r0, r0
   d5170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5174:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d5178:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d517c:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d5180:	b1fb      	cbz	r3, d51c2 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5182:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d5184:	683a      	ldr	r2, [r7, #0]
   d5186:	4629      	mov	r1, r5
   d5188:	7913      	ldrb	r3, [r2, #4]
   d518a:	6812      	ldr	r2, [r2, #0]
   d518c:	4620      	mov	r0, r4
   d518e:	f7ff ffa8 	bl	d50e2 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d5192:	6823      	ldr	r3, [r4, #0]
   d5194:	b282      	uxth	r2, r0
   d5196:	695b      	ldr	r3, [r3, #20]
   d5198:	4629      	mov	r1, r5
   d519a:	4620      	mov	r0, r4
   d519c:	4798      	blx	r3
   d519e:	2800      	cmp	r0, #0
   d51a0:	d0c2      	beq.n	d5128 <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d51a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d51a6:	2209      	movs	r2, #9
   d51a8:	4629      	mov	r1, r5
   d51aa:	4620      	mov	r0, r4
   d51ac:	f7ff fe50 	bl	d4e50 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d51b0:	b938      	cbnz	r0, d51c2 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d51b2:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d51b4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d51b8:	d1e4      	bne.n	d5184 <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d51ba:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d51be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d51c2:	4547      	cmp	r7, r8
   d51c4:	d1da      	bne.n	d517c <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d51c6:	2000      	movs	r0, #0
   d51c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d51cc <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d51cc:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d51ce:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d51d2:	7203      	strb	r3, [r0, #8]
}
   d51d4:	bd10      	pop	{r4, pc}
	...

000d51d8 <_ZN21Adafruit_MQTT_Publish7publishEdh>:
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d51d8:	b510      	push	{r4, lr}
   d51da:	b092      	sub	sp, #72	; 0x48
   d51dc:	4604      	mov	r4, r0
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d51de:	460b      	mov	r3, r1
   d51e0:	2200      	movs	r2, #0
   d51e2:	490b      	ldr	r1, [pc, #44]	; (d5210 <_ZN21Adafruit_MQTT_Publish7publishEdh+0x38>)
   d51e4:	a802      	add	r0, sp, #8
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d51e6:	ed8d 0b00 	vstr	d0, [sp]
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d51ea:	f002 f8ff 	bl	d73ec <sprintf>
  sprintf(sout, fmt, val);
   d51ee:	ed9d 0b00 	vldr	d0, [sp]
   d51f2:	a902      	add	r1, sp, #8
   d51f4:	ec53 2b10 	vmov	r2, r3, d0
   d51f8:	a807      	add	r0, sp, #28
   d51fa:	f002 f8f7 	bl	d73ec <sprintf>
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
  char payload[41];  // Need to technically hold float max, 39 digits and minus sign.
  dtostrf(f, 0, precision, payload);
  return mqtt->publish(topic, payload, qos);
   d51fe:	7a23      	ldrb	r3, [r4, #8]
   d5200:	aa07      	add	r2, sp, #28
   d5202:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5206:	f7ff ff5b 	bl	d50c0 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d520a:	b012      	add	sp, #72	; 0x48
   d520c:	bd10      	pop	{r4, pc}
   d520e:	bf00      	nop
   d5210:	000d9a16 	.word	0x000d9a16

000d5214 <_GLOBAL__sub_I__Z11printBufferPht>:
   d5214:	f001 be5e 	b.w	d6ed4 <HAL_Pin_Map>

000d5218 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d5218:	f001 be5c 	b.w	d6ed4 <HAL_Pin_Map>

000d521c <_GLOBAL__sub_I__ZN7istream3getEv>:
   d521c:	f001 be5a 	b.w	d6ed4 <HAL_Pin_Map>

000d5220 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d5220:	b510      	push	{r4, lr}
   d5222:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5224:	3024      	adds	r0, #36	; 0x24
   d5226:	f000 fe7b 	bl	d5f20 <_ZN8FatCache4syncEv>
   d522a:	b128      	cbz	r0, d5238 <_ZN9FatVolume9cacheSyncEv+0x18>
   d522c:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d5230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5234:	f000 be74 	b.w	d5f20 <_ZN8FatCache4syncEv>
  }
   d5238:	bd10      	pop	{r4, pc}

000d523a <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d523a:	1e41      	subs	r1, r0, #1
   d523c:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d5240:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d5242:	0843      	lsrs	r3, r0, #1
   d5244:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d5248:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d524c:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d5250:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d5252:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d5254:	d1f5      	bne.n	d5242 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d5256:	4770      	bx	lr

000d5258 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d5258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d525c:	7803      	ldrb	r3, [r0, #0]
   d525e:	2b20      	cmp	r3, #32
   d5260:	f100 0401 	add.w	r4, r0, #1
   d5264:	d101      	bne.n	d526a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d5266:	4620      	mov	r0, r4
   d5268:	e7f8      	b.n	d525c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d526a:	4f70      	ldr	r7, [pc, #448]	; (d542c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d526c:	6088      	str	r0, [r1, #8]
   d526e:	4605      	mov	r5, r0
   d5270:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d5272:	462e      	mov	r6, r5
   d5274:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d5278:	b30b      	cbz	r3, d52be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d527a:	2b2f      	cmp	r3, #47	; 0x2f
   d527c:	d101      	bne.n	d5282 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d527e:	1903      	adds	r3, r0, r4
   d5280:	e017      	b.n	d52b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5282:	2b5c      	cmp	r3, #92	; 0x5c
   d5284:	d102      	bne.n	d528c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d5286:	2000      	movs	r0, #0
   d5288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d528c:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d5290:	b2e4      	uxtb	r4, r4
   d5292:	2c1d      	cmp	r4, #29
   d5294:	d803      	bhi.n	d529e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d5296:	fa27 f404 	lsr.w	r4, r7, r4
   d529a:	07e4      	lsls	r4, r4, #31
   d529c:	d4f3      	bmi.n	d5286 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d529e:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d52a2:	2c3c      	cmp	r4, #60	; 0x3c
   d52a4:	d0ef      	beq.n	d5286 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d52a6:	3b20      	subs	r3, #32
   d52a8:	2b5e      	cmp	r3, #94	; 0x5e
   d52aa:	d9e1      	bls.n	d5270 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d52ac:	e7eb      	b.n	d5286 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d52ae:	2d2f      	cmp	r5, #47	; 0x2f
   d52b0:	d105      	bne.n	d52be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d52b2:	461e      	mov	r6, r3
   d52b4:	f813 5b01 	ldrb.w	r5, [r3], #1
   d52b8:	2d20      	cmp	r5, #32
   d52ba:	d1f8      	bne.n	d52ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d52bc:	e7f9      	b.n	d52b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d52be:	6016      	str	r6, [r2, #0]
   d52c0:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d52c2:	4298      	cmp	r0, r3
   d52c4:	ebc0 0803 	rsb	r8, r0, r3
   d52c8:	d009      	beq.n	d52de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d52ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d52ce:	2a2e      	cmp	r2, #46	; 0x2e
   d52d0:	d0f7      	beq.n	d52c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d52d2:	2a20      	cmp	r2, #32
   d52d4:	d0f5      	beq.n	d52c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d52d6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d52da:	dcd4      	bgt.n	d5286 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d52dc:	e001      	b.n	d52e2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d52de:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d52e2:	f8c1 8004 	str.w	r8, [r1, #4]
   d52e6:	f101 030c 	add.w	r3, r1, #12
   d52ea:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d52ee:	2420      	movs	r4, #32
   d52f0:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d52f4:	4293      	cmp	r3, r2
   d52f6:	d1fb      	bne.n	d52f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d52f8:	4603      	mov	r3, r0
   d52fa:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d52fc:	f813 4b01 	ldrb.w	r4, [r3], #1
   d5300:	2c2e      	cmp	r4, #46	; 0x2e
   d5302:	d0fa      	beq.n	d52fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d5304:	2c20      	cmp	r4, #32
   d5306:	d0f8      	beq.n	d52fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d5308:	fab2 f482 	clz	r4, r2
   d530c:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d530e:	f108 36ff 	add.w	r6, r8, #4294967295
   d5312:	1c73      	adds	r3, r6, #1
   d5314:	d107      	bne.n	d5326 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d5316:	2700      	movs	r7, #0
   d5318:	f04f 0e07 	mov.w	lr, #7
   d531c:	463d      	mov	r5, r7
   d531e:	46ba      	mov	sl, r7
   d5320:	f04f 0908 	mov.w	r9, #8
   d5324:	e009      	b.n	d533a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d5326:	5d83      	ldrb	r3, [r0, r6]
   d5328:	2b2e      	cmp	r3, #46	; 0x2e
   d532a:	d0f4      	beq.n	d5316 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d532c:	3e01      	subs	r6, #1
   d532e:	e7f0      	b.n	d5312 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d5330:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d5332:	2b20      	cmp	r3, #32
   d5334:	d104      	bne.n	d5340 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d5336:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d5338:	3201      	adds	r2, #1
   d533a:	4542      	cmp	r2, r8
   d533c:	dbf8      	blt.n	d5330 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d533e:	e04b      	b.n	d53d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d5340:	2b2e      	cmp	r3, #46	; 0x2e
   d5342:	d102      	bne.n	d534a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d5344:	42b2      	cmp	r2, r6
   d5346:	d1f6      	bne.n	d5336 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d5348:	e003      	b.n	d5352 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d534a:	2b22      	cmp	r3, #34	; 0x22
   d534c:	d017      	beq.n	d537e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d534e:	2b7c      	cmp	r3, #124	; 0x7c
   d5350:	d015      	beq.n	d537e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d5352:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d5356:	f1bc 0f05 	cmp.w	ip, #5
   d535a:	d801      	bhi.n	d5360 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d535c:	2b2d      	cmp	r3, #45	; 0x2d
   d535e:	d10e      	bne.n	d537e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d5360:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d5364:	f1bc 0f05 	cmp.w	ip, #5
   d5368:	d909      	bls.n	d537e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d536a:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d536e:	f1bc 0f02 	cmp.w	ip, #2
   d5372:	d904      	bls.n	d537e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d5374:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d5378:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d537c:	d902      	bls.n	d5384 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d537e:	42b2      	cmp	r2, r6
   d5380:	d10e      	bne.n	d53a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d5382:	e049      	b.n	d5418 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d5384:	42b2      	cmp	r2, r6
   d5386:	d047      	beq.n	d5418 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d5388:	4575      	cmp	r5, lr
   d538a:	d821      	bhi.n	d53d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d538c:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d5390:	f1bc 0f19 	cmp.w	ip, #25
   d5394:	d808      	bhi.n	d53a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d5396:	3b20      	subs	r3, #32
   d5398:	b2db      	uxtb	r3, r3
        lc |= bit;
   d539a:	ea49 0707 	orr.w	r7, r9, r7
   d539e:	e00a      	b.n	d53b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d53a0:	4575      	cmp	r5, lr
   d53a2:	d815      	bhi.n	d53d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d53a4:	2400      	movs	r4, #0
      c = '_';
   d53a6:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d53a8:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d53ac:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d53b0:	bf98      	it	ls
   d53b2:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d53b6:	f105 0c01 	add.w	ip, r5, #1
   d53ba:	fa5f fc8c 	uxtb.w	ip, ip
   d53be:	440d      	add	r5, r1
      if (i < 7) {
   d53c0:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d53c4:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d53c6:	d801      	bhi.n	d53cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d53c8:	f881 c00c 	strb.w	ip, [r1, #12]
   d53cc:	4665      	mov	r5, ip
   d53ce:	e7b3      	b.n	d5338 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d53d0:	f1be 0f0a 	cmp.w	lr, #10
   d53d4:	d117      	bne.n	d5406 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d53d6:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d53d8:	7b4b      	ldrb	r3, [r1, #13]
   d53da:	2b20      	cmp	r3, #32
   d53dc:	f43f af53 	beq.w	d5286 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d53e0:	b13c      	cbz	r4, d53f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d53e2:	ea1a 0f07 	tst.w	sl, r7
   d53e6:	bf18      	it	ne
   d53e8:	2702      	movne	r7, #2
   d53ea:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d53ec:	2001      	movs	r0, #1
   d53ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d53f2:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d53f4:	2001      	movs	r0, #1
   d53f6:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d53f8:	4419      	add	r1, r3
   d53fa:	237e      	movs	r3, #126	; 0x7e
   d53fc:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d53fe:	2331      	movs	r3, #49	; 0x31
   d5400:	738b      	strb	r3, [r1, #14]
   d5402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d5406:	42b2      	cmp	r2, r6
   d5408:	dce5      	bgt.n	d53d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d540a:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d540c:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d5410:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d5412:	f04f 0910 	mov.w	r9, #16
   d5416:	e78e      	b.n	d5336 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d5418:	f1be 0f0a 	cmp.w	lr, #10
   d541c:	d0db      	beq.n	d53d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d541e:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d5420:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d5424:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d5426:	f04f 0910 	mov.w	r9, #16
   d542a:	e785      	b.n	d5338 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d542c:	31000101 	.word	0x31000101

000d5430 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d5430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d5434:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d5438:	4606      	mov	r6, r0
   d543a:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d543c:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d543e:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d5440:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d5444:	6869      	ldr	r1, [r5, #4]
   d5446:	68aa      	ldr	r2, [r5, #8]
   d5448:	1863      	adds	r3, r4, r1
   d544a:	b29b      	uxth	r3, r3
   d544c:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d544e:	4291      	cmp	r1, r2
   d5450:	d006      	beq.n	d5460 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d5452:	f812 0b01 	ldrb.w	r0, [r2], #1
   d5456:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d545a:	4043      	eors	r3, r0
   d545c:	b29b      	uxth	r3, r3
   d545e:	e7f6      	b.n	d544e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d5460:	f1b9 0f03 	cmp.w	r9, #3
   d5464:	bf28      	it	cs
   d5466:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d546a:	f109 0204 	add.w	r2, r9, #4
   d546e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d5470:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5474:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5476:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5478:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d547a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d547c:	bf94      	ite	ls
   d547e:	3130      	addls	r1, #48	; 0x30
   d5480:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5482:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5484:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d5486:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d548a:	d3f1      	bcc.n	d5470 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d548c:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d5490:	2100      	movs	r1, #0
   d5492:	735f      	strb	r7, [r3, #13]
   d5494:	4630      	mov	r0, r6
   d5496:	f000 fb1e 	bl	d5ad6 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d549a:	2101      	movs	r1, #1
   d549c:	4630      	mov	r0, r6
   d549e:	f000 fafd 	bl	d5a9c <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d54a2:	4601      	mov	r1, r0
   d54a4:	b928      	cbnz	r0, d54b2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d54a6:	7870      	ldrb	r0, [r6, #1]
   d54a8:	fab0 f080 	clz	r0, r0
   d54ac:	0940      	lsrs	r0, r0, #5
   d54ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d54b2:	7803      	ldrb	r3, [r0, #0]
   d54b4:	b14b      	cbz	r3, d54ca <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d54b6:	7ac3      	ldrb	r3, [r0, #11]
   d54b8:	071b      	lsls	r3, r3, #28
   d54ba:	d4ee      	bmi.n	d549a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d54bc:	220b      	movs	r2, #11
   d54be:	4640      	mov	r0, r8
   d54c0:	f003 fee4 	bl	d928c <memcmp>
   d54c4:	2800      	cmp	r0, #0
   d54c6:	d1e8      	bne.n	d549a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d54c8:	e002      	b.n	d54d0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d54ca:	2001      	movs	r0, #1
   d54cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d54d0:	3401      	adds	r4, #1
   d54d2:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d54d4:	2c64      	cmp	r4, #100	; 0x64
   d54d6:	d1b5      	bne.n	d5444 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d54d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d54dc <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d54dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d54e0:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d54e2:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d54e4:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d54e6:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d54ea:	9005      	str	r0, [sp, #20]
   d54ec:	460e      	mov	r6, r1
   d54ee:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d54f0:	d101      	bne.n	d54f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d54f2:	2000      	movs	r0, #0
   d54f4:	e1a0      	b.n	d5838 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d54f6:	9b05      	ldr	r3, [sp, #20]
   d54f8:	781b      	ldrb	r3, [r3, #0]
   d54fa:	2b00      	cmp	r3, #0
   d54fc:	d1f9      	bne.n	d54f2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d54fe:	6853      	ldr	r3, [r2, #4]
   d5500:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d5502:	7813      	ldrb	r3, [r2, #0]
   d5504:	079b      	lsls	r3, r3, #30
   d5506:	f000 818d 	beq.w	d5824 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d550a:	9b02      	ldr	r3, [sp, #8]
   d550c:	270d      	movs	r7, #13
   d550e:	330c      	adds	r3, #12
   d5510:	fbb3 f7f7 	udiv	r7, r3, r7
   d5514:	3701      	adds	r7, #1
   d5516:	b2ff      	uxtb	r7, r7
   d5518:	2100      	movs	r1, #0
   d551a:	4630      	mov	r0, r6
   d551c:	f000 fadb 	bl	d5ad6 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d5520:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5524:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d5528:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d552c:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d552e:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d5530:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d5532:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5536:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5538:	6972      	ldr	r2, [r6, #20]
   d553a:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d553c:	2101      	movs	r1, #1
   d553e:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5540:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d5544:	f000 faaa 	bl	d5a9c <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d5548:	9b07      	ldr	r3, [sp, #28]
   d554a:	b920      	cbnz	r0, d5556 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d554c:	7873      	ldrb	r3, [r6, #1]
   d554e:	2b00      	cmp	r3, #0
   d5550:	f000 8090 	beq.w	d5674 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d5554:	e7cd      	b.n	d54f2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d5556:	7802      	ldrb	r2, [r0, #0]
   d5558:	2ae5      	cmp	r2, #229	; 0xe5
   d555a:	d000      	beq.n	d555e <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d555c:	b942      	cbnz	r2, d5570 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d555e:	2c00      	cmp	r4, #0
   d5560:	bf08      	it	eq
   d5562:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d5564:	42bc      	cmp	r4, r7
        freeFound++;
   d5566:	bf3c      	itt	cc
   d5568:	3401      	addcc	r4, #1
   d556a:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d556c:	b922      	cbnz	r2, d5578 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d556e:	e081      	b.n	d5674 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d5570:	42bc      	cmp	r4, r7
   d5572:	bf38      	it	cc
   d5574:	2400      	movcc	r4, #0
   d5576:	e003      	b.n	d5580 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5578:	2ae5      	cmp	r2, #229	; 0xe5
   d557a:	d101      	bne.n	d5580 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d557c:	2500      	movs	r5, #0
   d557e:	e7db      	b.n	d5538 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5580:	2a2e      	cmp	r2, #46	; 0x2e
   d5582:	d0fb      	beq.n	d557c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5584:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d5586:	290f      	cmp	r1, #15
   d5588:	d152      	bne.n	d5630 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d558a:	b93d      	cbnz	r5, d559c <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d558c:	0651      	lsls	r1, r2, #25
   d558e:	d5d3      	bpl.n	d5538 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d5590:	7b43      	ldrb	r3, [r0, #13]
   d5592:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d5594:	f002 051f 	and.w	r5, r2, #31
   d5598:	462b      	mov	r3, r5
   d559a:	e007      	b.n	d55ac <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d559c:	3b01      	subs	r3, #1
   d559e:	b2db      	uxtb	r3, r3
   d55a0:	429a      	cmp	r2, r3
   d55a2:	d1eb      	bne.n	d557c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d55a4:	7b42      	ldrb	r2, [r0, #13]
   d55a6:	9903      	ldr	r1, [sp, #12]
   d55a8:	4291      	cmp	r1, r2
   d55aa:	d1e7      	bne.n	d557c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d55ac:	1e5a      	subs	r2, r3, #1
   d55ae:	f04f 0c0d 	mov.w	ip, #13
   d55b2:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d55b6:	9a02      	ldr	r2, [sp, #8]
   d55b8:	4562      	cmp	r2, ip
   d55ba:	d9df      	bls.n	d557c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d55bc:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d55c0:	f1be 0f04 	cmp.w	lr, #4
   d55c4:	fa5f f28e 	uxtb.w	r2, lr
   d55c8:	d804      	bhi.n	d55d4 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d55ca:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d55ce:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d55d2:	e00c      	b.n	d55ee <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d55d4:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d55d6:	bf95      	itete	ls
   d55d8:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d55dc:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d55e0:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d55e4:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d55e8:	bf94      	ite	ls
   d55ea:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d55ec:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d55ee:	9902      	ldr	r1, [sp, #8]
   d55f0:	4561      	cmp	r1, ip
   d55f2:	d103      	bne.n	d55fc <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d55f4:	2a00      	cmp	r2, #0
   d55f6:	bf18      	it	ne
   d55f8:	2500      	movne	r5, #0
   d55fa:	e79d      	b.n	d5538 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d55fc:	2aff      	cmp	r2, #255	; 0xff
   d55fe:	d8bd      	bhi.n	d557c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5600:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5602:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d5606:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5608:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d560c:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5610:	bf98      	it	ls
   d5612:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5614:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5618:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d561c:	bf98      	it	ls
   d561e:	b2d2      	uxtbls	r2, r2
   d5620:	f1bc 0f19 	cmp.w	ip, #25
   d5624:	bf9c      	itt	ls
   d5626:	3120      	addls	r1, #32
   d5628:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d562a:	4291      	cmp	r1, r2
   d562c:	d1a6      	bne.n	d557c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d562e:	e0fb      	b.n	d5828 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5630:	0709      	lsls	r1, r1, #28
   d5632:	d4a3      	bmi.n	d557c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d5634:	b14d      	cbz	r5, d564a <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d5636:	2b01      	cmp	r3, #1
   d5638:	f47f af5b 	bne.w	d54f2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d563c:	f7ff fdfd 	bl	d523a <_ZN7FatFile11lfnChecksumEPh>
   d5640:	9b03      	ldr	r3, [sp, #12]
   d5642:	4283      	cmp	r3, r0
   d5644:	f47f af55 	bne.w	d54f2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5648:	e00f      	b.n	d566a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d564a:	220b      	movs	r2, #11
   d564c:	9906      	ldr	r1, [sp, #24]
   d564e:	9307      	str	r3, [sp, #28]
   d5650:	f003 fe1c 	bl	d928c <memcmp>
   d5654:	9b07      	ldr	r3, [sp, #28]
   d5656:	2800      	cmp	r0, #0
   d5658:	f47f af6e 	bne.w	d5538 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d565c:	f899 2000 	ldrb.w	r2, [r9]
   d5660:	07d2      	lsls	r2, r2, #31
   d5662:	d502      	bpl.n	d566a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d5664:	2201      	movs	r2, #1
   d5666:	9204      	str	r2, [sp, #16]
   d5668:	e766      	b.n	d5538 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d566a:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d566e:	f000 80d1 	beq.w	d5814 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d5672:	e73e      	b.n	d54f2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d5674:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d5678:	f43f af3b 	beq.w	d54f2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d567c:	f00b 0303 	and.w	r3, fp, #3
   d5680:	3b01      	subs	r3, #1
   d5682:	2b01      	cmp	r3, #1
   d5684:	f63f af35 	bhi.w	d54f2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d5688:	2c00      	cmp	r4, #0
   d568a:	bf08      	it	eq
   d568c:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d568e:	42bc      	cmp	r4, r7
   d5690:	d302      	bcc.n	d5698 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d5692:	9b04      	ldr	r3, [sp, #16]
   d5694:	b9cb      	cbnz	r3, d56ca <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d5696:	e01f      	b.n	d56d8 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d5698:	2100      	movs	r1, #0
   d569a:	4630      	mov	r0, r6
   d569c:	f000 f9fe 	bl	d5a9c <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d56a0:	b910      	cbnz	r0, d56a8 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d56a2:	7873      	ldrb	r3, [r6, #1]
   d56a4:	b15b      	cbz	r3, d56be <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d56a6:	e724      	b.n	d54f2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d56a8:	3401      	adds	r4, #1
   d56aa:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d56ac:	e7ef      	b.n	d568e <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d56ae:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d56b0:	791b      	ldrb	r3, [r3, #4]
   d56b2:	2b01      	cmp	r3, #1
   d56b4:	d8ed      	bhi.n	d5692 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d56b6:	3410      	adds	r4, #16
   d56b8:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d56ba:	42a7      	cmp	r7, r4
   d56bc:	d9e9      	bls.n	d5692 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d56be:	4630      	mov	r0, r6
   d56c0:	f000 f8d2 	bl	d5868 <_ZN7FatFile13addDirClusterEv>
   d56c4:	2800      	cmp	r0, #0
   d56c6:	d1f2      	bne.n	d56ae <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d56c8:	e713      	b.n	d54f2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d56ca:	4649      	mov	r1, r9
   d56cc:	4630      	mov	r0, r6
   d56ce:	f7ff feaf 	bl	d5430 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d56d2:	2800      	cmp	r0, #0
   d56d4:	f43f af0d 	beq.w	d54f2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d56d8:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d56dc:	4630      	mov	r0, r6
   d56de:	f000 f9fa 	bl	d5ad6 <_ZN7FatFile7seekSetEm>
   d56e2:	2800      	cmp	r0, #0
   d56e4:	f43f af05 	beq.w	d54f2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d56e8:	1e7d      	subs	r5, r7, #1
   d56ea:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d56ec:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d56ee:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d56f2:	f04f 080f 	mov.w	r8, #15
   d56f6:	e041      	b.n	d577c <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d56f8:	2100      	movs	r1, #0
   d56fa:	4630      	mov	r0, r6
   d56fc:	f000 f9ce 	bl	d5a9c <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d5700:	4607      	mov	r7, r0
   d5702:	2800      	cmp	r0, #0
   d5704:	f43f aef5 	beq.w	d54f2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d5708:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d570a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d570e:	42ac      	cmp	r4, r5
   d5710:	f043 0301 	orr.w	r3, r3, #1
   d5714:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d5718:	bf0c      	ite	eq
   d571a:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d571e:	4622      	movne	r2, r4
   d5720:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d5722:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d5726:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d572a:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d572e:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5730:	f7ff fd83 	bl	d523a <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5734:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5736:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d5738:	f887 a01a 	strb.w	sl, [r7, #26]
   d573c:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5740:	f002 021f 	and.w	r2, r2, #31
   d5744:	230d      	movs	r3, #13
   d5746:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d5748:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d574c:	435a      	muls	r2, r3
   d574e:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5750:	9902      	ldr	r1, [sp, #8]
   d5752:	4291      	cmp	r1, r2
   d5754:	d915      	bls.n	d5782 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d5756:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d575a:	2b04      	cmp	r3, #4
   d575c:	fa5f fc83 	uxtb.w	ip, r3
   d5760:	f103 0001 	add.w	r0, r3, #1
   d5764:	d813      	bhi.n	d578e <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d5766:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d576a:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d576e:	280d      	cmp	r0, #13
   d5770:	f102 0201 	add.w	r2, r2, #1
   d5774:	4603      	mov	r3, r0
   d5776:	d1eb      	bne.n	d5750 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5778:	3c01      	subs	r4, #1
   d577a:	b2e4      	uxtb	r4, r4
   d577c:	2c00      	cmp	r4, #0
   d577e:	d1bb      	bne.n	d56f8 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d5780:	e00e      	b.n	d57a0 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5782:	bf14      	ite	ne
   d5784:	f04f 31ff 	movne.w	r1, #4294967295
   d5788:	2100      	moveq	r1, #0
   d578a:	b289      	uxth	r1, r1
   d578c:	e7e5      	b.n	d575a <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d578e:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d5792:	bf94      	ite	ls
   d5794:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d5798:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d579c:	8099      	strh	r1, [r3, #4]
   d579e:	e7e6      	b.n	d576e <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d57a0:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d57a2:	4621      	mov	r1, r4
   d57a4:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d57a6:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d57aa:	f000 f977 	bl	d5a9c <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d57ae:	4607      	mov	r7, r0
   d57b0:	2800      	cmp	r0, #0
   d57b2:	f43f ae9e 	beq.w	d54f2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d57b6:	2220      	movs	r2, #32
   d57b8:	4621      	mov	r1, r4
   d57ba:	f003 fd9c 	bl	d92f6 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d57be:	464b      	mov	r3, r9
   d57c0:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d57c4:	603a      	str	r2, [r7, #0]
   d57c6:	685a      	ldr	r2, [r3, #4]
   d57c8:	607a      	str	r2, [r7, #4]
   d57ca:	891a      	ldrh	r2, [r3, #8]
   d57cc:	813a      	strh	r2, [r7, #8]
   d57ce:	7a9b      	ldrb	r3, [r3, #10]
   d57d0:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d57d2:	f899 3000 	ldrb.w	r3, [r9]
   d57d6:	f003 0318 	and.w	r3, r3, #24
   d57da:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d57dc:	4b18      	ldr	r3, [pc, #96]	; (d5840 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d57de:	681b      	ldr	r3, [r3, #0]
   d57e0:	b12b      	cbz	r3, d57ee <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d57e2:	f107 010e 	add.w	r1, r7, #14
   d57e6:	f107 0010 	add.w	r0, r7, #16
   d57ea:	4798      	blx	r3
   d57ec:	e006      	b.n	d57fc <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d57ee:	2321      	movs	r3, #33	; 0x21
   d57f0:	743b      	strb	r3, [r7, #16]
   d57f2:	2328      	movs	r3, #40	; 0x28
   d57f4:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d57f6:	2308      	movs	r3, #8
   d57f8:	73bc      	strb	r4, [r7, #14]
   d57fa:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d57fc:	8a3b      	ldrh	r3, [r7, #16]
   d57fe:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d5800:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d5802:	89fb      	ldrh	r3, [r7, #14]
   d5804:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d5806:	68b2      	ldr	r2, [r6, #8]
   d5808:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d580c:	f043 0301 	orr.w	r3, r3, #1
   d5810:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d5814:	9500      	str	r5, [sp, #0]
   d5816:	465b      	mov	r3, fp
   d5818:	4652      	mov	r2, sl
   d581a:	4631      	mov	r1, r6
   d581c:	9805      	ldr	r0, [sp, #20]
   d581e:	f000 f9a3 	bl	d5b68 <_ZN7FatFile15openCachedEntryEPS_tih>
   d5822:	e009      	b.n	d5838 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d5824:	2701      	movs	r7, #1
   d5826:	e677      	b.n	d5518 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d5828:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d582c:	f1be 0f0d 	cmp.w	lr, #13
   d5830:	f43f ae82 	beq.w	d5538 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5834:	46d4      	mov	ip, sl
   d5836:	e6c3      	b.n	d55c0 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d5838:	b009      	add	sp, #36	; 0x24
   d583a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d583e:	bf00      	nop
   d5840:	2003e3d0 	.word	0x2003e3d0

000d5844 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d5844:	f001 bb46 	b.w	d6ed4 <HAL_Pin_Map>

000d5848 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d5848:	f001 bb44 	b.w	d6ed4 <HAL_Pin_Map>

000d584c <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d584c:	f001 bb42 	b.w	d6ed4 <HAL_Pin_Map>

000d5850 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d5850:	f001 bb40 	b.w	d6ed4 <HAL_Pin_Map>

000d5854 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5854:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5856:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5858:	f043 0304 	orr.w	r3, r3, #4
   d585c:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d585e:	f100 0210 	add.w	r2, r0, #16
   d5862:	6880      	ldr	r0, [r0, #8]
   d5864:	f000 bc12 	b.w	d608c <_ZN9FatVolume15allocateClusterEmPm>

000d5868 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d586c:	7803      	ldrb	r3, [r0, #0]
   d586e:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5872:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5874:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d5878:	b10b      	cbz	r3, d587e <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d587a:	2600      	movs	r6, #0
   d587c:	e02e      	b.n	d58dc <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d587e:	6942      	ldr	r2, [r0, #20]
   d5880:	4b18      	ldr	r3, [pc, #96]	; (d58e4 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d5882:	429a      	cmp	r2, r3
   d5884:	d8f9      	bhi.n	d587a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d5886:	f7ff ffe5 	bl	d5854 <_ZN7FatFile10addClusterEv>
   d588a:	4606      	mov	r6, r0
   d588c:	2800      	cmp	r0, #0
   d588e:	d0f4      	beq.n	d587a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d5890:	6921      	ldr	r1, [r4, #16]
   d5892:	68a0      	ldr	r0, [r4, #8]
   d5894:	f000 fb8f 	bl	d5fb6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5898:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d589a:	68a0      	ldr	r0, [r4, #8]
   d589c:	2205      	movs	r2, #5
   d589e:	4639      	mov	r1, r7
   d58a0:	3024      	adds	r0, #36	; 0x24
   d58a2:	f000 fb64 	bl	d5f6e <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d58a6:	4680      	mov	r8, r0
   d58a8:	2800      	cmp	r0, #0
   d58aa:	d0e6      	beq.n	d587a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d58ac:	4629      	mov	r1, r5
   d58ae:	f44f 7200 	mov.w	r2, #512	; 0x200
   d58b2:	f003 fd20 	bl	d92f6 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d58b6:	2501      	movs	r5, #1
   d58b8:	68a3      	ldr	r3, [r4, #8]
   d58ba:	791a      	ldrb	r2, [r3, #4]
   d58bc:	42aa      	cmp	r2, r5
   d58be:	d909      	bls.n	d58d4 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d58c0:	4642      	mov	r2, r8
   d58c2:	19e9      	adds	r1, r5, r7
   d58c4:	6818      	ldr	r0, [r3, #0]
   d58c6:	f000 fecf 	bl	d6668 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d58ca:	2800      	cmp	r0, #0
   d58cc:	d0d5      	beq.n	d587a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d58ce:	3501      	adds	r5, #1
   d58d0:	b2ed      	uxtb	r5, r5
   d58d2:	e7f1      	b.n	d58b8 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d58d4:	6963      	ldr	r3, [r4, #20]
   d58d6:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d58da:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d58dc:	4630      	mov	r0, r6
   d58de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d58e2:	bf00      	nop
   d58e4:	001ffdff 	.word	0x001ffdff

000d58e8 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d58e8:	b510      	push	{r4, lr}
   d58ea:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d58ec:	6880      	ldr	r0, [r0, #8]
   d58ee:	460a      	mov	r2, r1
   d58f0:	3024      	adds	r0, #36	; 0x24
   d58f2:	69a1      	ldr	r1, [r4, #24]
   d58f4:	f000 fb3b 	bl	d5f6e <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d58f8:	b120      	cbz	r0, d5904 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d58fa:	88a3      	ldrh	r3, [r4, #4]
   d58fc:	f003 030f 	and.w	r3, r3, #15
   d5900:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d5904:	bd10      	pop	{r4, pc}

000d5906 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5906:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d5908:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d590a:	4605      	mov	r5, r0
   d590c:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d590e:	b984      	cbnz	r4, d5932 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d5910:	2224      	movs	r2, #36	; 0x24
   d5912:	4621      	mov	r1, r4
   d5914:	f003 fcef 	bl	d92f6 <memset>

  m_vol = vol;
   d5918:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d591a:	79f3      	ldrb	r3, [r6, #7]
   d591c:	2b10      	cmp	r3, #16
   d591e:	d003      	beq.n	d5928 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5920:	2b20      	cmp	r3, #32
   d5922:	d106      	bne.n	d5932 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5924:	2340      	movs	r3, #64	; 0x40
   d5926:	e000      	b.n	d592a <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5928:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d592a:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d592c:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d592e:	70a8      	strb	r0, [r5, #2]
   d5930:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d5932:	2000      	movs	r0, #0
   d5934:	bd70      	pop	{r4, r5, r6, pc}

000d5936 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5936:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d593a:	7803      	ldrb	r3, [r0, #0]
   d593c:	4604      	mov	r4, r0
   d593e:	4689      	mov	r9, r1
   d5940:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5942:	b14b      	cbz	r3, d5958 <_ZN7FatFile4readEPvj+0x22>
   d5944:	7882      	ldrb	r2, [r0, #2]
   d5946:	07d1      	lsls	r1, r2, #31
   d5948:	d506      	bpl.n	d5958 <_ZN7FatFile4readEPvj+0x22>
   d594a:	e00c      	b.n	d5966 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d594c:	465a      	mov	r2, fp
   d594e:	6921      	ldr	r1, [r4, #16]
   d5950:	f000 fb37 	bl	d5fc2 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5954:	2800      	cmp	r0, #0
   d5956:	da3d      	bge.n	d59d4 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d5958:	7863      	ldrb	r3, [r4, #1]
   d595a:	f043 0302 	orr.w	r3, r3, #2
   d595e:	7063      	strb	r3, [r4, #1]
  return -1;
   d5960:	f04f 30ff 	mov.w	r0, #4294967295
   d5964:	e097      	b.n	d5a96 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d5966:	071a      	lsls	r2, r3, #28
   d5968:	d503      	bpl.n	d5972 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d596a:	69e3      	ldr	r3, [r4, #28]
   d596c:	6962      	ldr	r2, [r4, #20]
   d596e:	1a9b      	subs	r3, r3, r2
   d5970:	e007      	b.n	d5982 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d5972:	069a      	lsls	r2, r3, #26
   d5974:	d508      	bpl.n	d5988 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d5976:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d5978:	891a      	ldrh	r2, [r3, #8]
   d597a:	6963      	ldr	r3, [r4, #20]
   d597c:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d5980:	b29b      	uxth	r3, r3
   d5982:	429d      	cmp	r5, r3
   d5984:	bf28      	it	cs
   d5986:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d5988:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d598a:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d598e:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5992:	2e00      	cmp	r6, #0
   d5994:	d035      	beq.n	d5a02 <_ZN7FatFile4readEPvj+0xcc>
   d5996:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5998:	6963      	ldr	r3, [r4, #20]
   d599a:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d599c:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d59a0:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d59a4:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d59a8:	d002      	beq.n	d59b0 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d59aa:	6a03      	ldr	r3, [r0, #32]
   d59ac:	4419      	add	r1, r3
   d59ae:	e01d      	b.n	d59ec <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d59b0:	f890 8005 	ldrb.w	r8, [r0, #5]
   d59b4:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d59b8:	f1ba 0f00 	cmp.w	sl, #0
   d59bc:	d110      	bne.n	d59e0 <_ZN7FatFile4readEPvj+0xaa>
   d59be:	f1b8 0f00 	cmp.w	r8, #0
   d59c2:	d10d      	bne.n	d59e0 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d59c4:	2b00      	cmp	r3, #0
   d59c6:	d1c1      	bne.n	d594c <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d59c8:	0653      	lsls	r3, r2, #25
   d59ca:	bf4c      	ite	mi
   d59cc:	6a03      	ldrmi	r3, [r0, #32]
   d59ce:	6a23      	ldrpl	r3, [r4, #32]
   d59d0:	6123      	str	r3, [r4, #16]
   d59d2:	e005      	b.n	d59e0 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d59d4:	d104      	bne.n	d59e0 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d59d6:	7823      	ldrb	r3, [r4, #0]
   d59d8:	f013 0f70 	tst.w	r3, #112	; 0x70
   d59dc:	d111      	bne.n	d5a02 <_ZN7FatFile4readEPvj+0xcc>
   d59de:	e7bb      	b.n	d5958 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d59e0:	6921      	ldr	r1, [r4, #16]
   d59e2:	68a0      	ldr	r0, [r4, #8]
   d59e4:	f000 fae7 	bl	d5fb6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d59e8:	eb08 0100 	add.w	r1, r8, r0
   d59ec:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d59ee:	f1ba 0f00 	cmp.w	sl, #0
   d59f2:	d135      	bne.n	d5a60 <_ZN7FatFile4readEPvj+0x12a>
   d59f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d59f8:	d332      	bcc.n	d5a60 <_ZN7FatFile4readEPvj+0x12a>
   d59fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d59fc:	4299      	cmp	r1, r3
   d59fe:	d102      	bne.n	d5a06 <_ZN7FatFile4readEPvj+0xd0>
   d5a00:	e02e      	b.n	d5a60 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d5a02:	1ba8      	subs	r0, r5, r6
   d5a04:	e047      	b.n	d5a96 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d5a06:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5a0a:	d31b      	bcc.n	d5a44 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d5a0c:	7822      	ldrb	r2, [r4, #0]
   d5a0e:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d5a10:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5a14:	d406      	bmi.n	d5a24 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d5a16:	7902      	ldrb	r2, [r0, #4]
   d5a18:	ebc8 0202 	rsb	r2, r8, r2
   d5a1c:	b2d2      	uxtb	r2, r2
   d5a1e:	4592      	cmp	sl, r2
   d5a20:	bf28      	it	cs
   d5a22:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5a24:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d5a26:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5a2a:	d207      	bcs.n	d5a3c <_ZN7FatFile4readEPvj+0x106>
   d5a2c:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d5a2e:	4653      	mov	r3, sl
   d5a30:	464a      	mov	r2, r9
   d5a32:	6800      	ldr	r0, [r0, #0]
   d5a34:	f000 fdd6 	bl	d65e4 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5a38:	b960      	cbnz	r0, d5a54 <_ZN7FatFile4readEPvj+0x11e>
   d5a3a:	e78d      	b.n	d5958 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5a3c:	4453      	add	r3, sl
   d5a3e:	4299      	cmp	r1, r3
   d5a40:	d321      	bcc.n	d5a86 <_ZN7FatFile4readEPvj+0x150>
   d5a42:	e7f3      	b.n	d5a2c <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5a44:	464a      	mov	r2, r9
   d5a46:	6800      	ldr	r0, [r0, #0]
   d5a48:	f000 fd84 	bl	d6554 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d5a4c:	2800      	cmp	r0, #0
   d5a4e:	d083      	beq.n	d5958 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d5a50:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d5a54:	6963      	ldr	r3, [r4, #20]
   d5a56:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d5a58:	44b9      	add	r9, r7
    m_curPosition += n;
   d5a5a:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5a5c:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5a5e:	e798      	b.n	d5992 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5a60:	2200      	movs	r2, #0
   d5a62:	3024      	adds	r0, #36	; 0x24
   d5a64:	f000 fa83 	bl	d5f6e <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d5a68:	2800      	cmp	r0, #0
   d5a6a:	f43f af75 	beq.w	d5958 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d5a6e:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d5a72:	42b7      	cmp	r7, r6
   d5a74:	bf28      	it	cs
   d5a76:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d5a78:	eb00 010a 	add.w	r1, r0, sl
   d5a7c:	463a      	mov	r2, r7
   d5a7e:	4648      	mov	r0, r9
   d5a80:	f003 fc13 	bl	d92aa <memcpy>
   d5a84:	e7e6      	b.n	d5a54 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5a86:	3024      	adds	r0, #36	; 0x24
   d5a88:	9101      	str	r1, [sp, #4]
   d5a8a:	f000 fa49 	bl	d5f20 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d5a8e:	9901      	ldr	r1, [sp, #4]
   d5a90:	2800      	cmp	r0, #0
   d5a92:	d1cb      	bne.n	d5a2c <_ZN7FatFile4readEPvj+0xf6>
   d5a94:	e760      	b.n	d5958 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d5a96:	b003      	add	sp, #12
   d5a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5a9c <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d5a9e:	6943      	ldr	r3, [r0, #20]
   d5aa0:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5aa4:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d5aa6:	b105      	cbz	r5, d5aaa <_ZN7FatFile12readDirCacheEb+0xe>
   d5aa8:	b969      	cbnz	r1, d5ac6 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d5aaa:	2201      	movs	r2, #1
   d5aac:	f10d 0107 	add.w	r1, sp, #7
   d5ab0:	4620      	mov	r0, r4
   d5ab2:	f7ff ff40 	bl	d5936 <_ZN7FatFile4readEPvj>
   d5ab6:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d5ab8:	2801      	cmp	r0, #1
   d5aba:	d001      	beq.n	d5ac0 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d5abc:	2000      	movs	r0, #0
   d5abe:	e008      	b.n	d5ad2 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d5ac0:	6963      	ldr	r3, [r4, #20]
   d5ac2:	331f      	adds	r3, #31
   d5ac4:	e000      	b.n	d5ac8 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d5ac6:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5ac8:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d5aca:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5acc:	3030      	adds	r0, #48	; 0x30
   d5ace:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d5ad2:	b003      	add	sp, #12
   d5ad4:	bd30      	pop	{r4, r5, pc}

000d5ad6 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ada:	460e      	mov	r6, r1
   d5adc:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d5ade:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5ae0:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d5ae2:	2900      	cmp	r1, #0
   d5ae4:	d039      	beq.n	d5b5a <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d5ae6:	6945      	ldr	r5, [r0, #20]
   d5ae8:	42b5      	cmp	r5, r6
   d5aea:	d03a      	beq.n	d5b62 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d5aec:	b90e      	cbnz	r6, d5af2 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d5aee:	6106      	str	r6, [r0, #16]
    goto done;
   d5af0:	e031      	b.n	d5b56 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d5af2:	070b      	lsls	r3, r1, #28
   d5af4:	d503      	bpl.n	d5afe <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d5af6:	69c3      	ldr	r3, [r0, #28]
   d5af8:	429e      	cmp	r6, r3
   d5afa:	d82e      	bhi.n	d5b5a <_ZN7FatFile7seekSetEm+0x84>
   d5afc:	e007      	b.n	d5b0e <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d5afe:	0688      	lsls	r0, r1, #26
   d5b00:	d505      	bpl.n	d5b0e <_ZN7FatFile7seekSetEm+0x38>
   d5b02:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5b04:	891b      	ldrh	r3, [r3, #8]
   d5b06:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d5b0a:	d826      	bhi.n	d5b5a <_ZN7FatFile7seekSetEm+0x84>
   d5b0c:	e023      	b.n	d5b56 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5b0e:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d5b12:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d5b16:	1e6a      	subs	r2, r5, #1
   d5b18:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5b1c:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5b1e:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5b20:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d5b22:	429a      	cmp	r2, r3
   d5b24:	d800      	bhi.n	d5b28 <_ZN7FatFile7seekSetEm+0x52>
   d5b26:	b94d      	cbnz	r5, d5b3c <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5b28:	064a      	lsls	r2, r1, #25
   d5b2a:	bf4c      	ite	mi
   d5b2c:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5b30:	6a22      	ldrpl	r2, [r4, #32]
   d5b32:	6122      	str	r2, [r4, #16]
   d5b34:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5b36:	f104 0810 	add.w	r8, r4, #16
   d5b3a:	e00a      	b.n	d5b52 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d5b3c:	1a9b      	subs	r3, r3, r2
   d5b3e:	e7f9      	b.n	d5b34 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5b40:	4642      	mov	r2, r8
   d5b42:	6921      	ldr	r1, [r4, #16]
   d5b44:	68a0      	ldr	r0, [r4, #8]
   d5b46:	f000 fa3c 	bl	d5fc2 <_ZN9FatVolume6fatGetEmPm>
   d5b4a:	2800      	cmp	r0, #0
   d5b4c:	f105 35ff 	add.w	r5, r5, #4294967295
   d5b50:	dd03      	ble.n	d5b5a <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d5b52:	2d00      	cmp	r5, #0
   d5b54:	d1f4      	bne.n	d5b40 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d5b56:	6166      	str	r6, [r4, #20]
   d5b58:	e003      	b.n	d5b62 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d5b5a:	6127      	str	r7, [r4, #16]
  return false;
   d5b5c:	2000      	movs	r0, #0
   d5b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d5b62:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d5b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5b68 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b6a:	460f      	mov	r7, r1
   d5b6c:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5b6e:	2100      	movs	r1, #0
   d5b70:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5b72:	4604      	mov	r4, r0
   d5b74:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5b76:	f003 fbbe 	bl	d92f6 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d5b7a:	68b8      	ldr	r0, [r7, #8]
   d5b7c:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5b7e:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d5b82:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5b84:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d5b88:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d5b8a:	6a3b      	ldr	r3, [r7, #32]
   d5b8c:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5b8e:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5b90:	7acb      	ldrb	r3, [r1, #11]
   d5b92:	071d      	lsls	r5, r3, #28
   d5b94:	d44c      	bmi.n	d5c30 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d5b96:	1883      	adds	r3, r0, r2
   d5b98:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d5b9c:	f003 0317 	and.w	r3, r3, #23
   d5ba0:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d5ba2:	7ac9      	ldrb	r1, [r1, #11]
   d5ba4:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d5ba8:	bf04      	itt	eq
   d5baa:	f043 0308 	orreq.w	r3, r3, #8
   d5bae:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d5bb0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5bb4:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d5bb6:	f006 0303 	and.w	r3, r6, #3
   d5bba:	2b01      	cmp	r3, #1
   d5bbc:	d009      	beq.n	d5bd2 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d5bbe:	2b02      	cmp	r3, #2
   d5bc0:	d005      	beq.n	d5bce <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d5bc2:	2b00      	cmp	r3, #0
   d5bc4:	d134      	bne.n	d5c30 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d5bc6:	0571      	lsls	r1, r6, #21
   d5bc8:	d432      	bmi.n	d5c30 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d5bca:	2301      	movs	r3, #1
   d5bcc:	e002      	b.n	d5bd4 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d5bce:	2303      	movs	r3, #3
   d5bd0:	e000      	b.n	d5bd4 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d5bd2:	2302      	movs	r3, #2
   d5bd4:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d5bd6:	78a1      	ldrb	r1, [r4, #2]
   d5bd8:	078b      	lsls	r3, r1, #30
   d5bda:	d503      	bpl.n	d5be4 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d5bdc:	7823      	ldrb	r3, [r4, #0]
   d5bde:	f013 0f11 	tst.w	r3, #17
   d5be2:	d125      	bne.n	d5c30 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d5be4:	b24b      	sxtb	r3, r1
   d5be6:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d5bea:	f006 0108 	and.w	r1, r6, #8
   d5bee:	bf14      	ite	ne
   d5bf0:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d5bf4:	2700      	moveq	r7, #0
   d5bf6:	4319      	orrs	r1, r3
   d5bf8:	4339      	orrs	r1, r7
   d5bfa:	70a1      	strb	r1, [r4, #2]
   d5bfc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d5bfe:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5c00:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d5c02:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d5c04:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d5c08:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d5c0c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d5c10:	d504      	bpl.n	d5c1c <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5c12:	b181      	cbz	r1, d5c36 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5c14:	f000 fa75 	bl	d6102 <_ZN9FatVolume9freeChainEm>
   d5c18:	b968      	cbnz	r0, d5c36 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5c1a:	e009      	b.n	d5c30 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d5c1c:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d5c1e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d5c20:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d5c22:	0473      	lsls	r3, r6, #17
   d5c24:	d50c      	bpl.n	d5c40 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d5c26:	69e1      	ldr	r1, [r4, #28]
   d5c28:	4620      	mov	r0, r4
   d5c2a:	f7ff ff54 	bl	d5ad6 <_ZN7FatFile7seekSetEm>
   d5c2e:	b938      	cbnz	r0, d5c40 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d5c30:	2000      	movs	r0, #0
   d5c32:	7020      	strb	r0, [r4, #0]
  return false;
   d5c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d5c36:	78a3      	ldrb	r3, [r4, #2]
   d5c38:	f043 0304 	orr.w	r3, r3, #4
   d5c3c:	70a3      	strb	r3, [r4, #2]
   d5c3e:	e7f0      	b.n	d5c22 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d5c40:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d5c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c44 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5c44:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d5c46:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5c48:	4604      	mov	r4, r0
  if (!isOpen()) {
   d5c4a:	b90b      	cbnz	r3, d5c50 <_ZN7FatFile4syncEv+0xc>
    return true;
   d5c4c:	2001      	movs	r0, #1
   d5c4e:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5c50:	7883      	ldrb	r3, [r0, #2]
   d5c52:	075a      	lsls	r2, r3, #29
   d5c54:	d523      	bpl.n	d5c9e <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5c56:	2101      	movs	r1, #1
   d5c58:	f7ff fe46 	bl	d58e8 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5c5c:	4605      	mov	r5, r0
   d5c5e:	b928      	cbnz	r0, d5c6c <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d5c60:	7863      	ldrb	r3, [r4, #1]
   d5c62:	f043 0301 	orr.w	r3, r3, #1
   d5c66:	7063      	strb	r3, [r4, #1]
  return false;
   d5c68:	2000      	movs	r0, #0
   d5c6a:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5c6c:	7803      	ldrb	r3, [r0, #0]
   d5c6e:	2be5      	cmp	r3, #229	; 0xe5
   d5c70:	d0f6      	beq.n	d5c60 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d5c72:	7823      	ldrb	r3, [r4, #0]
   d5c74:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d5c76:	bf44      	itt	mi
   d5c78:	69e3      	ldrmi	r3, [r4, #28]
   d5c7a:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5c7c:	8c23      	ldrh	r3, [r4, #32]
   d5c7e:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5c80:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5c82:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d5c84:	4b09      	ldr	r3, [pc, #36]	; (d5cac <_ZN7FatFile4syncEv+0x68>)
   d5c86:	681b      	ldr	r3, [r3, #0]
   d5c88:	b12b      	cbz	r3, d5c96 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d5c8a:	f100 0116 	add.w	r1, r0, #22
   d5c8e:	3018      	adds	r0, #24
   d5c90:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5c92:	8b2b      	ldrh	r3, [r5, #24]
   d5c94:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d5c96:	78a3      	ldrb	r3, [r4, #2]
   d5c98:	f023 0304 	bic.w	r3, r3, #4
   d5c9c:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5c9e:	68a0      	ldr	r0, [r4, #8]
   d5ca0:	f7ff fabe 	bl	d5220 <_ZN9FatVolume9cacheSyncEv>
   d5ca4:	2800      	cmp	r0, #0
   d5ca6:	d0db      	beq.n	d5c60 <_ZN7FatFile4syncEv+0x1c>
   d5ca8:	e7d0      	b.n	d5c4c <_ZN7FatFile4syncEv+0x8>
   d5caa:	bf00      	nop
   d5cac:	2003e3d0 	.word	0x2003e3d0

000d5cb0 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5cb0:	b510      	push	{r4, lr}
   d5cb2:	4604      	mov	r4, r0
  bool rtn = sync();
   d5cb4:	f7ff ffc6 	bl	d5c44 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d5cb8:	2300      	movs	r3, #0
   d5cba:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d5cbc:	bd10      	pop	{r4, pc}

000d5cbe <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5cc0:	b093      	sub	sp, #76	; 0x4c
   d5cc2:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5cc4:	2300      	movs	r3, #0
   d5cc6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d5cca:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5cce:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5cd0:	9201      	str	r2, [sp, #4]
   d5cd2:	4606      	mov	r6, r0
   d5cd4:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5cd6:	b10b      	cbz	r3, d5cdc <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d5cd8:	2000      	movs	r0, #0
   d5cda:	e03d      	b.n	d5d58 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5cdc:	780b      	ldrb	r3, [r1, #0]
   d5cde:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5ce2:	d0f9      	beq.n	d5cd8 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d5ce4:	7813      	ldrb	r3, [r2, #0]
   d5ce6:	2b2f      	cmp	r3, #47	; 0x2f
   d5ce8:	d112      	bne.n	d5d10 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d5cea:	9b01      	ldr	r3, [sp, #4]
   d5cec:	781a      	ldrb	r2, [r3, #0]
   d5cee:	2a2f      	cmp	r2, #47	; 0x2f
   d5cf0:	d102      	bne.n	d5cf8 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d5cf2:	3301      	adds	r3, #1
   d5cf4:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d5cf6:	e7f8      	b.n	d5cea <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d5cf8:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d5cfa:	b91a      	cbnz	r2, d5d04 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d5cfc:	4630      	mov	r0, r6
   d5cfe:	f7ff fe02 	bl	d5906 <_ZN7FatFile8openRootEP9FatVolume>
   d5d02:	e029      	b.n	d5d58 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d5d04:	a809      	add	r0, sp, #36	; 0x24
   d5d06:	f7ff fdfe 	bl	d5906 <_ZN7FatFile8openRootEP9FatVolume>
   d5d0a:	2800      	cmp	r0, #0
   d5d0c:	d0e4      	beq.n	d5cd8 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d5d0e:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d5d10:	aa01      	add	r2, sp, #4
   d5d12:	a903      	add	r1, sp, #12
   d5d14:	9801      	ldr	r0, [sp, #4]
   d5d16:	f7ff fa9f 	bl	d5258 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d5d1a:	2800      	cmp	r0, #0
   d5d1c:	d0dc      	beq.n	d5cd8 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d5d1e:	9b01      	ldr	r3, [sp, #4]
   d5d20:	781b      	ldrb	r3, [r3, #0]
   d5d22:	b19b      	cbz	r3, d5d4c <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d5d24:	2300      	movs	r3, #0
   d5d26:	aa03      	add	r2, sp, #12
   d5d28:	4621      	mov	r1, r4
   d5d2a:	4630      	mov	r0, r6
   d5d2c:	f7ff fbd6 	bl	d54dc <_ZN7FatFile4openEPS_P7fname_ti>
   d5d30:	2800      	cmp	r0, #0
   d5d32:	d0d1      	beq.n	d5cd8 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d5d34:	4635      	mov	r5, r6
   d5d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d38:	ac09      	add	r4, sp, #36	; 0x24
   d5d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d40:	682b      	ldr	r3, [r5, #0]
   d5d42:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d5d44:	4630      	mov	r0, r6
   d5d46:	f7ff ffb3 	bl	d5cb0 <_ZN7FatFile5closeEv>
   d5d4a:	e7e0      	b.n	d5d0e <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d5d4c:	463b      	mov	r3, r7
   d5d4e:	aa03      	add	r2, sp, #12
   d5d50:	4621      	mov	r1, r4
   d5d52:	4630      	mov	r0, r6
   d5d54:	f7ff fbc2 	bl	d54dc <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d5d58:	b013      	add	sp, #76	; 0x4c
   d5d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5d5c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5d60:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5d62:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5d64:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5d66:	4604      	mov	r4, r0
   d5d68:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5d6a:	d508      	bpl.n	d5d7e <_ZN7FatFile5writeEPKvj+0x22>
   d5d6c:	7883      	ldrb	r3, [r0, #2]
   d5d6e:	079a      	lsls	r2, r3, #30
   d5d70:	d505      	bpl.n	d5d7e <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d5d72:	071b      	lsls	r3, r3, #28
   d5d74:	d50b      	bpl.n	d5d8e <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d5d76:	69e1      	ldr	r1, [r4, #28]
   d5d78:	f7ff fead 	bl	d5ad6 <_ZN7FatFile7seekSetEm>
   d5d7c:	b938      	cbnz	r0, d5d8e <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d5d7e:	7863      	ldrb	r3, [r4, #1]
   d5d80:	f043 0301 	orr.w	r3, r3, #1
   d5d84:	7063      	strb	r3, [r4, #1]
  return -1;
   d5d86:	f04f 30ff 	mov.w	r0, #4294967295
   d5d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d5d8e:	6963      	ldr	r3, [r4, #20]
   d5d90:	43db      	mvns	r3, r3
   d5d92:	4598      	cmp	r8, r3
   d5d94:	d8f3      	bhi.n	d5d7e <_ZN7FatFile5writeEPKvj+0x22>
   d5d96:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5d98:	f04f 0a00 	mov.w	sl, #0
   d5d9c:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5d9e:	2e00      	cmp	r6, #0
   d5da0:	f000 8081 	beq.w	d5ea6 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d5da4:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5da6:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5da8:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5dac:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5db0:	d11c      	bne.n	d5dec <_ZN7FatFile5writeEPKvj+0x90>
   d5db2:	b9df      	cbnz	r7, d5dec <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d5db4:	6921      	ldr	r1, [r4, #16]
   d5db6:	b171      	cbz	r1, d5dd6 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5db8:	f104 0210 	add.w	r2, r4, #16
   d5dbc:	f000 f901 	bl	d5fc2 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5dc0:	2800      	cmp	r0, #0
   d5dc2:	dbdc      	blt.n	d5d7e <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d5dc4:	f040 808e 	bne.w	d5ee4 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d5dc8:	4620      	mov	r0, r4
   d5dca:	f7ff fd43 	bl	d5854 <_ZN7FatFile10addClusterEv>
   d5dce:	2800      	cmp	r0, #0
   d5dd0:	f040 8088 	bne.w	d5ee4 <_ZN7FatFile5writeEPKvj+0x188>
   d5dd4:	e7d3      	b.n	d5d7e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d5dd6:	6a23      	ldr	r3, [r4, #32]
   d5dd8:	b93b      	cbnz	r3, d5dea <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d5dda:	4620      	mov	r0, r4
   d5ddc:	f7ff fd3a 	bl	d5854 <_ZN7FatFile10addClusterEv>
   d5de0:	2800      	cmp	r0, #0
   d5de2:	d0cc      	beq.n	d5d7e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5de4:	6923      	ldr	r3, [r4, #16]
   d5de6:	6223      	str	r3, [r4, #32]
   d5de8:	e000      	b.n	d5dec <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d5dea:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5dec:	6921      	ldr	r1, [r4, #16]
   d5dee:	68a0      	ldr	r0, [r4, #8]
   d5df0:	f000 f8e1 	bl	d5fb6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5df4:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d5df6:	b917      	cbnz	r7, d5dfe <_ZN7FatFile5writeEPKvj+0xa2>
   d5df8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5dfc:	d221      	bcs.n	d5e42 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d5dfe:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d5e02:	42b5      	cmp	r5, r6
   d5e04:	bf28      	it	cs
   d5e06:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5e08:	b937      	cbnz	r7, d5e18 <_ZN7FatFile5writeEPKvj+0xbc>
   d5e0a:	6963      	ldr	r3, [r4, #20]
   d5e0c:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d5e0e:	4293      	cmp	r3, r2
   d5e10:	bf34      	ite	cc
   d5e12:	2201      	movcc	r2, #1
   d5e14:	2205      	movcs	r2, #5
   d5e16:	e000      	b.n	d5e1a <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5e18:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5e1a:	68a0      	ldr	r0, [r4, #8]
   d5e1c:	3024      	adds	r0, #36	; 0x24
   d5e1e:	f000 f8a6 	bl	d5f6e <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d5e22:	2800      	cmp	r0, #0
   d5e24:	d0ab      	beq.n	d5d7e <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5e26:	4438      	add	r0, r7
   d5e28:	462a      	mov	r2, r5
   d5e2a:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5e2c:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5e2e:	f003 fa3c 	bl	d92aa <memcpy>
      if (512 == (n + blockOffset)) {
   d5e32:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d5e36:	d130      	bne.n	d5e9a <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5e38:	68a0      	ldr	r0, [r4, #8]
   d5e3a:	3024      	adds	r0, #36	; 0x24
   d5e3c:	f000 f870 	bl	d5f20 <_ZN8FatCache4syncEv>
   d5e40:	e017      	b.n	d5e72 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d5e42:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5e46:	68a0      	ldr	r0, [r4, #8]
   d5e48:	d315      	bcc.n	d5e76 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d5e4a:	7902      	ldrb	r2, [r0, #4]
   d5e4c:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d5e4e:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d5e50:	b2d2      	uxtb	r2, r2
   d5e52:	4293      	cmp	r3, r2
   d5e54:	bf28      	it	cs
   d5e56:	4613      	movcs	r3, r2
   d5e58:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5e5a:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d5e5c:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5e60:	d302      	bcc.n	d5e68 <_ZN7FatFile5writeEPKvj+0x10c>
   d5e62:	441a      	add	r2, r3
   d5e64:	4291      	cmp	r1, r2
   d5e66:	d337      	bcc.n	d5ed8 <_ZN7FatFile5writeEPKvj+0x17c>
   d5e68:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d5e6a:	464a      	mov	r2, r9
   d5e6c:	6838      	ldr	r0, [r7, #0]
   d5e6e:	f000 fc6d 	bl	d674c <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d5e72:	b990      	cbnz	r0, d5e9a <_ZN7FatFile5writeEPKvj+0x13e>
   d5e74:	e783      	b.n	d5d7e <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d5e76:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5e78:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5e7a:	bf02      	ittt	eq
   d5e7c:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5e80:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5e84:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d5e86:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5e88:	464a      	mov	r2, r9
   d5e8a:	6818      	ldr	r0, [r3, #0]
   d5e8c:	f000 fbec 	bl	d6668 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d5e90:	2800      	cmp	r0, #0
   d5e92:	f43f af74 	beq.w	d5d7e <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d5e96:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d5e9a:	6963      	ldr	r3, [r4, #20]
   d5e9c:	442b      	add	r3, r5
   d5e9e:	6163      	str	r3, [r4, #20]
    src += n;
   d5ea0:	44a9      	add	r9, r5
    nToWrite -= n;
   d5ea2:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5ea4:	e77a      	b.n	d5d9c <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d5ea6:	69e2      	ldr	r2, [r4, #28]
   d5ea8:	4293      	cmp	r3, r2
   d5eaa:	d901      	bls.n	d5eb0 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d5eac:	61e3      	str	r3, [r4, #28]
   d5eae:	e002      	b.n	d5eb6 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d5eb0:	4b0f      	ldr	r3, [pc, #60]	; (d5ef0 <_ZN7FatFile5writeEPKvj+0x194>)
   d5eb2:	681b      	ldr	r3, [r3, #0]
   d5eb4:	b11b      	cbz	r3, d5ebe <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d5eb6:	78a3      	ldrb	r3, [r4, #2]
   d5eb8:	f043 0304 	orr.w	r3, r3, #4
   d5ebc:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d5ebe:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d5ec2:	2b00      	cmp	r3, #0
   d5ec4:	db02      	blt.n	d5ecc <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d5ec6:	4640      	mov	r0, r8
   d5ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d5ecc:	4620      	mov	r0, r4
   d5ece:	f7ff feb9 	bl	d5c44 <_ZN7FatFile4syncEv>
   d5ed2:	2800      	cmp	r0, #0
   d5ed4:	d1f7      	bne.n	d5ec6 <_ZN7FatFile5writeEPKvj+0x16a>
   d5ed6:	e752      	b.n	d5d7e <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5ed8:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5edc:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5ee0:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5ee2:	e7c1      	b.n	d5e68 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5ee4:	6921      	ldr	r1, [r4, #16]
   d5ee6:	68a0      	ldr	r0, [r4, #8]
   d5ee8:	f000 f865 	bl	d5fb6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5eec:	4601      	mov	r1, r0
   d5eee:	e783      	b.n	d5df8 <_ZN7FatFile5writeEPKvj+0x9c>
   d5ef0:	2003e3d0 	.word	0x2003e3d0

000d5ef4 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d5ef4:	f000 bfee 	b.w	d6ed4 <HAL_Pin_Map>

000d5ef8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5ef8:	b570      	push	{r4, r5, r6, lr}
   d5efa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5efc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5efe:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5f00:	b149      	cbz	r1, d5f16 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5f02:	f003 fa75 	bl	d93f0 <strlen>
   d5f06:	682b      	ldr	r3, [r5, #0]
   d5f08:	4602      	mov	r2, r0
   d5f0a:	4621      	mov	r1, r4
   d5f0c:	4628      	mov	r0, r5
   d5f0e:	68db      	ldr	r3, [r3, #12]
    }
   d5f10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5f14:	4718      	bx	r3
    }
   d5f16:	bd70      	pop	{r4, r5, r6, pc}

000d5f18 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5f18:	f000 bfdc 	b.w	d6ed4 <HAL_Pin_Map>

000d5f1c <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5f1c:	f000 bfda 	b.w	d6ed4 <HAL_Pin_Map>

000d5f20 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5f20:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d5f22:	7803      	ldrb	r3, [r0, #0]
   d5f24:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5f26:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5f28:	d51e      	bpl.n	d5f68 <_ZN8FatCache4syncEv+0x48>
   d5f2a:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5f2c:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d5f2e:	f100 060c 	add.w	r6, r0, #12
   d5f32:	4632      	mov	r2, r6
   d5f34:	6818      	ldr	r0, [r3, #0]
   d5f36:	f000 fb97 	bl	d6668 <_ZN9SdSpiCard10writeBlockEmPKh>
   d5f3a:	4605      	mov	r5, r0
   d5f3c:	b908      	cbnz	r0, d5f42 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d5f3e:	2500      	movs	r5, #0
   d5f40:	e013      	b.n	d5f6a <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d5f42:	7823      	ldrb	r3, [r4, #0]
   d5f44:	079b      	lsls	r3, r3, #30
   d5f46:	d404      	bmi.n	d5f52 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d5f48:	7823      	ldrb	r3, [r4, #0]
   d5f4a:	f023 0301 	bic.w	r3, r3, #1
   d5f4e:	7023      	strb	r3, [r4, #0]
   d5f50:	e00b      	b.n	d5f6a <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d5f52:	6863      	ldr	r3, [r4, #4]
   d5f54:	68a0      	ldr	r0, [r4, #8]
   d5f56:	6919      	ldr	r1, [r3, #16]
   d5f58:	4632      	mov	r2, r6
   d5f5a:	4401      	add	r1, r0
   d5f5c:	6818      	ldr	r0, [r3, #0]
   d5f5e:	f000 fb83 	bl	d6668 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d5f62:	2800      	cmp	r0, #0
   d5f64:	d1f0      	bne.n	d5f48 <_ZN8FatCache4syncEv+0x28>
   d5f66:	e7ea      	b.n	d5f3e <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d5f68:	2501      	movs	r5, #1

fail:
  return false;
}
   d5f6a:	4628      	mov	r0, r5
   d5f6c:	bd70      	pop	{r4, r5, r6, pc}

000d5f6e <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5f6e:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d5f70:	6883      	ldr	r3, [r0, #8]
   d5f72:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5f74:	4604      	mov	r4, r0
   d5f76:	460e      	mov	r6, r1
   d5f78:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d5f7a:	d014      	beq.n	d5fa6 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d5f7c:	f7ff ffd0 	bl	d5f20 <_ZN8FatCache4syncEv>
   d5f80:	b908      	cbnz	r0, d5f86 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d5f82:	2000      	movs	r0, #0
   d5f84:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d5f86:	076b      	lsls	r3, r5, #29
   d5f88:	d503      	bpl.n	d5f92 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d5f8a:	2300      	movs	r3, #0
   d5f8c:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d5f8e:	60a6      	str	r6, [r4, #8]
   d5f90:	e009      	b.n	d5fa6 <_ZN8FatCache4readEmh+0x38>
   d5f92:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5f94:	f104 020c 	add.w	r2, r4, #12
   d5f98:	4631      	mov	r1, r6
   d5f9a:	6818      	ldr	r0, [r3, #0]
   d5f9c:	f000 fada 	bl	d6554 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d5fa0:	2800      	cmp	r0, #0
   d5fa2:	d1f2      	bne.n	d5f8a <_ZN8FatCache4readEmh+0x1c>
   d5fa4:	e7ed      	b.n	d5f82 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d5fa6:	7823      	ldrb	r3, [r4, #0]
   d5fa8:	4620      	mov	r0, r4
   d5faa:	f005 0503 	and.w	r5, r5, #3
   d5fae:	431d      	orrs	r5, r3
   d5fb0:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d5fb4:	bd70      	pop	{r4, r5, r6, pc}

000d5fb6 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d5fb6:	7983      	ldrb	r3, [r0, #6]
   d5fb8:	6940      	ldr	r0, [r0, #20]
   d5fba:	3902      	subs	r1, #2
   d5fbc:	4099      	lsls	r1, r3
}
   d5fbe:	4408      	add	r0, r1
   d5fc0:	4770      	bx	lr

000d5fc2 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5fc2:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d5fc4:	b570      	push	{r4, r5, r6, lr}
   d5fc6:	4605      	mov	r5, r0
   d5fc8:	460c      	mov	r4, r1
   d5fca:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5fcc:	d802      	bhi.n	d5fd4 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d5fce:	f04f 30ff 	mov.w	r0, #4294967295
   d5fd2:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5fd4:	69c3      	ldr	r3, [r0, #28]
   d5fd6:	4299      	cmp	r1, r3
   d5fd8:	d8f9      	bhi.n	d5fce <_ZN9FatVolume6fatGetEmPm+0xc>
   d5fda:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5fdc:	2b20      	cmp	r3, #32
   d5fde:	d110      	bne.n	d6002 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d5fe0:	6981      	ldr	r1, [r0, #24]
   d5fe2:	2202      	movs	r2, #2
   d5fe4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5fe8:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5fec:	f7ff ffbf 	bl	d5f6e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5ff0:	2800      	cmp	r0, #0
   d5ff2:	d0ec      	beq.n	d5fce <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d5ff4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5ff8:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d5ffc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d6000:	e00f      	b.n	d6022 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d6002:	2b10      	cmp	r3, #16
   d6004:	d1e3      	bne.n	d5fce <_ZN9FatVolume6fatGetEmPm+0xc>
   d6006:	6983      	ldr	r3, [r0, #24]
   d6008:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d600c:	2202      	movs	r2, #2
   d600e:	4419      	add	r1, r3
   d6010:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6014:	f7ff ffab 	bl	d5f6e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6018:	2800      	cmp	r0, #0
   d601a:	d0d8      	beq.n	d5fce <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d601c:	b2e4      	uxtb	r4, r4
   d601e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d6022:	69ea      	ldr	r2, [r5, #28]
   d6024:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d6026:	bf9a      	itte	ls
   d6028:	6033      	strls	r3, [r6, #0]
  return 1;
   d602a:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d602c:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d602e:	bd70      	pop	{r4, r5, r6, pc}

000d6030 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6030:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d6032:	b538      	push	{r3, r4, r5, lr}
   d6034:	460c      	mov	r4, r1
   d6036:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6038:	d801      	bhi.n	d603e <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d603a:	2000      	movs	r0, #0
   d603c:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d603e:	69c3      	ldr	r3, [r0, #28]
   d6040:	4299      	cmp	r1, r3
   d6042:	d8fa      	bhi.n	d603a <_ZN9FatVolume6fatPutEmm+0xa>
   d6044:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d6046:	2b20      	cmp	r3, #32
   d6048:	d10e      	bne.n	d6068 <_ZN9FatVolume6fatPutEmm+0x38>
   d604a:	6981      	ldr	r1, [r0, #24]
   d604c:	2203      	movs	r2, #3
   d604e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d6052:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6056:	f7ff ff8a 	bl	d5f6e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d605a:	2800      	cmp	r0, #0
   d605c:	d0ed      	beq.n	d603a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d605e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6062:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d6066:	e00f      	b.n	d6088 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d6068:	2b10      	cmp	r3, #16
   d606a:	d1e6      	bne.n	d603a <_ZN9FatVolume6fatPutEmm+0xa>
   d606c:	6983      	ldr	r3, [r0, #24]
   d606e:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6072:	2203      	movs	r2, #3
   d6074:	4419      	add	r1, r3
   d6076:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d607a:	f7ff ff78 	bl	d5f6e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d607e:	2800      	cmp	r0, #0
   d6080:	d0db      	beq.n	d603a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d6082:	b2e4      	uxtb	r4, r4
   d6084:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d6088:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d608a:	bd38      	pop	{r3, r4, r5, pc}

000d608c <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d608c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d6090:	68c4      	ldr	r4, [r0, #12]
   d6092:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6094:	4605      	mov	r5, r0
   d6096:	460e      	mov	r6, r1
   d6098:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d609a:	d207      	bcs.n	d60ac <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d609c:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d609e:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d60a0:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d60a2:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d60a4:	429c      	cmp	r4, r3
   d60a6:	d903      	bls.n	d60b0 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d60a8:	b9cf      	cbnz	r7, d60de <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d60aa:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d60ac:	2701      	movs	r7, #1
   d60ae:	e7f7      	b.n	d60a0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d60b0:	42a6      	cmp	r6, r4
   d60b2:	d014      	beq.n	d60de <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d60b4:	aa01      	add	r2, sp, #4
   d60b6:	4621      	mov	r1, r4
   d60b8:	4628      	mov	r0, r5
   d60ba:	f7ff ff82 	bl	d5fc2 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d60be:	2800      	cmp	r0, #0
   d60c0:	db0d      	blt.n	d60de <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d60c2:	d0ed      	beq.n	d60a0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d60c4:	9b01      	ldr	r3, [sp, #4]
   d60c6:	2b00      	cmp	r3, #0
   d60c8:	d1ea      	bne.n	d60a0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d60ca:	b107      	cbz	r7, d60ce <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d60cc:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d60ce:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d60d2:	4621      	mov	r1, r4
   d60d4:	4628      	mov	r0, r5
   d60d6:	f7ff ffab 	bl	d6030 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d60da:	4607      	mov	r7, r0
   d60dc:	b908      	cbnz	r0, d60e2 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d60de:	2700      	movs	r7, #0
   d60e0:	e00b      	b.n	d60fa <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d60e2:	b916      	cbnz	r6, d60ea <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d60e4:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d60e8:	e007      	b.n	d60fa <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d60ea:	4622      	mov	r2, r4
   d60ec:	4631      	mov	r1, r6
   d60ee:	4628      	mov	r0, r5
   d60f0:	f7ff ff9e 	bl	d6030 <_ZN9FatVolume6fatPutEmm>
   d60f4:	2800      	cmp	r0, #0
   d60f6:	d1f5      	bne.n	d60e4 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d60f8:	e7f1      	b.n	d60de <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d60fa:	4638      	mov	r0, r7
   d60fc:	b002      	add	sp, #8
   d60fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6102 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d6102:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6104:	4605      	mov	r5, r0
   d6106:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d6108:	aa01      	add	r2, sp, #4
   d610a:	4621      	mov	r1, r4
   d610c:	4628      	mov	r0, r5
   d610e:	f7ff ff58 	bl	d5fc2 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d6112:	1e06      	subs	r6, r0, #0
   d6114:	da01      	bge.n	d611a <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d6116:	2000      	movs	r0, #0
   d6118:	e00f      	b.n	d613a <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d611a:	2200      	movs	r2, #0
   d611c:	4621      	mov	r1, r4
   d611e:	4628      	mov	r0, r5
   d6120:	f7ff ff86 	bl	d6030 <_ZN9FatVolume6fatPutEmm>
   d6124:	2800      	cmp	r0, #0
   d6126:	d0f6      	beq.n	d6116 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d6128:	68eb      	ldr	r3, [r5, #12]
   d612a:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d612c:	bf9c      	itt	ls
   d612e:	f104 34ff 	addls.w	r4, r4, #4294967295
   d6132:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d6134:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d6136:	2e00      	cmp	r6, #0
   d6138:	d1e6      	bne.n	d6108 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d613a:	b002      	add	sp, #8
   d613c:	bd70      	pop	{r4, r5, r6, pc}

000d613e <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d613e:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d6140:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d6142:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6144:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d6146:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d6148:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d614c:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d614e:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d6150:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6152:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6156:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d6158:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d615c:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d6160:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d6164:	b1a1      	cbz	r1, d6190 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d6166:	2904      	cmp	r1, #4
   d6168:	d85d      	bhi.n	d6226 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d616a:	4611      	mov	r1, r2
   d616c:	3024      	adds	r0, #36	; 0x24
   d616e:	f7ff fefe 	bl	d5f6e <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6172:	2800      	cmp	r0, #0
   d6174:	d057      	beq.n	d6226 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d6176:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d617a:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d617e:	065b      	lsls	r3, r3, #25
   d6180:	d151      	bne.n	d6226 <_ZN9FatVolume4initEh+0xe8>
   d6182:	351b      	adds	r5, #27
   d6184:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d6188:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d618c:	2d00      	cmp	r5, #0
   d618e:	d04a      	beq.n	d6226 <_ZN9FatVolume4initEh+0xe8>
   d6190:	2200      	movs	r2, #0
   d6192:	4629      	mov	r1, r5
   d6194:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6198:	f7ff fee9 	bl	d5f6e <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d619c:	2800      	cmp	r0, #0
   d619e:	d042      	beq.n	d6226 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d61a0:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d61a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d61a8:	d13d      	bne.n	d6226 <_ZN9FatVolume4initEh+0xe8>
   d61aa:	7c03      	ldrb	r3, [r0, #16]
   d61ac:	2b02      	cmp	r3, #2
   d61ae:	d13a      	bne.n	d6226 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d61b0:	89c3      	ldrh	r3, [r0, #14]
   d61b2:	2b00      	cmp	r3, #0
   d61b4:	d037      	beq.n	d6226 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d61b6:	7b41      	ldrb	r1, [r0, #13]
   d61b8:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d61ba:	1e4b      	subs	r3, r1, #1
   d61bc:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d61be:	2300      	movs	r3, #0
   d61c0:	71a3      	strb	r3, [r4, #6]
   d61c2:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d61c4:	2301      	movs	r3, #1
   d61c6:	428b      	cmp	r3, r1
   d61c8:	d007      	beq.n	d61da <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d61ca:	3e01      	subs	r6, #1
   d61cc:	d02b      	beq.n	d6226 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d61ce:	79a2      	ldrb	r2, [r4, #6]
   d61d0:	005b      	lsls	r3, r3, #1
   d61d2:	3201      	adds	r2, #1
   d61d4:	b2db      	uxtb	r3, r3
   d61d6:	71a2      	strb	r2, [r4, #6]
   d61d8:	e7f5      	b.n	d61c6 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d61da:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d61dc:	b902      	cbnz	r2, d61e0 <_ZN9FatVolume4initEh+0xa2>
   d61de:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d61e0:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d61e2:	89c6      	ldrh	r6, [r0, #14]
   d61e4:	442e      	add	r6, r5
   d61e6:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d61e8:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d61ec:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d61ee:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d61f2:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d61f4:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d61f8:	0152      	lsls	r2, r2, #5
   d61fa:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d61fe:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d6202:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d6204:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d6208:	b903      	cbnz	r3, d620c <_ZN9FatVolume4initEh+0xce>
   d620a:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d620c:	1aad      	subs	r5, r5, r2
   d620e:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d6210:	79a5      	ldrb	r5, [r4, #6]
   d6212:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d6216:	1c6b      	adds	r3, r5, #1
   d6218:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d621a:	f640 73f4 	movw	r3, #4084	; 0xff4
   d621e:	429d      	cmp	r5, r3
   d6220:	d803      	bhi.n	d622a <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d6222:	230c      	movs	r3, #12
   d6224:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d6226:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d6228:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d622a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d622e:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d6230:	bf85      	ittet	hi
   d6232:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d6234:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d6236:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d6238:	2320      	movhi	r3, #32
   d623a:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d623c:	2001      	movs	r0, #1

fail:
  return false;
}
   d623e:	bd70      	pop	{r4, r5, r6, pc}

000d6240 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d6240:	f000 be48 	b.w	d6ed4 <HAL_Pin_Map>

000d6244 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d6244:	f000 be46 	b.w	d6ed4 <HAL_Pin_Map>

000d6248 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d6248:	f000 be44 	b.w	d6ed4 <HAL_Pin_Map>

000d624c <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d624c:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d624e:	4c0e      	ldr	r4, [pc, #56]	; (d6288 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6250:	460e      	mov	r6, r1
   d6252:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d6254:	f000 fece 	bl	d6ff4 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6258:	6823      	ldr	r3, [r4, #0]
   d625a:	1ac0      	subs	r0, r0, r3
   d625c:	4b0b      	ldr	r3, [pc, #44]	; (d628c <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d625e:	4298      	cmp	r0, r3
   d6260:	d908      	bls.n	d6274 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6262:	f000 fecf 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6266:	4b0a      	ldr	r3, [pc, #40]	; (d6290 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d6268:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d626a:	f001 f88f 	bl	d738c <spark_process>
   d626e:	f000 fec1 	bl	d6ff4 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d6272:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6274:	f000 fec6 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d6278:	b280      	uxth	r0, r0
   d627a:	1b80      	subs	r0, r0, r6
}
   d627c:	42a8      	cmp	r0, r5
   d627e:	bfd4      	ite	le
   d6280:	2000      	movle	r0, #0
   d6282:	2001      	movgt	r0, #1
   d6284:	bd70      	pop	{r4, r5, r6, pc}
   d6286:	bf00      	nop
   d6288:	2003e3d4 	.word	0x2003e3d4
   d628c:	000186a0 	.word	0x000186a0
   d6290:	2003e730 	.word	0x2003e730

000d6294 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d6294:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d6296:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d6298:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d629a:	b94d      	cbnz	r5, d62b0 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d629c:	6840      	ldr	r0, [r0, #4]
   d629e:	f000 fa7d 	bl	d679c <_ZN14SdSpiAltDriver8activateEv>
   d62a2:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d62a4:	4629      	mov	r1, r5
   d62a6:	7d18      	ldrb	r0, [r3, #20]
   d62a8:	f002 f9ed 	bl	d8686 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d62ac:	2301      	movs	r3, #1
   d62ae:	7223      	strb	r3, [r4, #8]
   d62b0:	bd38      	pop	{r3, r4, r5, pc}

000d62b2 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d62b2:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d62b4:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d62b6:	4604      	mov	r4, r0
  if (m_spiActive) {
   d62b8:	b16b      	cbz	r3, d62d6 <_ZN9SdSpiCard7spiStopEv+0x24>
   d62ba:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d62bc:	2101      	movs	r1, #1
   d62be:	7d18      	ldrb	r0, [r3, #20]
   d62c0:	f002 f9e1 	bl	d8686 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d62c4:	21ff      	movs	r1, #255	; 0xff
   d62c6:	6860      	ldr	r0, [r4, #4]
   d62c8:	f000 fa9a 	bl	d6800 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d62cc:	6860      	ldr	r0, [r4, #4]
   d62ce:	f000 fa79 	bl	d67c4 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d62d2:	2300      	movs	r3, #0
   d62d4:	7223      	strb	r3, [r4, #8]
   d62d6:	bd10      	pop	{r4, pc}

000d62d8 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d62d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d62da:	4604      	mov	r4, r0
   d62dc:	460d      	mov	r5, r1
   d62de:	4616      	mov	r6, r2
   d62e0:	f000 fe90 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d62e4:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d62e6:	6860      	ldr	r0, [r4, #4]
   d62e8:	f000 fa6f 	bl	d67ca <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d62ec:	28ff      	cmp	r0, #255	; 0xff
   d62ee:	7260      	strb	r0, [r4, #9]
   d62f0:	d109      	bne.n	d6306 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d62f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d62f6:	4639      	mov	r1, r7
   d62f8:	4620      	mov	r0, r4
   d62fa:	f7ff ffa7 	bl	d624c <_ZN9SdSpiCard10isTimedOutEtt>
   d62fe:	2800      	cmp	r0, #0
   d6300:	d0f1      	beq.n	d62e6 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6302:	2355      	movs	r3, #85	; 0x55
   d6304:	e00b      	b.n	d631e <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d6306:	28fe      	cmp	r0, #254	; 0xfe
   d6308:	d001      	beq.n	d630e <_ZN9SdSpiCard8readDataEPhj+0x36>
   d630a:	2350      	movs	r3, #80	; 0x50
   d630c:	e007      	b.n	d631e <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d630e:	4632      	mov	r2, r6
   d6310:	4629      	mov	r1, r5
   d6312:	6860      	ldr	r0, [r4, #4]
   d6314:	f000 fa5e 	bl	d67d4 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d6318:	7260      	strb	r0, [r4, #9]
   d631a:	b130      	cbz	r0, d632a <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d631c:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d631e:	4620      	mov	r0, r4
   d6320:	7023      	strb	r3, [r4, #0]
   d6322:	f7ff ffc6 	bl	d62b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6326:	2000      	movs	r0, #0
}
   d6328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d632a:	6860      	ldr	r0, [r4, #4]
   d632c:	f000 fa4d 	bl	d67ca <_ZN14SdSpiAltDriver7receiveEv>
   d6330:	6860      	ldr	r0, [r4, #4]
   d6332:	f000 fa4a 	bl	d67ca <_ZN14SdSpiAltDriver7receiveEv>
   d6336:	2001      	movs	r0, #1
   d6338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d633a <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d633a:	b570      	push	{r4, r5, r6, lr}
   d633c:	4604      	mov	r4, r0
   d633e:	460e      	mov	r6, r1
   d6340:	f000 fe60 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
   d6344:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d6346:	4632      	mov	r2, r6
   d6348:	4629      	mov	r1, r5
   d634a:	4620      	mov	r0, r4
   d634c:	f7ff ff7e 	bl	d624c <_ZN9SdSpiCard10isTimedOutEtt>
   d6350:	b930      	cbnz	r0, d6360 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d6352:	6860      	ldr	r0, [r4, #4]
   d6354:	f000 fa39 	bl	d67ca <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d6358:	28ff      	cmp	r0, #255	; 0xff
   d635a:	d1f4      	bne.n	d6346 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d635c:	2001      	movs	r0, #1
   d635e:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d6360:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d6362:	bd70      	pop	{r4, r5, r6, pc}

000d6364 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d6366:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6368:	9201      	str	r2, [sp, #4]
   d636a:	4604      	mov	r4, r0
   d636c:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d636e:	b90b      	cbnz	r3, d6374 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d6370:	f7ff ff90 	bl	d6294 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d6374:	b125      	cbz	r5, d6380 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d6376:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d637a:	4620      	mov	r0, r4
   d637c:	f7ff ffdd 	bl	d633a <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6380:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d6384:	6860      	ldr	r0, [r4, #4]
   d6386:	f000 fa3b 	bl	d6800 <_ZN14SdSpiAltDriver4sendEh>
   d638a:	f10d 0607 	add.w	r6, sp, #7
   d638e:	f10d 0703 	add.w	r7, sp, #3
   d6392:	f816 1901 	ldrb.w	r1, [r6], #-1
   d6396:	6860      	ldr	r0, [r4, #4]
   d6398:	f000 fa32 	bl	d6800 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d639c:	42be      	cmp	r6, r7
   d639e:	d1f8      	bne.n	d6392 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d63a0:	2d00      	cmp	r5, #0
   d63a2:	bf0c      	ite	eq
   d63a4:	2195      	moveq	r1, #149	; 0x95
   d63a6:	2187      	movne	r1, #135	; 0x87
   d63a8:	6860      	ldr	r0, [r4, #4]
   d63aa:	f000 fa29 	bl	d6800 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d63ae:	6860      	ldr	r0, [r4, #4]
   d63b0:	f000 fa0b 	bl	d67ca <_ZN14SdSpiAltDriver7receiveEv>
   d63b4:	250b      	movs	r5, #11
   d63b6:	6860      	ldr	r0, [r4, #4]
   d63b8:	f000 fa07 	bl	d67ca <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d63bc:	0603      	lsls	r3, r0, #24
   d63be:	7260      	strb	r0, [r4, #9]
   d63c0:	d503      	bpl.n	d63ca <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d63c2:	3d01      	subs	r5, #1
   d63c4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d63c8:	d1f5      	bne.n	d63b6 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d63ca:	b003      	add	sp, #12
   d63cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d63ce <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d63ce:	b570      	push	{r4, r5, r6, lr}
   d63d0:	4604      	mov	r4, r0
   d63d2:	460d      	mov	r5, r1
   d63d4:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d63d6:	2137      	movs	r1, #55	; 0x37
   d63d8:	2200      	movs	r2, #0
   d63da:	f7ff ffc3 	bl	d6364 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d63de:	4632      	mov	r2, r6
   d63e0:	4629      	mov	r1, r5
   d63e2:	4620      	mov	r0, r4
  }
   d63e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d63e8:	f7ff bfbc 	b.w	d6364 <_ZN9SdSpiCard11cardCommandEhm>

000d63ec <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d63ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d63f0:	2500      	movs	r5, #0
   d63f2:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d63f4:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d63f6:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d63f8:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d63fa:	4604      	mov	r4, r0
   d63fc:	4690      	mov	r8, r2
   d63fe:	461e      	mov	r6, r3
   d6400:	f000 fe00 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d6404:	4641      	mov	r1, r8
   d6406:	4607      	mov	r7, r0
   d6408:	6860      	ldr	r0, [r4, #4]
   d640a:	f000 f9cb 	bl	d67a4 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d640e:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d6410:	4a4f      	ldr	r2, [pc, #316]	; (d6550 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d6412:	721d      	strb	r5, [r3, #8]
   d6414:	f04f 0801 	mov.w	r8, #1
   d6418:	60da      	str	r2, [r3, #12]
   d641a:	745d      	strb	r5, [r3, #17]
   d641c:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d6420:	4620      	mov	r0, r4
   d6422:	f7ff ff37 	bl	d6294 <_ZN9SdSpiCard8spiStartEv>
   d6426:	6863      	ldr	r3, [r4, #4]
   d6428:	4641      	mov	r1, r8
   d642a:	7d18      	ldrb	r0, [r3, #20]
   d642c:	f002 f92b 	bl	d8686 <digitalWrite>
   d6430:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6432:	21ff      	movs	r1, #255	; 0xff
   d6434:	6860      	ldr	r0, [r4, #4]
   d6436:	3d01      	subs	r5, #1
   d6438:	f000 f9e2 	bl	d6800 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d643c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6440:	d1f7      	bne.n	d6432 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d6442:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d6444:	4629      	mov	r1, r5
   d6446:	7d18      	ldrb	r0, [r3, #20]
   d6448:	f002 f91d 	bl	d8686 <digitalWrite>
   d644c:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d644e:	2200      	movs	r2, #0
   d6450:	4611      	mov	r1, r2
   d6452:	4620      	mov	r0, r4
   d6454:	f7ff ff86 	bl	d6364 <_ZN9SdSpiCard11cardCommandEhm>
   d6458:	2801      	cmp	r0, #1
   d645a:	4680      	mov	r8, r0
   d645c:	d012      	beq.n	d6484 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d645e:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d6460:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6464:	d101      	bne.n	d646a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6466:	2320      	movs	r3, #32
   d6468:	e057      	b.n	d651a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d646a:	21fd      	movs	r1, #253	; 0xfd
   d646c:	6860      	ldr	r0, [r4, #4]
   d646e:	f000 f9c7 	bl	d6800 <_ZN14SdSpiAltDriver4sendEh>
   d6472:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6476:	6860      	ldr	r0, [r4, #4]
   d6478:	f000 f9a7 	bl	d67ca <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d647c:	f1b8 0801 	subs.w	r8, r8, #1
   d6480:	d1f9      	bne.n	d6476 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d6482:	e7e4      	b.n	d644e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d6484:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d6488:	2108      	movs	r1, #8
   d648a:	4620      	mov	r0, r4
   d648c:	f7ff ff6a 	bl	d6364 <_ZN9SdSpiCard11cardCommandEhm>
   d6490:	2805      	cmp	r0, #5
   d6492:	d102      	bne.n	d649a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6494:	f884 800a 	strb.w	r8, [r4, #10]
   d6498:	e00f      	b.n	d64ba <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d649a:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d649c:	6860      	ldr	r0, [r4, #4]
   d649e:	f000 f994 	bl	d67ca <_ZN14SdSpiAltDriver7receiveEv>
   d64a2:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d64a4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d64a8:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d64aa:	d1f7      	bne.n	d649c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d64ac:	28aa      	cmp	r0, #170	; 0xaa
   d64ae:	d102      	bne.n	d64b6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d64b0:	2302      	movs	r3, #2
   d64b2:	72a3      	strb	r3, [r4, #10]
   d64b4:	e001      	b.n	d64ba <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d64b6:	2325      	movs	r3, #37	; 0x25
   d64b8:	e02f      	b.n	d651a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d64ba:	7aa3      	ldrb	r3, [r4, #10]
   d64bc:	2b02      	cmp	r3, #2
   d64be:	bf0c      	ite	eq
   d64c0:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d64c4:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d64c6:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d64c8:	462a      	mov	r2, r5
   d64ca:	2129      	movs	r1, #41	; 0x29
   d64cc:	4620      	mov	r0, r4
   d64ce:	f7ff ff7e 	bl	d63ce <_ZN9SdSpiCard8cardAcmdEhm>
   d64d2:	4602      	mov	r2, r0
   d64d4:	b148      	cbz	r0, d64ea <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d64d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d64da:	4639      	mov	r1, r7
   d64dc:	4620      	mov	r0, r4
   d64de:	f7ff feb5 	bl	d624c <_ZN9SdSpiCard10isTimedOutEtt>
   d64e2:	2800      	cmp	r0, #0
   d64e4:	d0f0      	beq.n	d64c8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d64e6:	2343      	movs	r3, #67	; 0x43
   d64e8:	e017      	b.n	d651a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d64ea:	7aa3      	ldrb	r3, [r4, #10]
   d64ec:	2b02      	cmp	r3, #2
   d64ee:	d00e      	beq.n	d650e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d64f0:	4620      	mov	r0, r4
   d64f2:	f7ff fede 	bl	d62b2 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d64f6:	6863      	ldr	r3, [r4, #4]
   d64f8:	68b0      	ldr	r0, [r6, #8]
   d64fa:	7934      	ldrb	r4, [r6, #4]
   d64fc:	7b31      	ldrb	r1, [r6, #12]
   d64fe:	7b72      	ldrb	r2, [r6, #13]
   d6500:	745a      	strb	r2, [r3, #17]
   d6502:	60d8      	str	r0, [r3, #12]
   d6504:	721c      	strb	r4, [r3, #8]
   d6506:	7419      	strb	r1, [r3, #16]
  return true;
   d6508:	2001      	movs	r0, #1
   d650a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d650e:	213a      	movs	r1, #58	; 0x3a
   d6510:	4620      	mov	r0, r4
   d6512:	f7ff ff27 	bl	d6364 <_ZN9SdSpiCard11cardCommandEhm>
   d6516:	b138      	cbz	r0, d6528 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d6518:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d651a:	4620      	mov	r0, r4
   d651c:	7023      	strb	r3, [r4, #0]
   d651e:	f7ff fec8 	bl	d62b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6522:	2000      	movs	r0, #0
}
   d6524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6528:	6860      	ldr	r0, [r4, #4]
   d652a:	f000 f94e 	bl	d67ca <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d652e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d6532:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6534:	bf04      	itt	eq
   d6536:	2303      	moveq	r3, #3
   d6538:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d653a:	6860      	ldr	r0, [r4, #4]
   d653c:	f000 f945 	bl	d67ca <_ZN14SdSpiAltDriver7receiveEv>
   d6540:	6860      	ldr	r0, [r4, #4]
   d6542:	f000 f942 	bl	d67ca <_ZN14SdSpiAltDriver7receiveEv>
   d6546:	6860      	ldr	r0, [r4, #4]
   d6548:	f000 f93f 	bl	d67ca <_ZN14SdSpiAltDriver7receiveEv>
   d654c:	e7d0      	b.n	d64f0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d654e:	bf00      	nop
   d6550:	0003d090 	.word	0x0003d090

000d6554 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6554:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6556:	7a83      	ldrb	r3, [r0, #10]
   d6558:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d655a:	bf18      	it	ne
   d655c:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d655e:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6560:	460a      	mov	r2, r1
   d6562:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6564:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6566:	f7ff fefd 	bl	d6364 <_ZN9SdSpiCard11cardCommandEhm>
   d656a:	b110      	cbz	r0, d6572 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d656c:	2330      	movs	r3, #48	; 0x30
   d656e:	7023      	strb	r3, [r4, #0]
   d6570:	e00b      	b.n	d658a <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d6572:	4629      	mov	r1, r5
   d6574:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6578:	4620      	mov	r0, r4
   d657a:	f7ff fead 	bl	d62d8 <_ZN9SdSpiCard8readDataEPhj>
   d657e:	4605      	mov	r5, r0
   d6580:	b118      	cbz	r0, d658a <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d6582:	4620      	mov	r0, r4
   d6584:	f7ff fe95 	bl	d62b2 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6588:	e003      	b.n	d6592 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d658a:	4620      	mov	r0, r4
   d658c:	f7ff fe91 	bl	d62b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6590:	2500      	movs	r5, #0
}
   d6592:	4628      	mov	r0, r5
   d6594:	bd38      	pop	{r3, r4, r5, pc}

000d6596 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6596:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d6598:	7a83      	ldrb	r3, [r0, #10]
   d659a:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d659c:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d659e:	bf18      	it	ne
   d65a0:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d65a2:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d65a4:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d65a6:	f7ff fedd 	bl	d6364 <_ZN9SdSpiCard11cardCommandEhm>
   d65aa:	b130      	cbz	r0, d65ba <_ZN9SdSpiCard9readStartEm+0x24>
   d65ac:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d65ae:	4620      	mov	r0, r4
   d65b0:	7023      	strb	r3, [r4, #0]
   d65b2:	f7ff fe7e 	bl	d62b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d65b6:	2000      	movs	r0, #0
   d65b8:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d65ba:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d65bc:	bd10      	pop	{r4, pc}

000d65be <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d65be:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d65c0:	2200      	movs	r2, #0
   d65c2:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d65c4:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d65c6:	f7ff fecd 	bl	d6364 <_ZN9SdSpiCard11cardCommandEhm>
   d65ca:	b130      	cbz	r0, d65da <_ZN9SdSpiCard8readStopEv+0x1c>
   d65cc:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d65ce:	4620      	mov	r0, r4
   d65d0:	7023      	strb	r3, [r4, #0]
   d65d2:	f7ff fe6e 	bl	d62b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d65d6:	2000      	movs	r0, #0
   d65d8:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d65da:	4620      	mov	r0, r4
   d65dc:	f7ff fe69 	bl	d62b2 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d65e0:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d65e2:	bd10      	pop	{r4, pc}

000d65e4 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d65e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d65e6:	4605      	mov	r5, r0
   d65e8:	4616      	mov	r6, r2
   d65ea:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d65ec:	f7ff ffd3 	bl	d6596 <_ZN9SdSpiCard9readStartEm>
   d65f0:	b198      	cbz	r0, d661a <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d65f2:	2400      	movs	r4, #0
   d65f4:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d65f6:	429f      	cmp	r7, r3
   d65f8:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d65fc:	d908      	bls.n	d6610 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d65fe:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6602:	4628      	mov	r0, r5
   d6604:	f7ff fe68 	bl	d62d8 <_ZN9SdSpiCard8readDataEPhj>
   d6608:	3401      	adds	r4, #1
   d660a:	2800      	cmp	r0, #0
   d660c:	d1f2      	bne.n	d65f4 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d660e:	e004      	b.n	d661a <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d6610:	4628      	mov	r0, r5
}
   d6612:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d6616:	f7ff bfd2 	b.w	d65be <_ZN9SdSpiCard8readStopEv>
}
   d661a:	2000      	movs	r0, #0
   d661c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d661e <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d661e:	b538      	push	{r3, r4, r5, lr}
   d6620:	4604      	mov	r4, r0
   d6622:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6624:	6840      	ldr	r0, [r0, #4]
   d6626:	f000 f8eb 	bl	d6800 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d662a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d662e:	4629      	mov	r1, r5
   d6630:	6860      	ldr	r0, [r4, #4]
   d6632:	f000 f8e9 	bl	d6808 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6636:	21ff      	movs	r1, #255	; 0xff
   d6638:	6860      	ldr	r0, [r4, #4]
   d663a:	f000 f8e1 	bl	d6800 <_ZN14SdSpiAltDriver4sendEh>
   d663e:	21ff      	movs	r1, #255	; 0xff
   d6640:	6860      	ldr	r0, [r4, #4]
   d6642:	f000 f8dd 	bl	d6800 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6646:	6860      	ldr	r0, [r4, #4]
   d6648:	f000 f8bf 	bl	d67ca <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d664c:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d664e:	f000 001f 	and.w	r0, r0, #31
   d6652:	2805      	cmp	r0, #5
   d6654:	d006      	beq.n	d6664 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6656:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6658:	4620      	mov	r0, r4
   d665a:	7023      	strb	r3, [r4, #0]
   d665c:	f7ff fe29 	bl	d62b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6660:	2000      	movs	r0, #0
   d6662:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d6664:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6666:	bd38      	pop	{r3, r4, r5, pc}

000d6668 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6668:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d666a:	7a83      	ldrb	r3, [r0, #10]
   d666c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d666e:	bf18      	it	ne
   d6670:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6672:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6674:	460a      	mov	r2, r1
   d6676:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6678:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d667a:	f7ff fe73 	bl	d6364 <_ZN9SdSpiCard11cardCommandEhm>
   d667e:	4606      	mov	r6, r0
   d6680:	b108      	cbz	r0, d6686 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d6682:	2332      	movs	r3, #50	; 0x32
   d6684:	e01d      	b.n	d66c2 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d6686:	462a      	mov	r2, r5
   d6688:	21fe      	movs	r1, #254	; 0xfe
   d668a:	4620      	mov	r0, r4
   d668c:	f7ff ffc7 	bl	d661e <_ZN9SdSpiCard9writeDataEhPKh>
   d6690:	b1c0      	cbz	r0, d66c4 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6692:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d6696:	4620      	mov	r0, r4
   d6698:	f7ff fe4f 	bl	d633a <_ZN9SdSpiCard11waitNotBusyEt>
   d669c:	4605      	mov	r5, r0
   d669e:	b908      	cbnz	r0, d66a4 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d66a0:	235a      	movs	r3, #90	; 0x5a
   d66a2:	e00e      	b.n	d66c2 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d66a4:	4632      	mov	r2, r6
   d66a6:	210d      	movs	r1, #13
   d66a8:	4620      	mov	r0, r4
   d66aa:	f7ff fe5b 	bl	d6364 <_ZN9SdSpiCard11cardCommandEhm>
   d66ae:	b938      	cbnz	r0, d66c0 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d66b0:	6860      	ldr	r0, [r4, #4]
   d66b2:	f000 f88a 	bl	d67ca <_ZN14SdSpiAltDriver7receiveEv>
   d66b6:	b918      	cbnz	r0, d66c0 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d66b8:	4620      	mov	r0, r4
   d66ba:	f7ff fdfa 	bl	d62b2 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d66be:	e005      	b.n	d66cc <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d66c0:	2329      	movs	r3, #41	; 0x29
   d66c2:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d66c4:	4620      	mov	r0, r4
   d66c6:	f7ff fdf4 	bl	d62b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d66ca:	2500      	movs	r5, #0
}
   d66cc:	4628      	mov	r0, r5
   d66ce:	bd70      	pop	{r4, r5, r6, pc}

000d66d0 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d66d0:	b538      	push	{r3, r4, r5, lr}
   d66d2:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d66d4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d66d8:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d66da:	f7ff fe2e 	bl	d633a <_ZN9SdSpiCard11waitNotBusyEt>
   d66de:	b910      	cbnz	r0, d66e6 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d66e0:	235b      	movs	r3, #91	; 0x5b
   d66e2:	7023      	strb	r3, [r4, #0]
   d66e4:	e005      	b.n	d66f2 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d66e6:	462a      	mov	r2, r5
   d66e8:	21fc      	movs	r1, #252	; 0xfc
   d66ea:	4620      	mov	r0, r4
   d66ec:	f7ff ff97 	bl	d661e <_ZN9SdSpiCard9writeDataEhPKh>
   d66f0:	b918      	cbnz	r0, d66fa <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d66f2:	4620      	mov	r0, r4
   d66f4:	f7ff fddd 	bl	d62b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d66f8:	2000      	movs	r0, #0
}
   d66fa:	bd38      	pop	{r3, r4, r5, pc}

000d66fc <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d66fc:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d66fe:	7a83      	ldrb	r3, [r0, #10]
   d6700:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6702:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d6704:	bf18      	it	ne
   d6706:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6708:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d670a:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d670c:	f7ff fe2a 	bl	d6364 <_ZN9SdSpiCard11cardCommandEhm>
   d6710:	b130      	cbz	r0, d6720 <_ZN9SdSpiCard10writeStartEm+0x24>
   d6712:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6714:	4620      	mov	r0, r4
   d6716:	7023      	strb	r3, [r4, #0]
   d6718:	f7ff fdcb 	bl	d62b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d671c:	2000      	movs	r0, #0
   d671e:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d6720:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6722:	bd10      	pop	{r4, pc}

000d6724 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6724:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6726:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d672a:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d672c:	f7ff fe05 	bl	d633a <_ZN9SdSpiCard11waitNotBusyEt>
   d6730:	4605      	mov	r5, r0
   d6732:	b120      	cbz	r0, d673e <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6734:	21fd      	movs	r1, #253	; 0xfd
   d6736:	6860      	ldr	r0, [r4, #4]
   d6738:	f000 f862 	bl	d6800 <_ZN14SdSpiAltDriver4sendEh>
   d673c:	e001      	b.n	d6742 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d673e:	2356      	movs	r3, #86	; 0x56
   d6740:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d6742:	4620      	mov	r0, r4
   d6744:	f7ff fdb5 	bl	d62b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6748:	4628      	mov	r0, r5
   d674a:	bd38      	pop	{r3, r4, r5, pc}

000d674c <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d674e:	4605      	mov	r5, r0
   d6750:	4616      	mov	r6, r2
   d6752:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d6754:	f7ff ffd2 	bl	d66fc <_ZN9SdSpiCard10writeStartEm>
   d6758:	b170      	cbz	r0, d6778 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d675a:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d675c:	42bc      	cmp	r4, r7
   d675e:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6762:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6764:	d004      	beq.n	d6770 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d6766:	f7ff ffb3 	bl	d66d0 <_ZN9SdSpiCard9writeDataEPKh>
   d676a:	b128      	cbz	r0, d6778 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d676c:	3401      	adds	r4, #1
   d676e:	e7f5      	b.n	d675c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d6770:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6774:	f7ff bfd6 	b.w	d6724 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d6778:	4628      	mov	r0, r5
   d677a:	f7ff fd9a 	bl	d62b2 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d677e:	2000      	movs	r0, #0
   d6780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6782 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d6782:	f000 bba7 	b.w	d6ed4 <HAL_Pin_Map>

000d6786 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d6786:	f000 bba5 	b.w	d6ed4 <HAL_Pin_Map>

000d678a <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d678a:	f000 bba3 	b.w	d6ed4 <HAL_Pin_Map>
	...

000d6790 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d6790:	4b01      	ldr	r3, [pc, #4]	; (d6798 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d6792:	2201      	movs	r2, #1
   d6794:	701a      	strb	r2, [r3, #0]
   d6796:	4770      	bx	lr
   d6798:	2003e3d8 	.word	0x2003e3d8

000d679c <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d679c:	1d01      	adds	r1, r0, #4
   d679e:	6800      	ldr	r0, [r0, #0]
   d67a0:	f000 beb4 	b.w	d750c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d67a4 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d67a4:	b510      	push	{r4, lr}
   d67a6:	4604      	mov	r4, r0
  m_csPin = csPin;
   d67a8:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d67aa:	6800      	ldr	r0, [r0, #0]
   d67ac:	f000 fe84 	bl	d74b8 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d67b0:	7d20      	ldrb	r0, [r4, #20]
   d67b2:	2101      	movs	r1, #1
   d67b4:	f001 ff56 	bl	d8664 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d67b8:	7d20      	ldrb	r0, [r4, #20]
   d67ba:	2101      	movs	r1, #1
}
   d67bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d67c0:	f001 bf61 	b.w	d8686 <digitalWrite>

000d67c4 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d67c4:	6800      	ldr	r0, [r0, #0]
   d67c6:	f000 be88 	b.w	d74da <_ZN8SPIClass14endTransactionEv>

000d67ca <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d67ca:	21ff      	movs	r1, #255	; 0xff
   d67cc:	6800      	ldr	r0, [r0, #0]
   d67ce:	f000 bf0d 	b.w	d75ec <_ZN8SPIClass8transferEh>
	...

000d67d4 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d67d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d67d6:	4b08      	ldr	r3, [pc, #32]	; (d67f8 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d67d8:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d67da:	2500      	movs	r5, #0
   d67dc:	4c07      	ldr	r4, [pc, #28]	; (d67fc <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d67de:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d67e0:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d67e2:	4613      	mov	r3, r2
   d67e4:	460a      	mov	r2, r1
   d67e6:	4629      	mov	r1, r5
   d67e8:	f000 ff06 	bl	d75f8 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d67ec:	7823      	ldrb	r3, [r4, #0]
   d67ee:	2b00      	cmp	r3, #0
   d67f0:	d0fc      	beq.n	d67ec <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d67f2:	2000      	movs	r0, #0
   d67f4:	b003      	add	sp, #12
   d67f6:	bd30      	pop	{r4, r5, pc}
   d67f8:	000d6791 	.word	0x000d6791
   d67fc:	2003e3d8 	.word	0x2003e3d8

000d6800 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d6800:	6800      	ldr	r0, [r0, #0]
   d6802:	f000 bef3 	b.w	d75ec <_ZN8SPIClass8transferEh>
	...

000d6808 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d6808:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d680a:	4b07      	ldr	r3, [pc, #28]	; (d6828 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d680c:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d680e:	2500      	movs	r5, #0
   d6810:	4c06      	ldr	r4, [pc, #24]	; (d682c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6812:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6814:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6816:	4613      	mov	r3, r2
   d6818:	462a      	mov	r2, r5
   d681a:	f000 feed 	bl	d75f8 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d681e:	7823      	ldrb	r3, [r4, #0]
   d6820:	2b00      	cmp	r3, #0
   d6822:	d0fc      	beq.n	d681e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d6824:	b003      	add	sp, #12
   d6826:	bd30      	pop	{r4, r5, pc}
   d6828:	000d6791 	.word	0x000d6791
   d682c:	2003e3d8 	.word	0x2003e3d8

000d6830 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d6830:	f000 bb50 	b.w	d6ed4 <HAL_Pin_Map>

000d6834 <_ZN11TinyGPSPlusC1Ev>:
   const RawDegrees &rawLat()     { updated = false; return rawLatData; }
   const RawDegrees &rawLng()     { updated = false; return rawLngData; }
   double lat();
   double lng();

   TinyGPSLocation() : valid(false), updated(false)
   d6834:	2200      	movs	r2, #0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d6836:	2102      	movs	r1, #2
   d6838:	7002      	strb	r2, [r0, #0]
   d683a:	7042      	strb	r2, [r0, #1]
{
   uint16_t deg;
   uint32_t billionths;
   bool negative;
public:
   RawDegrees() : deg(0), billionths(0), negative(false)
   d683c:	8082      	strh	r2, [r0, #4]
   d683e:	6082      	str	r2, [r0, #8]
   d6840:	7302      	strb	r2, [r0, #12]
   d6842:	8202      	strh	r2, [r0, #16]
   d6844:	6142      	str	r2, [r0, #20]
   d6846:	7602      	strb	r2, [r0, #24]
   d6848:	8382      	strh	r2, [r0, #28]
   d684a:	6202      	str	r2, [r0, #32]
   d684c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d6850:	8502      	strh	r2, [r0, #40]	; 0x28
   d6852:	62c2      	str	r2, [r0, #44]	; 0x2c
   d6854:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   uint32_t value()           { updated = false; return date; }
   uint16_t year();
   uint8_t month();
   uint8_t day();

   TinyGPSDate() : valid(false), updated(false), date(0)
   d6858:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
   d685c:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
   d6860:	63c2      	str	r2, [r0, #60]	; 0x3c
   uint8_t hour();
   uint8_t minute();
   uint8_t second();
   uint8_t centisecond();

   TinyGPSTime() : valid(false), updated(false), time(0)
   d6862:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
   d6866:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
   d686a:	64c2      	str	r2, [r0, #76]	; 0x4c
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d686c:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
   d6870:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
   d6874:	6602      	str	r2, [r0, #96]	; 0x60
   d6876:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
   d687a:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
   d687e:	6702      	str	r2, [r0, #112]	; 0x70
   d6880:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
   d6884:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
   d6888:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }

   TinyGPSInteger() : valid(false), updated(false), val(0)
   d688c:	f880 2088 	strb.w	r2, [r0, #136]	; 0x88
   d6890:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
   d6894:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d6898:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
   d689c:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
   d68a0:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d68a4:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
   d68a8:	f880 20a9 	strb.w	r2, [r0, #169]	; 0xa9
   d68ac:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
   d68b0:	f880 20ba 	strb.w	r2, [r0, #186]	; 0xba
   d68b4:	f880 20bb 	strb.w	r2, [r0, #187]	; 0xbb
   d68b8:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
   d68bc:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
   d68c0:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   d68c4:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
   d68c8:	f8c0 20cc 	str.w	r2, [r0, #204]	; 0xcc
   d68cc:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   d68d0:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
{
  term[0] = '\0';
   d68d4:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
   d68d8:	4770      	bx	lr

000d68da <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d68da:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d68de:	2b05      	cmp	r3, #5
   d68e0:	d802      	bhi.n	d68e8 <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d68e2:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d68e6:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d68e8:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d68ec:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d68ee:	bf94      	ite	ls
   d68f0:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d68f4:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d68f8:	4770      	bx	lr

000d68fa <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d68fa:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d68fc:	7805      	ldrb	r5, [r0, #0]
}

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d68fe:	4604      	mov	r4, r0
  bool negative = *term == '-';
  if (negative) ++term;
   d6900:	2d2d      	cmp	r5, #45	; 0x2d
   d6902:	bf08      	it	eq
   d6904:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d6906:	4620      	mov	r0, r4
   d6908:	f002 fcae 	bl	d9268 <atol>
   d690c:	2364      	movs	r3, #100	; 0x64
   d690e:	4358      	muls	r0, r3
   d6910:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d6912:	f814 3b01 	ldrb.w	r3, [r4], #1
   d6916:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d691a:	2909      	cmp	r1, #9
   d691c:	d9f8      	bls.n	d6910 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d691e:	2b2e      	cmp	r3, #46	; 0x2e
   d6920:	d10b      	bne.n	d693a <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d6922:	7853      	ldrb	r3, [r2, #1]
   d6924:	3b30      	subs	r3, #48	; 0x30
   d6926:	2b09      	cmp	r3, #9
   d6928:	d807      	bhi.n	d693a <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d692a:	210a      	movs	r1, #10
   d692c:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d6930:	7893      	ldrb	r3, [r2, #2]
   d6932:	3b30      	subs	r3, #48	; 0x30
   d6934:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d6936:	bf98      	it	ls
   d6938:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d693a:	2d2d      	cmp	r5, #45	; 0x2d
   d693c:	bf08      	it	eq
   d693e:	4240      	negeq	r0, r0
}
   d6940:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6944 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d6944:	b538      	push	{r3, r4, r5, lr}
   d6946:	4604      	mov	r4, r0
   d6948:	460d      	mov	r5, r1
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d694a:	f002 fc8d 	bl	d9268 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d694e:	2364      	movs	r3, #100	; 0x64
   d6950:	fbb0 f2f3 	udiv	r2, r0, r3
   d6954:	fb03 0012 	mls	r0, r3, r2, r0
   d6958:	4b11      	ldr	r3, [pc, #68]	; (d69a0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d695a:	802a      	strh	r2, [r5, #0]
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
  uint32_t leftOfDecimal = (uint32_t)atol(term);
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d695c:	4343      	muls	r3, r0
   d695e:	4620      	mov	r0, r4

  deg.deg = (int16_t)(leftOfDecimal / 100);

  while (isdigit(*term))
   d6960:	7802      	ldrb	r2, [r0, #0]
   d6962:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   d6966:	2909      	cmp	r1, #9
   d6968:	4604      	mov	r4, r0
   d696a:	f100 0001 	add.w	r0, r0, #1
   d696e:	d9f7      	bls.n	d6960 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d6970:	2a2e      	cmp	r2, #46	; 0x2e
   d6972:	d10b      	bne.n	d698c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
   d6974:	490a      	ldr	r1, [pc, #40]	; (d69a0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d6976:	200a      	movs	r0, #10

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d6978:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   d697c:	3a30      	subs	r2, #48	; 0x30
   d697e:	2a09      	cmp	r2, #9
   d6980:	d804      	bhi.n	d698c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
    {
      multiplier /= 10;
   d6982:	fbb1 f1f0 	udiv	r1, r1, r0
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d6986:	fb01 3302 	mla	r3, r1, r2, r3

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d698a:	e7f5      	b.n	d6978 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    {
      multiplier /= 10;
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d698c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d6990:	3301      	adds	r3, #1
   d6992:	2203      	movs	r2, #3
   d6994:	fbb3 f3f2 	udiv	r3, r3, r2
   d6998:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d699a:	2300      	movs	r3, #0
   d699c:	722b      	strb	r3, [r5, #8]
   d699e:	bd38      	pop	{r3, r4, r5, pc}
   d69a0:	00989680 	.word	0x00989680

000d69a4 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d69a4:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d69a6:	4603      	mov	r3, r0
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d69a8:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d69aa:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d69ae:	6042      	str	r2, [r0, #4]
   d69b0:	685a      	ldr	r2, [r3, #4]
   d69b2:	6082      	str	r2, [r0, #8]
   d69b4:	7a1b      	ldrb	r3, [r3, #8]
   d69b6:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d69b8:	4603      	mov	r3, r0
   d69ba:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d69be:	6102      	str	r2, [r0, #16]
   d69c0:	685a      	ldr	r2, [r3, #4]
   d69c2:	6142      	str	r2, [r0, #20]
   d69c4:	7a1b      	ldrb	r3, [r3, #8]
   d69c6:	7603      	strb	r3, [r0, #24]
   d69c8:	f000 fb1c 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d69cc:	2301      	movs	r3, #1

void TinyGPSLocation::commit()
{
   rawLatData = rawNewLatData;
   rawLngData = rawNewLngData;
   lastCommitTime = millis();
   d69ce:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d69d0:	7063      	strb	r3, [r4, #1]
   d69d2:	7023      	strb	r3, [r4, #0]
   d69d4:	bd10      	pop	{r4, pc}
	...

000d69d8 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d69d8:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d69da:	2300      	movs	r3, #0
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d69dc:	4604      	mov	r4, r0
   updated = false;
   d69de:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d69e0:	6880      	ldr	r0, [r0, #8]
   d69e2:	f002 f969 	bl	d8cb8 <__aeabi_ui2d>
   d69e6:	a30e      	add	r3, pc, #56	; (adr r3, d6a20 <_ZN15TinyGPSLocation3latEv+0x48>)
   d69e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d69ec:	f002 fb04 	bl	d8ff8 <__aeabi_ddiv>
   d69f0:	4606      	mov	r6, r0
   d69f2:	88a0      	ldrh	r0, [r4, #4]
   d69f4:	460f      	mov	r7, r1
   d69f6:	f002 f96f 	bl	d8cd8 <__aeabi_i2d>
   d69fa:	460b      	mov	r3, r1
   d69fc:	4602      	mov	r2, r0
   d69fe:	4639      	mov	r1, r7
   d6a00:	4630      	mov	r0, r6
   d6a02:	f002 f81d 	bl	d8a40 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d6a06:	7b23      	ldrb	r3, [r4, #12]
   d6a08:	b11b      	cbz	r3, d6a12 <_ZN15TinyGPSLocation3latEv+0x3a>
   d6a0a:	4602      	mov	r2, r0
   d6a0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d6a10:	e001      	b.n	d6a16 <_ZN15TinyGPSLocation3latEv+0x3e>
   d6a12:	4602      	mov	r2, r0
   d6a14:	460b      	mov	r3, r1
}
   d6a16:	ec43 2b10 	vmov	d0, r2, r3
   d6a1a:	bdd0      	pop	{r4, r6, r7, pc}
   d6a1c:	f3af 8000 	nop.w
   d6a20:	00000000 	.word	0x00000000
   d6a24:	41cdcd65 	.word	0x41cdcd65

000d6a28 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d6a28:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d6a2a:	2300      	movs	r3, #0
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   return rawLatData.negative ? -ret : ret;
}

double TinyGPSLocation::lng()
{
   d6a2c:	4604      	mov	r4, r0
   updated = false;
   d6a2e:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d6a30:	6940      	ldr	r0, [r0, #20]
   d6a32:	f002 f941 	bl	d8cb8 <__aeabi_ui2d>
   d6a36:	a30e      	add	r3, pc, #56	; (adr r3, d6a70 <_ZN15TinyGPSLocation3lngEv+0x48>)
   d6a38:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6a3c:	f002 fadc 	bl	d8ff8 <__aeabi_ddiv>
   d6a40:	4606      	mov	r6, r0
   d6a42:	8a20      	ldrh	r0, [r4, #16]
   d6a44:	460f      	mov	r7, r1
   d6a46:	f002 f947 	bl	d8cd8 <__aeabi_i2d>
   d6a4a:	460b      	mov	r3, r1
   d6a4c:	4602      	mov	r2, r0
   d6a4e:	4639      	mov	r1, r7
   d6a50:	4630      	mov	r0, r6
   d6a52:	f001 fff5 	bl	d8a40 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d6a56:	7e23      	ldrb	r3, [r4, #24]
   d6a58:	b11b      	cbz	r3, d6a62 <_ZN15TinyGPSLocation3lngEv+0x3a>
   d6a5a:	4602      	mov	r2, r0
   d6a5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d6a60:	e001      	b.n	d6a66 <_ZN15TinyGPSLocation3lngEv+0x3e>
   d6a62:	4602      	mov	r2, r0
   d6a64:	460b      	mov	r3, r1
}
   d6a66:	ec43 2b10 	vmov	d0, r2, r3
   d6a6a:	bdd0      	pop	{r4, r6, r7, pc}
   d6a6c:	f3af 8000 	nop.w
   d6a70:	00000000 	.word	0x00000000
   d6a74:	41cdcd65 	.word	0x41cdcd65

000d6a78 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d6a78:	b510      	push	{r4, lr}
   date = newDate;
   d6a7a:	6883      	ldr	r3, [r0, #8]
   d6a7c:	6043      	str	r3, [r0, #4]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
   d6a7e:	4604      	mov	r4, r0
   d6a80:	f000 fac0 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
   date = newDate;
   lastCommitTime = millis();
   valid = updated = true;
   d6a84:	2301      	movs	r3, #1
}

void TinyGPSDate::commit()
{
   date = newDate;
   lastCommitTime = millis();
   d6a86:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d6a88:	7063      	strb	r3, [r4, #1]
   d6a8a:	7023      	strb	r3, [r4, #0]
   d6a8c:	bd10      	pop	{r4, pc}

000d6a8e <_ZN11TinyGPSTime6commitEv>:
}

void TinyGPSTime::commit()
{
   d6a8e:	b510      	push	{r4, lr}
   time = newTime;
   d6a90:	6883      	ldr	r3, [r0, #8]
   d6a92:	6043      	str	r3, [r0, #4]
   lastCommitTime = millis();
   valid = updated = true;
}

void TinyGPSTime::commit()
{
   d6a94:	4604      	mov	r4, r0
   d6a96:	f000 fab5 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
   time = newTime;
   lastCommitTime = millis();
   valid = updated = true;
   d6a9a:	2301      	movs	r3, #1
}

void TinyGPSTime::commit()
{
   time = newTime;
   lastCommitTime = millis();
   d6a9c:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d6a9e:	7063      	strb	r3, [r4, #1]
   d6aa0:	7023      	strb	r3, [r4, #0]
   d6aa2:	bd10      	pop	{r4, pc}

000d6aa4 <_ZN11TinyGPSTime7setTimeEPKc>:
}

void TinyGPSTime::setTime(const char *term)
{
   d6aa4:	b510      	push	{r4, lr}
   d6aa6:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d6aa8:	4608      	mov	r0, r1
   d6aaa:	f7ff ff26 	bl	d68fa <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d6aae:	60a0      	str	r0, [r4, #8]
   d6ab0:	bd10      	pop	{r4, pc}

000d6ab2 <_ZN11TinyGPSDate7setDateEPKc>:
}

void TinyGPSDate::setDate(const char *term)
{
   d6ab2:	b510      	push	{r4, lr}
   d6ab4:	4604      	mov	r4, r0
   newDate = atol(term);
   d6ab6:	4608      	mov	r0, r1
   d6ab8:	f002 fbd6 	bl	d9268 <atol>
   d6abc:	60a0      	str	r0, [r4, #8]
   d6abe:	bd10      	pop	{r4, pc}

000d6ac0 <_ZN11TinyGPSDate4yearEv>:
}

uint16_t TinyGPSDate::year()
{
   updated = false;
   d6ac0:	2300      	movs	r3, #0
   d6ac2:	7043      	strb	r3, [r0, #1]
   uint16_t year = date % 100;
   return year + 2000;
   d6ac4:	6840      	ldr	r0, [r0, #4]
   d6ac6:	2264      	movs	r2, #100	; 0x64
   d6ac8:	fbb0 f3f2 	udiv	r3, r0, r2
   d6acc:	fb02 0013 	mls	r0, r2, r3, r0
   d6ad0:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
}
   d6ad4:	b280      	uxth	r0, r0
   d6ad6:	4770      	bx	lr

000d6ad8 <_ZN11TinyGPSDate5monthEv>:

uint8_t TinyGPSDate::month()
{
   updated = false;
   d6ad8:	2300      	movs	r3, #0
   d6ada:	7043      	strb	r3, [r0, #1]
   return (date / 100) % 100;
   d6adc:	6843      	ldr	r3, [r0, #4]
   d6ade:	2064      	movs	r0, #100	; 0x64
   d6ae0:	fbb3 f3f0 	udiv	r3, r3, r0
   d6ae4:	fbb3 f2f0 	udiv	r2, r3, r0
   d6ae8:	fb00 3012 	mls	r0, r0, r2, r3
}
   d6aec:	b2c0      	uxtb	r0, r0
   d6aee:	4770      	bx	lr

000d6af0 <_ZN11TinyGPSDate3dayEv>:

uint8_t TinyGPSDate::day()
{
   updated = false;
   d6af0:	2300      	movs	r3, #0
   d6af2:	7043      	strb	r3, [r0, #1]
   return date / 10000;
   d6af4:	6843      	ldr	r3, [r0, #4]
   d6af6:	f242 7010 	movw	r0, #10000	; 0x2710
   d6afa:	fbb3 f0f0 	udiv	r0, r3, r0
}
   d6afe:	b2c0      	uxtb	r0, r0
   d6b00:	4770      	bx	lr
	...

000d6b04 <_ZN11TinyGPSTime4hourEv>:

uint8_t TinyGPSTime::hour()
{
   updated = false;
   d6b04:	2300      	movs	r3, #0
   d6b06:	7043      	strb	r3, [r0, #1]
   return time / 1000000;
   d6b08:	6843      	ldr	r3, [r0, #4]
   d6b0a:	4802      	ldr	r0, [pc, #8]	; (d6b14 <_ZN11TinyGPSTime4hourEv+0x10>)
   d6b0c:	fbb3 f0f0 	udiv	r0, r3, r0
}
   d6b10:	b2c0      	uxtb	r0, r0
   d6b12:	4770      	bx	lr
   d6b14:	000f4240 	.word	0x000f4240

000d6b18 <_ZN11TinyGPSTime6minuteEv>:

uint8_t TinyGPSTime::minute()
{
   updated = false;
   d6b18:	2300      	movs	r3, #0
   d6b1a:	7043      	strb	r3, [r0, #1]
   return (time / 10000) % 100;
   d6b1c:	6843      	ldr	r3, [r0, #4]
   d6b1e:	f242 7010 	movw	r0, #10000	; 0x2710
   d6b22:	fbb3 f3f0 	udiv	r3, r3, r0
   d6b26:	2064      	movs	r0, #100	; 0x64
   d6b28:	fbb3 f2f0 	udiv	r2, r3, r0
   d6b2c:	fb00 3012 	mls	r0, r0, r2, r3
}
   d6b30:	b2c0      	uxtb	r0, r0
   d6b32:	4770      	bx	lr

000d6b34 <_ZN11TinyGPSTime6secondEv>:

uint8_t TinyGPSTime::second()
{
   updated = false;
   d6b34:	2300      	movs	r3, #0
   d6b36:	7043      	strb	r3, [r0, #1]
   return (time / 100) % 100;
   d6b38:	6843      	ldr	r3, [r0, #4]
   d6b3a:	2064      	movs	r0, #100	; 0x64
   d6b3c:	fbb3 f3f0 	udiv	r3, r3, r0
   d6b40:	fbb3 f2f0 	udiv	r2, r3, r0
   d6b44:	fb00 3012 	mls	r0, r0, r2, r3
}
   d6b48:	b2c0      	uxtb	r0, r0
   d6b4a:	4770      	bx	lr

000d6b4c <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d6b4c:	b510      	push	{r4, lr}
   val = newval;
   d6b4e:	68c3      	ldr	r3, [r0, #12]
   d6b50:	6083      	str	r3, [r0, #8]
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d6b52:	4604      	mov	r4, r0
   d6b54:	f000 fa56 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d6b58:	2301      	movs	r3, #1
}

void TinyGPSDecimal::commit()
{
   val = newval;
   lastCommitTime = millis();
   d6b5a:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d6b5c:	7063      	strb	r3, [r4, #1]
   d6b5e:	7023      	strb	r3, [r4, #0]
   d6b60:	bd10      	pop	{r4, pc}

000d6b62 <_ZN14TinyGPSDecimal3setEPKc>:
}

void TinyGPSDecimal::set(const char *term)
{
   d6b62:	b510      	push	{r4, lr}
   d6b64:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d6b66:	4608      	mov	r0, r1
   d6b68:	f7ff fec7 	bl	d68fa <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d6b6c:	60e0      	str	r0, [r4, #12]
   d6b6e:	bd10      	pop	{r4, pc}

000d6b70 <_ZN14TinyGPSInteger6commitEv>:
}

void TinyGPSInteger::commit()
{
   d6b70:	b510      	push	{r4, lr}
   val = newval;
   d6b72:	68c3      	ldr	r3, [r0, #12]
   d6b74:	6083      	str	r3, [r0, #8]
{
   newval = TinyGPSPlus::parseDecimal(term);
}

void TinyGPSInteger::commit()
{
   d6b76:	4604      	mov	r4, r0
   d6b78:	f000 fa44 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d6b7c:	2301      	movs	r3, #1
}

void TinyGPSInteger::commit()
{
   val = newval;
   lastCommitTime = millis();
   d6b7e:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d6b80:	7063      	strb	r3, [r4, #1]
   d6b82:	7023      	strb	r3, [r4, #0]
   d6b84:	bd10      	pop	{r4, pc}

000d6b86 <_ZN14TinyGPSInteger3setEPKc>:
}

void TinyGPSInteger::set(const char *term)
{
   d6b86:	b510      	push	{r4, lr}
   d6b88:	4604      	mov	r4, r0
   newval = atol(term);
   d6b8a:	4608      	mov	r0, r1
   d6b8c:	f002 fb6c 	bl	d9268 <atol>
   d6b90:	60e0      	str	r0, [r4, #12]
   d6b92:	bd10      	pop	{r4, pc}

000d6b94 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d6b94:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d6b96:	4601      	mov	r1, r0
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d6b98:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d6b9a:	3010      	adds	r0, #16
   d6b9c:	f002 fc20 	bl	d93e0 <strcpy>
   d6ba0:	f000 fa30 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6ba4:	2301      	movs	r3, #1
}

void TinyGPSCustom::commit()
{
   strcpy(this->buffer, this->stagingBuffer);
   lastCommitTime = millis();
   d6ba6:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d6ba8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   d6bac:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d6bb0:	bd10      	pop	{r4, pc}

000d6bb2 <_ZN13TinyGPSCustom3setEPKc>:
}

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d6bb2:	2210      	movs	r2, #16
   d6bb4:	f002 bc24 	b.w	d9400 <strncpy>

000d6bb8 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d6bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d6bba:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d6bbe:	4604      	mov	r4, r0
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d6bc0:	2d00      	cmp	r5, #0
   d6bc2:	d067      	beq.n	d6c94 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xdc>
  {
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d6bc4:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
   d6bc8:	f7ff fe87 	bl	d68da <_ZN11TinyGPSPlus7fromHexEc>
   d6bcc:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
   d6bd0:	4602      	mov	r2, r0
   d6bd2:	4620      	mov	r0, r4
   d6bd4:	f7ff fe81 	bl	d68da <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d6bd8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   d6bdc:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   d6be0:	b2c0      	uxtb	r0, r0
   d6be2:	4283      	cmp	r3, r0
   d6be4:	d14f      	bne.n	d6c86 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xce>
    {
      passedChecksumCount++;
   d6be6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   d6bea:	3301      	adds	r3, #1
   d6bec:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
   d6bf0:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d6bf4:	b123      	cbz	r3, d6c00 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x48>
        ++sentencesWithFixCount;
   d6bf6:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d6bfa:	3301      	adds	r3, #1
   d6bfc:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

      switch(curSentenceType)
   d6c00:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   d6c04:	b1b3      	cbz	r3, d6c34 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7c>
   d6c06:	2b01      	cmp	r3, #1
   d6c08:	d12a      	bne.n	d6c60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa8>
      {
      case GPS_SENTENCE_GPRMC:
        date.commit();
   d6c0a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d6c0e:	f7ff ff33 	bl	d6a78 <_ZN11TinyGPSDate6commitEv>
        time.commit();
   d6c12:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d6c16:	f7ff ff3a 	bl	d6a8e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d6c1a:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d6c1e:	b1fb      	cbz	r3, d6c60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa8>
        {
           location.commit();
   d6c20:	4620      	mov	r0, r4
   d6c22:	f7ff febf 	bl	d69a4 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
   d6c26:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d6c2a:	f7ff ff8f 	bl	d6b4c <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
   d6c2e:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d6c32:	e013      	b.n	d6c5c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa4>
        }
        break;
      case GPS_SENTENCE_GPGGA:
        time.commit();
   d6c34:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d6c38:	f7ff ff29 	bl	d6a8e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d6c3c:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d6c40:	b133      	cbz	r3, d6c50 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x98>
        {
          location.commit();
   d6c42:	4620      	mov	r0, r4
   d6c44:	f7ff feae 	bl	d69a4 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
   d6c48:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d6c4c:	f7ff ff7e 	bl	d6b4c <_ZN14TinyGPSDecimal6commitEv>
        }
        satellites.commit();
   d6c50:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d6c54:	f7ff ff8c 	bl	d6b70 <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
   d6c58:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d6c5c:	f7ff ff76 	bl	d6b4c <_ZN14TinyGPSDecimal6commitEv>
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d6c60:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d6c64:	2e00      	cmp	r6, #0
   d6c66:	f000 80c5 	beq.w	d6df4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d6c6a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d6c6e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d6c70:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d6c72:	f002 fbab 	bl	d93cc <strcmp>
   d6c76:	2800      	cmp	r0, #0
   d6c78:	f040 80bc 	bne.w	d6df4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
         p->commit();
   d6c7c:	4630      	mov	r0, r6
   d6c7e:	f7ff ff89 	bl	d6b94 <_ZN13TinyGPSCustom6commitEv>
        hdop.commit();
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d6c82:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d6c84:	e7ee      	b.n	d6c64 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xac>
      return true;
    }

    else
    {
      ++failedChecksumCount;
   d6c86:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   d6c8a:	3301      	adds	r3, #1
   d6c8c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    }

    return false;
   d6c90:	2500      	movs	r5, #0
   d6c92:	e0af      	b.n	d6df4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0)
   d6c94:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
   d6c98:	bb2a      	cbnz	r2, d6ce6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x12e>
  {
    if (!strcmp(term, _GPRMCterm))
   d6c9a:	f100 07aa 	add.w	r7, r0, #170	; 0xaa
   d6c9e:	4956      	ldr	r1, [pc, #344]	; (d6df8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>)
   d6ca0:	4638      	mov	r0, r7
   d6ca2:	f002 fb93 	bl	d93cc <strcmp>
   d6ca6:	b908      	cbnz	r0, d6cac <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d6ca8:	2301      	movs	r3, #1
   d6caa:	e008      	b.n	d6cbe <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x106>
    else if (!strcmp(term, _GPGGAterm))
   d6cac:	4953      	ldr	r1, [pc, #332]	; (d6dfc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x244>)
   d6cae:	4638      	mov	r0, r7
   d6cb0:	f002 fb8c 	bl	d93cc <strcmp>
   d6cb4:	b910      	cbnz	r0, d6cbc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x104>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d6cb6:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
   d6cba:	e002      	b.n	d6cc2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10a>
    else
      curSentenceType = GPS_SENTENCE_OTHER;
   d6cbc:	2302      	movs	r3, #2
   d6cbe:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d6cc2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   d6cc6:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d6cca:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d6cce:	2e00      	cmp	r6, #0
   d6cd0:	f000 8090 	beq.w	d6df4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d6cd4:	4639      	mov	r1, r7
   d6cd6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d6cd8:	f002 fb78 	bl	d93cc <strcmp>
   d6cdc:	2800      	cmp	r0, #0
   d6cde:	f280 8085 	bge.w	d6dec <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x234>
   d6ce2:	6b33      	ldr	r3, [r6, #48]	; 0x30
   d6ce4:	e7ef      	b.n	d6cc6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10e>
       customCandidates = NULL;

    return false;
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d6ce6:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
   d6cea:	2902      	cmp	r1, #2
   d6cec:	d066      	beq.n	d6dbc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   d6cee:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
   d6cf2:	2b00      	cmp	r3, #0
   d6cf4:	d062      	beq.n	d6dbc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    switch(COMBINE(curSentenceType, curTermNumber))
   d6cf6:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d6cfa:	3a01      	subs	r2, #1
   d6cfc:	2a28      	cmp	r2, #40	; 0x28
   d6cfe:	d85d      	bhi.n	d6dbc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   d6d00:	e8df f002 	tbb	[pc, r2]
   d6d04:	2a232015 	.word	0x2a232015
   d6d08:	534d4631 	.word	0x534d4631
   d6d0c:	5c5c5c57 	.word	0x5c5c5c57
   d6d10:	5c5c5c5c 	.word	0x5c5c5c5c
   d6d14:	5c5c5c5c 	.word	0x5c5c5c5c
   d6d18:	5c5c5c5c 	.word	0x5c5c5c5c
   d6d1c:	5c5c5c5c 	.word	0x5c5c5c5c
   d6d20:	5c5c5c5c 	.word	0x5c5c5c5c
   d6d24:	23201b15 	.word	0x23201b15
   d6d28:	3c38312a 	.word	0x3c38312a
   d6d2c:	40          	.byte	0x40
   d6d2d:	00          	.byte	0x00
  {
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
      time.setTime(term);
   d6d2e:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d6d32:	3048      	adds	r0, #72	; 0x48
   d6d34:	f7ff feb6 	bl	d6aa4 <_ZN11TinyGPSTime7setTimeEPKc>
      break;
   d6d38:	e040      	b.n	d6dbc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      sentenceHasFix = term[0] == 'A';
   d6d3a:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d6d3e:	4243      	negs	r3, r0
   d6d40:	4143      	adcs	r3, r0
   d6d42:	e029      	b.n	d6d98 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1e0>
   valid = updated = true;
}

void TinyGPSLocation::setLatitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d6d44:	f100 011c 	add.w	r1, r0, #28
   d6d48:	e008      	b.n	d6d5c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
      location.setLatitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
      location.rawNewLatData.negative = term[0] == 'S';
   d6d4a:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d6d4e:	424b      	negs	r3, r1
   d6d50:	414b      	adcs	r3, r1
   d6d52:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      break;
   d6d56:	e031      	b.n	d6dbc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
}

void TinyGPSLocation::setLongitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d6d58:	f100 0128 	add.w	r1, r0, #40	; 0x28
   d6d5c:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
   d6d60:	f7ff fdf0 	bl	d6944 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
   d6d64:	e02a      	b.n	d6dbc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
      location.setLongitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
      location.rawNewLngData.negative = term[0] == 'W';
   d6d66:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d6d6a:	4253      	negs	r3, r2
   d6d6c:	4153      	adcs	r3, r2
   d6d6e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
      break;
   d6d72:	e023      	b.n	d6dbc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
      speed.set(term);
   d6d74:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d6d78:	3058      	adds	r0, #88	; 0x58
   d6d7a:	e01d      	b.n	d6db8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
      course.set(term);
   d6d7c:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d6d80:	3068      	adds	r0, #104	; 0x68
   d6d82:	e019      	b.n	d6db8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
      date.setDate(term);
   d6d84:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d6d88:	3038      	adds	r0, #56	; 0x38
   d6d8a:	f7ff fe92 	bl	d6ab2 <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d6d8e:	e015      	b.n	d6dbc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      sentenceHasFix = term[0] > '0';
   d6d90:	2b30      	cmp	r3, #48	; 0x30
   d6d92:	bf94      	ite	ls
   d6d94:	2300      	movls	r3, #0
   d6d96:	2301      	movhi	r3, #1
   d6d98:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
   d6d9c:	e00e      	b.n	d6dbc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
      satellites.set(term);
   d6d9e:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d6da2:	3088      	adds	r0, #136	; 0x88
   d6da4:	f7ff feef 	bl	d6b86 <_ZN14TinyGPSInteger3setEPKc>
      break;
   d6da8:	e008      	b.n	d6dbc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
      hdop.set(term);
   d6daa:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d6dae:	3098      	adds	r0, #152	; 0x98
   d6db0:	e002      	b.n	d6db8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
      altitude.set(term);
   d6db2:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d6db6:	3078      	adds	r0, #120	; 0x78
   d6db8:	f7ff fed3 	bl	d6b62 <_ZN14TinyGPSDecimal3setEPKc>
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d6dbc:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
    if (p->termNumber == curTermNumber)
         p->set(term);
   d6dc0:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
      altitude.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d6dc4:	b1b6      	cbz	r6, d6df4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d6dc6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d6dca:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d6dcc:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d6dce:	f002 fafd 	bl	d93cc <strcmp>
   d6dd2:	b978      	cbnz	r0, d6df4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d6dd4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d6dd6:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d6dda:	429a      	cmp	r2, r3
   d6ddc:	dc0a      	bgt.n	d6df4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
    if (p->termNumber == curTermNumber)
   d6dde:	d103      	bne.n	d6de8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x230>
         p->set(term);
   d6de0:	4639      	mov	r1, r7
   d6de2:	4630      	mov	r0, r6
   d6de4:	f7ff fee5 	bl	d6bb2 <_ZN13TinyGPSCustom3setEPKc>
      altitude.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d6de8:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d6dea:	e7eb      	b.n	d6dc4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x20c>
    else
      curSentenceType = GPS_SENTENCE_OTHER;

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d6dec:	d002      	beq.n	d6df4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
       customCandidates = NULL;
   d6dee:	2300      	movs	r3, #0
   d6df0:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    if (p->termNumber == curTermNumber)
         p->set(term);

  return false;
}
   d6df4:	4628      	mov	r0, r5
   d6df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6df8:	000d9bd8 	.word	0x000d9bd8
   d6dfc:	000d9bde 	.word	0x000d9bde

000d6e00 <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d6e00:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d6e02:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8

  switch(c)
   d6e06:	2924      	cmp	r1, #36	; 0x24
// public methods
//

bool TinyGPSPlus::encode(char c)
{
  ++encodedCharCount;
   d6e08:	f103 0301 	add.w	r3, r3, #1
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d6e0c:	4604      	mov	r4, r0
   d6e0e:	460d      	mov	r5, r1
  ++encodedCharCount;
   d6e10:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

  switch(c)
   d6e14:	d02a      	beq.n	d6e6c <_ZN11TinyGPSPlus6encodeEc+0x6c>
   d6e16:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   d6e1a:	d804      	bhi.n	d6e26 <_ZN11TinyGPSPlus6encodeEc+0x26>
   d6e1c:	290a      	cmp	r1, #10
   d6e1e:	d00c      	beq.n	d6e3a <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d6e20:	290d      	cmp	r1, #13
   d6e22:	d132      	bne.n	d6e8a <_ZN11TinyGPSPlus6encodeEc+0x8a>
   d6e24:	e009      	b.n	d6e3a <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d6e26:	292a      	cmp	r1, #42	; 0x2a
   d6e28:	d007      	beq.n	d6e3a <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d6e2a:	292c      	cmp	r1, #44	; 0x2c
   d6e2c:	d12d      	bne.n	d6e8a <_ZN11TinyGPSPlus6encodeEc+0x8a>
  {
  case ',': // term terminators
    parity ^= (uint8_t)c;
   d6e2e:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
   d6e32:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d6e36:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
  case '\r':
  case '\n':
  case '*':
    {
      bool isValidSentence = false;
      if (curTermOffset < sizeof(term))
   d6e3a:	2b0e      	cmp	r3, #14
   d6e3c:	f04f 0000 	mov.w	r0, #0
   d6e40:	d805      	bhi.n	d6e4e <_ZN11TinyGPSPlus6encodeEc+0x4e>
      {
        term[curTermOffset] = 0;
   d6e42:	4423      	add	r3, r4
   d6e44:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
   d6e48:	4620      	mov	r0, r4
   d6e4a:	f7ff feb5 	bl	d6bb8 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      }
      ++curTermNumber;
   d6e4e:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d6e52:	3301      	adds	r3, #1
   d6e54:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
   d6e58:	2300      	movs	r3, #0
   d6e5a:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
   d6e5e:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d6e62:	425d      	negs	r5, r3
   d6e64:	415d      	adcs	r5, r3
   d6e66:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
      return isValidSentence;
   d6e6a:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d6e6c:	2000      	movs	r0, #0
    parity = 0;
    curSentenceType = GPS_SENTENCE_OTHER;
   d6e6e:	2302      	movs	r3, #2
      return isValidSentence;
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d6e70:	f884 00bb 	strb.w	r0, [r4, #187]	; 0xbb
   d6e74:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
    parity = 0;
   d6e78:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
   d6e7c:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    isChecksumTerm = false;
   d6e80:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
    sentenceHasFix = false;
   d6e84:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    return false;
   d6e88:	bd38      	pop	{r3, r4, r5, pc}

  default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
   d6e8a:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d6e8c:	bf9f      	itttt	ls
   d6e8e:	1c5a      	addls	r2, r3, #1
   d6e90:	191b      	addls	r3, r3, r4
   d6e92:	f884 20bb 	strbls.w	r2, [r4, #187]	; 0xbb
   d6e96:	f883 50aa 	strbls.w	r5, [r3, #170]	; 0xaa
    if (!isChecksumTerm)
   d6e9a:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
   d6e9e:	b928      	cbnz	r0, d6eac <_ZN11TinyGPSPlus6encodeEc+0xac>
      parity ^= c;
   d6ea0:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
   d6ea4:	404d      	eors	r5, r1
   d6ea6:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
   d6eaa:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d6eac:	2000      	movs	r0, #0
  }

  return false;
}
   d6eae:	bd38      	pop	{r3, r4, r5, pc}

000d6eb0 <_GLOBAL__sub_I__ZN11TinyGPSPlusC2Ev>:
   d6eb0:	f000 b810 	b.w	d6ed4 <HAL_Pin_Map>

000d6eb4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6eb4:	b508      	push	{r3, lr}
   d6eb6:	4b02      	ldr	r3, [pc, #8]	; (d6ec0 <netdb_freeaddrinfo+0xc>)
   d6eb8:	681b      	ldr	r3, [r3, #0]
   d6eba:	689b      	ldr	r3, [r3, #8]
   d6ebc:	9301      	str	r3, [sp, #4]
   d6ebe:	bd08      	pop	{r3, pc}
   d6ec0:	00030268 	.word	0x00030268

000d6ec4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6ec4:	b508      	push	{r3, lr}
   d6ec6:	4b02      	ldr	r3, [pc, #8]	; (d6ed0 <netdb_getaddrinfo+0xc>)
   d6ec8:	681b      	ldr	r3, [r3, #0]
   d6eca:	68db      	ldr	r3, [r3, #12]
   d6ecc:	9301      	str	r3, [sp, #4]
   d6ece:	bd08      	pop	{r3, pc}
   d6ed0:	00030268 	.word	0x00030268

000d6ed4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6ed4:	b508      	push	{r3, lr}
   d6ed6:	4b02      	ldr	r3, [pc, #8]	; (d6ee0 <HAL_Pin_Map+0xc>)
   d6ed8:	681b      	ldr	r3, [r3, #0]
   d6eda:	681b      	ldr	r3, [r3, #0]
   d6edc:	9301      	str	r3, [sp, #4]
   d6ede:	bd08      	pop	{r3, pc}
   d6ee0:	0003022c 	.word	0x0003022c

000d6ee4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6ee4:	b508      	push	{r3, lr}
   d6ee6:	4b02      	ldr	r3, [pc, #8]	; (d6ef0 <HAL_Pin_Mode+0xc>)
   d6ee8:	681b      	ldr	r3, [r3, #0]
   d6eea:	689b      	ldr	r3, [r3, #8]
   d6eec:	9301      	str	r3, [sp, #4]
   d6eee:	bd08      	pop	{r3, pc}
   d6ef0:	0003022c 	.word	0x0003022c

000d6ef4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6ef4:	b508      	push	{r3, lr}
   d6ef6:	4b02      	ldr	r3, [pc, #8]	; (d6f00 <HAL_Get_Pin_Mode+0xc>)
   d6ef8:	681b      	ldr	r3, [r3, #0]
   d6efa:	68db      	ldr	r3, [r3, #12]
   d6efc:	9301      	str	r3, [sp, #4]
   d6efe:	bd08      	pop	{r3, pc}
   d6f00:	0003022c 	.word	0x0003022c

000d6f04 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6f04:	b508      	push	{r3, lr}
   d6f06:	4b02      	ldr	r3, [pc, #8]	; (d6f10 <HAL_GPIO_Write+0xc>)
   d6f08:	681b      	ldr	r3, [r3, #0]
   d6f0a:	691b      	ldr	r3, [r3, #16]
   d6f0c:	9301      	str	r3, [sp, #4]
   d6f0e:	bd08      	pop	{r3, pc}
   d6f10:	0003022c 	.word	0x0003022c

000d6f14 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6f14:	b508      	push	{r3, lr}
   d6f16:	4b02      	ldr	r3, [pc, #8]	; (d6f20 <HAL_GPIO_Read+0xc>)
   d6f18:	681b      	ldr	r3, [r3, #0]
   d6f1a:	695b      	ldr	r3, [r3, #20]
   d6f1c:	9301      	str	r3, [sp, #4]
   d6f1e:	bd08      	pop	{r3, pc}
   d6f20:	0003022c 	.word	0x0003022c

000d6f24 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d6f24:	b508      	push	{r3, lr}
   d6f26:	4b02      	ldr	r3, [pc, #8]	; (d6f30 <HAL_SPI_Begin+0xc>)
   d6f28:	681b      	ldr	r3, [r3, #0]
   d6f2a:	681b      	ldr	r3, [r3, #0]
   d6f2c:	9301      	str	r3, [sp, #4]
   d6f2e:	bd08      	pop	{r3, pc}
   d6f30:	00030230 	.word	0x00030230

000d6f34 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d6f34:	b508      	push	{r3, lr}
   d6f36:	4b02      	ldr	r3, [pc, #8]	; (d6f40 <HAL_SPI_Send_Receive_Data+0xc>)
   d6f38:	681b      	ldr	r3, [r3, #0]
   d6f3a:	695b      	ldr	r3, [r3, #20]
   d6f3c:	9301      	str	r3, [sp, #4]
   d6f3e:	bd08      	pop	{r3, pc}
   d6f40:	00030230 	.word	0x00030230

000d6f44 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6f44:	b508      	push	{r3, lr}
   d6f46:	4b02      	ldr	r3, [pc, #8]	; (d6f50 <HAL_SPI_Init+0xc>)
   d6f48:	681b      	ldr	r3, [r3, #0]
   d6f4a:	69db      	ldr	r3, [r3, #28]
   d6f4c:	9301      	str	r3, [sp, #4]
   d6f4e:	bd08      	pop	{r3, pc}
   d6f50:	00030230 	.word	0x00030230

000d6f54 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6f54:	b508      	push	{r3, lr}
   d6f56:	4b02      	ldr	r3, [pc, #8]	; (d6f60 <HAL_SPI_Is_Enabled+0xc>)
   d6f58:	681b      	ldr	r3, [r3, #0]
   d6f5a:	6a1b      	ldr	r3, [r3, #32]
   d6f5c:	9301      	str	r3, [sp, #4]
   d6f5e:	bd08      	pop	{r3, pc}
   d6f60:	00030230 	.word	0x00030230

000d6f64 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d6f64:	b508      	push	{r3, lr}
   d6f66:	4b02      	ldr	r3, [pc, #8]	; (d6f70 <HAL_SPI_Info+0xc>)
   d6f68:	681b      	ldr	r3, [r3, #0]
   d6f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6f6c:	9301      	str	r3, [sp, #4]
   d6f6e:	bd08      	pop	{r3, pc}
   d6f70:	00030230 	.word	0x00030230

000d6f74 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d6f74:	b508      	push	{r3, lr}
   d6f76:	4b02      	ldr	r3, [pc, #8]	; (d6f80 <HAL_SPI_DMA_Transfer+0xc>)
   d6f78:	681b      	ldr	r3, [r3, #0]
   d6f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6f7c:	9301      	str	r3, [sp, #4]
   d6f7e:	bd08      	pop	{r3, pc}
   d6f80:	00030230 	.word	0x00030230

000d6f84 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d6f84:	b508      	push	{r3, lr}
   d6f86:	4b02      	ldr	r3, [pc, #8]	; (d6f90 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d6f88:	681b      	ldr	r3, [r3, #0]
   d6f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6f8c:	9301      	str	r3, [sp, #4]
   d6f8e:	bd08      	pop	{r3, pc}
   d6f90:	00030230 	.word	0x00030230

000d6f94 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6f94:	b508      	push	{r3, lr}
   d6f96:	4b02      	ldr	r3, [pc, #8]	; (d6fa0 <HAL_SPI_Set_Settings+0xc>)
   d6f98:	681b      	ldr	r3, [r3, #0]
   d6f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6f9c:	9301      	str	r3, [sp, #4]
   d6f9e:	bd08      	pop	{r3, pc}
   d6fa0:	00030230 	.word	0x00030230

000d6fa4 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d6fa4:	b508      	push	{r3, lr}
   d6fa6:	4b02      	ldr	r3, [pc, #8]	; (d6fb0 <HAL_SPI_Acquire+0xc>)
   d6fa8:	681b      	ldr	r3, [r3, #0]
   d6faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6fac:	9301      	str	r3, [sp, #4]
   d6fae:	bd08      	pop	{r3, pc}
   d6fb0:	00030230 	.word	0x00030230

000d6fb4 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d6fb4:	b508      	push	{r3, lr}
   d6fb6:	4b02      	ldr	r3, [pc, #8]	; (d6fc0 <HAL_SPI_Release+0xc>)
   d6fb8:	681b      	ldr	r3, [r3, #0]
   d6fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6fbc:	9301      	str	r3, [sp, #4]
   d6fbe:	bd08      	pop	{r3, pc}
   d6fc0:	00030230 	.word	0x00030230

000d6fc4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6fc4:	b508      	push	{r3, lr}
   d6fc6:	4b02      	ldr	r3, [pc, #8]	; (d6fd0 <if_index_to_name+0xc>)
   d6fc8:	681b      	ldr	r3, [r3, #0]
   d6fca:	695b      	ldr	r3, [r3, #20]
   d6fcc:	9301      	str	r3, [sp, #4]
   d6fce:	bd08      	pop	{r3, pc}
   d6fd0:	0003026c 	.word	0x0003026c

000d6fd4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6fd4:	b508      	push	{r3, lr}
   d6fd6:	4b02      	ldr	r3, [pc, #8]	; (d6fe0 <HAL_RNG_GetRandomNumber+0xc>)
   d6fd8:	681b      	ldr	r3, [r3, #0]
   d6fda:	685b      	ldr	r3, [r3, #4]
   d6fdc:	9301      	str	r3, [sp, #4]
   d6fde:	bd08      	pop	{r3, pc}
   d6fe0:	00030218 	.word	0x00030218

000d6fe4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6fe4:	b508      	push	{r3, lr}
   d6fe6:	4b02      	ldr	r3, [pc, #8]	; (d6ff0 <HAL_Delay_Microseconds+0xc>)
   d6fe8:	681b      	ldr	r3, [r3, #0]
   d6fea:	68db      	ldr	r3, [r3, #12]
   d6fec:	9301      	str	r3, [sp, #4]
   d6fee:	bd08      	pop	{r3, pc}
   d6ff0:	00030218 	.word	0x00030218

000d6ff4 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d6ff4:	b508      	push	{r3, lr}
   d6ff6:	4b02      	ldr	r3, [pc, #8]	; (d7000 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d6ff8:	681b      	ldr	r3, [r3, #0]
   d6ffa:	691b      	ldr	r3, [r3, #16]
   d6ffc:	9301      	str	r3, [sp, #4]
   d6ffe:	bd08      	pop	{r3, pc}
   d7000:	00030218 	.word	0x00030218

000d7004 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7004:	b508      	push	{r3, lr}
   d7006:	4b02      	ldr	r3, [pc, #8]	; (d7010 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7008:	681b      	ldr	r3, [r3, #0]
   d700a:	695b      	ldr	r3, [r3, #20]
   d700c:	9301      	str	r3, [sp, #4]
   d700e:	bd08      	pop	{r3, pc}
   d7010:	00030218 	.word	0x00030218

000d7014 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d7014:	b508      	push	{r3, lr}
   d7016:	4b02      	ldr	r3, [pc, #8]	; (d7020 <os_thread_is_current+0xc>)
   d7018:	681b      	ldr	r3, [r3, #0]
   d701a:	689b      	ldr	r3, [r3, #8]
   d701c:	9301      	str	r3, [sp, #4]
   d701e:	bd08      	pop	{r3, pc}
   d7020:	00030248 	.word	0x00030248

000d7024 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7024:	b508      	push	{r3, lr}
   d7026:	4b02      	ldr	r3, [pc, #8]	; (d7030 <os_thread_yield+0xc>)
   d7028:	681b      	ldr	r3, [r3, #0]
   d702a:	68db      	ldr	r3, [r3, #12]
   d702c:	9301      	str	r3, [sp, #4]
   d702e:	bd08      	pop	{r3, pc}
   d7030:	00030248 	.word	0x00030248

000d7034 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d7034:	b508      	push	{r3, lr}
   d7036:	4b02      	ldr	r3, [pc, #8]	; (d7040 <os_thread_join+0xc>)
   d7038:	681b      	ldr	r3, [r3, #0]
   d703a:	691b      	ldr	r3, [r3, #16]
   d703c:	9301      	str	r3, [sp, #4]
   d703e:	bd08      	pop	{r3, pc}
   d7040:	00030248 	.word	0x00030248

000d7044 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d7044:	b508      	push	{r3, lr}
   d7046:	4b02      	ldr	r3, [pc, #8]	; (d7050 <os_thread_cleanup+0xc>)
   d7048:	681b      	ldr	r3, [r3, #0]
   d704a:	695b      	ldr	r3, [r3, #20]
   d704c:	9301      	str	r3, [sp, #4]
   d704e:	bd08      	pop	{r3, pc}
   d7050:	00030248 	.word	0x00030248

000d7054 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7054:	b508      	push	{r3, lr}
   d7056:	4b02      	ldr	r3, [pc, #8]	; (d7060 <os_mutex_recursive_create+0xc>)
   d7058:	681b      	ldr	r3, [r3, #0]
   d705a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d705c:	9301      	str	r3, [sp, #4]
   d705e:	bd08      	pop	{r3, pc}
   d7060:	00030248 	.word	0x00030248

000d7064 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7064:	b508      	push	{r3, lr}
   d7066:	4b02      	ldr	r3, [pc, #8]	; (d7070 <os_mutex_recursive_destroy+0xc>)
   d7068:	681b      	ldr	r3, [r3, #0]
   d706a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d706c:	9301      	str	r3, [sp, #4]
   d706e:	bd08      	pop	{r3, pc}
   d7070:	00030248 	.word	0x00030248

000d7074 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7074:	b508      	push	{r3, lr}
   d7076:	4b02      	ldr	r3, [pc, #8]	; (d7080 <inet_inet_ntop+0xc>)
   d7078:	681b      	ldr	r3, [r3, #0]
   d707a:	695b      	ldr	r3, [r3, #20]
   d707c:	9301      	str	r3, [sp, #4]
   d707e:	bd08      	pop	{r3, pc}
   d7080:	00030264 	.word	0x00030264

000d7084 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d7084:	b508      	push	{r3, lr}
   d7086:	4b02      	ldr	r3, [pc, #8]	; (d7090 <inet_htonl+0xc>)
   d7088:	681b      	ldr	r3, [r3, #0]
   d708a:	6a1b      	ldr	r3, [r3, #32]
   d708c:	9301      	str	r3, [sp, #4]
   d708e:	bd08      	pop	{r3, pc}
   d7090:	00030264 	.word	0x00030264

000d7094 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d7094:	b508      	push	{r3, lr}
   d7096:	4b02      	ldr	r3, [pc, #8]	; (d70a0 <inet_htons+0xc>)
   d7098:	681b      	ldr	r3, [r3, #0]
   d709a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d709c:	9301      	str	r3, [sp, #4]
   d709e:	bd08      	pop	{r3, pc}
   d70a0:	00030264 	.word	0x00030264

000d70a4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d70a4:	b508      	push	{r3, lr}
   d70a6:	4b02      	ldr	r3, [pc, #8]	; (d70b0 <HAL_USART_Init+0xc>)
   d70a8:	681b      	ldr	r3, [r3, #0]
   d70aa:	681b      	ldr	r3, [r3, #0]
   d70ac:	9301      	str	r3, [sp, #4]
   d70ae:	bd08      	pop	{r3, pc}
   d70b0:	0003023c 	.word	0x0003023c

000d70b4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d70b4:	b508      	push	{r3, lr}
   d70b6:	4b02      	ldr	r3, [pc, #8]	; (d70c0 <HAL_USART_Write_Data+0xc>)
   d70b8:	681b      	ldr	r3, [r3, #0]
   d70ba:	68db      	ldr	r3, [r3, #12]
   d70bc:	9301      	str	r3, [sp, #4]
   d70be:	bd08      	pop	{r3, pc}
   d70c0:	0003023c 	.word	0x0003023c

000d70c4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d70c4:	b508      	push	{r3, lr}
   d70c6:	4b02      	ldr	r3, [pc, #8]	; (d70d0 <HAL_USART_Available_Data+0xc>)
   d70c8:	681b      	ldr	r3, [r3, #0]
   d70ca:	691b      	ldr	r3, [r3, #16]
   d70cc:	9301      	str	r3, [sp, #4]
   d70ce:	bd08      	pop	{r3, pc}
   d70d0:	0003023c 	.word	0x0003023c

000d70d4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d70d4:	b508      	push	{r3, lr}
   d70d6:	4b02      	ldr	r3, [pc, #8]	; (d70e0 <HAL_USART_Read_Data+0xc>)
   d70d8:	681b      	ldr	r3, [r3, #0]
   d70da:	695b      	ldr	r3, [r3, #20]
   d70dc:	9301      	str	r3, [sp, #4]
   d70de:	bd08      	pop	{r3, pc}
   d70e0:	0003023c 	.word	0x0003023c

000d70e4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d70e4:	b508      	push	{r3, lr}
   d70e6:	4b02      	ldr	r3, [pc, #8]	; (d70f0 <HAL_USART_Peek_Data+0xc>)
   d70e8:	681b      	ldr	r3, [r3, #0]
   d70ea:	699b      	ldr	r3, [r3, #24]
   d70ec:	9301      	str	r3, [sp, #4]
   d70ee:	bd08      	pop	{r3, pc}
   d70f0:	0003023c 	.word	0x0003023c

000d70f4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d70f4:	b508      	push	{r3, lr}
   d70f6:	4b02      	ldr	r3, [pc, #8]	; (d7100 <HAL_USART_Flush_Data+0xc>)
   d70f8:	681b      	ldr	r3, [r3, #0]
   d70fa:	69db      	ldr	r3, [r3, #28]
   d70fc:	9301      	str	r3, [sp, #4]
   d70fe:	bd08      	pop	{r3, pc}
   d7100:	0003023c 	.word	0x0003023c

000d7104 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d7104:	b508      	push	{r3, lr}
   d7106:	4b02      	ldr	r3, [pc, #8]	; (d7110 <HAL_USART_Is_Enabled+0xc>)
   d7108:	681b      	ldr	r3, [r3, #0]
   d710a:	6a1b      	ldr	r3, [r3, #32]
   d710c:	9301      	str	r3, [sp, #4]
   d710e:	bd08      	pop	{r3, pc}
   d7110:	0003023c 	.word	0x0003023c

000d7114 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d7114:	b508      	push	{r3, lr}
   d7116:	4b02      	ldr	r3, [pc, #8]	; (d7120 <HAL_USART_Available_Data_For_Write+0xc>)
   d7118:	681b      	ldr	r3, [r3, #0]
   d711a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d711c:	9301      	str	r3, [sp, #4]
   d711e:	bd08      	pop	{r3, pc}
   d7120:	0003023c 	.word	0x0003023c

000d7124 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d7124:	b508      	push	{r3, lr}
   d7126:	4b02      	ldr	r3, [pc, #8]	; (d7130 <HAL_USART_BeginConfig+0xc>)
   d7128:	681b      	ldr	r3, [r3, #0]
   d712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d712c:	9301      	str	r3, [sp, #4]
   d712e:	bd08      	pop	{r3, pc}
   d7130:	0003023c 	.word	0x0003023c

000d7134 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d7134:	b508      	push	{r3, lr}
   d7136:	4b02      	ldr	r3, [pc, #8]	; (d7140 <HAL_I2C_Write_Data+0xc>)
   d7138:	681b      	ldr	r3, [r3, #0]
   d713a:	6a1b      	ldr	r3, [r3, #32]
   d713c:	9301      	str	r3, [sp, #4]
   d713e:	bd08      	pop	{r3, pc}
   d7140:	00030228 	.word	0x00030228

000d7144 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d7144:	b508      	push	{r3, lr}
   d7146:	4b02      	ldr	r3, [pc, #8]	; (d7150 <HAL_I2C_Available_Data+0xc>)
   d7148:	681b      	ldr	r3, [r3, #0]
   d714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d714c:	9301      	str	r3, [sp, #4]
   d714e:	bd08      	pop	{r3, pc}
   d7150:	00030228 	.word	0x00030228

000d7154 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d7154:	b508      	push	{r3, lr}
   d7156:	4b02      	ldr	r3, [pc, #8]	; (d7160 <HAL_I2C_Read_Data+0xc>)
   d7158:	681b      	ldr	r3, [r3, #0]
   d715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d715c:	9301      	str	r3, [sp, #4]
   d715e:	bd08      	pop	{r3, pc}
   d7160:	00030228 	.word	0x00030228

000d7164 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d7164:	b508      	push	{r3, lr}
   d7166:	4b02      	ldr	r3, [pc, #8]	; (d7170 <HAL_I2C_Peek_Data+0xc>)
   d7168:	681b      	ldr	r3, [r3, #0]
   d716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d716c:	9301      	str	r3, [sp, #4]
   d716e:	bd08      	pop	{r3, pc}
   d7170:	00030228 	.word	0x00030228

000d7174 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d7174:	b508      	push	{r3, lr}
   d7176:	4b02      	ldr	r3, [pc, #8]	; (d7180 <HAL_I2C_Flush_Data+0xc>)
   d7178:	681b      	ldr	r3, [r3, #0]
   d717a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d717c:	9301      	str	r3, [sp, #4]
   d717e:	bd08      	pop	{r3, pc}
   d7180:	00030228 	.word	0x00030228

000d7184 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d7184:	b508      	push	{r3, lr}
   d7186:	4b02      	ldr	r3, [pc, #8]	; (d7190 <HAL_I2C_Is_Enabled+0xc>)
   d7188:	681b      	ldr	r3, [r3, #0]
   d718a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d718c:	9301      	str	r3, [sp, #4]
   d718e:	bd08      	pop	{r3, pc}
   d7190:	00030228 	.word	0x00030228

000d7194 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d7194:	b508      	push	{r3, lr}
   d7196:	4b02      	ldr	r3, [pc, #8]	; (d71a0 <HAL_I2C_Init+0xc>)
   d7198:	681b      	ldr	r3, [r3, #0]
   d719a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d719c:	9301      	str	r3, [sp, #4]
   d719e:	bd08      	pop	{r3, pc}
   d71a0:	00030228 	.word	0x00030228

000d71a4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d71a4:	b508      	push	{r3, lr}
   d71a6:	4b02      	ldr	r3, [pc, #8]	; (d71b0 <sock_setsockopt+0xc>)
   d71a8:	681b      	ldr	r3, [r3, #0]
   d71aa:	699b      	ldr	r3, [r3, #24]
   d71ac:	9301      	str	r3, [sp, #4]
   d71ae:	bd08      	pop	{r3, pc}
   d71b0:	00030238 	.word	0x00030238

000d71b4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d71b4:	b508      	push	{r3, lr}
   d71b6:	4b02      	ldr	r3, [pc, #8]	; (d71c0 <sock_close+0xc>)
   d71b8:	681b      	ldr	r3, [r3, #0]
   d71ba:	69db      	ldr	r3, [r3, #28]
   d71bc:	9301      	str	r3, [sp, #4]
   d71be:	bd08      	pop	{r3, pc}
   d71c0:	00030238 	.word	0x00030238

000d71c4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d71c4:	b508      	push	{r3, lr}
   d71c6:	4b02      	ldr	r3, [pc, #8]	; (d71d0 <sock_connect+0xc>)
   d71c8:	681b      	ldr	r3, [r3, #0]
   d71ca:	6a1b      	ldr	r3, [r3, #32]
   d71cc:	9301      	str	r3, [sp, #4]
   d71ce:	bd08      	pop	{r3, pc}
   d71d0:	00030238 	.word	0x00030238

000d71d4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d71d4:	b508      	push	{r3, lr}
   d71d6:	4b02      	ldr	r3, [pc, #8]	; (d71e0 <sock_recv+0xc>)
   d71d8:	681b      	ldr	r3, [r3, #0]
   d71da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d71dc:	9301      	str	r3, [sp, #4]
   d71de:	bd08      	pop	{r3, pc}
   d71e0:	00030238 	.word	0x00030238

000d71e4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d71e4:	b508      	push	{r3, lr}
   d71e6:	4b02      	ldr	r3, [pc, #8]	; (d71f0 <sock_send+0xc>)
   d71e8:	681b      	ldr	r3, [r3, #0]
   d71ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d71ec:	9301      	str	r3, [sp, #4]
   d71ee:	bd08      	pop	{r3, pc}
   d71f0:	00030238 	.word	0x00030238

000d71f4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d71f4:	b508      	push	{r3, lr}
   d71f6:	4b02      	ldr	r3, [pc, #8]	; (d7200 <sock_socket+0xc>)
   d71f8:	681b      	ldr	r3, [r3, #0]
   d71fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d71fc:	9301      	str	r3, [sp, #4]
   d71fe:	bd08      	pop	{r3, pc}
   d7200:	00030238 	.word	0x00030238

000d7204 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7204:	b508      	push	{r3, lr}
   d7206:	4b02      	ldr	r3, [pc, #8]	; (d7210 <HAL_USB_USART_Init+0xc>)
   d7208:	681b      	ldr	r3, [r3, #0]
   d720a:	681b      	ldr	r3, [r3, #0]
   d720c:	9301      	str	r3, [sp, #4]
   d720e:	bd08      	pop	{r3, pc}
   d7210:	0003024c 	.word	0x0003024c

000d7214 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7214:	b508      	push	{r3, lr}
   d7216:	4b02      	ldr	r3, [pc, #8]	; (d7220 <HAL_USB_USART_Begin+0xc>)
   d7218:	681b      	ldr	r3, [r3, #0]
   d721a:	685b      	ldr	r3, [r3, #4]
   d721c:	9301      	str	r3, [sp, #4]
   d721e:	bd08      	pop	{r3, pc}
   d7220:	0003024c 	.word	0x0003024c

000d7224 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7224:	b508      	push	{r3, lr}
   d7226:	4b02      	ldr	r3, [pc, #8]	; (d7230 <HAL_USB_USART_Available_Data+0xc>)
   d7228:	681b      	ldr	r3, [r3, #0]
   d722a:	691b      	ldr	r3, [r3, #16]
   d722c:	9301      	str	r3, [sp, #4]
   d722e:	bd08      	pop	{r3, pc}
   d7230:	0003024c 	.word	0x0003024c

000d7234 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7234:	b508      	push	{r3, lr}
   d7236:	4b02      	ldr	r3, [pc, #8]	; (d7240 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7238:	681b      	ldr	r3, [r3, #0]
   d723a:	695b      	ldr	r3, [r3, #20]
   d723c:	9301      	str	r3, [sp, #4]
   d723e:	bd08      	pop	{r3, pc}
   d7240:	0003024c 	.word	0x0003024c

000d7244 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7244:	b508      	push	{r3, lr}
   d7246:	4b02      	ldr	r3, [pc, #8]	; (d7250 <HAL_USB_USART_Receive_Data+0xc>)
   d7248:	681b      	ldr	r3, [r3, #0]
   d724a:	699b      	ldr	r3, [r3, #24]
   d724c:	9301      	str	r3, [sp, #4]
   d724e:	bd08      	pop	{r3, pc}
   d7250:	0003024c 	.word	0x0003024c

000d7254 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7254:	b508      	push	{r3, lr}
   d7256:	4b02      	ldr	r3, [pc, #8]	; (d7260 <HAL_USB_USART_Send_Data+0xc>)
   d7258:	681b      	ldr	r3, [r3, #0]
   d725a:	69db      	ldr	r3, [r3, #28]
   d725c:	9301      	str	r3, [sp, #4]
   d725e:	bd08      	pop	{r3, pc}
   d7260:	0003024c 	.word	0x0003024c

000d7264 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7264:	b508      	push	{r3, lr}
   d7266:	4b02      	ldr	r3, [pc, #8]	; (d7270 <HAL_USB_USART_Flush_Data+0xc>)
   d7268:	681b      	ldr	r3, [r3, #0]
   d726a:	6a1b      	ldr	r3, [r3, #32]
   d726c:	9301      	str	r3, [sp, #4]
   d726e:	bd08      	pop	{r3, pc}
   d7270:	0003024c 	.word	0x0003024c

000d7274 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d7274:	b508      	push	{r3, lr}
   d7276:	4b02      	ldr	r3, [pc, #8]	; (d7280 <panic_+0xc>)
   d7278:	681b      	ldr	r3, [r3, #0]
   d727a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d727c:	9301      	str	r3, [sp, #4]
   d727e:	bd08      	pop	{r3, pc}
   d7280:	00030260 	.word	0x00030260

000d7284 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d7284:	b508      	push	{r3, lr}
   d7286:	4b02      	ldr	r3, [pc, #8]	; (d7290 <log_message+0xc>)
   d7288:	681b      	ldr	r3, [r3, #0]
   d728a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d728c:	9301      	str	r3, [sp, #4]
   d728e:	bd08      	pop	{r3, pc}
   d7290:	00030260 	.word	0x00030260

000d7294 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7294:	b508      	push	{r3, lr}
   d7296:	4b02      	ldr	r3, [pc, #8]	; (d72a0 <set_system_mode+0xc>)
   d7298:	681b      	ldr	r3, [r3, #0]
   d729a:	685b      	ldr	r3, [r3, #4]
   d729c:	9301      	str	r3, [sp, #4]
   d729e:	bd08      	pop	{r3, pc}
   d72a0:	00030220 	.word	0x00030220

000d72a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d72a4:	b508      	push	{r3, lr}
   d72a6:	4b02      	ldr	r3, [pc, #8]	; (d72b0 <system_delay_ms+0xc>)
   d72a8:	681b      	ldr	r3, [r3, #0]
   d72aa:	695b      	ldr	r3, [r3, #20]
   d72ac:	9301      	str	r3, [sp, #4]
   d72ae:	bd08      	pop	{r3, pc}
   d72b0:	00030220 	.word	0x00030220

000d72b4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d72b4:	b508      	push	{r3, lr}
   d72b6:	4b02      	ldr	r3, [pc, #8]	; (d72c0 <system_thread_set_state+0xc>)
   d72b8:	681b      	ldr	r3, [r3, #0]
   d72ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d72bc:	9301      	str	r3, [sp, #4]
   d72be:	bd08      	pop	{r3, pc}
   d72c0:	00030220 	.word	0x00030220

000d72c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d72c4:	b508      	push	{r3, lr}
   d72c6:	4b03      	ldr	r3, [pc, #12]	; (d72d4 <system_ctrl_set_app_request_handler+0x10>)
   d72c8:	681b      	ldr	r3, [r3, #0]
   d72ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d72ce:	9301      	str	r3, [sp, #4]
   d72d0:	bd08      	pop	{r3, pc}
   d72d2:	0000      	.short	0x0000
   d72d4:	00030220 	.word	0x00030220

000d72d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d72d8:	b508      	push	{r3, lr}
   d72da:	4b03      	ldr	r3, [pc, #12]	; (d72e8 <system_ctrl_set_result+0x10>)
   d72dc:	681b      	ldr	r3, [r3, #0]
   d72de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d72e2:	9301      	str	r3, [sp, #4]
   d72e4:	bd08      	pop	{r3, pc}
   d72e6:	0000      	.short	0x0000
   d72e8:	00030220 	.word	0x00030220

000d72ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d72ec:	b508      	push	{r3, lr}
   d72ee:	4b02      	ldr	r3, [pc, #8]	; (d72f8 <network_connect+0xc>)
   d72f0:	681b      	ldr	r3, [r3, #0]
   d72f2:	685b      	ldr	r3, [r3, #4]
   d72f4:	9301      	str	r3, [sp, #4]
   d72f6:	bd08      	pop	{r3, pc}
   d72f8:	00030240 	.word	0x00030240

000d72fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d72fc:	b508      	push	{r3, lr}
   d72fe:	4b02      	ldr	r3, [pc, #8]	; (d7308 <network_connecting+0xc>)
   d7300:	681b      	ldr	r3, [r3, #0]
   d7302:	689b      	ldr	r3, [r3, #8]
   d7304:	9301      	str	r3, [sp, #4]
   d7306:	bd08      	pop	{r3, pc}
   d7308:	00030240 	.word	0x00030240

000d730c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d730c:	b508      	push	{r3, lr}
   d730e:	4b02      	ldr	r3, [pc, #8]	; (d7318 <network_disconnect+0xc>)
   d7310:	681b      	ldr	r3, [r3, #0]
   d7312:	68db      	ldr	r3, [r3, #12]
   d7314:	9301      	str	r3, [sp, #4]
   d7316:	bd08      	pop	{r3, pc}
   d7318:	00030240 	.word	0x00030240

000d731c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d731c:	b508      	push	{r3, lr}
   d731e:	4b02      	ldr	r3, [pc, #8]	; (d7328 <network_ready+0xc>)
   d7320:	681b      	ldr	r3, [r3, #0]
   d7322:	691b      	ldr	r3, [r3, #16]
   d7324:	9301      	str	r3, [sp, #4]
   d7326:	bd08      	pop	{r3, pc}
   d7328:	00030240 	.word	0x00030240

000d732c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d732c:	b508      	push	{r3, lr}
   d732e:	4b02      	ldr	r3, [pc, #8]	; (d7338 <network_on+0xc>)
   d7330:	681b      	ldr	r3, [r3, #0]
   d7332:	695b      	ldr	r3, [r3, #20]
   d7334:	9301      	str	r3, [sp, #4]
   d7336:	bd08      	pop	{r3, pc}
   d7338:	00030240 	.word	0x00030240

000d733c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d733c:	b508      	push	{r3, lr}
   d733e:	4b02      	ldr	r3, [pc, #8]	; (d7348 <network_off+0xc>)
   d7340:	681b      	ldr	r3, [r3, #0]
   d7342:	699b      	ldr	r3, [r3, #24]
   d7344:	9301      	str	r3, [sp, #4]
   d7346:	bd08      	pop	{r3, pc}
   d7348:	00030240 	.word	0x00030240

000d734c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d734c:	b508      	push	{r3, lr}
   d734e:	4b02      	ldr	r3, [pc, #8]	; (d7358 <network_listen+0xc>)
   d7350:	681b      	ldr	r3, [r3, #0]
   d7352:	69db      	ldr	r3, [r3, #28]
   d7354:	9301      	str	r3, [sp, #4]
   d7356:	bd08      	pop	{r3, pc}
   d7358:	00030240 	.word	0x00030240

000d735c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d735c:	b508      	push	{r3, lr}
   d735e:	4b02      	ldr	r3, [pc, #8]	; (d7368 <network_listening+0xc>)
   d7360:	681b      	ldr	r3, [r3, #0]
   d7362:	6a1b      	ldr	r3, [r3, #32]
   d7364:	9301      	str	r3, [sp, #4]
   d7366:	bd08      	pop	{r3, pc}
   d7368:	00030240 	.word	0x00030240

000d736c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d736c:	b508      	push	{r3, lr}
   d736e:	4b02      	ldr	r3, [pc, #8]	; (d7378 <network_set_listen_timeout+0xc>)
   d7370:	681b      	ldr	r3, [r3, #0]
   d7372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7374:	9301      	str	r3, [sp, #4]
   d7376:	bd08      	pop	{r3, pc}
   d7378:	00030240 	.word	0x00030240

000d737c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d737c:	b508      	push	{r3, lr}
   d737e:	4b02      	ldr	r3, [pc, #8]	; (d7388 <network_get_listen_timeout+0xc>)
   d7380:	681b      	ldr	r3, [r3, #0]
   d7382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7384:	9301      	str	r3, [sp, #4]
   d7386:	bd08      	pop	{r3, pc}
   d7388:	00030240 	.word	0x00030240

000d738c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d738c:	b508      	push	{r3, lr}
   d738e:	4b02      	ldr	r3, [pc, #8]	; (d7398 <spark_process+0xc>)
   d7390:	681b      	ldr	r3, [r3, #0]
   d7392:	689b      	ldr	r3, [r3, #8]
   d7394:	9301      	str	r3, [sp, #4]
   d7396:	bd08      	pop	{r3, pc}
   d7398:	00030244 	.word	0x00030244

000d739c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d739c:	b508      	push	{r3, lr}
   d739e:	4b02      	ldr	r3, [pc, #8]	; (d73a8 <spark_cloud_flag_connected+0xc>)
   d73a0:	681b      	ldr	r3, [r3, #0]
   d73a2:	695b      	ldr	r3, [r3, #20]
   d73a4:	9301      	str	r3, [sp, #4]
   d73a6:	bd08      	pop	{r3, pc}
   d73a8:	00030244 	.word	0x00030244

000d73ac <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d73ac:	b508      	push	{r3, lr}
   d73ae:	4b02      	ldr	r3, [pc, #8]	; (d73b8 <spark_sync_time+0xc>)
   d73b0:	681b      	ldr	r3, [r3, #0]
   d73b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d73b4:	9301      	str	r3, [sp, #4]
   d73b6:	bd08      	pop	{r3, pc}
   d73b8:	00030244 	.word	0x00030244

000d73bc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d73bc:	b508      	push	{r3, lr}
   d73be:	4b02      	ldr	r3, [pc, #8]	; (d73c8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d73c0:	681b      	ldr	r3, [r3, #0]
   d73c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d73c4:	9301      	str	r3, [sp, #4]
   d73c6:	bd08      	pop	{r3, pc}
   d73c8:	00030244 	.word	0x00030244

000d73cc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d73cc:	b508      	push	{r3, lr}
   d73ce:	4b02      	ldr	r3, [pc, #8]	; (d73d8 <malloc+0xc>)
   d73d0:	681b      	ldr	r3, [r3, #0]
   d73d2:	681b      	ldr	r3, [r3, #0]
   d73d4:	9301      	str	r3, [sp, #4]
   d73d6:	bd08      	pop	{r3, pc}
   d73d8:	0003021c 	.word	0x0003021c

000d73dc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d73dc:	b508      	push	{r3, lr}
   d73de:	4b02      	ldr	r3, [pc, #8]	; (d73e8 <free+0xc>)
   d73e0:	681b      	ldr	r3, [r3, #0]
   d73e2:	685b      	ldr	r3, [r3, #4]
   d73e4:	9301      	str	r3, [sp, #4]
   d73e6:	bd08      	pop	{r3, pc}
   d73e8:	0003021c 	.word	0x0003021c

000d73ec <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d73ec:	b508      	push	{r3, lr}
   d73ee:	4b02      	ldr	r3, [pc, #8]	; (d73f8 <sprintf+0xc>)
   d73f0:	681b      	ldr	r3, [r3, #0]
   d73f2:	68db      	ldr	r3, [r3, #12]
   d73f4:	9301      	str	r3, [sp, #4]
   d73f6:	bd08      	pop	{r3, pc}
   d73f8:	0003021c 	.word	0x0003021c

000d73fc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d73fc:	b508      	push	{r3, lr}
   d73fe:	4b02      	ldr	r3, [pc, #8]	; (d7408 <vsnprintf+0xc>)
   d7400:	681b      	ldr	r3, [r3, #0]
   d7402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7404:	9301      	str	r3, [sp, #4]
   d7406:	bd08      	pop	{r3, pc}
   d7408:	0003021c 	.word	0x0003021c

000d740c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d740c:	b508      	push	{r3, lr}
   d740e:	4b02      	ldr	r3, [pc, #8]	; (d7418 <__errno+0xc>)
   d7410:	681b      	ldr	r3, [r3, #0]
   d7412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7414:	9301      	str	r3, [sp, #4]
   d7416:	bd08      	pop	{r3, pc}
   d7418:	0003021c 	.word	0x0003021c

000d741c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d741c:	2200      	movs	r2, #0
   d741e:	4611      	mov	r1, r2
   d7420:	6840      	ldr	r0, [r0, #4]
   d7422:	f7ff bf9b 	b.w	d735c <network_listening>

000d7426 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7426:	2200      	movs	r2, #0
   d7428:	4611      	mov	r1, r2
   d742a:	6840      	ldr	r0, [r0, #4]
   d742c:	f7ff bfa6 	b.w	d737c <network_get_listen_timeout>

000d7430 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7430:	2200      	movs	r2, #0
   d7432:	6840      	ldr	r0, [r0, #4]
   d7434:	f7ff bf9a 	b.w	d736c <network_set_listen_timeout>

000d7438 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7438:	2200      	movs	r2, #0
   d743a:	f081 0101 	eor.w	r1, r1, #1
   d743e:	6840      	ldr	r0, [r0, #4]
   d7440:	f7ff bf84 	b.w	d734c <network_listen>

000d7444 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d7444:	2300      	movs	r3, #0
   d7446:	461a      	mov	r2, r3
   d7448:	4619      	mov	r1, r3
   d744a:	6840      	ldr	r0, [r0, #4]
   d744c:	f7ff bf76 	b.w	d733c <network_off>

000d7450 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7450:	2300      	movs	r3, #0
   d7452:	461a      	mov	r2, r3
   d7454:	4619      	mov	r1, r3
   d7456:	6840      	ldr	r0, [r0, #4]
   d7458:	f7ff bf68 	b.w	d732c <network_on>

000d745c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d745c:	2200      	movs	r2, #0
   d745e:	4611      	mov	r1, r2
   d7460:	6840      	ldr	r0, [r0, #4]
   d7462:	f7ff bf5b 	b.w	d731c <network_ready>

000d7466 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7466:	2200      	movs	r2, #0
   d7468:	4611      	mov	r1, r2
   d746a:	6840      	ldr	r0, [r0, #4]
   d746c:	f7ff bf46 	b.w	d72fc <network_connecting>

000d7470 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7470:	2200      	movs	r2, #0
   d7472:	2102      	movs	r1, #2
   d7474:	6840      	ldr	r0, [r0, #4]
   d7476:	f7ff bf49 	b.w	d730c <network_disconnect>

000d747a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d747a:	2300      	movs	r3, #0
   d747c:	461a      	mov	r2, r3
   d747e:	6840      	ldr	r0, [r0, #4]
   d7480:	f7ff bf34 	b.w	d72ec <network_connect>

000d7484 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7484:	4b02      	ldr	r3, [pc, #8]	; (d7490 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7486:	2203      	movs	r2, #3
   d7488:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d748a:	4a02      	ldr	r2, [pc, #8]	; (d7494 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d748c:	601a      	str	r2, [r3, #0]
   d748e:	4770      	bx	lr
   d7490:	2003e3dc 	.word	0x2003e3dc
   d7494:	000d9c10 	.word	0x000d9c10

000d7498 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d7498:	2100      	movs	r1, #0
   d749a:	f7ff bd83 	b.w	d6fa4 <HAL_SPI_Acquire>

000d749e <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d749e:	2100      	movs	r1, #0
   d74a0:	f7ff bd88 	b.w	d6fb4 <HAL_SPI_Release>

000d74a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d74a4:	b510      	push	{r4, lr}
   d74a6:	4604      	mov	r4, r0
{
    _spi = spi;
   d74a8:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d74aa:	4608      	mov	r0, r1
   d74ac:	f7ff fd4a 	bl	d6f44 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d74b0:	2300      	movs	r3, #0
   d74b2:	6063      	str	r3, [r4, #4]
}
   d74b4:	4620      	mov	r0, r4
   d74b6:	bd10      	pop	{r4, pc}

000d74b8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d74b8:	b510      	push	{r4, lr}
   d74ba:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d74bc:	7800      	ldrb	r0, [r0, #0]
   d74be:	f7ff ffeb 	bl	d7498 <_ZN8SPIClass4lockEv.isra.0>
   d74c2:	b948      	cbnz	r0, d74d8 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d74c4:	7820      	ldrb	r0, [r4, #0]
   d74c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d74ca:	f7ff fd2b 	bl	d6f24 <HAL_SPI_Begin>
        unlock();
   d74ce:	7820      	ldrb	r0, [r4, #0]
    }
}
   d74d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d74d4:	f7ff bfe3 	b.w	d749e <_ZN8SPIClass6unlockEv.isra.1>
   d74d8:	bd10      	pop	{r4, pc}

000d74da <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d74da:	7800      	ldrb	r0, [r0, #0]
   d74dc:	f7ff bfdf 	b.w	d749e <_ZN8SPIClass6unlockEv.isra.1>

000d74e0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d74e0:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d74e2:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d74e4:	6018      	str	r0, [r3, #0]
   d74e6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d74e8:	6818      	ldr	r0, [r3, #0]
   d74ea:	4288      	cmp	r0, r1
   d74ec:	b2e5      	uxtb	r5, r4
   d74ee:	d906      	bls.n	d74fe <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d74f0:	3401      	adds	r4, #1
   d74f2:	2c08      	cmp	r4, #8
   d74f4:	d002      	beq.n	d74fc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d74f6:	0840      	lsrs	r0, r0, #1
   d74f8:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d74fa:	e7f5      	b.n	d74e8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d74fc:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d74fe:	4b02      	ldr	r3, [pc, #8]	; (d7508 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d7500:	5d5b      	ldrb	r3, [r3, r5]
   d7502:	7013      	strb	r3, [r2, #0]
   d7504:	bd30      	pop	{r4, r5, pc}
   d7506:	bf00      	nop
   d7508:	000d9c3c 	.word	0x000d9c3c

000d750c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d750c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7510:	4607      	mov	r7, r0
   d7512:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d7514:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d7516:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d7518:	f7ff ffbe 	bl	d7498 <_ZN8SPIClass4lockEv.isra.0>
   d751c:	2800      	cmp	r0, #0
   d751e:	db62      	blt.n	d75e6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d7520:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d7522:	2214      	movs	r2, #20
   d7524:	2100      	movs	r1, #0
   d7526:	a809      	add	r0, sp, #36	; 0x24
   d7528:	f001 fee5 	bl	d92f6 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d752c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d752e:	4620      	mov	r0, r4
   d7530:	2200      	movs	r2, #0
   d7532:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d7534:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d7538:	f7ff fd14 	bl	d6f64 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d753c:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d7540:	b154      	cbz	r4, d7558 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d7542:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d7546:	b935      	cbnz	r5, d7556 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d7548:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d754c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d7550:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d7554:	e003      	b.n	d755e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d7556:	2400      	movs	r4, #0
   d7558:	46a1      	mov	r9, r4
   d755a:	46a0      	mov	r8, r4
   d755c:	2501      	movs	r5, #1
   d755e:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7560:	b105      	cbz	r5, d7564 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d7562:	b9bb      	cbnz	r3, d7594 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d7564:	429d      	cmp	r5, r3
   d7566:	d10b      	bne.n	d7580 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d7568:	68b2      	ldr	r2, [r6, #8]
   d756a:	4542      	cmp	r2, r8
   d756c:	d108      	bne.n	d7580 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d756e:	f88d 9020 	strb.w	r9, [sp, #32]
   d7572:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d7576:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d757a:	89b2      	ldrh	r2, [r6, #12]
   d757c:	4291      	cmp	r1, r2
   d757e:	d009      	beq.n	d7594 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d7580:	b153      	cbz	r3, d7598 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d7582:	2400      	movs	r4, #0
   d7584:	7838      	ldrb	r0, [r7, #0]
   d7586:	9401      	str	r4, [sp, #4]
   d7588:	9400      	str	r4, [sp, #0]
   d758a:	4623      	mov	r3, r4
   d758c:	4622      	mov	r2, r4
   d758e:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d7590:	f7ff fd00 	bl	d6f94 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d7594:	2000      	movs	r0, #0
   d7596:	e026      	b.n	d75e6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d7598:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d759c:	68b1      	ldr	r1, [r6, #8]
   d759e:	980a      	ldr	r0, [sp, #40]	; 0x28
   d75a0:	ab04      	add	r3, sp, #16
   d75a2:	f10d 020f 	add.w	r2, sp, #15
   d75a6:	f7ff ff9b 	bl	d74e0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d75aa:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d75ac:	b105      	cbz	r5, d75b0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d75ae:	b9b1      	cbnz	r1, d75de <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d75b0:	42a9      	cmp	r1, r5
   d75b2:	d008      	beq.n	d75c6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d75b4:	2400      	movs	r4, #0
   d75b6:	7838      	ldrb	r0, [r7, #0]
   d75b8:	9401      	str	r4, [sp, #4]
   d75ba:	7b74      	ldrb	r4, [r6, #13]
   d75bc:	7b33      	ldrb	r3, [r6, #12]
   d75be:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d75c2:	9400      	str	r4, [sp, #0]
   d75c4:	e7e4      	b.n	d7590 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d75c6:	68b3      	ldr	r3, [r6, #8]
   d75c8:	4543      	cmp	r3, r8
   d75ca:	d3f3      	bcc.n	d75b4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d75cc:	f88d 9020 	strb.w	r9, [sp, #32]
   d75d0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d75d4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d75d8:	89b3      	ldrh	r3, [r6, #12]
   d75da:	429a      	cmp	r2, r3
   d75dc:	d1ea      	bne.n	d75b4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d75de:	9b04      	ldr	r3, [sp, #16]
   d75e0:	4543      	cmp	r3, r8
   d75e2:	d1e7      	bne.n	d75b4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d75e4:	e7d6      	b.n	d7594 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d75e6:	b00f      	add	sp, #60	; 0x3c
   d75e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d75ec <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d75ec:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d75ee:	7800      	ldrb	r0, [r0, #0]
   d75f0:	f7ff fca0 	bl	d6f34 <HAL_SPI_Send_Receive_Data>
}
   d75f4:	b2c0      	uxtb	r0, r0
   d75f6:	bd08      	pop	{r3, pc}

000d75f8 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d75f8:	b530      	push	{r4, r5, lr}
   d75fa:	b087      	sub	sp, #28
   d75fc:	4604      	mov	r4, r0
   d75fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d7600:	7800      	ldrb	r0, [r0, #0]
   d7602:	9500      	str	r5, [sp, #0]
   d7604:	f7ff fcb6 	bl	d6f74 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d7608:	b93d      	cbnz	r5, d761a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d760a:	a902      	add	r1, sp, #8
   d760c:	7820      	ldrb	r0, [r4, #0]
   d760e:	f7ff fcb9 	bl	d6f84 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d7612:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d7616:	07db      	lsls	r3, r3, #31
   d7618:	d4f7      	bmi.n	d760a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d761a:	b007      	add	sp, #28
   d761c:	bd30      	pop	{r4, r5, pc}

000d761e <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d761e:	7800      	ldrb	r0, [r0, #0]
   d7620:	f7ff bc98 	b.w	d6f54 <HAL_SPI_Is_Enabled>

000d7624 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7624:	b510      	push	{r4, lr}
   d7626:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7628:	6800      	ldr	r0, [r0, #0]
   d762a:	b118      	cbz	r0, d7634 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d762c:	f7ff fed6 	bl	d73dc <free>
            wakeupSource_ = nullptr;
   d7630:	2300      	movs	r3, #0
   d7632:	6023      	str	r3, [r4, #0]
   d7634:	bd10      	pop	{r4, pc}

000d7636 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7636:	b510      	push	{r4, lr}
   d7638:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d763a:	f7ff fff3 	bl	d7624 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d763e:	4620      	mov	r0, r4
   d7640:	bd10      	pop	{r4, pc}
	...

000d7644 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7644:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7646:	4c09      	ldr	r4, [pc, #36]	; (d766c <_GLOBAL__sub_I_System+0x28>)
   d7648:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d764a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d764e:	6020      	str	r0, [r4, #0]
   d7650:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7652:	71a0      	strb	r0, [r4, #6]
   d7654:	8120      	strh	r0, [r4, #8]
   d7656:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7658:	f7ff fe1c 	bl	d7294 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d765c:	4620      	mov	r0, r4
   d765e:	4a04      	ldr	r2, [pc, #16]	; (d7670 <_GLOBAL__sub_I_System+0x2c>)
   d7660:	4904      	ldr	r1, [pc, #16]	; (d7674 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7666:	f001 b87b 	b.w	d8760 <__aeabi_atexit>
   d766a:	bf00      	nop
   d766c:	2003e3e4 	.word	0x2003e3e4
   d7670:	2003dce8 	.word	0x2003dce8
   d7674:	000d7637 	.word	0x000d7637

000d7678 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d7678:	b510      	push	{r4, lr}
   d767a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d767c:	6800      	ldr	r0, [r0, #0]
   d767e:	b108      	cbz	r0, d7684 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7680:	f7ff fcf0 	bl	d7064 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d7684:	4620      	mov	r0, r4
   d7686:	bd10      	pop	{r4, pc}

000d7688 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7688:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d768a:	4c06      	ldr	r4, [pc, #24]	; (d76a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d768c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d768e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7690:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7692:	f7ff fcdf 	bl	d7054 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7696:	4620      	mov	r0, r4
   d7698:	4a03      	ldr	r2, [pc, #12]	; (d76a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d769a:	4904      	ldr	r1, [pc, #16]	; (d76ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d769c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d76a0:	f001 b85e 	b.w	d8760 <__aeabi_atexit>
   d76a4:	2003e3f0 	.word	0x2003e3f0
   d76a8:	2003dce8 	.word	0x2003dce8
   d76ac:	000d7679 	.word	0x000d7679

000d76b0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d76b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d76b2:	4606      	mov	r6, r0
   d76b4:	460d      	mov	r5, r1
   d76b6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d76b8:	2400      	movs	r4, #0
  while (size--) {
   d76ba:	42bd      	cmp	r5, r7
   d76bc:	d00c      	beq.n	d76d8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d76be:	6833      	ldr	r3, [r6, #0]
   d76c0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d76c4:	689b      	ldr	r3, [r3, #8]
   d76c6:	4630      	mov	r0, r6
   d76c8:	4798      	blx	r3
     if (chunk>=0)
   d76ca:	2800      	cmp	r0, #0
   d76cc:	db01      	blt.n	d76d2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d76ce:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d76d0:	e7f3      	b.n	d76ba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d76d2:	2c00      	cmp	r4, #0
   d76d4:	bf08      	it	eq
   d76d6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d76d8:	4620      	mov	r0, r4
   d76da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d76dc <_ZN5Print5printEPKc>:
   d76dc:	b508      	push	{r3, lr}
   d76de:	f7fe fc0b 	bl	d5ef8 <_ZN5Print5writeEPKc>
   d76e2:	bd08      	pop	{r3, pc}

000d76e4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d76e4:	6803      	ldr	r3, [r0, #0]
   d76e6:	689b      	ldr	r3, [r3, #8]
   d76e8:	4718      	bx	r3

000d76ea <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d76ea:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d76ec:	f7fe fc04 	bl	d5ef8 <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
   d76f0:	bd08      	pop	{r3, pc}

000d76f2 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d76f2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d76f4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d76f6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d76f8:	f7ff fff4 	bl	d76e4 <_ZN5Print5printEc>
  n += print('\n');
   d76fc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d76fe:	4604      	mov	r4, r0
  n += print('\n');
   d7700:	4628      	mov	r0, r5
   d7702:	f7ff ffef 	bl	d76e4 <_ZN5Print5printEc>
  return n;
}
   d7706:	4420      	add	r0, r4
   d7708:	bd38      	pop	{r3, r4, r5, pc}

000d770a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d770a:	b538      	push	{r3, r4, r5, lr}
   d770c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d770e:	f7fe fbf3 	bl	d5ef8 <_ZN5Print5writeEPKc>
   d7712:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d7714:	4628      	mov	r0, r5
   d7716:	f7ff ffec 	bl	d76f2 <_ZN5Print7printlnEv>
  return n;
}
   d771a:	4420      	add	r0, r4
   d771c:	bd38      	pop	{r3, r4, r5, pc}

000d771e <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d771e:	f7ff bff4 	b.w	d770a <_ZN5Print7printlnEPKc>

000d7722 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7722:	b530      	push	{r4, r5, lr}
   d7724:	b08b      	sub	sp, #44	; 0x2c
   d7726:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7728:	2100      	movs	r1, #0
   d772a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d772e:	2a01      	cmp	r2, #1
   d7730:	bf98      	it	ls
   d7732:	220a      	movls	r2, #10
   d7734:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7738:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d773c:	fb05 3312 	mls	r3, r5, r2, r3
   d7740:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7744:	2b09      	cmp	r3, #9
   d7746:	bf94      	ite	ls
   d7748:	3330      	addls	r3, #48	; 0x30
   d774a:	3337      	addhi	r3, #55	; 0x37
   d774c:	b2db      	uxtb	r3, r3
   d774e:	4621      	mov	r1, r4
   d7750:	f804 3901 	strb.w	r3, [r4], #-1
   d7754:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d7756:	2d00      	cmp	r5, #0
   d7758:	d1ee      	bne.n	d7738 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d775a:	f7fe fbcd 	bl	d5ef8 <_ZN5Print5writeEPKc>
}
   d775e:	b00b      	add	sp, #44	; 0x2c
   d7760:	bd30      	pop	{r4, r5, pc}

000d7762 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7762:	b40c      	push	{r2, r3}
   d7764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7768:	b087      	sub	sp, #28
   d776a:	af00      	add	r7, sp, #0
   d776c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7770:	4605      	mov	r5, r0
   d7772:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7776:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7778:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d777a:	4623      	mov	r3, r4
   d777c:	464a      	mov	r2, r9
   d777e:	2114      	movs	r1, #20
   d7780:	1d38      	adds	r0, r7, #4
   d7782:	f7ff fe3b 	bl	d73fc <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7786:	2813      	cmp	r0, #19
   d7788:	d805      	bhi.n	d7796 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d778a:	1d39      	adds	r1, r7, #4
   d778c:	4628      	mov	r0, r5
   d778e:	f7fe fbb3 	bl	d5ef8 <_ZN5Print5writeEPKc>
   d7792:	4604      	mov	r4, r0
   d7794:	e013      	b.n	d77be <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7796:	f100 0308 	add.w	r3, r0, #8
   d779a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d779e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d77a0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d77a4:	1c41      	adds	r1, r0, #1
   d77a6:	4623      	mov	r3, r4
   d77a8:	464a      	mov	r2, r9
   d77aa:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d77ac:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d77ae:	f7ff fe25 	bl	d73fc <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d77b2:	4669      	mov	r1, sp
   d77b4:	4628      	mov	r0, r5
   d77b6:	f7fe fb9f 	bl	d5ef8 <_ZN5Print5writeEPKc>
   d77ba:	4604      	mov	r4, r0
   d77bc:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d77be:	b11e      	cbz	r6, d77c8 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d77c0:	4628      	mov	r0, r5
   d77c2:	f7ff ff96 	bl	d76f2 <_ZN5Print7printlnEv>
   d77c6:	4404      	add	r4, r0
    return n;
}
   d77c8:	4620      	mov	r0, r4
   d77ca:	371c      	adds	r7, #28
   d77cc:	46bd      	mov	sp, r7
   d77ce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d77d2:	b002      	add	sp, #8
   d77d4:	4770      	bx	lr
	...

000d77d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d77d8:	4b01      	ldr	r3, [pc, #4]	; (d77e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d77da:	4a02      	ldr	r2, [pc, #8]	; (d77e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d77dc:	601a      	str	r2, [r3, #0]
   d77de:	4770      	bx	lr
   d77e0:	2003e3f4 	.word	0x2003e3f4
   d77e4:	000d9cb7 	.word	0x000d9cb7

000d77e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d77e8:	4b02      	ldr	r3, [pc, #8]	; (d77f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d77ea:	681a      	ldr	r2, [r3, #0]
   d77ec:	4b02      	ldr	r3, [pc, #8]	; (d77f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d77ee:	601a      	str	r2, [r3, #0]
   d77f0:	4770      	bx	lr
   d77f2:	bf00      	nop
   d77f4:	2003dc7c 	.word	0x2003dc7c
   d77f8:	2003e3f8 	.word	0x2003e3f8

000d77fc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d77fc:	2100      	movs	r1, #0
   d77fe:	f7ff bd51 	b.w	d72a4 <system_delay_ms>

000d7802 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7802:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d7804:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7806:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d7808:	b113      	cbz	r3, d7810 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d780a:	2203      	movs	r2, #3
   d780c:	4601      	mov	r1, r0
   d780e:	4798      	blx	r3
    }
   d7810:	4620      	mov	r0, r4
   d7812:	bd10      	pop	{r4, pc}

000d7814 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7814:	b510      	push	{r4, lr}
   d7816:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7818:	f7ff fff3 	bl	d7802 <_ZNSt14_Function_baseD1Ev>
   d781c:	4620      	mov	r0, r4
   d781e:	bd10      	pop	{r4, pc}

000d7820 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7820:	4803      	ldr	r0, [pc, #12]	; (d7830 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7822:	4a04      	ldr	r2, [pc, #16]	; (d7834 <_GLOBAL__sub_I_RGB+0x14>)
   d7824:	4904      	ldr	r1, [pc, #16]	; (d7838 <_GLOBAL__sub_I_RGB+0x18>)
   d7826:	2300      	movs	r3, #0
   d7828:	6083      	str	r3, [r0, #8]
   d782a:	f000 bf99 	b.w	d8760 <__aeabi_atexit>
   d782e:	bf00      	nop
   d7830:	2003e3fc 	.word	0x2003e3fc
   d7834:	2003dce8 	.word	0x2003dce8
   d7838:	000d7815 	.word	0x000d7815

000d783c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d783c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d783e:	4b0c      	ldr	r3, [pc, #48]	; (d7870 <serialEventRun+0x34>)
   d7840:	b133      	cbz	r3, d7850 <serialEventRun+0x14>
   d7842:	f000 f96d 	bl	d7b20 <_Z16_fetch_usbserialv>
   d7846:	6803      	ldr	r3, [r0, #0]
   d7848:	691b      	ldr	r3, [r3, #16]
   d784a:	4798      	blx	r3
   d784c:	2800      	cmp	r0, #0
   d784e:	dc09      	bgt.n	d7864 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7850:	4b08      	ldr	r3, [pc, #32]	; (d7874 <serialEventRun+0x38>)
   d7852:	b163      	cbz	r3, d786e <serialEventRun+0x32>
   d7854:	f000 f9ec 	bl	d7c30 <_Z22__fetch_global_Serial1v>
   d7858:	6803      	ldr	r3, [r0, #0]
   d785a:	691b      	ldr	r3, [r3, #16]
   d785c:	4798      	blx	r3
   d785e:	2800      	cmp	r0, #0
   d7860:	dc03      	bgt.n	d786a <serialEventRun+0x2e>
   d7862:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7864:	f3af 8000 	nop.w
   d7868:	e7f2      	b.n	d7850 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d786a:	f3af 8000 	nop.w
   d786e:	bd08      	pop	{r3, pc}
	...

000d7878 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7878:	b508      	push	{r3, lr}
	serialEventRun();
   d787a:	f7ff ffdf 	bl	d783c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d787e:	f7ff fbc1 	bl	d7004 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7882:	4b01      	ldr	r3, [pc, #4]	; (d7888 <_post_loop+0x10>)
   d7884:	6018      	str	r0, [r3, #0]
   d7886:	bd08      	pop	{r3, pc}
   d7888:	2003e730 	.word	0x2003e730

000d788c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d788c:	4802      	ldr	r0, [pc, #8]	; (d7898 <_Z33system_initialize_user_backup_ramv+0xc>)
   d788e:	4a03      	ldr	r2, [pc, #12]	; (d789c <_Z33system_initialize_user_backup_ramv+0x10>)
   d7890:	4903      	ldr	r1, [pc, #12]	; (d78a0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7892:	1a12      	subs	r2, r2, r0
   d7894:	f001 bd09 	b.w	d92aa <memcpy>
   d7898:	2003f400 	.word	0x2003f400
   d789c:	2003f404 	.word	0x2003f404
   d78a0:	000da0f0 	.word	0x000da0f0

000d78a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d78a4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d78a6:	2300      	movs	r3, #0
   d78a8:	9300      	str	r3, [sp, #0]
   d78aa:	461a      	mov	r2, r3
   d78ac:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d78b0:	f7ff fd12 	bl	d72d8 <system_ctrl_set_result>
}
   d78b4:	b003      	add	sp, #12
   d78b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d78bc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d78bc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d78be:	8843      	ldrh	r3, [r0, #2]
   d78c0:	2b0a      	cmp	r3, #10
   d78c2:	d008      	beq.n	d78d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d78c4:	2b50      	cmp	r3, #80	; 0x50
   d78c6:	d109      	bne.n	d78dc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d78c8:	4b09      	ldr	r3, [pc, #36]	; (d78f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d78ca:	681b      	ldr	r3, [r3, #0]
   d78cc:	b13b      	cbz	r3, d78de <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d78ce:	b003      	add	sp, #12
   d78d0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d78d4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d78d6:	f7ff ffe5 	bl	d78a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d78da:	e006      	b.n	d78ea <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d78dc:	2300      	movs	r3, #0
   d78de:	9300      	str	r3, [sp, #0]
   d78e0:	461a      	mov	r2, r3
   d78e2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d78e6:	f7ff fcf7 	bl	d72d8 <system_ctrl_set_result>
        break;
    }
}
   d78ea:	b003      	add	sp, #12
   d78ec:	f85d fb04 	ldr.w	pc, [sp], #4
   d78f0:	2003e40c 	.word	0x2003e40c

000d78f4 <module_user_init_hook>:

void module_user_init_hook()
{
   d78f4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d78f6:	4c10      	ldr	r4, [pc, #64]	; (d7938 <module_user_init_hook+0x44>)
   d78f8:	4d10      	ldr	r5, [pc, #64]	; (d793c <module_user_init_hook+0x48>)
   d78fa:	6823      	ldr	r3, [r4, #0]
   d78fc:	42ab      	cmp	r3, r5
   d78fe:	4b10      	ldr	r3, [pc, #64]	; (d7940 <module_user_init_hook+0x4c>)
   d7900:	bf0c      	ite	eq
   d7902:	2201      	moveq	r2, #1
   d7904:	2200      	movne	r2, #0
   d7906:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7908:	d002      	beq.n	d7910 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d790a:	f7ff ffbf 	bl	d788c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d790e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7910:	f7ff fb60 	bl	d6fd4 <HAL_RNG_GetRandomNumber>
   d7914:	4604      	mov	r4, r0
    srand(seed);
   d7916:	f001 fcf7 	bl	d9308 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d791a:	4b0a      	ldr	r3, [pc, #40]	; (d7944 <module_user_init_hook+0x50>)
   d791c:	b113      	cbz	r3, d7924 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d791e:	4620      	mov	r0, r4
   d7920:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7924:	2100      	movs	r1, #0
   d7926:	4807      	ldr	r0, [pc, #28]	; (d7944 <module_user_init_hook+0x50>)
   d7928:	f7ff fd48 	bl	d73bc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d792c:	2100      	movs	r1, #0
   d792e:	4806      	ldr	r0, [pc, #24]	; (d7948 <module_user_init_hook+0x54>)
}
   d7930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7934:	f7ff bcc6 	b.w	d72c4 <system_ctrl_set_app_request_handler>
   d7938:	2003f400 	.word	0x2003f400
   d793c:	9a271c1e 	.word	0x9a271c1e
   d7940:	2003e410 	.word	0x2003e410
   d7944:	00000000 	.word	0x00000000
   d7948:	000d78bd 	.word	0x000d78bd

000d794c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d794c:	4770      	bx	lr

000d794e <_ZN9IPAddressD0Ev>:
   d794e:	b510      	push	{r4, lr}
   d7950:	2118      	movs	r1, #24
   d7952:	4604      	mov	r4, r0
   d7954:	f000 ff12 	bl	d877c <_ZdlPvj>
   d7958:	4620      	mov	r0, r4
   d795a:	bd10      	pop	{r4, pc}

000d795c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d795c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d795e:	7d03      	ldrb	r3, [r0, #20]
   d7960:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7962:	b08d      	sub	sp, #52	; 0x34
   d7964:	460e      	mov	r6, r1
   d7966:	f100 0704 	add.w	r7, r0, #4
   d796a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d796e:	d002      	beq.n	d7976 <_ZNK9IPAddress7printToER5Print+0x1a>
   d7970:	f100 0508 	add.w	r5, r0, #8
   d7974:	e018      	b.n	d79a8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7976:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7978:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d797a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d797e:	232f      	movs	r3, #47	; 0x2f
   d7980:	462a      	mov	r2, r5
   d7982:	200a      	movs	r0, #10
   d7984:	f7ff fb76 	bl	d7074 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7988:	4628      	mov	r0, r5
   d798a:	f001 fd31 	bl	d93f0 <strlen>
   d798e:	6833      	ldr	r3, [r6, #0]
   d7990:	4602      	mov	r2, r0
   d7992:	68db      	ldr	r3, [r3, #12]
   d7994:	4629      	mov	r1, r5
   d7996:	4630      	mov	r0, r6
   d7998:	4798      	blx	r3
   d799a:	e00f      	b.n	d79bc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d799c:	b124      	cbz	r4, d79a8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d799e:	212e      	movs	r1, #46	; 0x2e
   d79a0:	4630      	mov	r0, r6
   d79a2:	f7ff fe9f 	bl	d76e4 <_ZN5Print5printEc>
   d79a6:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d79a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d79ac:	220a      	movs	r2, #10
   d79ae:	4630      	mov	r0, r6
   d79b0:	f7ff feb7 	bl	d7722 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d79b4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d79b6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d79b8:	d1f0      	bne.n	d799c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d79ba:	4620      	mov	r0, r4
    }
    return n;
}
   d79bc:	b00d      	add	sp, #52	; 0x34
   d79be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d79c0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d79c0:	b510      	push	{r4, lr}
   d79c2:	4b05      	ldr	r3, [pc, #20]	; (d79d8 <_ZN9IPAddressC1Ev+0x18>)
   d79c4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d79c6:	2211      	movs	r2, #17
   d79c8:	f840 3b04 	str.w	r3, [r0], #4
   d79cc:	2100      	movs	r1, #0
   d79ce:	f001 fc92 	bl	d92f6 <memset>
{
    clear();
}
   d79d2:	4620      	mov	r0, r4
   d79d4:	bd10      	pop	{r4, pc}
   d79d6:	bf00      	nop
   d79d8:	000d9d48 	.word	0x000d9d48

000d79dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d79dc:	4603      	mov	r3, r0
   d79de:	4a07      	ldr	r2, [pc, #28]	; (d79fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d79e0:	b510      	push	{r4, lr}
   d79e2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d79e6:	f101 0210 	add.w	r2, r1, #16
   d79ea:	f851 4b04 	ldr.w	r4, [r1], #4
   d79ee:	f843 4b04 	str.w	r4, [r3], #4
   d79f2:	4291      	cmp	r1, r2
   d79f4:	d1f9      	bne.n	d79ea <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d79f6:	780a      	ldrb	r2, [r1, #0]
   d79f8:	701a      	strb	r2, [r3, #0]
}
   d79fa:	bd10      	pop	{r4, pc}
   d79fc:	000d9d48 	.word	0x000d9d48

000d7a00 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d7a00:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d7a02:	2b04      	cmp	r3, #4
   d7a04:	d101      	bne.n	d7a0a <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d7a06:	6840      	ldr	r0, [r0, #4]
   d7a08:	e008      	b.n	d7a1c <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d7a0a:	2b06      	cmp	r3, #6
   d7a0c:	d10a      	bne.n	d7a24 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7a0e:	6843      	ldr	r3, [r0, #4]
   d7a10:	b953      	cbnz	r3, d7a28 <_ZNK9IPAddresscvbEv+0x28>
   d7a12:	6883      	ldr	r3, [r0, #8]
   d7a14:	b943      	cbnz	r3, d7a28 <_ZNK9IPAddresscvbEv+0x28>
   d7a16:	68c3      	ldr	r3, [r0, #12]
   d7a18:	b933      	cbnz	r3, d7a28 <_ZNK9IPAddresscvbEv+0x28>
   d7a1a:	6900      	ldr	r0, [r0, #16]
   d7a1c:	3000      	adds	r0, #0
   d7a1e:	bf18      	it	ne
   d7a20:	2001      	movne	r0, #1
   d7a22:	4770      	bx	lr
    } else {
        return false;
   d7a24:	2000      	movs	r0, #0
   d7a26:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7a28:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d7a2a:	4770      	bx	lr

000d7a2c <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7a2c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7a2e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7a32:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7a36:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7a3a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d7a3e:	2304      	movs	r3, #4
   d7a40:	6041      	str	r1, [r0, #4]
   d7a42:	7503      	strb	r3, [r0, #20]
   d7a44:	bd10      	pop	{r4, pc}

000d7a46 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7a46:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7a48:	780d      	ldrb	r5, [r1, #0]
   d7a4a:	788b      	ldrb	r3, [r1, #2]
   d7a4c:	784a      	ldrb	r2, [r1, #1]
   d7a4e:	78c9      	ldrb	r1, [r1, #3]
   d7a50:	9100      	str	r1, [sp, #0]
   d7a52:	4629      	mov	r1, r5
   d7a54:	f7ff ffea 	bl	d7a2c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7a58:	b003      	add	sp, #12
   d7a5a:	bd30      	pop	{r4, r5, pc}

000d7a5c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7a5c:	7441      	strb	r1, [r0, #17]
   d7a5e:	4770      	bx	lr

000d7a60 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7a60:	4770      	bx	lr

000d7a62 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7a62:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7a64:	2100      	movs	r1, #0
   d7a66:	7c00      	ldrb	r0, [r0, #16]
   d7a68:	f7ff fbec 	bl	d7244 <HAL_USB_USART_Receive_Data>
}
   d7a6c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7a70:	bf28      	it	cs
   d7a72:	f04f 30ff 	movcs.w	r0, #4294967295
   d7a76:	bd08      	pop	{r3, pc}

000d7a78 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7a78:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7a7a:	2101      	movs	r1, #1
   d7a7c:	7c00      	ldrb	r0, [r0, #16]
   d7a7e:	f7ff fbe1 	bl	d7244 <HAL_USB_USART_Receive_Data>
}
   d7a82:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7a86:	bf28      	it	cs
   d7a88:	f04f 30ff 	movcs.w	r0, #4294967295
   d7a8c:	bd08      	pop	{r3, pc}

000d7a8e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7a8e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7a90:	7c00      	ldrb	r0, [r0, #16]
   d7a92:	f7ff fbcf 	bl	d7234 <HAL_USB_USART_Available_Data_For_Write>
}
   d7a96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a9a:	bd08      	pop	{r3, pc}

000d7a9c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7a9c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7a9e:	7c00      	ldrb	r0, [r0, #16]
   d7aa0:	f7ff fbc0 	bl	d7224 <HAL_USB_USART_Available_Data>
}
   d7aa4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7aa8:	bd08      	pop	{r3, pc}

000d7aaa <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7aaa:	7c00      	ldrb	r0, [r0, #16]
   d7aac:	f7ff bbda 	b.w	d7264 <HAL_USB_USART_Flush_Data>

000d7ab0 <_ZN9USBSerialD0Ev>:
   d7ab0:	b510      	push	{r4, lr}
   d7ab2:	2114      	movs	r1, #20
   d7ab4:	4604      	mov	r4, r0
   d7ab6:	f000 fe61 	bl	d877c <_ZdlPvj>
   d7aba:	4620      	mov	r0, r4
   d7abc:	bd10      	pop	{r4, pc}

000d7abe <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7abe:	b538      	push	{r3, r4, r5, lr}
   d7ac0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7ac2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7ac4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7ac6:	f7ff fbb5 	bl	d7234 <HAL_USB_USART_Available_Data_For_Write>
   d7aca:	2800      	cmp	r0, #0
   d7acc:	dc01      	bgt.n	d7ad2 <_ZN9USBSerial5writeEh+0x14>
   d7ace:	7c60      	ldrb	r0, [r4, #17]
   d7ad0:	b128      	cbz	r0, d7ade <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7ad2:	4629      	mov	r1, r5
   d7ad4:	7c20      	ldrb	r0, [r4, #16]
   d7ad6:	f7ff fbbd 	bl	d7254 <HAL_USB_USART_Send_Data>
   d7ada:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7ade:	bd38      	pop	{r3, r4, r5, pc}

000d7ae0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7ae0:	b510      	push	{r4, lr}
   d7ae2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7ae4:	2300      	movs	r3, #0
   d7ae6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7ae8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7aec:	60a3      	str	r3, [r4, #8]
   d7aee:	4b05      	ldr	r3, [pc, #20]	; (d7b04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7af0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7af2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7af4:	4608      	mov	r0, r1
{
  _serial = serial;
   d7af6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7af8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7afa:	4611      	mov	r1, r2
   d7afc:	f7ff fb82 	bl	d7204 <HAL_USB_USART_Init>
}
   d7b00:	4620      	mov	r0, r4
   d7b02:	bd10      	pop	{r4, pc}
   d7b04:	000d9d5c 	.word	0x000d9d5c

000d7b08 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7b08:	2200      	movs	r2, #0
   d7b0a:	7c00      	ldrb	r0, [r0, #16]
   d7b0c:	f7ff bb82 	b.w	d7214 <HAL_USB_USART_Begin>

000d7b10 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7b10:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7b12:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7b14:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7b16:	2100      	movs	r1, #0
   d7b18:	f001 fbed 	bl	d92f6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7b1c:	4620      	mov	r0, r4
   d7b1e:	bd10      	pop	{r4, pc}

000d7b20 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7b20:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7b22:	4d0e      	ldr	r5, [pc, #56]	; (d7b5c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7b24:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7b26:	a801      	add	r0, sp, #4
   d7b28:	f7ff fff2 	bl	d7b10 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7b2c:	6829      	ldr	r1, [r5, #0]
   d7b2e:	f011 0401 	ands.w	r4, r1, #1
   d7b32:	d110      	bne.n	d7b56 <_Z16_fetch_usbserialv+0x36>
   d7b34:	4628      	mov	r0, r5
   d7b36:	f7fc fac1 	bl	d40bc <__cxa_guard_acquire>
   d7b3a:	b160      	cbz	r0, d7b56 <_Z16_fetch_usbserialv+0x36>
   d7b3c:	aa01      	add	r2, sp, #4
   d7b3e:	4621      	mov	r1, r4
   d7b40:	4807      	ldr	r0, [pc, #28]	; (d7b60 <_Z16_fetch_usbserialv+0x40>)
   d7b42:	f7ff ffcd 	bl	d7ae0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7b46:	4628      	mov	r0, r5
   d7b48:	f7fc fabd 	bl	d40c6 <__cxa_guard_release>
   d7b4c:	4a05      	ldr	r2, [pc, #20]	; (d7b64 <_Z16_fetch_usbserialv+0x44>)
   d7b4e:	4906      	ldr	r1, [pc, #24]	; (d7b68 <_Z16_fetch_usbserialv+0x48>)
   d7b50:	4803      	ldr	r0, [pc, #12]	; (d7b60 <_Z16_fetch_usbserialv+0x40>)
   d7b52:	f000 fe05 	bl	d8760 <__aeabi_atexit>
	return _usbserial;
}
   d7b56:	4802      	ldr	r0, [pc, #8]	; (d7b60 <_Z16_fetch_usbserialv+0x40>)
   d7b58:	b007      	add	sp, #28
   d7b5a:	bd30      	pop	{r4, r5, pc}
   d7b5c:	2003e414 	.word	0x2003e414
   d7b60:	2003e418 	.word	0x2003e418
   d7b64:	2003dce8 	.word	0x2003dce8
   d7b68:	000d7a61 	.word	0x000d7a61

000d7b6c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7b6c:	4770      	bx	lr

000d7b6e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7b6e:	7441      	strb	r1, [r0, #17]
   d7b70:	4770      	bx	lr

000d7b72 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7b72:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7b74:	7c00      	ldrb	r0, [r0, #16]
   d7b76:	f7ff facd 	bl	d7114 <HAL_USART_Available_Data_For_Write>
}
   d7b7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b7e:	bd08      	pop	{r3, pc}

000d7b80 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7b80:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7b82:	7c00      	ldrb	r0, [r0, #16]
   d7b84:	f7ff fa9e 	bl	d70c4 <HAL_USART_Available_Data>
}
   d7b88:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b8c:	bd08      	pop	{r3, pc}

000d7b8e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7b8e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7b90:	7c00      	ldrb	r0, [r0, #16]
   d7b92:	f7ff faa7 	bl	d70e4 <HAL_USART_Peek_Data>
}
   d7b96:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7b9a:	bf28      	it	cs
   d7b9c:	f04f 30ff 	movcs.w	r0, #4294967295
   d7ba0:	bd08      	pop	{r3, pc}

000d7ba2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7ba2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7ba4:	7c00      	ldrb	r0, [r0, #16]
   d7ba6:	f7ff fa95 	bl	d70d4 <HAL_USART_Read_Data>
}
   d7baa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7bae:	bf28      	it	cs
   d7bb0:	f04f 30ff 	movcs.w	r0, #4294967295
   d7bb4:	bd08      	pop	{r3, pc}

000d7bb6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7bb6:	7c00      	ldrb	r0, [r0, #16]
   d7bb8:	f7ff ba9c 	b.w	d70f4 <HAL_USART_Flush_Data>

000d7bbc <_ZN11USARTSerialD0Ev>:
   d7bbc:	b510      	push	{r4, lr}
   d7bbe:	2114      	movs	r1, #20
   d7bc0:	4604      	mov	r4, r0
   d7bc2:	f000 fddb 	bl	d877c <_ZdlPvj>
   d7bc6:	4620      	mov	r0, r4
   d7bc8:	bd10      	pop	{r4, pc}

000d7bca <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7bca:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7bcc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7bce:	4604      	mov	r4, r0
   d7bd0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7bd2:	b925      	cbnz	r5, d7bde <_ZN11USARTSerial5writeEh+0x14>
   d7bd4:	7c00      	ldrb	r0, [r0, #16]
   d7bd6:	f7ff fa9d 	bl	d7114 <HAL_USART_Available_Data_For_Write>
   d7bda:	2800      	cmp	r0, #0
   d7bdc:	dd05      	ble.n	d7bea <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7bde:	4631      	mov	r1, r6
   d7be0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7be2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7be6:	f7ff ba65 	b.w	d70b4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7bea:	4628      	mov	r0, r5
   d7bec:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7bf0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7bf0:	b510      	push	{r4, lr}
   d7bf2:	4604      	mov	r4, r0
   d7bf4:	4608      	mov	r0, r1
   d7bf6:	4611      	mov	r1, r2
   d7bf8:	2200      	movs	r2, #0
   d7bfa:	6062      	str	r2, [r4, #4]
   d7bfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7c00:	60a2      	str	r2, [r4, #8]
   d7c02:	4a05      	ldr	r2, [pc, #20]	; (d7c18 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7c04:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7c06:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7c08:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7c0a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7c0c:	461a      	mov	r2, r3
   d7c0e:	f7ff fa49 	bl	d70a4 <HAL_USART_Init>
}
   d7c12:	4620      	mov	r0, r4
   d7c14:	bd10      	pop	{r4, pc}
   d7c16:	bf00      	nop
   d7c18:	000d9d8c 	.word	0x000d9d8c

000d7c1c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7c1c:	2300      	movs	r3, #0
   d7c1e:	7c00      	ldrb	r0, [r0, #16]
   d7c20:	f7ff ba80 	b.w	d7124 <HAL_USART_BeginConfig>

000d7c24 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d7c24:	2200      	movs	r2, #0
   d7c26:	f7ff bff9 	b.w	d7c1c <_ZN11USARTSerial5beginEmm>

000d7c2a <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7c2a:	7c00      	ldrb	r0, [r0, #16]
   d7c2c:	f7ff ba6a 	b.w	d7104 <HAL_USART_Is_Enabled>

000d7c30 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7c30:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7c32:	4d0c      	ldr	r5, [pc, #48]	; (d7c64 <_Z22__fetch_global_Serial1v+0x34>)
   d7c34:	6829      	ldr	r1, [r5, #0]
   d7c36:	f011 0401 	ands.w	r4, r1, #1
   d7c3a:	d111      	bne.n	d7c60 <_Z22__fetch_global_Serial1v+0x30>
   d7c3c:	4628      	mov	r0, r5
   d7c3e:	f7fc fa3d 	bl	d40bc <__cxa_guard_acquire>
   d7c42:	b168      	cbz	r0, d7c60 <_Z22__fetch_global_Serial1v+0x30>
   d7c44:	4a08      	ldr	r2, [pc, #32]	; (d7c68 <_Z22__fetch_global_Serial1v+0x38>)
   d7c46:	4b09      	ldr	r3, [pc, #36]	; (d7c6c <_Z22__fetch_global_Serial1v+0x3c>)
   d7c48:	4809      	ldr	r0, [pc, #36]	; (d7c70 <_Z22__fetch_global_Serial1v+0x40>)
   d7c4a:	4621      	mov	r1, r4
   d7c4c:	f7ff ffd0 	bl	d7bf0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7c50:	4628      	mov	r0, r5
   d7c52:	f7fc fa38 	bl	d40c6 <__cxa_guard_release>
   d7c56:	4a07      	ldr	r2, [pc, #28]	; (d7c74 <_Z22__fetch_global_Serial1v+0x44>)
   d7c58:	4907      	ldr	r1, [pc, #28]	; (d7c78 <_Z22__fetch_global_Serial1v+0x48>)
   d7c5a:	4805      	ldr	r0, [pc, #20]	; (d7c70 <_Z22__fetch_global_Serial1v+0x40>)
   d7c5c:	f000 fd80 	bl	d8760 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7c60:	4803      	ldr	r0, [pc, #12]	; (d7c70 <_Z22__fetch_global_Serial1v+0x40>)
   d7c62:	bd38      	pop	{r3, r4, r5, pc}
   d7c64:	2003e4c4 	.word	0x2003e4c4
   d7c68:	2003e4c8 	.word	0x2003e4c8
   d7c6c:	2003e440 	.word	0x2003e440
   d7c70:	2003e42c 	.word	0x2003e42c
   d7c74:	2003dce8 	.word	0x2003dce8
   d7c78:	000d7b6d 	.word	0x000d7b6d

000d7c7c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7c7c:	4770      	bx	lr

000d7c7e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c80:	4606      	mov	r6, r0
   d7c82:	4615      	mov	r5, r2
   d7c84:	460c      	mov	r4, r1
   d7c86:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7c88:	42bc      	cmp	r4, r7
   d7c8a:	d006      	beq.n	d7c9a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7c8c:	6833      	ldr	r3, [r6, #0]
   d7c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7c92:	689b      	ldr	r3, [r3, #8]
   d7c94:	4630      	mov	r0, r6
   d7c96:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7c98:	e7f6      	b.n	d7c88 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7c9a:	4628      	mov	r0, r5
   d7c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7c9e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7c9e:	2200      	movs	r2, #0
   d7ca0:	7c00      	ldrb	r0, [r0, #16]
   d7ca2:	f7ff ba47 	b.w	d7134 <HAL_I2C_Write_Data>

000d7ca6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7ca6:	2100      	movs	r1, #0
   d7ca8:	7c00      	ldrb	r0, [r0, #16]
   d7caa:	f7ff ba4b 	b.w	d7144 <HAL_I2C_Available_Data>

000d7cae <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7cae:	2100      	movs	r1, #0
   d7cb0:	7c00      	ldrb	r0, [r0, #16]
   d7cb2:	f7ff ba4f 	b.w	d7154 <HAL_I2C_Read_Data>

000d7cb6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7cb6:	2100      	movs	r1, #0
   d7cb8:	7c00      	ldrb	r0, [r0, #16]
   d7cba:	f7ff ba53 	b.w	d7164 <HAL_I2C_Peek_Data>

000d7cbe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7cbe:	2100      	movs	r1, #0
   d7cc0:	7c00      	ldrb	r0, [r0, #16]
   d7cc2:	f7ff ba57 	b.w	d7174 <HAL_I2C_Flush_Data>

000d7cc6 <_ZN7TwoWireD0Ev>:
   d7cc6:	b510      	push	{r4, lr}
   d7cc8:	2114      	movs	r1, #20
   d7cca:	4604      	mov	r4, r0
   d7ccc:	f000 fd56 	bl	d877c <_ZdlPvj>
   d7cd0:	4620      	mov	r0, r4
   d7cd2:	bd10      	pop	{r4, pc}

000d7cd4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7cd4:	b510      	push	{r4, lr}
   d7cd6:	4604      	mov	r4, r0
   d7cd8:	2300      	movs	r3, #0
   d7cda:	6063      	str	r3, [r4, #4]
   d7cdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7ce0:	60a3      	str	r3, [r4, #8]
   d7ce2:	4b04      	ldr	r3, [pc, #16]	; (d7cf4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7ce4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7ce6:	4608      	mov	r0, r1
   d7ce8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d7cea:	4611      	mov	r1, r2
   d7cec:	f7ff fa52 	bl	d7194 <HAL_I2C_Init>
}
   d7cf0:	4620      	mov	r0, r4
   d7cf2:	bd10      	pop	{r4, pc}
   d7cf4:	000d9dbc 	.word	0x000d9dbc

000d7cf8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7cf8:	2100      	movs	r1, #0
   d7cfa:	7c00      	ldrb	r0, [r0, #16]
   d7cfc:	f7ff ba42 	b.w	d7184 <HAL_I2C_Is_Enabled>

000d7d00 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d7d00:	b510      	push	{r4, lr}
  if (0 == max) {
   d7d02:	4604      	mov	r4, r0
   d7d04:	b130      	cbz	r0, d7d14 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d7d06:	f001 fb27 	bl	d9358 <rand>
   d7d0a:	fb90 f3f4 	sdiv	r3, r0, r4
   d7d0e:	fb03 0014 	mls	r0, r3, r4, r0
   d7d12:	bd10      	pop	{r4, pc}
}
   d7d14:	bd10      	pop	{r4, pc}

000d7d16 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d7d16:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d7d18:	b510      	push	{r4, lr}
   d7d1a:	4604      	mov	r4, r0
  if (min >= max) {
   d7d1c:	da04      	bge.n	d7d28 <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d7d1e:	1a08      	subs	r0, r1, r0
   d7d20:	f7ff ffee 	bl	d7d00 <_Z6randomi>
   d7d24:	4420      	add	r0, r4
   d7d26:	bd10      	pop	{r4, pc}
}
   d7d28:	bd10      	pop	{r4, pc}

000d7d2a <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7d2a:	2200      	movs	r2, #0
   d7d2c:	4611      	mov	r1, r2
   d7d2e:	6840      	ldr	r0, [r0, #4]
   d7d30:	f7ff bb14 	b.w	d735c <network_listening>

000d7d34 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7d34:	2200      	movs	r2, #0
   d7d36:	4611      	mov	r1, r2
   d7d38:	6840      	ldr	r0, [r0, #4]
   d7d3a:	f7ff bb1f 	b.w	d737c <network_get_listen_timeout>

000d7d3e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7d3e:	2200      	movs	r2, #0
   d7d40:	6840      	ldr	r0, [r0, #4]
   d7d42:	f7ff bb13 	b.w	d736c <network_set_listen_timeout>

000d7d46 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7d46:	2200      	movs	r2, #0
   d7d48:	f081 0101 	eor.w	r1, r1, #1
   d7d4c:	6840      	ldr	r0, [r0, #4]
   d7d4e:	f7ff bafd 	b.w	d734c <network_listen>

000d7d52 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7d52:	2300      	movs	r3, #0
   d7d54:	461a      	mov	r2, r3
   d7d56:	2101      	movs	r1, #1
   d7d58:	6840      	ldr	r0, [r0, #4]
   d7d5a:	f7ff baef 	b.w	d733c <network_off>

000d7d5e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7d5e:	2300      	movs	r3, #0
   d7d60:	461a      	mov	r2, r3
   d7d62:	4619      	mov	r1, r3
   d7d64:	6840      	ldr	r0, [r0, #4]
   d7d66:	f7ff bae1 	b.w	d732c <network_on>

000d7d6a <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7d6a:	2200      	movs	r2, #0
   d7d6c:	4611      	mov	r1, r2
   d7d6e:	6840      	ldr	r0, [r0, #4]
   d7d70:	f7ff bad4 	b.w	d731c <network_ready>

000d7d74 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7d74:	2200      	movs	r2, #0
   d7d76:	4611      	mov	r1, r2
   d7d78:	6840      	ldr	r0, [r0, #4]
   d7d7a:	f7ff babf 	b.w	d72fc <network_connecting>

000d7d7e <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7d7e:	2200      	movs	r2, #0
   d7d80:	2102      	movs	r1, #2
   d7d82:	6840      	ldr	r0, [r0, #4]
   d7d84:	f7ff bac2 	b.w	d730c <network_disconnect>

000d7d88 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7d88:	2300      	movs	r3, #0
   d7d8a:	461a      	mov	r2, r3
   d7d8c:	6840      	ldr	r0, [r0, #4]
   d7d8e:	f7ff baad 	b.w	d72ec <network_connect>

000d7d92 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7d92:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7d94:	4605      	mov	r5, r0
   d7d96:	b188      	cbz	r0, d7dbc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d98:	6804      	ldr	r4, [r0, #0]
   d7d9a:	b14c      	cbz	r4, d7db0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d7d9c:	68a3      	ldr	r3, [r4, #8]
   d7d9e:	b11b      	cbz	r3, d7da8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7da0:	2203      	movs	r2, #3
   d7da2:	4621      	mov	r1, r4
   d7da4:	4620      	mov	r0, r4
   d7da6:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7da8:	2110      	movs	r1, #16
   d7daa:	4620      	mov	r0, r4
   d7dac:	f000 fce6 	bl	d877c <_ZdlPvj>
   d7db0:	4628      	mov	r0, r5
   d7db2:	2114      	movs	r1, #20
      }
   d7db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7db8:	f000 bce0 	b.w	d877c <_ZdlPvj>
   d7dbc:	bd38      	pop	{r3, r4, r5, pc}

000d7dbe <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7dbe:	b110      	cbz	r0, d7dc6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7dc0:	6803      	ldr	r3, [r0, #0]
   d7dc2:	685b      	ldr	r3, [r3, #4]
   d7dc4:	4718      	bx	r3
   d7dc6:	4770      	bx	lr

000d7dc8 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7dc8:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7dca:	6803      	ldr	r3, [r0, #0]
   d7dcc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7dce:	b1bb      	cbz	r3, d7e00 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7dd0:	6858      	ldr	r0, [r3, #4]
   d7dd2:	f7ff f91f 	bl	d7014 <os_thread_is_current>
   d7dd6:	b978      	cbnz	r0, d7df8 <_ZN6ThreadD1Ev+0x30>
   d7dd8:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7dda:	7c5a      	ldrb	r2, [r3, #17]
   d7ddc:	b912      	cbnz	r2, d7de4 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7dde:	6858      	ldr	r0, [r3, #4]
   d7de0:	f7ff f928 	bl	d7034 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7de4:	6823      	ldr	r3, [r4, #0]
   d7de6:	6858      	ldr	r0, [r3, #4]
   d7de8:	f7ff f92c 	bl	d7044 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7dec:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7dee:	2300      	movs	r3, #0
   d7df0:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7df2:	b128      	cbz	r0, d7e00 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7df4:	f7ff ffcd 	bl	d7d92 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7df8:	6820      	ldr	r0, [r4, #0]
   d7dfa:	b108      	cbz	r0, d7e00 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7dfc:	f7ff ffc9 	bl	d7d92 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7e00:	4620      	mov	r0, r4
   d7e02:	bd10      	pop	{r4, pc}

000d7e04 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7e04:	b538      	push	{r3, r4, r5, lr}
   d7e06:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7e08:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7e0c:	b108      	cbz	r0, d7e12 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7e0e:	f7fc f948 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7e12:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7e16:	b108      	cbz	r0, d7e1c <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7e18:	f7ff f924 	bl	d7064 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7e1c:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d7e20:	b135      	cbz	r5, d7e30 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7e22:	4628      	mov	r0, r5
   d7e24:	f7ff ffd0 	bl	d7dc8 <_ZN6ThreadD1Ev>
   d7e28:	2104      	movs	r1, #4
   d7e2a:	4628      	mov	r0, r5
   d7e2c:	f000 fca6 	bl	d877c <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7e30:	6820      	ldr	r0, [r4, #0]
   d7e32:	b108      	cbz	r0, d7e38 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7e34:	f7ff ffc3 	bl	d7dbe <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7e38:	4620      	mov	r0, r4
   d7e3a:	bd38      	pop	{r3, r4, r5, pc}

000d7e3c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7e3c:	b510      	push	{r4, lr}
   d7e3e:	4b04      	ldr	r3, [pc, #16]	; (d7e50 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7e40:	4604      	mov	r4, r0
   d7e42:	f840 3b08 	str.w	r3, [r0], #8
   d7e46:	f7ff ffdd 	bl	d7e04 <_ZN5spark11MeshPublishD1Ev>
   d7e4a:	4620      	mov	r0, r4
   d7e4c:	bd10      	pop	{r4, pc}
   d7e4e:	bf00      	nop
   d7e50:	000d9de4 	.word	0x000d9de4

000d7e54 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7e54:	b538      	push	{r3, r4, r5, lr}
   d7e56:	4c0e      	ldr	r4, [pc, #56]	; (d7e90 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7e58:	4b0e      	ldr	r3, [pc, #56]	; (d7e94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7e5a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7e5c:	2500      	movs	r5, #0
   d7e5e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7e60:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7e64:	6063      	str	r3, [r4, #4]
   d7e66:	60a5      	str	r5, [r4, #8]
   d7e68:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7e6c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7e70:	f7ff f8f0 	bl	d7054 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7e74:	4b08      	ldr	r3, [pc, #32]	; (d7e98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7e76:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7e7a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7e7e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7e80:	4620      	mov	r0, r4
   d7e82:	4a06      	ldr	r2, [pc, #24]	; (d7e9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7e84:	4906      	ldr	r1, [pc, #24]	; (d7ea0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7e8a:	f000 bc69 	b.w	d8760 <__aeabi_atexit>
   d7e8e:	bf00      	nop
   d7e90:	2003e54c 	.word	0x2003e54c
   d7e94:	000d9ecc 	.word	0x000d9ecc
   d7e98:	000d9de4 	.word	0x000d9de4
   d7e9c:	2003dce8 	.word	0x2003dce8
   d7ea0:	000d7e3d 	.word	0x000d7e3d

000d7ea4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7ea6:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7ea8:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7eaa:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7eae:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7eb0:	2201      	movs	r2, #1
   d7eb2:	f04f 33ff 	mov.w	r3, #4294967295
   d7eb6:	4621      	mov	r1, r4
   d7eb8:	47a8      	blx	r5
}
   d7eba:	b003      	add	sp, #12
   d7ebc:	bd30      	pop	{r4, r5, pc}

000d7ebe <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7ebe:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7ec0:	6803      	ldr	r3, [r0, #0]
   d7ec2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7ec4:	f04f 33ff 	mov.w	r3, #4294967295
   d7ec8:	46a4      	mov	ip, r4
}
   d7eca:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7ece:	4760      	bx	ip

000d7ed0 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7ed2:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d7ed4:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7ed6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d7eda:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7edc:	4621      	mov	r1, r4
   d7ede:	4613      	mov	r3, r2
   d7ee0:	2201      	movs	r2, #1
   d7ee2:	47a8      	blx	r5
}
   d7ee4:	b003      	add	sp, #12
   d7ee6:	bd30      	pop	{r4, r5, pc}

000d7ee8 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d7ee8:	4770      	bx	lr

000d7eea <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7eea:	b538      	push	{r3, r4, r5, lr}
   d7eec:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7eee:	681a      	ldr	r2, [r3, #0]
   d7ef0:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7ef2:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d7ef4:	da05      	bge.n	d7f02 <_ZN9TCPClient9connectedEv+0x18>
   d7ef6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7efa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7efe:	429a      	cmp	r2, r3
   d7f00:	d001      	beq.n	d7f06 <_ZN9TCPClient9connectedEv+0x1c>
   d7f02:	2501      	movs	r5, #1
   d7f04:	e00b      	b.n	d7f1e <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d7f06:	6803      	ldr	r3, [r0, #0]
   d7f08:	691b      	ldr	r3, [r3, #16]
   d7f0a:	4798      	blx	r3
   d7f0c:	2800      	cmp	r0, #0
   d7f0e:	bf14      	ite	ne
   d7f10:	2501      	movne	r5, #1
   d7f12:	2500      	moveq	r5, #0
        if (!rv) {
   d7f14:	d103      	bne.n	d7f1e <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d7f16:	6823      	ldr	r3, [r4, #0]
   d7f18:	4620      	mov	r0, r4
   d7f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7f1c:	4798      	blx	r3
        }
    }
    return rv;
}
   d7f1e:	4628      	mov	r0, r5
   d7f20:	bd38      	pop	{r3, r4, r5, pc}

000d7f22 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7f22:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d7f24:	6818      	ldr	r0, [r3, #0]
}
   d7f26:	43c0      	mvns	r0, r0
   d7f28:	0fc0      	lsrs	r0, r0, #31
   d7f2a:	4770      	bx	lr

000d7f2c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7f2c:	4770      	bx	lr

000d7f2e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d7f2e:	2000      	movs	r0, #0
   d7f30:	4770      	bx	lr

000d7f32 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7f32:	b510      	push	{r4, lr}
   d7f34:	2114      	movs	r1, #20
   d7f36:	4604      	mov	r4, r0
   d7f38:	f000 fc20 	bl	d877c <_ZdlPvj>
   d7f3c:	4620      	mov	r0, r4
   d7f3e:	bd10      	pop	{r4, pc}

000d7f40 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7f40:	f7fc b8ad 	b.w	d409e <_ZdlPv>

000d7f44 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7f44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7f46:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d7f48:	2200      	movs	r2, #0
   d7f4a:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d7f4c:	9202      	str	r2, [sp, #8]
   d7f4e:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7f50:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7f52:	4604      	mov	r4, r0
   d7f54:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7f56:	d008      	beq.n	d7f6a <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d7f58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7f5c:	fbb3 f1f2 	udiv	r1, r3, r2
   d7f60:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d7f62:	fb02 3111 	mls	r1, r2, r1, r3
   d7f66:	434a      	muls	r2, r1
   d7f68:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7f6a:	6960      	ldr	r0, [r4, #20]
   d7f6c:	2308      	movs	r3, #8
   d7f6e:	9300      	str	r3, [sp, #0]
   d7f70:	f241 0205 	movw	r2, #4101	; 0x1005
   d7f74:	446b      	add	r3, sp
   d7f76:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7f7a:	6800      	ldr	r0, [r0, #0]
   d7f7c:	f7ff f912 	bl	d71a4 <sock_setsockopt>
    if (ret < 0) {
   d7f80:	2800      	cmp	r0, #0
   d7f82:	db08      	blt.n	d7f96 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d7f84:	6960      	ldr	r0, [r4, #20]
   d7f86:	2300      	movs	r3, #0
   d7f88:	4632      	mov	r2, r6
   d7f8a:	4629      	mov	r1, r5
   d7f8c:	6800      	ldr	r0, [r0, #0]
   d7f8e:	f7ff f929 	bl	d71e4 <sock_send>
    if (ret < 0) {
   d7f92:	2800      	cmp	r0, #0
   d7f94:	da04      	bge.n	d7fa0 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d7f96:	f7ff fa39 	bl	d740c <__errno>
   d7f9a:	6803      	ldr	r3, [r0, #0]
   d7f9c:	6063      	str	r3, [r4, #4]
   d7f9e:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d7fa0:	b004      	add	sp, #16
   d7fa2:	bd70      	pop	{r4, r5, r6, pc}

000d7fa4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7fa4:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7fa6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7fa8:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7faa:	689b      	ldr	r3, [r3, #8]
   d7fac:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7fae:	68a3      	ldr	r3, [r4, #8]
   d7fb0:	3b01      	subs	r3, #1
   d7fb2:	60a3      	str	r3, [r4, #8]
   d7fb4:	b92b      	cbnz	r3, d7fc2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d7fb6:	6823      	ldr	r3, [r4, #0]
   d7fb8:	4620      	mov	r0, r4
   d7fba:	68db      	ldr	r3, [r3, #12]
        }
    }
   d7fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d7fc0:	4718      	bx	r3
   d7fc2:	bd10      	pop	{r4, pc}

000d7fc4 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d7fc4:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7fc6:	4604      	mov	r4, r0
   d7fc8:	694d      	ldr	r5, [r1, #20]
   d7fca:	4b05      	ldr	r3, [pc, #20]	; (d7fe0 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7fcc:	f844 3b04 	str.w	r3, [r4], #4
   d7fd0:	358c      	adds	r5, #140	; 0x8c
   d7fd2:	4606      	mov	r6, r0
   d7fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7fd8:	682b      	ldr	r3, [r5, #0]
   d7fda:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7fdc:	4630      	mov	r0, r6
   d7fde:	bd70      	pop	{r4, r5, r6, pc}
   d7fe0:	000d9d48 	.word	0x000d9d48

000d7fe4 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7fe4:	b510      	push	{r4, lr}
   d7fe6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7fe8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7fec:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7ff0:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7ff2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7ff4:	d005      	beq.n	d8002 <_ZN9TCPClient4peekEv+0x1e>
   d7ff6:	6962      	ldr	r2, [r4, #20]
   d7ff8:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7ffc:	4413      	add	r3, r2
   d7ffe:	7918      	ldrb	r0, [r3, #4]
   d8000:	bd10      	pop	{r4, pc}
   d8002:	6803      	ldr	r3, [r0, #0]
   d8004:	691b      	ldr	r3, [r3, #16]
   d8006:	4798      	blx	r3
   d8008:	2800      	cmp	r0, #0
   d800a:	d1f4      	bne.n	d7ff6 <_ZN9TCPClient4peekEv+0x12>
   d800c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d8010:	bd10      	pop	{r4, pc}

000d8012 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d8012:	b510      	push	{r4, lr}
   d8014:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8016:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d801a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d801e:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d8020:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8022:	d008      	beq.n	d8036 <_ZN9TCPClient4readEv+0x24>
   d8024:	6962      	ldr	r2, [r4, #20]
   d8026:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d802a:	1c59      	adds	r1, r3, #1
   d802c:	4413      	add	r3, r2
   d802e:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d8032:	7918      	ldrb	r0, [r3, #4]
   d8034:	bd10      	pop	{r4, pc}
   d8036:	6803      	ldr	r3, [r0, #0]
   d8038:	691b      	ldr	r3, [r3, #16]
   d803a:	4798      	blx	r3
   d803c:	2800      	cmp	r0, #0
   d803e:	d1f1      	bne.n	d8024 <_ZN9TCPClient4readEv+0x12>
   d8040:	f04f 30ff 	mov.w	r0, #4294967295
}
   d8044:	bd10      	pop	{r4, pc}

000d8046 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d8046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8048:	6943      	ldr	r3, [r0, #20]
   d804a:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d804c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8050:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8054:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d8056:	4605      	mov	r5, r0
   d8058:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d805a:	d106      	bne.n	d806a <_ZN9TCPClient4readEPhj+0x24>
   d805c:	6803      	ldr	r3, [r0, #0]
   d805e:	691b      	ldr	r3, [r3, #16]
   d8060:	4798      	blx	r3
   d8062:	b910      	cbnz	r0, d806a <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d8064:	f04f 34ff 	mov.w	r4, #4294967295
   d8068:	e014      	b.n	d8094 <_ZN9TCPClient4readEPhj+0x4e>
   d806a:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d806c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d8070:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d8074:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d8076:	42bc      	cmp	r4, r7
   d8078:	bf28      	it	cs
   d807a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d807c:	4419      	add	r1, r3
   d807e:	4622      	mov	r2, r4
   d8080:	3104      	adds	r1, #4
   d8082:	4630      	mov	r0, r6
   d8084:	f001 f911 	bl	d92aa <memcpy>
   d8088:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d808a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d808e:	4423      	add	r3, r4
   d8090:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d8094:	4620      	mov	r0, r4
   d8096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8098 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d809c:	4698      	mov	r8, r3
    stop();
   d809e:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d80a0:	b093      	sub	sp, #76	; 0x4c
    stop();
   d80a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d80a4:	460d      	mov	r5, r1
   d80a6:	4606      	mov	r6, r0
   d80a8:	4617      	mov	r7, r2
    stop();
   d80aa:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d80ac:	ab12      	add	r3, sp, #72	; 0x48
   d80ae:	2400      	movs	r4, #0
   d80b0:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d80b4:	4622      	mov	r2, r4
   d80b6:	4621      	mov	r1, r4
   d80b8:	4628      	mov	r0, r5
   d80ba:	f7fe ff03 	bl	d6ec4 <netdb_getaddrinfo>
   d80be:	4681      	mov	r9, r0
   d80c0:	2800      	cmp	r0, #0
   d80c2:	d13d      	bne.n	d8140 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d80c4:	9b00      	ldr	r3, [sp, #0]
   d80c6:	2b00      	cmp	r3, #0
   d80c8:	d056      	beq.n	d8178 <_ZN9TCPClient7connectEPKctm+0xe0>
   d80ca:	695b      	ldr	r3, [r3, #20]
   d80cc:	2b00      	cmp	r3, #0
   d80ce:	d053      	beq.n	d8178 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d80d0:	a806      	add	r0, sp, #24
   d80d2:	f7ff fc75 	bl	d79c0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d80d6:	9b00      	ldr	r3, [sp, #0]
   d80d8:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d80da:	7863      	ldrb	r3, [r4, #1]
   d80dc:	2b02      	cmp	r3, #2
   d80de:	d101      	bne.n	d80e4 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d80e0:	1d21      	adds	r1, r4, #4
   d80e2:	e013      	b.n	d810c <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d80e4:	2b0a      	cmp	r3, #10
   d80e6:	d114      	bne.n	d8112 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d80e8:	2211      	movs	r2, #17
   d80ea:	4649      	mov	r1, r9
   d80ec:	a801      	add	r0, sp, #4
   d80ee:	f001 f902 	bl	d92f6 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d80f2:	68a3      	ldr	r3, [r4, #8]
   d80f4:	bb33      	cbnz	r3, d8144 <_ZN9TCPClient7connectEPKctm+0xac>
   d80f6:	68e3      	ldr	r3, [r4, #12]
   d80f8:	bb23      	cbnz	r3, d8144 <_ZN9TCPClient7connectEPKctm+0xac>
   d80fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d80fe:	6925      	ldr	r5, [r4, #16]
   d8100:	f7fe ffc0 	bl	d7084 <inet_htonl>
   d8104:	4285      	cmp	r5, r0
   d8106:	d11d      	bne.n	d8144 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8108:	f104 0114 	add.w	r1, r4, #20
   d810c:	a806      	add	r0, sp, #24
   d810e:	f7ff fc9a 	bl	d7a46 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d8112:	a806      	add	r0, sp, #24
   d8114:	f7ff fc74 	bl	d7a00 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d8118:	2800      	cmp	r0, #0
   d811a:	d02d      	beq.n	d8178 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d811c:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d811e:	ad07      	add	r5, sp, #28
   d8120:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d8124:	4b18      	ldr	r3, [pc, #96]	; (d8188 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d8126:	930c      	str	r3, [sp, #48]	; 0x30
   d8128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d812a:	ac0d      	add	r4, sp, #52	; 0x34
   d812c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d812e:	682b      	ldr	r3, [r5, #0]
   d8130:	7023      	strb	r3, [r4, #0]
   d8132:	463a      	mov	r2, r7
   d8134:	4643      	mov	r3, r8
   d8136:	a90c      	add	r1, sp, #48	; 0x30
   d8138:	4630      	mov	r0, r6
   d813a:	47c8      	blx	r9
   d813c:	4681      	mov	r9, r0
   d813e:	e01b      	b.n	d8178 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8140:	46a1      	mov	r9, r4
   d8142:	e019      	b.n	d8178 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8144:	f104 0308 	add.w	r3, r4, #8
   d8148:	ad01      	add	r5, sp, #4
   d814a:	3418      	adds	r4, #24
   d814c:	6818      	ldr	r0, [r3, #0]
   d814e:	6859      	ldr	r1, [r3, #4]
   d8150:	462a      	mov	r2, r5
   d8152:	c203      	stmia	r2!, {r0, r1}
   d8154:	3308      	adds	r3, #8
   d8156:	42a3      	cmp	r3, r4
   d8158:	4615      	mov	r5, r2
   d815a:	d1f7      	bne.n	d814c <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d815c:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d815e:	a901      	add	r1, sp, #4
   d8160:	a80c      	add	r0, sp, #48	; 0x30
   d8162:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d8164:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d8168:	f7ff fc38 	bl	d79dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d816c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d816e:	ac07      	add	r4, sp, #28
   d8170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8172:	682b      	ldr	r3, [r5, #0]
   d8174:	7023      	strb	r3, [r4, #0]
   d8176:	e7cc      	b.n	d8112 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d8178:	9800      	ldr	r0, [sp, #0]
   d817a:	f7fe fe9b 	bl	d6eb4 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d817e:	4648      	mov	r0, r9
   d8180:	b013      	add	sp, #76	; 0x4c
   d8182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8186:	bf00      	nop
   d8188:	000d9d48 	.word	0x000d9d48

000d818c <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d818c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d818e:	2300      	movs	r3, #0
   d8190:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d8194:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d8196:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d819a:	4770      	bx	lr

000d819c <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d819c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d81a0:	461e      	mov	r6, r3
    stop();
   d81a2:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d81a4:	460c      	mov	r4, r1
   d81a6:	b08a      	sub	sp, #40	; 0x28
    stop();
   d81a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d81aa:	4605      	mov	r5, r0
   d81ac:	4617      	mov	r7, r2
    stop();
   d81ae:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d81b0:	7d23      	ldrb	r3, [r4, #20]
   d81b2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d81b6:	2b04      	cmp	r3, #4
   d81b8:	bf0c      	ite	eq
   d81ba:	2002      	moveq	r0, #2
   d81bc:	200a      	movne	r0, #10
   d81be:	2206      	movs	r2, #6
   d81c0:	2101      	movs	r1, #1
   d81c2:	f7ff f817 	bl	d71f4 <sock_socket>
   d81c6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d81ca:	696b      	ldr	r3, [r5, #20]
   d81cc:	681b      	ldr	r3, [r3, #0]
   d81ce:	2b00      	cmp	r3, #0
   d81d0:	db18      	blt.n	d8204 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d81d2:	4628      	mov	r0, r5
   d81d4:	f7ff ffda 	bl	d818c <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d81d8:	b1d6      	cbz	r6, d8210 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d81da:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d81dc:	a903      	add	r1, sp, #12
   d81de:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d81e0:	9303      	str	r3, [sp, #12]
   d81e2:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d81e6:	f7fe feed 	bl	d6fc4 <if_index_to_name>
   d81ea:	b958      	cbnz	r0, d8204 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d81ec:	6968      	ldr	r0, [r5, #20]
   d81ee:	2306      	movs	r3, #6
   d81f0:	9300      	str	r3, [sp, #0]
   d81f2:	f241 020b 	movw	r2, #4107	; 0x100b
   d81f6:	ab03      	add	r3, sp, #12
   d81f8:	f640 71ff 	movw	r1, #4095	; 0xfff
   d81fc:	6800      	ldr	r0, [r0, #0]
   d81fe:	f7fe ffd1 	bl	d71a4 <sock_setsockopt>
   d8202:	b128      	cbz	r0, d8210 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d8204:	682b      	ldr	r3, [r5, #0]
   d8206:	4628      	mov	r0, r5
   d8208:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d820a:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d820c:	4798      	blx	r3
   d820e:	e03b      	b.n	d8288 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d8210:	261c      	movs	r6, #28
   d8212:	4632      	mov	r2, r6
   d8214:	2100      	movs	r1, #0
   d8216:	a803      	add	r0, sp, #12
   d8218:	f001 f86d 	bl	d92f6 <memset>
    if (ip.version() == 4) {
   d821c:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d821e:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d8222:	2b04      	cmp	r3, #4
   d8224:	d10c      	bne.n	d8240 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d8226:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d8228:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d822a:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d822e:	f7fe ff31 	bl	d7094 <inet_htons>
   d8232:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d8236:	6860      	ldr	r0, [r4, #4]
   d8238:	f7fe ff24 	bl	d7084 <inet_htonl>
   d823c:	9004      	str	r0, [sp, #16]
   d823e:	e013      	b.n	d8268 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d8240:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d8242:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d8244:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d8248:	f7fe ff24 	bl	d7094 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d824c:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d824e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8252:	1d23      	adds	r3, r4, #4
   d8254:	f104 0714 	add.w	r7, r4, #20
   d8258:	6818      	ldr	r0, [r3, #0]
   d825a:	6859      	ldr	r1, [r3, #4]
   d825c:	4632      	mov	r2, r6
   d825e:	c203      	stmia	r2!, {r0, r1}
   d8260:	3308      	adds	r3, #8
   d8262:	42bb      	cmp	r3, r7
   d8264:	4616      	mov	r6, r2
   d8266:	d1f7      	bne.n	d8258 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d8268:	696b      	ldr	r3, [r5, #20]
   d826a:	221c      	movs	r2, #28
   d826c:	a903      	add	r1, sp, #12
   d826e:	6818      	ldr	r0, [r3, #0]
   d8270:	f7fe ffa8 	bl	d71c4 <sock_connect>
   d8274:	2800      	cmp	r0, #0
   d8276:	d1c5      	bne.n	d8204 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d8278:	3404      	adds	r4, #4
   d827a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d827c:	696d      	ldr	r5, [r5, #20]
   d827e:	358c      	adds	r5, #140	; 0x8c
   d8280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8282:	6823      	ldr	r3, [r4, #0]
   d8284:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d8286:	2401      	movs	r4, #1
}
   d8288:	4620      	mov	r0, r4
   d828a:	b00a      	add	sp, #40	; 0x28
   d828c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8290 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d8290:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d8292:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d8294:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d8296:	6818      	ldr	r0, [r3, #0]
   d8298:	2800      	cmp	r0, #0
   d829a:	db01      	blt.n	d82a0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d829c:	f7fe ff8a 	bl	d71b4 <sock_close>
   d82a0:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d82a2:	f04f 32ff 	mov.w	r2, #4294967295
   d82a6:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d82a8:	6960      	ldr	r0, [r4, #20]
   d82aa:	2211      	movs	r2, #17
   d82ac:	2100      	movs	r1, #0
   d82ae:	308c      	adds	r0, #140	; 0x8c
   d82b0:	f001 f821 	bl	d92f6 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d82b4:	4620      	mov	r0, r4
}
   d82b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d82ba:	f7ff bf67 	b.w	d818c <_ZN9TCPClient12flush_bufferEv>
	...

000d82c0 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d82c0:	b530      	push	{r4, r5, lr}
   d82c2:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d82c4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d82c8:	b08b      	sub	sp, #44	; 0x2c
   d82ca:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d82cc:	b11b      	cbz	r3, d82d6 <_ZN9TCPClient9availableEv+0x16>
   d82ce:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d82d2:	429a      	cmp	r2, r3
   d82d4:	d040      	beq.n	d8358 <_ZN9TCPClient9availableEv+0x98>
   d82d6:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d82d8:	6818      	ldr	r0, [r3, #0]
   d82da:	2800      	cmp	r0, #0
   d82dc:	db3f      	blt.n	d835e <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d82de:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d82e2:	2d7f      	cmp	r5, #127	; 0x7f
   d82e4:	d83b      	bhi.n	d835e <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d82e6:	1d19      	adds	r1, r3, #4
   d82e8:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d82ec:	2308      	movs	r3, #8
   d82ee:	4429      	add	r1, r5
   d82f0:	f7fe ff70 	bl	d71d4 <sock_recv>
            if (ret > 0) {
   d82f4:	2800      	cmp	r0, #0
   d82f6:	dd0c      	ble.n	d8312 <_ZN9TCPClient9availableEv+0x52>
   d82f8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d82fa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d82fe:	b90a      	cbnz	r2, d8304 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d8300:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d8304:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d8306:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d830a:	4418      	add	r0, r3
   d830c:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d8310:	e025      	b.n	d835e <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d8312:	f7ff f87b 	bl	d740c <__errno>
   d8316:	6803      	ldr	r3, [r0, #0]
   d8318:	2b0b      	cmp	r3, #11
   d831a:	d020      	beq.n	d835e <_ZN9TCPClient9availableEv+0x9e>
   d831c:	f7ff f876 	bl	d740c <__errno>
   d8320:	6803      	ldr	r3, [r0, #0]
   d8322:	2b0b      	cmp	r3, #11
   d8324:	d01b      	beq.n	d835e <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d8326:	2320      	movs	r3, #32
   d8328:	2500      	movs	r5, #0
   d832a:	9302      	str	r3, [sp, #8]
   d832c:	9503      	str	r5, [sp, #12]
   d832e:	f7ff f86d 	bl	d740c <__errno>
   d8332:	6803      	ldr	r3, [r0, #0]
   d8334:	9301      	str	r3, [sp, #4]
   d8336:	4b0e      	ldr	r3, [pc, #56]	; (d8370 <_ZN9TCPClient9availableEv+0xb0>)
   d8338:	9300      	str	r3, [sp, #0]
   d833a:	aa02      	add	r2, sp, #8
   d833c:	462b      	mov	r3, r5
   d833e:	490d      	ldr	r1, [pc, #52]	; (d8374 <_ZN9TCPClient9availableEv+0xb4>)
   d8340:	2032      	movs	r0, #50	; 0x32
   d8342:	f7fe ff9f 	bl	d7284 <log_message>
                    sock_close(d_->sock);
   d8346:	6963      	ldr	r3, [r4, #20]
   d8348:	6818      	ldr	r0, [r3, #0]
   d834a:	f7fe ff33 	bl	d71b4 <sock_close>
   d834e:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d8350:	f04f 32ff 	mov.w	r2, #4294967295
   d8354:	601a      	str	r2, [r3, #0]
   d8356:	e002      	b.n	d835e <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d8358:	f7ff ff18 	bl	d818c <_ZN9TCPClient12flush_bufferEv>
   d835c:	e7bb      	b.n	d82d6 <_ZN9TCPClient9availableEv+0x16>
   d835e:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d8360:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8364:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d8368:	1a18      	subs	r0, r3, r0
}
   d836a:	b00b      	add	sp, #44	; 0x2c
   d836c:	bd30      	pop	{r4, r5, pc}
   d836e:	bf00      	nop
   d8370:	000d9e7f 	.word	0x000d9e7f
   d8374:	000d9e78 	.word	0x000d9e78

000d8378 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d8378:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d837a:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d837c:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d837e:	6001      	str	r1, [r0, #0]
   d8380:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d8384:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d8388:	3088      	adds	r0, #136	; 0x88
   d838a:	f7ff fb19 	bl	d79c0 <_ZN9IPAddressC1Ev>
}
   d838e:	4620      	mov	r0, r4
   d8390:	bd10      	pop	{r4, pc}
	...

000d8394 <_ZN9TCPClientC1Ei>:
   d8394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d8398:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d839a:	2300      	movs	r3, #0
   d839c:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d839e:	4a14      	ldr	r2, [pc, #80]	; (d83f0 <_ZN9TCPClientC1Ei+0x5c>)
   d83a0:	6043      	str	r3, [r0, #4]
   d83a2:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d83a4:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d83a6:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d83a8:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d83aa:	20a0      	movs	r0, #160	; 0xa0
   d83ac:	460e      	mov	r6, r1
   d83ae:	f7fb fe74 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d83b2:	4605      	mov	r5, r0
   d83b4:	b110      	cbz	r0, d83bc <_ZN9TCPClientC1Ei+0x28>
   d83b6:	4631      	mov	r1, r6
   d83b8:	f7ff ffde 	bl	d8378 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d83bc:	2014      	movs	r0, #20
   d83be:	f7fb fe6c 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d83c2:	4603      	mov	r3, r0
   d83c4:	b128      	cbz	r0, d83d2 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d83c6:	2201      	movs	r2, #1
   d83c8:	6042      	str	r2, [r0, #4]
   d83ca:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d83cc:	4a09      	ldr	r2, [pc, #36]	; (d83f4 <_ZN9TCPClientC1Ei+0x60>)
   d83ce:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d83d0:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d83d2:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d83d4:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d83d6:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d83d8:	b128      	cbz	r0, d83e6 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d83da:	6843      	ldr	r3, [r0, #4]
   d83dc:	3b01      	subs	r3, #1
   d83de:	6043      	str	r3, [r0, #4]
   d83e0:	b90b      	cbnz	r3, d83e6 <_ZN9TCPClientC1Ei+0x52>
   d83e2:	f7ff fddf 	bl	d7fa4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d83e6:	4620      	mov	r0, r4
   d83e8:	f7ff fed0 	bl	d818c <_ZN9TCPClient12flush_bufferEv>
}
   d83ec:	4620      	mov	r0, r4
   d83ee:	bd70      	pop	{r4, r5, r6, pc}
   d83f0:	000d9e34 	.word	0x000d9e34
   d83f4:	000d9e18 	.word	0x000d9e18

000d83f8 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d83f8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d83fa:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d83fe:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8400:	f7ff ffc8 	bl	d8394 <_ZN9TCPClientC1Ei>
}
   d8404:	4620      	mov	r0, r4
   d8406:	bd10      	pop	{r4, pc}

000d8408 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d8408:	b510      	push	{r4, lr}
   d840a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d840c:	6800      	ldr	r0, [r0, #0]
   d840e:	2800      	cmp	r0, #0
   d8410:	db01      	blt.n	d8416 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d8412:	f7fe fecf 	bl	d71b4 <sock_close>
    }
}
   d8416:	4620      	mov	r0, r4
   d8418:	bd10      	pop	{r4, pc}

000d841a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d841a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d841c:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d841e:	4620      	mov	r0, r4
   d8420:	f7ff fff2 	bl	d8408 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d8424:	b124      	cbz	r4, d8430 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8426:	4620      	mov	r0, r4
   d8428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d842c:	f7fb be37 	b.w	d409e <_ZdlPv>
   d8430:	bd10      	pop	{r4, pc}

000d8432 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8432:	2200      	movs	r2, #0
   d8434:	4611      	mov	r1, r2
   d8436:	6840      	ldr	r0, [r0, #4]
   d8438:	f7fe bf70 	b.w	d731c <network_ready>

000d843c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d843c:	2200      	movs	r2, #0
   d843e:	4611      	mov	r1, r2
   d8440:	6840      	ldr	r0, [r0, #4]
   d8442:	f7fe bf8b 	b.w	d735c <network_listening>

000d8446 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8446:	2200      	movs	r2, #0
   d8448:	4611      	mov	r1, r2
   d844a:	6840      	ldr	r0, [r0, #4]
   d844c:	f7fe bf96 	b.w	d737c <network_get_listen_timeout>

000d8450 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8450:	2200      	movs	r2, #0
   d8452:	6840      	ldr	r0, [r0, #4]
   d8454:	f7fe bf8a 	b.w	d736c <network_set_listen_timeout>

000d8458 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8458:	2200      	movs	r2, #0
   d845a:	f081 0101 	eor.w	r1, r1, #1
   d845e:	6840      	ldr	r0, [r0, #4]
   d8460:	f7fe bf74 	b.w	d734c <network_listen>

000d8464 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d8464:	2300      	movs	r3, #0
   d8466:	461a      	mov	r2, r3
   d8468:	4619      	mov	r1, r3
   d846a:	6840      	ldr	r0, [r0, #4]
   d846c:	f7fe bf66 	b.w	d733c <network_off>

000d8470 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d8470:	2300      	movs	r3, #0
   d8472:	461a      	mov	r2, r3
   d8474:	4619      	mov	r1, r3
   d8476:	6840      	ldr	r0, [r0, #4]
   d8478:	f7fe bf58 	b.w	d732c <network_on>

000d847c <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d847c:	2200      	movs	r2, #0
   d847e:	4611      	mov	r1, r2
   d8480:	6840      	ldr	r0, [r0, #4]
   d8482:	f7fe bf3b 	b.w	d72fc <network_connecting>

000d8486 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8486:	2200      	movs	r2, #0
   d8488:	2102      	movs	r1, #2
   d848a:	6840      	ldr	r0, [r0, #4]
   d848c:	f7fe bf3e 	b.w	d730c <network_disconnect>

000d8490 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8490:	2300      	movs	r3, #0
   d8492:	461a      	mov	r2, r3
   d8494:	6840      	ldr	r0, [r0, #4]
   d8496:	f7fe bf29 	b.w	d72ec <network_connect>
	...

000d849c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d849c:	4b02      	ldr	r3, [pc, #8]	; (d84a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d849e:	2204      	movs	r2, #4
   d84a0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d84a2:	4a02      	ldr	r2, [pc, #8]	; (d84ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d84a4:	601a      	str	r2, [r3, #0]
   d84a6:	4770      	bx	lr
   d84a8:	2003e720 	.word	0x2003e720
   d84ac:	000d9e98 	.word	0x000d9e98

000d84b0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d84b0:	2300      	movs	r3, #0
   d84b2:	461a      	mov	r2, r3
   d84b4:	6840      	ldr	r0, [r0, #4]
   d84b6:	f7fe bf19 	b.w	d72ec <network_connect>

000d84ba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d84ba:	2200      	movs	r2, #0
   d84bc:	2102      	movs	r1, #2
   d84be:	6840      	ldr	r0, [r0, #4]
   d84c0:	f7fe bf24 	b.w	d730c <network_disconnect>

000d84c4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d84c4:	2200      	movs	r2, #0
   d84c6:	4611      	mov	r1, r2
   d84c8:	6840      	ldr	r0, [r0, #4]
   d84ca:	f7fe bf17 	b.w	d72fc <network_connecting>

000d84ce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d84ce:	2200      	movs	r2, #0
   d84d0:	4611      	mov	r1, r2
   d84d2:	6840      	ldr	r0, [r0, #4]
   d84d4:	f7fe bf22 	b.w	d731c <network_ready>

000d84d8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d84d8:	2300      	movs	r3, #0
   d84da:	461a      	mov	r2, r3
   d84dc:	4619      	mov	r1, r3
   d84de:	6840      	ldr	r0, [r0, #4]
   d84e0:	f7fe bf24 	b.w	d732c <network_on>

000d84e4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d84e4:	2300      	movs	r3, #0
   d84e6:	461a      	mov	r2, r3
   d84e8:	4619      	mov	r1, r3
   d84ea:	6840      	ldr	r0, [r0, #4]
   d84ec:	f7fe bf26 	b.w	d733c <network_off>

000d84f0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d84f0:	2200      	movs	r2, #0
   d84f2:	f081 0101 	eor.w	r1, r1, #1
   d84f6:	6840      	ldr	r0, [r0, #4]
   d84f8:	f7fe bf28 	b.w	d734c <network_listen>

000d84fc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d84fc:	2200      	movs	r2, #0
   d84fe:	6840      	ldr	r0, [r0, #4]
   d8500:	f7fe bf34 	b.w	d736c <network_set_listen_timeout>

000d8504 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8504:	2200      	movs	r2, #0
   d8506:	4611      	mov	r1, r2
   d8508:	6840      	ldr	r0, [r0, #4]
   d850a:	f7fe bf37 	b.w	d737c <network_get_listen_timeout>

000d850e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d850e:	2200      	movs	r2, #0
   d8510:	4611      	mov	r1, r2
   d8512:	6840      	ldr	r0, [r0, #4]
   d8514:	f7fe bf22 	b.w	d735c <network_listening>

000d8518 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d851c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d851e:	b095      	sub	sp, #84	; 0x54
   d8520:	4616      	mov	r6, r2
   d8522:	460d      	mov	r5, r1
   d8524:	4607      	mov	r7, r0
    IPAddress addr;
   d8526:	f7ff fa4b 	bl	d79c0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d852a:	4621      	mov	r1, r4
   d852c:	2220      	movs	r2, #32
   d852e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8530:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8532:	f000 fee0 	bl	d92f6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8536:	2340      	movs	r3, #64	; 0x40
   d8538:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d853a:	4621      	mov	r1, r4
   d853c:	466b      	mov	r3, sp
   d853e:	aa0c      	add	r2, sp, #48	; 0x30
   d8540:	4630      	mov	r0, r6
   d8542:	f7fe fcbf 	bl	d6ec4 <netdb_getaddrinfo>
    if (!r) {
   d8546:	4604      	mov	r4, r0
   d8548:	2800      	cmp	r0, #0
   d854a:	d144      	bne.n	d85d6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d854c:	4602      	mov	r2, r0
   d854e:	2101      	movs	r1, #1
   d8550:	6868      	ldr	r0, [r5, #4]
   d8552:	f7fe fee3 	bl	d731c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8556:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8558:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d855a:	4622      	mov	r2, r4
   d855c:	6868      	ldr	r0, [r5, #4]
   d855e:	f7fe fedd 	bl	d731c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8562:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8564:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8566:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8568:	2e00      	cmp	r6, #0
   d856a:	d034      	beq.n	d85d6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d856c:	2900      	cmp	r1, #0
   d856e:	d132      	bne.n	d85d6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8570:	6873      	ldr	r3, [r6, #4]
   d8572:	2b02      	cmp	r3, #2
   d8574:	d002      	beq.n	d857c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d8576:	2b0a      	cmp	r3, #10
   d8578:	d009      	beq.n	d858e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d857a:	e02a      	b.n	d85d2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d857c:	f1b8 0f00 	cmp.w	r8, #0
   d8580:	d027      	beq.n	d85d2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8582:	6971      	ldr	r1, [r6, #20]
   d8584:	4638      	mov	r0, r7
   d8586:	3104      	adds	r1, #4
   d8588:	f7ff fa5d 	bl	d7a46 <_ZN9IPAddressaSEPKh>
   d858c:	e020      	b.n	d85d0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d858e:	f1b9 0f00 	cmp.w	r9, #0
   d8592:	d01e      	beq.n	d85d2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8594:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8596:	2211      	movs	r2, #17
   d8598:	a801      	add	r0, sp, #4
   d859a:	f000 feac 	bl	d92f6 <memset>
                    a.v = 6;
   d859e:	2306      	movs	r3, #6
   d85a0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d85a4:	ad01      	add	r5, sp, #4
   d85a6:	f104 0308 	add.w	r3, r4, #8
   d85aa:	3418      	adds	r4, #24
   d85ac:	6818      	ldr	r0, [r3, #0]
   d85ae:	6859      	ldr	r1, [r3, #4]
   d85b0:	462a      	mov	r2, r5
   d85b2:	c203      	stmia	r2!, {r0, r1}
   d85b4:	3308      	adds	r3, #8
   d85b6:	42a3      	cmp	r3, r4
   d85b8:	4615      	mov	r5, r2
   d85ba:	d1f7      	bne.n	d85ac <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d85bc:	a901      	add	r1, sp, #4
   d85be:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d85c0:	ad07      	add	r5, sp, #28
   d85c2:	f7ff fa0b 	bl	d79dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d85c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d85c8:	1d3c      	adds	r4, r7, #4
   d85ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d85cc:	682b      	ldr	r3, [r5, #0]
   d85ce:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d85d0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d85d2:	69f6      	ldr	r6, [r6, #28]
   d85d4:	e7c8      	b.n	d8568 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d85d6:	9800      	ldr	r0, [sp, #0]
   d85d8:	f7fe fc6c 	bl	d6eb4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d85dc:	4638      	mov	r0, r7
   d85de:	b015      	add	sp, #84	; 0x54
   d85e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d85e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d85e4:	4b02      	ldr	r3, [pc, #8]	; (d85f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d85e6:	4a03      	ldr	r2, [pc, #12]	; (d85f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d85e8:	601a      	str	r2, [r3, #0]
   d85ea:	2200      	movs	r2, #0
   d85ec:	605a      	str	r2, [r3, #4]
   d85ee:	4770      	bx	lr
   d85f0:	2003e728 	.word	0x2003e728
   d85f4:	000d9ecc 	.word	0x000d9ecc

000d85f8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d85f8:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d85fa:	4e18      	ldr	r6, [pc, #96]	; (d865c <pinAvailable+0x64>)
   d85fc:	6831      	ldr	r1, [r6, #0]
   d85fe:	f011 0501 	ands.w	r5, r1, #1
   d8602:	4604      	mov	r4, r0
   d8604:	d10a      	bne.n	d861c <pinAvailable+0x24>
   d8606:	4630      	mov	r0, r6
   d8608:	f7fb fd58 	bl	d40bc <__cxa_guard_acquire>
   d860c:	b130      	cbz	r0, d861c <pinAvailable+0x24>
   d860e:	4629      	mov	r1, r5
   d8610:	4813      	ldr	r0, [pc, #76]	; (d8660 <pinAvailable+0x68>)
   d8612:	f7fe ff47 	bl	d74a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8616:	4630      	mov	r0, r6
   d8618:	f7fb fd55 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d861c:	4810      	ldr	r0, [pc, #64]	; (d8660 <pinAvailable+0x68>)
   d861e:	f7fe fffe 	bl	d761e <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8622:	b128      	cbz	r0, d8630 <pinAvailable+0x38>
   d8624:	f1a4 030b 	sub.w	r3, r4, #11
   d8628:	2b02      	cmp	r3, #2
   d862a:	d801      	bhi.n	d8630 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d862c:	2000      	movs	r0, #0
   d862e:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8630:	f000 f870 	bl	d8714 <_Z19__fetch_global_Wirev>
   d8634:	f7ff fb60 	bl	d7cf8 <_ZN7TwoWire9isEnabledEv>
   d8638:	b108      	cbz	r0, d863e <pinAvailable+0x46>
   d863a:	2c01      	cmp	r4, #1
   d863c:	d9f6      	bls.n	d862c <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d863e:	f7ff faf7 	bl	d7c30 <_Z22__fetch_global_Serial1v>
   d8642:	f7ff faf2 	bl	d7c2a <_ZN11USARTSerial9isEnabledEv>
   d8646:	b118      	cbz	r0, d8650 <pinAvailable+0x58>
   d8648:	f1a4 0309 	sub.w	r3, r4, #9
   d864c:	2b01      	cmp	r3, #1
   d864e:	d9ed      	bls.n	d862c <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8650:	2c23      	cmp	r4, #35	; 0x23
   d8652:	bf8c      	ite	hi
   d8654:	2000      	movhi	r0, #0
   d8656:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8658:	bd70      	pop	{r4, r5, r6, pc}
   d865a:	bf00      	nop
   d865c:	2003dcec 	.word	0x2003dcec
   d8660:	2003dcf0 	.word	0x2003dcf0

000d8664 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8664:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8666:	b538      	push	{r3, r4, r5, lr}
   d8668:	4604      	mov	r4, r0
   d866a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d866c:	d80a      	bhi.n	d8684 <pinMode+0x20>
   d866e:	29ff      	cmp	r1, #255	; 0xff
   d8670:	d008      	beq.n	d8684 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8672:	f7ff ffc1 	bl	d85f8 <pinAvailable>
   d8676:	b128      	cbz	r0, d8684 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8678:	4629      	mov	r1, r5
   d867a:	4620      	mov	r0, r4
}
   d867c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8680:	f7fe bc30 	b.w	d6ee4 <HAL_Pin_Mode>
   d8684:	bd38      	pop	{r3, r4, r5, pc}

000d8686 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8686:	b538      	push	{r3, r4, r5, lr}
   d8688:	4604      	mov	r4, r0
   d868a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d868c:	f7fe fc32 	bl	d6ef4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8690:	28ff      	cmp	r0, #255	; 0xff
   d8692:	d010      	beq.n	d86b6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8694:	2806      	cmp	r0, #6
   d8696:	d804      	bhi.n	d86a2 <digitalWrite+0x1c>
   d8698:	234d      	movs	r3, #77	; 0x4d
   d869a:	fa23 f000 	lsr.w	r0, r3, r0
   d869e:	07c3      	lsls	r3, r0, #31
   d86a0:	d409      	bmi.n	d86b6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d86a2:	4620      	mov	r0, r4
   d86a4:	f7ff ffa8 	bl	d85f8 <pinAvailable>
   d86a8:	b128      	cbz	r0, d86b6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d86aa:	4629      	mov	r1, r5
   d86ac:	4620      	mov	r0, r4
}
   d86ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d86b2:	f7fe bc27 	b.w	d6f04 <HAL_GPIO_Write>
   d86b6:	bd38      	pop	{r3, r4, r5, pc}

000d86b8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d86b8:	b510      	push	{r4, lr}
   d86ba:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d86bc:	f7fe fc1a 	bl	d6ef4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d86c0:	3804      	subs	r0, #4
   d86c2:	b2c0      	uxtb	r0, r0
   d86c4:	2801      	cmp	r0, #1
   d86c6:	d908      	bls.n	d86da <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d86c8:	4620      	mov	r0, r4
   d86ca:	f7ff ff95 	bl	d85f8 <pinAvailable>
   d86ce:	b120      	cbz	r0, d86da <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d86d0:	4620      	mov	r0, r4
}
   d86d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d86d6:	f7fe bc1d 	b.w	d6f14 <HAL_GPIO_Read>
}
   d86da:	2000      	movs	r0, #0
   d86dc:	bd10      	pop	{r4, pc}
	...

000d86e0 <_Z17acquireWireBufferv>:
   d86e0:	b570      	push	{r4, r5, r6, lr}
   d86e2:	4604      	mov	r4, r0
   d86e4:	2514      	movs	r5, #20
   d86e6:	462a      	mov	r2, r5
   d86e8:	4e09      	ldr	r6, [pc, #36]	; (d8710 <_Z17acquireWireBufferv+0x30>)
   d86ea:	2100      	movs	r1, #0
   d86ec:	f000 fe03 	bl	d92f6 <memset>
   d86f0:	8025      	strh	r5, [r4, #0]
   d86f2:	2520      	movs	r5, #32
   d86f4:	4631      	mov	r1, r6
   d86f6:	60a5      	str	r5, [r4, #8]
   d86f8:	6125      	str	r5, [r4, #16]
   d86fa:	4628      	mov	r0, r5
   d86fc:	f000 f840 	bl	d8780 <_ZnajRKSt9nothrow_t>
   d8700:	4631      	mov	r1, r6
   d8702:	6060      	str	r0, [r4, #4]
   d8704:	4628      	mov	r0, r5
   d8706:	f000 f83b 	bl	d8780 <_ZnajRKSt9nothrow_t>
   d870a:	60e0      	str	r0, [r4, #12]
   d870c:	4620      	mov	r0, r4
   d870e:	bd70      	pop	{r4, r5, r6, pc}
   d8710:	000d9ef8 	.word	0x000d9ef8

000d8714 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8714:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8716:	4d0e      	ldr	r5, [pc, #56]	; (d8750 <_Z19__fetch_global_Wirev+0x3c>)
   d8718:	6829      	ldr	r1, [r5, #0]
   d871a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d871e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8720:	d113      	bne.n	d874a <_Z19__fetch_global_Wirev+0x36>
   d8722:	4628      	mov	r0, r5
   d8724:	f7fb fcca 	bl	d40bc <__cxa_guard_acquire>
   d8728:	b178      	cbz	r0, d874a <_Z19__fetch_global_Wirev+0x36>
   d872a:	a801      	add	r0, sp, #4
   d872c:	f7ff ffd8 	bl	d86e0 <_Z17acquireWireBufferv>
   d8730:	aa01      	add	r2, sp, #4
   d8732:	4621      	mov	r1, r4
   d8734:	4807      	ldr	r0, [pc, #28]	; (d8754 <_Z19__fetch_global_Wirev+0x40>)
   d8736:	f7ff facd 	bl	d7cd4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d873a:	4628      	mov	r0, r5
   d873c:	f7fb fcc3 	bl	d40c6 <__cxa_guard_release>
   d8740:	4a05      	ldr	r2, [pc, #20]	; (d8758 <_Z19__fetch_global_Wirev+0x44>)
   d8742:	4906      	ldr	r1, [pc, #24]	; (d875c <_Z19__fetch_global_Wirev+0x48>)
   d8744:	4803      	ldr	r0, [pc, #12]	; (d8754 <_Z19__fetch_global_Wirev+0x40>)
   d8746:	f000 f80b 	bl	d8760 <__aeabi_atexit>
	return wire;
}
   d874a:	4802      	ldr	r0, [pc, #8]	; (d8754 <_Z19__fetch_global_Wirev+0x40>)
   d874c:	b007      	add	sp, #28
   d874e:	bd30      	pop	{r4, r5, pc}
   d8750:	2003e734 	.word	0x2003e734
   d8754:	2003e738 	.word	0x2003e738
   d8758:	2003dce8 	.word	0x2003dce8
   d875c:	000d7c7d 	.word	0x000d7c7d

000d8760 <__aeabi_atexit>:
   d8760:	460b      	mov	r3, r1
   d8762:	4601      	mov	r1, r0
   d8764:	4618      	mov	r0, r3
   d8766:	f000 bd83 	b.w	d9270 <__cxa_atexit>
	...

000d876c <_ZSt15get_new_handlerv>:
   d876c:	4b02      	ldr	r3, [pc, #8]	; (d8778 <_ZSt15get_new_handlerv+0xc>)
   d876e:	6818      	ldr	r0, [r3, #0]
   d8770:	f3bf 8f5f 	dmb	sy
   d8774:	4770      	bx	lr
   d8776:	bf00      	nop
   d8778:	2003e74c 	.word	0x2003e74c

000d877c <_ZdlPvj>:
   d877c:	f7fb bc8f 	b.w	d409e <_ZdlPv>

000d8780 <_ZnajRKSt9nothrow_t>:
   d8780:	f000 b800 	b.w	d8784 <_ZnwjRKSt9nothrow_t>

000d8784 <_ZnwjRKSt9nothrow_t>:
   d8784:	b510      	push	{r4, lr}
   d8786:	2800      	cmp	r0, #0
   d8788:	bf14      	ite	ne
   d878a:	4604      	movne	r4, r0
   d878c:	2401      	moveq	r4, #1
   d878e:	4620      	mov	r0, r4
   d8790:	f7fe fe1c 	bl	d73cc <malloc>
   d8794:	b920      	cbnz	r0, d87a0 <_ZnwjRKSt9nothrow_t+0x1c>
   d8796:	f7ff ffe9 	bl	d876c <_ZSt15get_new_handlerv>
   d879a:	b108      	cbz	r0, d87a0 <_ZnwjRKSt9nothrow_t+0x1c>
   d879c:	4780      	blx	r0
   d879e:	e7f6      	b.n	d878e <_ZnwjRKSt9nothrow_t+0xa>
   d87a0:	bd10      	pop	{r4, pc}
	...

000d87a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d87a4:	4b18      	ldr	r3, [pc, #96]	; (d8808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d87a6:	681a      	ldr	r2, [r3, #0]
   d87a8:	07d1      	lsls	r1, r2, #31
   d87aa:	bf5c      	itt	pl
   d87ac:	2201      	movpl	r2, #1
   d87ae:	601a      	strpl	r2, [r3, #0]
   d87b0:	4b16      	ldr	r3, [pc, #88]	; (d880c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d87b2:	681a      	ldr	r2, [r3, #0]
   d87b4:	07d2      	lsls	r2, r2, #31
   d87b6:	bf5c      	itt	pl
   d87b8:	2201      	movpl	r2, #1
   d87ba:	601a      	strpl	r2, [r3, #0]
   d87bc:	4b14      	ldr	r3, [pc, #80]	; (d8810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d87be:	681a      	ldr	r2, [r3, #0]
   d87c0:	07d0      	lsls	r0, r2, #31
   d87c2:	bf5c      	itt	pl
   d87c4:	2201      	movpl	r2, #1
   d87c6:	601a      	strpl	r2, [r3, #0]
   d87c8:	4b12      	ldr	r3, [pc, #72]	; (d8814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d87ca:	681a      	ldr	r2, [r3, #0]
   d87cc:	07d1      	lsls	r1, r2, #31
   d87ce:	bf5c      	itt	pl
   d87d0:	2201      	movpl	r2, #1
   d87d2:	601a      	strpl	r2, [r3, #0]
   d87d4:	4b10      	ldr	r3, [pc, #64]	; (d8818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d87d6:	681a      	ldr	r2, [r3, #0]
   d87d8:	07d2      	lsls	r2, r2, #31
   d87da:	bf5c      	itt	pl
   d87dc:	2201      	movpl	r2, #1
   d87de:	601a      	strpl	r2, [r3, #0]
   d87e0:	4b0e      	ldr	r3, [pc, #56]	; (d881c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d87e2:	681a      	ldr	r2, [r3, #0]
   d87e4:	07d0      	lsls	r0, r2, #31
   d87e6:	bf5c      	itt	pl
   d87e8:	2201      	movpl	r2, #1
   d87ea:	601a      	strpl	r2, [r3, #0]
   d87ec:	4b0c      	ldr	r3, [pc, #48]	; (d8820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d87ee:	681a      	ldr	r2, [r3, #0]
   d87f0:	07d1      	lsls	r1, r2, #31
   d87f2:	bf5c      	itt	pl
   d87f4:	2201      	movpl	r2, #1
   d87f6:	601a      	strpl	r2, [r3, #0]
   d87f8:	4b0a      	ldr	r3, [pc, #40]	; (d8824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d87fa:	681a      	ldr	r2, [r3, #0]
   d87fc:	07d2      	lsls	r2, r2, #31
   d87fe:	bf5c      	itt	pl
   d8800:	2201      	movpl	r2, #1
   d8802:	601a      	strpl	r2, [r3, #0]
   d8804:	4770      	bx	lr
   d8806:	bf00      	nop
   d8808:	2003e76c 	.word	0x2003e76c
   d880c:	2003e768 	.word	0x2003e768
   d8810:	2003e764 	.word	0x2003e764
   d8814:	2003e760 	.word	0x2003e760
   d8818:	2003e75c 	.word	0x2003e75c
   d881c:	2003e758 	.word	0x2003e758
   d8820:	2003e754 	.word	0x2003e754
   d8824:	2003e750 	.word	0x2003e750

000d8828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8828:	4b24      	ldr	r3, [pc, #144]	; (d88bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d882a:	681a      	ldr	r2, [r3, #0]
   d882c:	07d0      	lsls	r0, r2, #31
   d882e:	bf5c      	itt	pl
   d8830:	2201      	movpl	r2, #1
   d8832:	601a      	strpl	r2, [r3, #0]
   d8834:	4b22      	ldr	r3, [pc, #136]	; (d88c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8836:	681a      	ldr	r2, [r3, #0]
   d8838:	07d1      	lsls	r1, r2, #31
   d883a:	bf5c      	itt	pl
   d883c:	2201      	movpl	r2, #1
   d883e:	601a      	strpl	r2, [r3, #0]
   d8840:	4b20      	ldr	r3, [pc, #128]	; (d88c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8842:	681a      	ldr	r2, [r3, #0]
   d8844:	07d2      	lsls	r2, r2, #31
   d8846:	bf5c      	itt	pl
   d8848:	2201      	movpl	r2, #1
   d884a:	601a      	strpl	r2, [r3, #0]
   d884c:	4b1e      	ldr	r3, [pc, #120]	; (d88c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d884e:	681a      	ldr	r2, [r3, #0]
   d8850:	07d0      	lsls	r0, r2, #31
   d8852:	bf5c      	itt	pl
   d8854:	2201      	movpl	r2, #1
   d8856:	601a      	strpl	r2, [r3, #0]
   d8858:	4b1c      	ldr	r3, [pc, #112]	; (d88cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d885a:	681a      	ldr	r2, [r3, #0]
   d885c:	07d1      	lsls	r1, r2, #31
   d885e:	bf5c      	itt	pl
   d8860:	2201      	movpl	r2, #1
   d8862:	601a      	strpl	r2, [r3, #0]
   d8864:	4b1a      	ldr	r3, [pc, #104]	; (d88d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8866:	681a      	ldr	r2, [r3, #0]
   d8868:	07d2      	lsls	r2, r2, #31
   d886a:	bf5c      	itt	pl
   d886c:	2201      	movpl	r2, #1
   d886e:	601a      	strpl	r2, [r3, #0]
   d8870:	4b18      	ldr	r3, [pc, #96]	; (d88d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8872:	681a      	ldr	r2, [r3, #0]
   d8874:	07d0      	lsls	r0, r2, #31
   d8876:	bf5c      	itt	pl
   d8878:	2201      	movpl	r2, #1
   d887a:	601a      	strpl	r2, [r3, #0]
   d887c:	4b16      	ldr	r3, [pc, #88]	; (d88d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d887e:	681a      	ldr	r2, [r3, #0]
   d8880:	07d1      	lsls	r1, r2, #31
   d8882:	bf5c      	itt	pl
   d8884:	2201      	movpl	r2, #1
   d8886:	601a      	strpl	r2, [r3, #0]
   d8888:	4b14      	ldr	r3, [pc, #80]	; (d88dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d888a:	681a      	ldr	r2, [r3, #0]
   d888c:	07d2      	lsls	r2, r2, #31
   d888e:	bf5c      	itt	pl
   d8890:	2201      	movpl	r2, #1
   d8892:	601a      	strpl	r2, [r3, #0]
   d8894:	4b12      	ldr	r3, [pc, #72]	; (d88e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8896:	681a      	ldr	r2, [r3, #0]
   d8898:	07d0      	lsls	r0, r2, #31
   d889a:	bf5c      	itt	pl
   d889c:	2201      	movpl	r2, #1
   d889e:	601a      	strpl	r2, [r3, #0]
   d88a0:	4b10      	ldr	r3, [pc, #64]	; (d88e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d88a2:	681a      	ldr	r2, [r3, #0]
   d88a4:	07d1      	lsls	r1, r2, #31
   d88a6:	bf5c      	itt	pl
   d88a8:	2201      	movpl	r2, #1
   d88aa:	601a      	strpl	r2, [r3, #0]
   d88ac:	4b0e      	ldr	r3, [pc, #56]	; (d88e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d88ae:	681a      	ldr	r2, [r3, #0]
   d88b0:	07d2      	lsls	r2, r2, #31
   d88b2:	bf5c      	itt	pl
   d88b4:	2201      	movpl	r2, #1
   d88b6:	601a      	strpl	r2, [r3, #0]
   d88b8:	4770      	bx	lr
   d88ba:	bf00      	nop
   d88bc:	2003e79c 	.word	0x2003e79c
   d88c0:	2003e798 	.word	0x2003e798
   d88c4:	2003e794 	.word	0x2003e794
   d88c8:	2003e790 	.word	0x2003e790
   d88cc:	2003e78c 	.word	0x2003e78c
   d88d0:	2003e788 	.word	0x2003e788
   d88d4:	2003e784 	.word	0x2003e784
   d88d8:	2003e780 	.word	0x2003e780
   d88dc:	2003e77c 	.word	0x2003e77c
   d88e0:	2003e778 	.word	0x2003e778
   d88e4:	2003e774 	.word	0x2003e774
   d88e8:	2003e770 	.word	0x2003e770

000d88ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d88ec:	4b24      	ldr	r3, [pc, #144]	; (d8980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d88ee:	681a      	ldr	r2, [r3, #0]
   d88f0:	07d0      	lsls	r0, r2, #31
   d88f2:	bf5c      	itt	pl
   d88f4:	2201      	movpl	r2, #1
   d88f6:	601a      	strpl	r2, [r3, #0]
   d88f8:	4b22      	ldr	r3, [pc, #136]	; (d8984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d88fa:	681a      	ldr	r2, [r3, #0]
   d88fc:	07d1      	lsls	r1, r2, #31
   d88fe:	bf5c      	itt	pl
   d8900:	2201      	movpl	r2, #1
   d8902:	601a      	strpl	r2, [r3, #0]
   d8904:	4b20      	ldr	r3, [pc, #128]	; (d8988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8906:	681a      	ldr	r2, [r3, #0]
   d8908:	07d2      	lsls	r2, r2, #31
   d890a:	bf5c      	itt	pl
   d890c:	2201      	movpl	r2, #1
   d890e:	601a      	strpl	r2, [r3, #0]
   d8910:	4b1e      	ldr	r3, [pc, #120]	; (d898c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8912:	681a      	ldr	r2, [r3, #0]
   d8914:	07d0      	lsls	r0, r2, #31
   d8916:	bf5c      	itt	pl
   d8918:	2201      	movpl	r2, #1
   d891a:	601a      	strpl	r2, [r3, #0]
   d891c:	4b1c      	ldr	r3, [pc, #112]	; (d8990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d891e:	681a      	ldr	r2, [r3, #0]
   d8920:	07d1      	lsls	r1, r2, #31
   d8922:	bf5c      	itt	pl
   d8924:	2201      	movpl	r2, #1
   d8926:	601a      	strpl	r2, [r3, #0]
   d8928:	4b1a      	ldr	r3, [pc, #104]	; (d8994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d892a:	681a      	ldr	r2, [r3, #0]
   d892c:	07d2      	lsls	r2, r2, #31
   d892e:	bf5c      	itt	pl
   d8930:	2201      	movpl	r2, #1
   d8932:	601a      	strpl	r2, [r3, #0]
   d8934:	4b18      	ldr	r3, [pc, #96]	; (d8998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8936:	681a      	ldr	r2, [r3, #0]
   d8938:	07d0      	lsls	r0, r2, #31
   d893a:	bf5c      	itt	pl
   d893c:	2201      	movpl	r2, #1
   d893e:	601a      	strpl	r2, [r3, #0]
   d8940:	4b16      	ldr	r3, [pc, #88]	; (d899c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8942:	681a      	ldr	r2, [r3, #0]
   d8944:	07d1      	lsls	r1, r2, #31
   d8946:	bf5c      	itt	pl
   d8948:	2201      	movpl	r2, #1
   d894a:	601a      	strpl	r2, [r3, #0]
   d894c:	4b14      	ldr	r3, [pc, #80]	; (d89a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d894e:	681a      	ldr	r2, [r3, #0]
   d8950:	07d2      	lsls	r2, r2, #31
   d8952:	bf5c      	itt	pl
   d8954:	2201      	movpl	r2, #1
   d8956:	601a      	strpl	r2, [r3, #0]
   d8958:	4b12      	ldr	r3, [pc, #72]	; (d89a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d895a:	681a      	ldr	r2, [r3, #0]
   d895c:	07d0      	lsls	r0, r2, #31
   d895e:	bf5c      	itt	pl
   d8960:	2201      	movpl	r2, #1
   d8962:	601a      	strpl	r2, [r3, #0]
   d8964:	4b10      	ldr	r3, [pc, #64]	; (d89a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8966:	681a      	ldr	r2, [r3, #0]
   d8968:	07d1      	lsls	r1, r2, #31
   d896a:	bf5c      	itt	pl
   d896c:	2201      	movpl	r2, #1
   d896e:	601a      	strpl	r2, [r3, #0]
   d8970:	4b0e      	ldr	r3, [pc, #56]	; (d89ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8972:	681a      	ldr	r2, [r3, #0]
   d8974:	07d2      	lsls	r2, r2, #31
   d8976:	bf5c      	itt	pl
   d8978:	2201      	movpl	r2, #1
   d897a:	601a      	strpl	r2, [r3, #0]
   d897c:	4770      	bx	lr
   d897e:	bf00      	nop
   d8980:	2003e7cc 	.word	0x2003e7cc
   d8984:	2003e7c8 	.word	0x2003e7c8
   d8988:	2003e7c4 	.word	0x2003e7c4
   d898c:	2003e7c0 	.word	0x2003e7c0
   d8990:	2003e7bc 	.word	0x2003e7bc
   d8994:	2003e7b8 	.word	0x2003e7b8
   d8998:	2003e7b4 	.word	0x2003e7b4
   d899c:	2003e7b0 	.word	0x2003e7b0
   d89a0:	2003e7ac 	.word	0x2003e7ac
   d89a4:	2003e7a8 	.word	0x2003e7a8
   d89a8:	2003e7a4 	.word	0x2003e7a4
   d89ac:	2003e7a0 	.word	0x2003e7a0

000d89b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d89b0:	4b18      	ldr	r3, [pc, #96]	; (d8a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d89b2:	681a      	ldr	r2, [r3, #0]
   d89b4:	07d1      	lsls	r1, r2, #31
   d89b6:	bf5c      	itt	pl
   d89b8:	2201      	movpl	r2, #1
   d89ba:	601a      	strpl	r2, [r3, #0]
   d89bc:	4b16      	ldr	r3, [pc, #88]	; (d8a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d89be:	681a      	ldr	r2, [r3, #0]
   d89c0:	07d2      	lsls	r2, r2, #31
   d89c2:	bf5c      	itt	pl
   d89c4:	2201      	movpl	r2, #1
   d89c6:	601a      	strpl	r2, [r3, #0]
   d89c8:	4b14      	ldr	r3, [pc, #80]	; (d8a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d89ca:	681a      	ldr	r2, [r3, #0]
   d89cc:	07d0      	lsls	r0, r2, #31
   d89ce:	bf5c      	itt	pl
   d89d0:	2201      	movpl	r2, #1
   d89d2:	601a      	strpl	r2, [r3, #0]
   d89d4:	4b12      	ldr	r3, [pc, #72]	; (d8a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d89d6:	681a      	ldr	r2, [r3, #0]
   d89d8:	07d1      	lsls	r1, r2, #31
   d89da:	bf5c      	itt	pl
   d89dc:	2201      	movpl	r2, #1
   d89de:	601a      	strpl	r2, [r3, #0]
   d89e0:	4b10      	ldr	r3, [pc, #64]	; (d8a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d89e2:	681a      	ldr	r2, [r3, #0]
   d89e4:	07d2      	lsls	r2, r2, #31
   d89e6:	bf5c      	itt	pl
   d89e8:	2201      	movpl	r2, #1
   d89ea:	601a      	strpl	r2, [r3, #0]
   d89ec:	4b0e      	ldr	r3, [pc, #56]	; (d8a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d89ee:	681a      	ldr	r2, [r3, #0]
   d89f0:	07d0      	lsls	r0, r2, #31
   d89f2:	bf5c      	itt	pl
   d89f4:	2201      	movpl	r2, #1
   d89f6:	601a      	strpl	r2, [r3, #0]
   d89f8:	4b0c      	ldr	r3, [pc, #48]	; (d8a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d89fa:	681a      	ldr	r2, [r3, #0]
   d89fc:	07d1      	lsls	r1, r2, #31
   d89fe:	bf5c      	itt	pl
   d8a00:	2201      	movpl	r2, #1
   d8a02:	601a      	strpl	r2, [r3, #0]
   d8a04:	4b0a      	ldr	r3, [pc, #40]	; (d8a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8a06:	681a      	ldr	r2, [r3, #0]
   d8a08:	07d2      	lsls	r2, r2, #31
   d8a0a:	bf5c      	itt	pl
   d8a0c:	2201      	movpl	r2, #1
   d8a0e:	601a      	strpl	r2, [r3, #0]
   d8a10:	4770      	bx	lr
   d8a12:	bf00      	nop
   d8a14:	2003e7ec 	.word	0x2003e7ec
   d8a18:	2003e7e8 	.word	0x2003e7e8
   d8a1c:	2003e7e4 	.word	0x2003e7e4
   d8a20:	2003e7e0 	.word	0x2003e7e0
   d8a24:	2003e7dc 	.word	0x2003e7dc
   d8a28:	2003e7d8 	.word	0x2003e7d8
   d8a2c:	2003e7d4 	.word	0x2003e7d4
   d8a30:	2003e7d0 	.word	0x2003e7d0

000d8a34 <__aeabi_drsub>:
   d8a34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8a38:	e002      	b.n	d8a40 <__adddf3>
   d8a3a:	bf00      	nop

000d8a3c <__aeabi_dsub>:
   d8a3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8a40 <__adddf3>:
   d8a40:	b530      	push	{r4, r5, lr}
   d8a42:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8a46:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8a4a:	ea94 0f05 	teq	r4, r5
   d8a4e:	bf08      	it	eq
   d8a50:	ea90 0f02 	teqeq	r0, r2
   d8a54:	bf1f      	itttt	ne
   d8a56:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8a5a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8a5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8a62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8a66:	f000 80e2 	beq.w	d8c2e <__adddf3+0x1ee>
   d8a6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8a6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8a72:	bfb8      	it	lt
   d8a74:	426d      	neglt	r5, r5
   d8a76:	dd0c      	ble.n	d8a92 <__adddf3+0x52>
   d8a78:	442c      	add	r4, r5
   d8a7a:	ea80 0202 	eor.w	r2, r0, r2
   d8a7e:	ea81 0303 	eor.w	r3, r1, r3
   d8a82:	ea82 0000 	eor.w	r0, r2, r0
   d8a86:	ea83 0101 	eor.w	r1, r3, r1
   d8a8a:	ea80 0202 	eor.w	r2, r0, r2
   d8a8e:	ea81 0303 	eor.w	r3, r1, r3
   d8a92:	2d36      	cmp	r5, #54	; 0x36
   d8a94:	bf88      	it	hi
   d8a96:	bd30      	pophi	{r4, r5, pc}
   d8a98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8a9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8aa0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8aa4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8aa8:	d002      	beq.n	d8ab0 <__adddf3+0x70>
   d8aaa:	4240      	negs	r0, r0
   d8aac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8ab0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8ab4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8ab8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8abc:	d002      	beq.n	d8ac4 <__adddf3+0x84>
   d8abe:	4252      	negs	r2, r2
   d8ac0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8ac4:	ea94 0f05 	teq	r4, r5
   d8ac8:	f000 80a7 	beq.w	d8c1a <__adddf3+0x1da>
   d8acc:	f1a4 0401 	sub.w	r4, r4, #1
   d8ad0:	f1d5 0e20 	rsbs	lr, r5, #32
   d8ad4:	db0d      	blt.n	d8af2 <__adddf3+0xb2>
   d8ad6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8ada:	fa22 f205 	lsr.w	r2, r2, r5
   d8ade:	1880      	adds	r0, r0, r2
   d8ae0:	f141 0100 	adc.w	r1, r1, #0
   d8ae4:	fa03 f20e 	lsl.w	r2, r3, lr
   d8ae8:	1880      	adds	r0, r0, r2
   d8aea:	fa43 f305 	asr.w	r3, r3, r5
   d8aee:	4159      	adcs	r1, r3
   d8af0:	e00e      	b.n	d8b10 <__adddf3+0xd0>
   d8af2:	f1a5 0520 	sub.w	r5, r5, #32
   d8af6:	f10e 0e20 	add.w	lr, lr, #32
   d8afa:	2a01      	cmp	r2, #1
   d8afc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8b00:	bf28      	it	cs
   d8b02:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8b06:	fa43 f305 	asr.w	r3, r3, r5
   d8b0a:	18c0      	adds	r0, r0, r3
   d8b0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8b10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8b14:	d507      	bpl.n	d8b26 <__adddf3+0xe6>
   d8b16:	f04f 0e00 	mov.w	lr, #0
   d8b1a:	f1dc 0c00 	rsbs	ip, ip, #0
   d8b1e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8b22:	eb6e 0101 	sbc.w	r1, lr, r1
   d8b26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8b2a:	d31b      	bcc.n	d8b64 <__adddf3+0x124>
   d8b2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8b30:	d30c      	bcc.n	d8b4c <__adddf3+0x10c>
   d8b32:	0849      	lsrs	r1, r1, #1
   d8b34:	ea5f 0030 	movs.w	r0, r0, rrx
   d8b38:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8b3c:	f104 0401 	add.w	r4, r4, #1
   d8b40:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8b44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8b48:	f080 809a 	bcs.w	d8c80 <__adddf3+0x240>
   d8b4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8b50:	bf08      	it	eq
   d8b52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8b56:	f150 0000 	adcs.w	r0, r0, #0
   d8b5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8b5e:	ea41 0105 	orr.w	r1, r1, r5
   d8b62:	bd30      	pop	{r4, r5, pc}
   d8b64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8b68:	4140      	adcs	r0, r0
   d8b6a:	eb41 0101 	adc.w	r1, r1, r1
   d8b6e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8b72:	f1a4 0401 	sub.w	r4, r4, #1
   d8b76:	d1e9      	bne.n	d8b4c <__adddf3+0x10c>
   d8b78:	f091 0f00 	teq	r1, #0
   d8b7c:	bf04      	itt	eq
   d8b7e:	4601      	moveq	r1, r0
   d8b80:	2000      	moveq	r0, #0
   d8b82:	fab1 f381 	clz	r3, r1
   d8b86:	bf08      	it	eq
   d8b88:	3320      	addeq	r3, #32
   d8b8a:	f1a3 030b 	sub.w	r3, r3, #11
   d8b8e:	f1b3 0220 	subs.w	r2, r3, #32
   d8b92:	da0c      	bge.n	d8bae <__adddf3+0x16e>
   d8b94:	320c      	adds	r2, #12
   d8b96:	dd08      	ble.n	d8baa <__adddf3+0x16a>
   d8b98:	f102 0c14 	add.w	ip, r2, #20
   d8b9c:	f1c2 020c 	rsb	r2, r2, #12
   d8ba0:	fa01 f00c 	lsl.w	r0, r1, ip
   d8ba4:	fa21 f102 	lsr.w	r1, r1, r2
   d8ba8:	e00c      	b.n	d8bc4 <__adddf3+0x184>
   d8baa:	f102 0214 	add.w	r2, r2, #20
   d8bae:	bfd8      	it	le
   d8bb0:	f1c2 0c20 	rsble	ip, r2, #32
   d8bb4:	fa01 f102 	lsl.w	r1, r1, r2
   d8bb8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8bbc:	bfdc      	itt	le
   d8bbe:	ea41 010c 	orrle.w	r1, r1, ip
   d8bc2:	4090      	lslle	r0, r2
   d8bc4:	1ae4      	subs	r4, r4, r3
   d8bc6:	bfa2      	ittt	ge
   d8bc8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8bcc:	4329      	orrge	r1, r5
   d8bce:	bd30      	popge	{r4, r5, pc}
   d8bd0:	ea6f 0404 	mvn.w	r4, r4
   d8bd4:	3c1f      	subs	r4, #31
   d8bd6:	da1c      	bge.n	d8c12 <__adddf3+0x1d2>
   d8bd8:	340c      	adds	r4, #12
   d8bda:	dc0e      	bgt.n	d8bfa <__adddf3+0x1ba>
   d8bdc:	f104 0414 	add.w	r4, r4, #20
   d8be0:	f1c4 0220 	rsb	r2, r4, #32
   d8be4:	fa20 f004 	lsr.w	r0, r0, r4
   d8be8:	fa01 f302 	lsl.w	r3, r1, r2
   d8bec:	ea40 0003 	orr.w	r0, r0, r3
   d8bf0:	fa21 f304 	lsr.w	r3, r1, r4
   d8bf4:	ea45 0103 	orr.w	r1, r5, r3
   d8bf8:	bd30      	pop	{r4, r5, pc}
   d8bfa:	f1c4 040c 	rsb	r4, r4, #12
   d8bfe:	f1c4 0220 	rsb	r2, r4, #32
   d8c02:	fa20 f002 	lsr.w	r0, r0, r2
   d8c06:	fa01 f304 	lsl.w	r3, r1, r4
   d8c0a:	ea40 0003 	orr.w	r0, r0, r3
   d8c0e:	4629      	mov	r1, r5
   d8c10:	bd30      	pop	{r4, r5, pc}
   d8c12:	fa21 f004 	lsr.w	r0, r1, r4
   d8c16:	4629      	mov	r1, r5
   d8c18:	bd30      	pop	{r4, r5, pc}
   d8c1a:	f094 0f00 	teq	r4, #0
   d8c1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8c22:	bf06      	itte	eq
   d8c24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8c28:	3401      	addeq	r4, #1
   d8c2a:	3d01      	subne	r5, #1
   d8c2c:	e74e      	b.n	d8acc <__adddf3+0x8c>
   d8c2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8c32:	bf18      	it	ne
   d8c34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8c38:	d029      	beq.n	d8c8e <__adddf3+0x24e>
   d8c3a:	ea94 0f05 	teq	r4, r5
   d8c3e:	bf08      	it	eq
   d8c40:	ea90 0f02 	teqeq	r0, r2
   d8c44:	d005      	beq.n	d8c52 <__adddf3+0x212>
   d8c46:	ea54 0c00 	orrs.w	ip, r4, r0
   d8c4a:	bf04      	itt	eq
   d8c4c:	4619      	moveq	r1, r3
   d8c4e:	4610      	moveq	r0, r2
   d8c50:	bd30      	pop	{r4, r5, pc}
   d8c52:	ea91 0f03 	teq	r1, r3
   d8c56:	bf1e      	ittt	ne
   d8c58:	2100      	movne	r1, #0
   d8c5a:	2000      	movne	r0, #0
   d8c5c:	bd30      	popne	{r4, r5, pc}
   d8c5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8c62:	d105      	bne.n	d8c70 <__adddf3+0x230>
   d8c64:	0040      	lsls	r0, r0, #1
   d8c66:	4149      	adcs	r1, r1
   d8c68:	bf28      	it	cs
   d8c6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8c6e:	bd30      	pop	{r4, r5, pc}
   d8c70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8c74:	bf3c      	itt	cc
   d8c76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8c7a:	bd30      	popcc	{r4, r5, pc}
   d8c7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8c80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8c84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8c88:	f04f 0000 	mov.w	r0, #0
   d8c8c:	bd30      	pop	{r4, r5, pc}
   d8c8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8c92:	bf1a      	itte	ne
   d8c94:	4619      	movne	r1, r3
   d8c96:	4610      	movne	r0, r2
   d8c98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8c9c:	bf1c      	itt	ne
   d8c9e:	460b      	movne	r3, r1
   d8ca0:	4602      	movne	r2, r0
   d8ca2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8ca6:	bf06      	itte	eq
   d8ca8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8cac:	ea91 0f03 	teqeq	r1, r3
   d8cb0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8cb4:	bd30      	pop	{r4, r5, pc}
   d8cb6:	bf00      	nop

000d8cb8 <__aeabi_ui2d>:
   d8cb8:	f090 0f00 	teq	r0, #0
   d8cbc:	bf04      	itt	eq
   d8cbe:	2100      	moveq	r1, #0
   d8cc0:	4770      	bxeq	lr
   d8cc2:	b530      	push	{r4, r5, lr}
   d8cc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8cc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8ccc:	f04f 0500 	mov.w	r5, #0
   d8cd0:	f04f 0100 	mov.w	r1, #0
   d8cd4:	e750      	b.n	d8b78 <__adddf3+0x138>
   d8cd6:	bf00      	nop

000d8cd8 <__aeabi_i2d>:
   d8cd8:	f090 0f00 	teq	r0, #0
   d8cdc:	bf04      	itt	eq
   d8cde:	2100      	moveq	r1, #0
   d8ce0:	4770      	bxeq	lr
   d8ce2:	b530      	push	{r4, r5, lr}
   d8ce4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8ce8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8cec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8cf0:	bf48      	it	mi
   d8cf2:	4240      	negmi	r0, r0
   d8cf4:	f04f 0100 	mov.w	r1, #0
   d8cf8:	e73e      	b.n	d8b78 <__adddf3+0x138>
   d8cfa:	bf00      	nop

000d8cfc <__aeabi_f2d>:
   d8cfc:	0042      	lsls	r2, r0, #1
   d8cfe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8d02:	ea4f 0131 	mov.w	r1, r1, rrx
   d8d06:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8d0a:	bf1f      	itttt	ne
   d8d0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8d10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8d14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8d18:	4770      	bxne	lr
   d8d1a:	f092 0f00 	teq	r2, #0
   d8d1e:	bf14      	ite	ne
   d8d20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8d24:	4770      	bxeq	lr
   d8d26:	b530      	push	{r4, r5, lr}
   d8d28:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8d2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8d30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8d34:	e720      	b.n	d8b78 <__adddf3+0x138>
   d8d36:	bf00      	nop

000d8d38 <__aeabi_ul2d>:
   d8d38:	ea50 0201 	orrs.w	r2, r0, r1
   d8d3c:	bf08      	it	eq
   d8d3e:	4770      	bxeq	lr
   d8d40:	b530      	push	{r4, r5, lr}
   d8d42:	f04f 0500 	mov.w	r5, #0
   d8d46:	e00a      	b.n	d8d5e <__aeabi_l2d+0x16>

000d8d48 <__aeabi_l2d>:
   d8d48:	ea50 0201 	orrs.w	r2, r0, r1
   d8d4c:	bf08      	it	eq
   d8d4e:	4770      	bxeq	lr
   d8d50:	b530      	push	{r4, r5, lr}
   d8d52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8d56:	d502      	bpl.n	d8d5e <__aeabi_l2d+0x16>
   d8d58:	4240      	negs	r0, r0
   d8d5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8d5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8d62:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8d66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8d6a:	f43f aedc 	beq.w	d8b26 <__adddf3+0xe6>
   d8d6e:	f04f 0203 	mov.w	r2, #3
   d8d72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8d76:	bf18      	it	ne
   d8d78:	3203      	addne	r2, #3
   d8d7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8d7e:	bf18      	it	ne
   d8d80:	3203      	addne	r2, #3
   d8d82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8d86:	f1c2 0320 	rsb	r3, r2, #32
   d8d8a:	fa00 fc03 	lsl.w	ip, r0, r3
   d8d8e:	fa20 f002 	lsr.w	r0, r0, r2
   d8d92:	fa01 fe03 	lsl.w	lr, r1, r3
   d8d96:	ea40 000e 	orr.w	r0, r0, lr
   d8d9a:	fa21 f102 	lsr.w	r1, r1, r2
   d8d9e:	4414      	add	r4, r2
   d8da0:	e6c1      	b.n	d8b26 <__adddf3+0xe6>
   d8da2:	bf00      	nop

000d8da4 <__aeabi_dmul>:
   d8da4:	b570      	push	{r4, r5, r6, lr}
   d8da6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8daa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8dae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8db2:	bf1d      	ittte	ne
   d8db4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8db8:	ea94 0f0c 	teqne	r4, ip
   d8dbc:	ea95 0f0c 	teqne	r5, ip
   d8dc0:	f000 f8de 	bleq	d8f80 <__aeabi_dmul+0x1dc>
   d8dc4:	442c      	add	r4, r5
   d8dc6:	ea81 0603 	eor.w	r6, r1, r3
   d8dca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8dce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8dd2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8dd6:	bf18      	it	ne
   d8dd8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8ddc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8de0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8de4:	d038      	beq.n	d8e58 <__aeabi_dmul+0xb4>
   d8de6:	fba0 ce02 	umull	ip, lr, r0, r2
   d8dea:	f04f 0500 	mov.w	r5, #0
   d8dee:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8df2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8df6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8dfa:	f04f 0600 	mov.w	r6, #0
   d8dfe:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8e02:	f09c 0f00 	teq	ip, #0
   d8e06:	bf18      	it	ne
   d8e08:	f04e 0e01 	orrne.w	lr, lr, #1
   d8e0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8e10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8e14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8e18:	d204      	bcs.n	d8e24 <__aeabi_dmul+0x80>
   d8e1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8e1e:	416d      	adcs	r5, r5
   d8e20:	eb46 0606 	adc.w	r6, r6, r6
   d8e24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8e28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8e2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8e30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8e34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8e38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8e3c:	bf88      	it	hi
   d8e3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8e42:	d81e      	bhi.n	d8e82 <__aeabi_dmul+0xde>
   d8e44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8e48:	bf08      	it	eq
   d8e4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8e4e:	f150 0000 	adcs.w	r0, r0, #0
   d8e52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8e56:	bd70      	pop	{r4, r5, r6, pc}
   d8e58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8e5c:	ea46 0101 	orr.w	r1, r6, r1
   d8e60:	ea40 0002 	orr.w	r0, r0, r2
   d8e64:	ea81 0103 	eor.w	r1, r1, r3
   d8e68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8e6c:	bfc2      	ittt	gt
   d8e6e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8e72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8e76:	bd70      	popgt	{r4, r5, r6, pc}
   d8e78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8e7c:	f04f 0e00 	mov.w	lr, #0
   d8e80:	3c01      	subs	r4, #1
   d8e82:	f300 80ab 	bgt.w	d8fdc <__aeabi_dmul+0x238>
   d8e86:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8e8a:	bfde      	ittt	le
   d8e8c:	2000      	movle	r0, #0
   d8e8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8e92:	bd70      	pople	{r4, r5, r6, pc}
   d8e94:	f1c4 0400 	rsb	r4, r4, #0
   d8e98:	3c20      	subs	r4, #32
   d8e9a:	da35      	bge.n	d8f08 <__aeabi_dmul+0x164>
   d8e9c:	340c      	adds	r4, #12
   d8e9e:	dc1b      	bgt.n	d8ed8 <__aeabi_dmul+0x134>
   d8ea0:	f104 0414 	add.w	r4, r4, #20
   d8ea4:	f1c4 0520 	rsb	r5, r4, #32
   d8ea8:	fa00 f305 	lsl.w	r3, r0, r5
   d8eac:	fa20 f004 	lsr.w	r0, r0, r4
   d8eb0:	fa01 f205 	lsl.w	r2, r1, r5
   d8eb4:	ea40 0002 	orr.w	r0, r0, r2
   d8eb8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8ebc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8ec0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8ec4:	fa21 f604 	lsr.w	r6, r1, r4
   d8ec8:	eb42 0106 	adc.w	r1, r2, r6
   d8ecc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8ed0:	bf08      	it	eq
   d8ed2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8ed6:	bd70      	pop	{r4, r5, r6, pc}
   d8ed8:	f1c4 040c 	rsb	r4, r4, #12
   d8edc:	f1c4 0520 	rsb	r5, r4, #32
   d8ee0:	fa00 f304 	lsl.w	r3, r0, r4
   d8ee4:	fa20 f005 	lsr.w	r0, r0, r5
   d8ee8:	fa01 f204 	lsl.w	r2, r1, r4
   d8eec:	ea40 0002 	orr.w	r0, r0, r2
   d8ef0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8ef4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8ef8:	f141 0100 	adc.w	r1, r1, #0
   d8efc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8f00:	bf08      	it	eq
   d8f02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8f06:	bd70      	pop	{r4, r5, r6, pc}
   d8f08:	f1c4 0520 	rsb	r5, r4, #32
   d8f0c:	fa00 f205 	lsl.w	r2, r0, r5
   d8f10:	ea4e 0e02 	orr.w	lr, lr, r2
   d8f14:	fa20 f304 	lsr.w	r3, r0, r4
   d8f18:	fa01 f205 	lsl.w	r2, r1, r5
   d8f1c:	ea43 0302 	orr.w	r3, r3, r2
   d8f20:	fa21 f004 	lsr.w	r0, r1, r4
   d8f24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8f28:	fa21 f204 	lsr.w	r2, r1, r4
   d8f2c:	ea20 0002 	bic.w	r0, r0, r2
   d8f30:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8f34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8f38:	bf08      	it	eq
   d8f3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8f3e:	bd70      	pop	{r4, r5, r6, pc}
   d8f40:	f094 0f00 	teq	r4, #0
   d8f44:	d10f      	bne.n	d8f66 <__aeabi_dmul+0x1c2>
   d8f46:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8f4a:	0040      	lsls	r0, r0, #1
   d8f4c:	eb41 0101 	adc.w	r1, r1, r1
   d8f50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8f54:	bf08      	it	eq
   d8f56:	3c01      	subeq	r4, #1
   d8f58:	d0f7      	beq.n	d8f4a <__aeabi_dmul+0x1a6>
   d8f5a:	ea41 0106 	orr.w	r1, r1, r6
   d8f5e:	f095 0f00 	teq	r5, #0
   d8f62:	bf18      	it	ne
   d8f64:	4770      	bxne	lr
   d8f66:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8f6a:	0052      	lsls	r2, r2, #1
   d8f6c:	eb43 0303 	adc.w	r3, r3, r3
   d8f70:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8f74:	bf08      	it	eq
   d8f76:	3d01      	subeq	r5, #1
   d8f78:	d0f7      	beq.n	d8f6a <__aeabi_dmul+0x1c6>
   d8f7a:	ea43 0306 	orr.w	r3, r3, r6
   d8f7e:	4770      	bx	lr
   d8f80:	ea94 0f0c 	teq	r4, ip
   d8f84:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8f88:	bf18      	it	ne
   d8f8a:	ea95 0f0c 	teqne	r5, ip
   d8f8e:	d00c      	beq.n	d8faa <__aeabi_dmul+0x206>
   d8f90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8f94:	bf18      	it	ne
   d8f96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8f9a:	d1d1      	bne.n	d8f40 <__aeabi_dmul+0x19c>
   d8f9c:	ea81 0103 	eor.w	r1, r1, r3
   d8fa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8fa4:	f04f 0000 	mov.w	r0, #0
   d8fa8:	bd70      	pop	{r4, r5, r6, pc}
   d8faa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8fae:	bf06      	itte	eq
   d8fb0:	4610      	moveq	r0, r2
   d8fb2:	4619      	moveq	r1, r3
   d8fb4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8fb8:	d019      	beq.n	d8fee <__aeabi_dmul+0x24a>
   d8fba:	ea94 0f0c 	teq	r4, ip
   d8fbe:	d102      	bne.n	d8fc6 <__aeabi_dmul+0x222>
   d8fc0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8fc4:	d113      	bne.n	d8fee <__aeabi_dmul+0x24a>
   d8fc6:	ea95 0f0c 	teq	r5, ip
   d8fca:	d105      	bne.n	d8fd8 <__aeabi_dmul+0x234>
   d8fcc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8fd0:	bf1c      	itt	ne
   d8fd2:	4610      	movne	r0, r2
   d8fd4:	4619      	movne	r1, r3
   d8fd6:	d10a      	bne.n	d8fee <__aeabi_dmul+0x24a>
   d8fd8:	ea81 0103 	eor.w	r1, r1, r3
   d8fdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8fe0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8fe4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8fe8:	f04f 0000 	mov.w	r0, #0
   d8fec:	bd70      	pop	{r4, r5, r6, pc}
   d8fee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8ff2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8ff6:	bd70      	pop	{r4, r5, r6, pc}

000d8ff8 <__aeabi_ddiv>:
   d8ff8:	b570      	push	{r4, r5, r6, lr}
   d8ffa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8ffe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9002:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9006:	bf1d      	ittte	ne
   d9008:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d900c:	ea94 0f0c 	teqne	r4, ip
   d9010:	ea95 0f0c 	teqne	r5, ip
   d9014:	f000 f8a7 	bleq	d9166 <__aeabi_ddiv+0x16e>
   d9018:	eba4 0405 	sub.w	r4, r4, r5
   d901c:	ea81 0e03 	eor.w	lr, r1, r3
   d9020:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9024:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9028:	f000 8088 	beq.w	d913c <__aeabi_ddiv+0x144>
   d902c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9030:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9034:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9038:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d903c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9040:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9044:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9048:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d904c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9050:	429d      	cmp	r5, r3
   d9052:	bf08      	it	eq
   d9054:	4296      	cmpeq	r6, r2
   d9056:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d905a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d905e:	d202      	bcs.n	d9066 <__aeabi_ddiv+0x6e>
   d9060:	085b      	lsrs	r3, r3, #1
   d9062:	ea4f 0232 	mov.w	r2, r2, rrx
   d9066:	1ab6      	subs	r6, r6, r2
   d9068:	eb65 0503 	sbc.w	r5, r5, r3
   d906c:	085b      	lsrs	r3, r3, #1
   d906e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9072:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9076:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d907a:	ebb6 0e02 	subs.w	lr, r6, r2
   d907e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9082:	bf22      	ittt	cs
   d9084:	1ab6      	subcs	r6, r6, r2
   d9086:	4675      	movcs	r5, lr
   d9088:	ea40 000c 	orrcs.w	r0, r0, ip
   d908c:	085b      	lsrs	r3, r3, #1
   d908e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9092:	ebb6 0e02 	subs.w	lr, r6, r2
   d9096:	eb75 0e03 	sbcs.w	lr, r5, r3
   d909a:	bf22      	ittt	cs
   d909c:	1ab6      	subcs	r6, r6, r2
   d909e:	4675      	movcs	r5, lr
   d90a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d90a4:	085b      	lsrs	r3, r3, #1
   d90a6:	ea4f 0232 	mov.w	r2, r2, rrx
   d90aa:	ebb6 0e02 	subs.w	lr, r6, r2
   d90ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   d90b2:	bf22      	ittt	cs
   d90b4:	1ab6      	subcs	r6, r6, r2
   d90b6:	4675      	movcs	r5, lr
   d90b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d90bc:	085b      	lsrs	r3, r3, #1
   d90be:	ea4f 0232 	mov.w	r2, r2, rrx
   d90c2:	ebb6 0e02 	subs.w	lr, r6, r2
   d90c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d90ca:	bf22      	ittt	cs
   d90cc:	1ab6      	subcs	r6, r6, r2
   d90ce:	4675      	movcs	r5, lr
   d90d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d90d4:	ea55 0e06 	orrs.w	lr, r5, r6
   d90d8:	d018      	beq.n	d910c <__aeabi_ddiv+0x114>
   d90da:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d90de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d90e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d90e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d90ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d90ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d90f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d90f6:	d1c0      	bne.n	d907a <__aeabi_ddiv+0x82>
   d90f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d90fc:	d10b      	bne.n	d9116 <__aeabi_ddiv+0x11e>
   d90fe:	ea41 0100 	orr.w	r1, r1, r0
   d9102:	f04f 0000 	mov.w	r0, #0
   d9106:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d910a:	e7b6      	b.n	d907a <__aeabi_ddiv+0x82>
   d910c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9110:	bf04      	itt	eq
   d9112:	4301      	orreq	r1, r0
   d9114:	2000      	moveq	r0, #0
   d9116:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d911a:	bf88      	it	hi
   d911c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9120:	f63f aeaf 	bhi.w	d8e82 <__aeabi_dmul+0xde>
   d9124:	ebb5 0c03 	subs.w	ip, r5, r3
   d9128:	bf04      	itt	eq
   d912a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d912e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9132:	f150 0000 	adcs.w	r0, r0, #0
   d9136:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d913a:	bd70      	pop	{r4, r5, r6, pc}
   d913c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9140:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9144:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9148:	bfc2      	ittt	gt
   d914a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d914e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9152:	bd70      	popgt	{r4, r5, r6, pc}
   d9154:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9158:	f04f 0e00 	mov.w	lr, #0
   d915c:	3c01      	subs	r4, #1
   d915e:	e690      	b.n	d8e82 <__aeabi_dmul+0xde>
   d9160:	ea45 0e06 	orr.w	lr, r5, r6
   d9164:	e68d      	b.n	d8e82 <__aeabi_dmul+0xde>
   d9166:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d916a:	ea94 0f0c 	teq	r4, ip
   d916e:	bf08      	it	eq
   d9170:	ea95 0f0c 	teqeq	r5, ip
   d9174:	f43f af3b 	beq.w	d8fee <__aeabi_dmul+0x24a>
   d9178:	ea94 0f0c 	teq	r4, ip
   d917c:	d10a      	bne.n	d9194 <__aeabi_ddiv+0x19c>
   d917e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9182:	f47f af34 	bne.w	d8fee <__aeabi_dmul+0x24a>
   d9186:	ea95 0f0c 	teq	r5, ip
   d918a:	f47f af25 	bne.w	d8fd8 <__aeabi_dmul+0x234>
   d918e:	4610      	mov	r0, r2
   d9190:	4619      	mov	r1, r3
   d9192:	e72c      	b.n	d8fee <__aeabi_dmul+0x24a>
   d9194:	ea95 0f0c 	teq	r5, ip
   d9198:	d106      	bne.n	d91a8 <__aeabi_ddiv+0x1b0>
   d919a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d919e:	f43f aefd 	beq.w	d8f9c <__aeabi_dmul+0x1f8>
   d91a2:	4610      	mov	r0, r2
   d91a4:	4619      	mov	r1, r3
   d91a6:	e722      	b.n	d8fee <__aeabi_dmul+0x24a>
   d91a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d91ac:	bf18      	it	ne
   d91ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d91b2:	f47f aec5 	bne.w	d8f40 <__aeabi_dmul+0x19c>
   d91b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d91ba:	f47f af0d 	bne.w	d8fd8 <__aeabi_dmul+0x234>
   d91be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d91c2:	f47f aeeb 	bne.w	d8f9c <__aeabi_dmul+0x1f8>
   d91c6:	e712      	b.n	d8fee <__aeabi_dmul+0x24a>

000d91c8 <__aeabi_d2f>:
   d91c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d91cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d91d0:	bf24      	itt	cs
   d91d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d91d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d91da:	d90d      	bls.n	d91f8 <__aeabi_d2f+0x30>
   d91dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d91e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d91e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d91e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d91ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d91f0:	bf08      	it	eq
   d91f2:	f020 0001 	biceq.w	r0, r0, #1
   d91f6:	4770      	bx	lr
   d91f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d91fc:	d121      	bne.n	d9242 <__aeabi_d2f+0x7a>
   d91fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9202:	bfbc      	itt	lt
   d9204:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9208:	4770      	bxlt	lr
   d920a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d920e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9212:	f1c2 0218 	rsb	r2, r2, #24
   d9216:	f1c2 0c20 	rsb	ip, r2, #32
   d921a:	fa10 f30c 	lsls.w	r3, r0, ip
   d921e:	fa20 f002 	lsr.w	r0, r0, r2
   d9222:	bf18      	it	ne
   d9224:	f040 0001 	orrne.w	r0, r0, #1
   d9228:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d922c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9230:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9234:	ea40 000c 	orr.w	r0, r0, ip
   d9238:	fa23 f302 	lsr.w	r3, r3, r2
   d923c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9240:	e7cc      	b.n	d91dc <__aeabi_d2f+0x14>
   d9242:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9246:	d107      	bne.n	d9258 <__aeabi_d2f+0x90>
   d9248:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d924c:	bf1e      	ittt	ne
   d924e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9252:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9256:	4770      	bxne	lr
   d9258:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d925c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9260:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9264:	4770      	bx	lr
   d9266:	bf00      	nop

000d9268 <atol>:
   d9268:	220a      	movs	r2, #10
   d926a:	2100      	movs	r1, #0
   d926c:	f000 b962 	b.w	d9534 <strtol>

000d9270 <__cxa_atexit>:
   d9270:	b510      	push	{r4, lr}
   d9272:	4c05      	ldr	r4, [pc, #20]	; (d9288 <__cxa_atexit+0x18>)
   d9274:	4613      	mov	r3, r2
   d9276:	b12c      	cbz	r4, d9284 <__cxa_atexit+0x14>
   d9278:	460a      	mov	r2, r1
   d927a:	4601      	mov	r1, r0
   d927c:	2002      	movs	r0, #2
   d927e:	f3af 8000 	nop.w
   d9282:	bd10      	pop	{r4, pc}
   d9284:	4620      	mov	r0, r4
   d9286:	bd10      	pop	{r4, pc}
   d9288:	00000000 	.word	0x00000000

000d928c <memcmp>:
   d928c:	b510      	push	{r4, lr}
   d928e:	3901      	subs	r1, #1
   d9290:	4402      	add	r2, r0
   d9292:	4290      	cmp	r0, r2
   d9294:	d007      	beq.n	d92a6 <memcmp+0x1a>
   d9296:	f810 3b01 	ldrb.w	r3, [r0], #1
   d929a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d929e:	42a3      	cmp	r3, r4
   d92a0:	d0f7      	beq.n	d9292 <memcmp+0x6>
   d92a2:	1b18      	subs	r0, r3, r4
   d92a4:	bd10      	pop	{r4, pc}
   d92a6:	2000      	movs	r0, #0
   d92a8:	bd10      	pop	{r4, pc}

000d92aa <memcpy>:
   d92aa:	b510      	push	{r4, lr}
   d92ac:	1e43      	subs	r3, r0, #1
   d92ae:	440a      	add	r2, r1
   d92b0:	4291      	cmp	r1, r2
   d92b2:	d004      	beq.n	d92be <memcpy+0x14>
   d92b4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d92b8:	f803 4f01 	strb.w	r4, [r3, #1]!
   d92bc:	e7f8      	b.n	d92b0 <memcpy+0x6>
   d92be:	bd10      	pop	{r4, pc}

000d92c0 <memmove>:
   d92c0:	4288      	cmp	r0, r1
   d92c2:	b510      	push	{r4, lr}
   d92c4:	eb01 0302 	add.w	r3, r1, r2
   d92c8:	d801      	bhi.n	d92ce <memmove+0xe>
   d92ca:	1e42      	subs	r2, r0, #1
   d92cc:	e00b      	b.n	d92e6 <memmove+0x26>
   d92ce:	4298      	cmp	r0, r3
   d92d0:	d2fb      	bcs.n	d92ca <memmove+0xa>
   d92d2:	1881      	adds	r1, r0, r2
   d92d4:	1ad2      	subs	r2, r2, r3
   d92d6:	42d3      	cmn	r3, r2
   d92d8:	d004      	beq.n	d92e4 <memmove+0x24>
   d92da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d92de:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d92e2:	e7f8      	b.n	d92d6 <memmove+0x16>
   d92e4:	bd10      	pop	{r4, pc}
   d92e6:	4299      	cmp	r1, r3
   d92e8:	d004      	beq.n	d92f4 <memmove+0x34>
   d92ea:	f811 4b01 	ldrb.w	r4, [r1], #1
   d92ee:	f802 4f01 	strb.w	r4, [r2, #1]!
   d92f2:	e7f8      	b.n	d92e6 <memmove+0x26>
   d92f4:	bd10      	pop	{r4, pc}

000d92f6 <memset>:
   d92f6:	4402      	add	r2, r0
   d92f8:	4603      	mov	r3, r0
   d92fa:	4293      	cmp	r3, r2
   d92fc:	d002      	beq.n	d9304 <memset+0xe>
   d92fe:	f803 1b01 	strb.w	r1, [r3], #1
   d9302:	e7fa      	b.n	d92fa <memset+0x4>
   d9304:	4770      	bx	lr
	...

000d9308 <srand>:
   d9308:	b538      	push	{r3, r4, r5, lr}
   d930a:	4b12      	ldr	r3, [pc, #72]	; (d9354 <srand+0x4c>)
   d930c:	681c      	ldr	r4, [r3, #0]
   d930e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9310:	4605      	mov	r5, r0
   d9312:	b9d3      	cbnz	r3, d934a <srand+0x42>
   d9314:	2018      	movs	r0, #24
   d9316:	f7fe f859 	bl	d73cc <malloc>
   d931a:	f243 330e 	movw	r3, #13070	; 0x330e
   d931e:	63a0      	str	r0, [r4, #56]	; 0x38
   d9320:	8003      	strh	r3, [r0, #0]
   d9322:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9326:	8043      	strh	r3, [r0, #2]
   d9328:	f241 2334 	movw	r3, #4660	; 0x1234
   d932c:	8083      	strh	r3, [r0, #4]
   d932e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9332:	80c3      	strh	r3, [r0, #6]
   d9334:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9338:	8103      	strh	r3, [r0, #8]
   d933a:	2305      	movs	r3, #5
   d933c:	8143      	strh	r3, [r0, #10]
   d933e:	230b      	movs	r3, #11
   d9340:	8183      	strh	r3, [r0, #12]
   d9342:	2201      	movs	r2, #1
   d9344:	2300      	movs	r3, #0
   d9346:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d934a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d934c:	2200      	movs	r2, #0
   d934e:	611d      	str	r5, [r3, #16]
   d9350:	615a      	str	r2, [r3, #20]
   d9352:	bd38      	pop	{r3, r4, r5, pc}
   d9354:	2003dce4 	.word	0x2003dce4

000d9358 <rand>:
   d9358:	4b19      	ldr	r3, [pc, #100]	; (d93c0 <rand+0x68>)
   d935a:	b510      	push	{r4, lr}
   d935c:	681c      	ldr	r4, [r3, #0]
   d935e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9360:	b9d3      	cbnz	r3, d9398 <rand+0x40>
   d9362:	2018      	movs	r0, #24
   d9364:	f7fe f832 	bl	d73cc <malloc>
   d9368:	f243 330e 	movw	r3, #13070	; 0x330e
   d936c:	63a0      	str	r0, [r4, #56]	; 0x38
   d936e:	8003      	strh	r3, [r0, #0]
   d9370:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9374:	8043      	strh	r3, [r0, #2]
   d9376:	f241 2334 	movw	r3, #4660	; 0x1234
   d937a:	8083      	strh	r3, [r0, #4]
   d937c:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9380:	80c3      	strh	r3, [r0, #6]
   d9382:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9386:	8103      	strh	r3, [r0, #8]
   d9388:	2305      	movs	r3, #5
   d938a:	8143      	strh	r3, [r0, #10]
   d938c:	230b      	movs	r3, #11
   d938e:	8183      	strh	r3, [r0, #12]
   d9390:	2201      	movs	r2, #1
   d9392:	2300      	movs	r3, #0
   d9394:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9398:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d939a:	4c0a      	ldr	r4, [pc, #40]	; (d93c4 <rand+0x6c>)
   d939c:	690b      	ldr	r3, [r1, #16]
   d939e:	6948      	ldr	r0, [r1, #20]
   d93a0:	4a09      	ldr	r2, [pc, #36]	; (d93c8 <rand+0x70>)
   d93a2:	435c      	muls	r4, r3
   d93a4:	fb02 4000 	mla	r0, r2, r0, r4
   d93a8:	fba3 2302 	umull	r2, r3, r3, r2
   d93ac:	3201      	adds	r2, #1
   d93ae:	4403      	add	r3, r0
   d93b0:	f143 0300 	adc.w	r3, r3, #0
   d93b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d93b8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d93bc:	bd10      	pop	{r4, pc}
   d93be:	bf00      	nop
   d93c0:	2003dce4 	.word	0x2003dce4
   d93c4:	5851f42d 	.word	0x5851f42d
   d93c8:	4c957f2d 	.word	0x4c957f2d

000d93cc <strcmp>:
   d93cc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d93d0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d93d4:	2a01      	cmp	r2, #1
   d93d6:	bf28      	it	cs
   d93d8:	429a      	cmpcs	r2, r3
   d93da:	d0f7      	beq.n	d93cc <strcmp>
   d93dc:	1ad0      	subs	r0, r2, r3
   d93de:	4770      	bx	lr

000d93e0 <strcpy>:
   d93e0:	4603      	mov	r3, r0
   d93e2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d93e6:	f803 2b01 	strb.w	r2, [r3], #1
   d93ea:	2a00      	cmp	r2, #0
   d93ec:	d1f9      	bne.n	d93e2 <strcpy+0x2>
   d93ee:	4770      	bx	lr

000d93f0 <strlen>:
   d93f0:	4603      	mov	r3, r0
   d93f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d93f6:	2a00      	cmp	r2, #0
   d93f8:	d1fb      	bne.n	d93f2 <strlen+0x2>
   d93fa:	1a18      	subs	r0, r3, r0
   d93fc:	3801      	subs	r0, #1
   d93fe:	4770      	bx	lr

000d9400 <strncpy>:
   d9400:	b510      	push	{r4, lr}
   d9402:	4603      	mov	r3, r0
   d9404:	b142      	cbz	r2, d9418 <strncpy+0x18>
   d9406:	f811 4b01 	ldrb.w	r4, [r1], #1
   d940a:	f803 4b01 	strb.w	r4, [r3], #1
   d940e:	3a01      	subs	r2, #1
   d9410:	2c00      	cmp	r4, #0
   d9412:	d1f7      	bne.n	d9404 <strncpy+0x4>
   d9414:	441a      	add	r2, r3
   d9416:	e000      	b.n	d941a <strncpy+0x1a>
   d9418:	bd10      	pop	{r4, pc}
   d941a:	4293      	cmp	r3, r2
   d941c:	d002      	beq.n	d9424 <strncpy+0x24>
   d941e:	f803 4b01 	strb.w	r4, [r3], #1
   d9422:	e7fa      	b.n	d941a <strncpy+0x1a>
   d9424:	bd10      	pop	{r4, pc}
	...

000d9428 <_strtol_r>:
   d9428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d942c:	4680      	mov	r8, r0
   d942e:	4840      	ldr	r0, [pc, #256]	; (d9530 <_strtol_r+0x108>)
   d9430:	f8d0 9000 	ldr.w	r9, [r0]
   d9434:	460f      	mov	r7, r1
   d9436:	463d      	mov	r5, r7
   d9438:	f815 4b01 	ldrb.w	r4, [r5], #1
   d943c:	eb09 0004 	add.w	r0, r9, r4
   d9440:	7840      	ldrb	r0, [r0, #1]
   d9442:	f000 0008 	and.w	r0, r0, #8
   d9446:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d944a:	b108      	cbz	r0, d9450 <_strtol_r+0x28>
   d944c:	462f      	mov	r7, r5
   d944e:	e7f2      	b.n	d9436 <_strtol_r+0xe>
   d9450:	2c2d      	cmp	r4, #45	; 0x2d
   d9452:	d103      	bne.n	d945c <_strtol_r+0x34>
   d9454:	1cbd      	adds	r5, r7, #2
   d9456:	787c      	ldrb	r4, [r7, #1]
   d9458:	2601      	movs	r6, #1
   d945a:	e003      	b.n	d9464 <_strtol_r+0x3c>
   d945c:	2c2b      	cmp	r4, #43	; 0x2b
   d945e:	bf04      	itt	eq
   d9460:	787c      	ldrbeq	r4, [r7, #1]
   d9462:	1cbd      	addeq	r5, r7, #2
   d9464:	b113      	cbz	r3, d946c <_strtol_r+0x44>
   d9466:	2b10      	cmp	r3, #16
   d9468:	d10a      	bne.n	d9480 <_strtol_r+0x58>
   d946a:	e05b      	b.n	d9524 <_strtol_r+0xfc>
   d946c:	2c30      	cmp	r4, #48	; 0x30
   d946e:	d157      	bne.n	d9520 <_strtol_r+0xf8>
   d9470:	7828      	ldrb	r0, [r5, #0]
   d9472:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9476:	2858      	cmp	r0, #88	; 0x58
   d9478:	d14d      	bne.n	d9516 <_strtol_r+0xee>
   d947a:	786c      	ldrb	r4, [r5, #1]
   d947c:	2310      	movs	r3, #16
   d947e:	3502      	adds	r5, #2
   d9480:	2e00      	cmp	r6, #0
   d9482:	bf14      	ite	ne
   d9484:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d9488:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d948c:	2700      	movs	r7, #0
   d948e:	fbbc faf3 	udiv	sl, ip, r3
   d9492:	4638      	mov	r0, r7
   d9494:	fb03 cc1a 	mls	ip, r3, sl, ip
   d9498:	eb09 0e04 	add.w	lr, r9, r4
   d949c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d94a0:	f01e 0f04 	tst.w	lr, #4
   d94a4:	d001      	beq.n	d94aa <_strtol_r+0x82>
   d94a6:	3c30      	subs	r4, #48	; 0x30
   d94a8:	e00b      	b.n	d94c2 <_strtol_r+0x9a>
   d94aa:	f01e 0e03 	ands.w	lr, lr, #3
   d94ae:	d01b      	beq.n	d94e8 <_strtol_r+0xc0>
   d94b0:	f1be 0f01 	cmp.w	lr, #1
   d94b4:	bf0c      	ite	eq
   d94b6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d94ba:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d94be:	ebce 0404 	rsb	r4, lr, r4
   d94c2:	42a3      	cmp	r3, r4
   d94c4:	dd10      	ble.n	d94e8 <_strtol_r+0xc0>
   d94c6:	f1b7 3fff 	cmp.w	r7, #4294967295
   d94ca:	d00a      	beq.n	d94e2 <_strtol_r+0xba>
   d94cc:	4550      	cmp	r0, sl
   d94ce:	d806      	bhi.n	d94de <_strtol_r+0xb6>
   d94d0:	d101      	bne.n	d94d6 <_strtol_r+0xae>
   d94d2:	4564      	cmp	r4, ip
   d94d4:	dc03      	bgt.n	d94de <_strtol_r+0xb6>
   d94d6:	fb03 4000 	mla	r0, r3, r0, r4
   d94da:	2701      	movs	r7, #1
   d94dc:	e001      	b.n	d94e2 <_strtol_r+0xba>
   d94de:	f04f 37ff 	mov.w	r7, #4294967295
   d94e2:	f815 4b01 	ldrb.w	r4, [r5], #1
   d94e6:	e7d7      	b.n	d9498 <_strtol_r+0x70>
   d94e8:	1c7b      	adds	r3, r7, #1
   d94ea:	d10c      	bne.n	d9506 <_strtol_r+0xde>
   d94ec:	2e00      	cmp	r6, #0
   d94ee:	f04f 0322 	mov.w	r3, #34	; 0x22
   d94f2:	bf14      	ite	ne
   d94f4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d94f8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d94fc:	f8c8 3000 	str.w	r3, [r8]
   d9500:	b92a      	cbnz	r2, d950e <_strtol_r+0xe6>
   d9502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9506:	b106      	cbz	r6, d950a <_strtol_r+0xe2>
   d9508:	4240      	negs	r0, r0
   d950a:	b172      	cbz	r2, d952a <_strtol_r+0x102>
   d950c:	b107      	cbz	r7, d9510 <_strtol_r+0xe8>
   d950e:	1e69      	subs	r1, r5, #1
   d9510:	6011      	str	r1, [r2, #0]
   d9512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9516:	2430      	movs	r4, #48	; 0x30
   d9518:	2b00      	cmp	r3, #0
   d951a:	d1b1      	bne.n	d9480 <_strtol_r+0x58>
   d951c:	2308      	movs	r3, #8
   d951e:	e7af      	b.n	d9480 <_strtol_r+0x58>
   d9520:	230a      	movs	r3, #10
   d9522:	e7ad      	b.n	d9480 <_strtol_r+0x58>
   d9524:	2c30      	cmp	r4, #48	; 0x30
   d9526:	d0a3      	beq.n	d9470 <_strtol_r+0x48>
   d9528:	e7aa      	b.n	d9480 <_strtol_r+0x58>
   d952a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d952e:	bf00      	nop
   d9530:	2003dc80 	.word	0x2003dc80

000d9534 <strtol>:
   d9534:	4613      	mov	r3, r2
   d9536:	460a      	mov	r2, r1
   d9538:	4601      	mov	r1, r0
   d953a:	4802      	ldr	r0, [pc, #8]	; (d9544 <strtol+0x10>)
   d953c:	6800      	ldr	r0, [r0, #0]
   d953e:	f7ff bf73 	b.w	d9428 <_strtol_r>
   d9542:	bf00      	nop
   d9544:	2003dce4 	.word	0x2003dce4

000d9548 <dynalib_user>:
   d9548:	000d4021 000d405d 000d4089 000d408d     !@..]@...@...@..
   d9558:	00000000                                ....

000d955c <_ZTVN8particle13__SPISettingsE>:
	...
   d9564:	000d40d1                                .@..

000d9568 <_ZTV6SdFile>:
	...
   d9570:	000d40cd 000d412f 000d4185 000d4129     .@../A...A..)A..
   d9580:	61666564 20746c75 42534d00 42534c00     default .MSB.LSB
   d9590:	50533c00 74655349 676e6974 65642073     .<SPISettings de
   d95a0:	6c756166 3c003e74 53495053 69747465     fault>.<SPISetti
   d95b0:	2073676e 6c257325 73252075 444f4d20     ngs %s%lu %s MOD
   d95c0:	3e642545 6e6f4300 7463656e 20676e69     E%d>.Connecting 
   d95d0:	4d206f74 2e545451 00202e2e 72746552     to MQTT... .Retr
   d95e0:	676e6979 54514d20 6f632054 63656e6e     ying MQTT connec
   d95f0:	6e6f6974 206e6920 65732035 646e6f63     tion in 5 second
   d9600:	2e2e2e73 54514d00 6f432054 63656e6e     s....MQTT Connec
   d9610:	21646574 73694400 636e6174 6e692065     ted!.Distance in
   d9620:	3a4d4320 2e302520 0a206632 20692500      CM: %0.2f ..%i 
   d9630:	65746173 74696c6c 69207365 6976206e     satellites in vi
   d9640:	2d207765 00202d2d 656d6954 3025203a     ew --- .Time: %0
   d9650:	253a6932 3a693230 69323025 2d2d2d20     2i:%02i:%02i ---
   d9660:	616c0020 25203a74 6c202c66 3a676e6f      .lat: %f, long:
   d9670:	2c662520 746c6120 6625203a 25000a20      %f, alt: %f ..%
   d9680:	6d20756c 696c6c69 6f636573 2073646e     lu milliseconds 
   d9690:	67206f74 47207465 66205350 6e007869     to get GPS fix.n
   d96a0:	6f6c206f 69746163 6c006e6f 20737365     o location.less 
   d96b0:	6e616874 35323120 63006d63 7261656c     than 125cm.clear
   d96c0:	69725700 676e6974 74616420 6f742061     .Writing data to
   d96d0:	63445320 20647261 6144000a 25203a79      SDcard ..Day: %
   d96e0:	4d202c69 68746e6f 2c692520 61655920     i, Month %i, Yea
   d96f0:	69252072 54000a20 3a656d69 32302520     r %i ..Time: %02
   d9700:	30253a69 253a6932 20693230 616c000a     i:%02i:%02i ..la
   d9710:	25202074 6c0a2066 20676e6f 0a206625     t  %f .long %f .
   d9720:	20746c61 000a6625 65746153 74696c6c     alt %f..Satellit
   d9730:	69207365 6976206e 203a7765 0a206925     es in view: %i .
   d9740:	6e695000 676e6967 54514d20 000a2054     .Pinging MQTT ..
   d9750:	63736944 656e6e6f 6e697463 000a2067     Disconnecting ..
   d9760:	6c627550 69687369 4420676e 20617461     Publishing Data 
   d9770:	7453000a 69747261 4420676e 20617461     ..Starting Data 
   d9780:	67676f4c 20676e69 6143000a 2074276e     Logging ..Can't 
   d9790:	61657263 66206574 20656c69 656d616e     create file name
   d97a0:	6c696600 706f2e65 4c006e65 6967676f     .file.open.Loggi
   d97b0:	7420676e 25203a6f 000a2073 656e6f44     ng to: %s ..Done
   d97c0:	52000a20 79646165 726f6620 78656e20      ..Ready for nex
   d97d0:	61642074 6c206174 0a20676f 69727700     t data log ..wri
   d97e0:	65206574 726f7272 43000a20 74276e61     te error ..Can't
   d97f0:	63636120 20737365 63204453 2e647261      access SD card.
   d9800:	206f4420 20746f6e 6f666572 74616d72      Do not reformat
   d9810:	6f4e002e 72616320 77202c64 676e6f72     ..No card, wrong
   d9820:	69686320 65732070 7463656c 6e697020      chip select pin
   d9830:	726f202c 49505320 6f727020 6d656c62     , or SPI problem
   d9840:	4453003f 72726520 6f43726f 203a6564     ?.SD errorCode: 
   d9850:	2c005830 49005830 6c61766e 66206469     0X.,0X.Invalid f
   d9860:	616d726f 72202c74 726f6665 2074616d     ormat, reformat 
   d9870:	002e4453 276e6143 706f2074 72206e65     SD..Can't open r
   d9880:	20746f6f 65726964 726f7463 4e002e79     oot directory..N
   d9890:	7265206f 20726f72 6e756f66 54002e64     o error found..T
   d98a0:	53656d69 706d6174 6152202c 6d6f646e     imeStamp, Random
   d98b0:	74614420 69252061 61000a20 6d657474      Data %i ..attem
   d98c0:	31207470 654c0039 62415f65 61747965     pt 19.Lee_Abeyta
   d98d0:	2e6f6900 66616461 74697572 6d6f632e     .io.adafruit.com
   d98e0:	6f696100 7653615f 34303764 64496d32     .aio_aSvd7042mId
   d98f0:	616a6241 6d686f4d 75636d54 384e7133     AbjaMohmTmcu3qN8
   d9900:	654c0039 62415f65 61747965 6565662f     9.Lee_Abeyta/fee
   d9910:	4c2f7364 74697461 00656475 5f65654c     ds/Latitude.Lee_
   d9920:	79656241 662f6174 73646565 6e6f4c2f     Abeyta/feeds/Lon
   d9930:	75746967 4c006564 415f6565 74796562     gitude.Lee_Abeyt
   d9940:	65662f61 2f736465 69746c41 65647574     a/feeds/Altitude
   d9950:	65654c00 6562415f 2f617479 64656566     .Lee_Abeyta/feed
   d9960:	69442f73 6e617473 69206563 4d43206e     s/Distance in CM
   d9970:	00000000                                ....

000d9974 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   d997c:	000d40cf 000d4aa5 000d4c11 000d4cbd     .@...J...L...L..
   d998c:	000d4cef 000d4c25 000d4c65              .L..%L..eL..

000d9998 <_ZTV13Adafruit_MQTT>:
	...
   d99a8:	000d40a9 000d40a9 000d40a9 000d40a9     .@...@...@...@..
   d99b8:	000d40a9                                .@..

000d99bc <CSWTCH.52>:
   d99bc:	000d9a1f 000d9a33 000d9a03 000d9a45     ....3.......E...
   d99cc:	000d9a8a 000d9acf 000d9aef 000d9b22     ............"...
   d99dc:	000d9b3c 000d9b73 78305b20 5d003000     <...s... [0x.0.]
   d99ec:	0a00202c 72440009 6570706f 20612064     , ....Dropped a 
   d99fc:	6b636170 55007465 6f6e6b6e 65206e77     packet.Unknown e
   d9a0c:	726f7272 54514d00 25250054 252e6425     rror.MQTT.%%%d.%
   d9a1c:	46006664 656c6961 6f742064 62757320     df.Failed to sub
   d9a2c:	69726373 43006562 656e6e6f 6f697463     scribe.Connectio
   d9a3c:	6166206e 64656c69 65685400 72655320     n failed.The Ser
   d9a4c:	20726576 73656f64 746f6e20 70757320     ver does not sup
   d9a5c:	74726f70 65687420 76656c20 6f206c65     port the level o
   d9a6c:	68742066 514d2065 70205454 6f746f72     f the MQTT proto
   d9a7c:	206c6f63 75716572 65747365 68540064     col requested.Th
   d9a8c:	6c432065 746e6569 65646920 6669746e     e Client identif
   d9a9c:	20726569 63207369 6572726f 55207463     ier is correct U
   d9aac:	382d4654 74756220 746f6e20 6c6c6120     TF-8 but not all
   d9abc:	6465776f 20796220 20656874 76726553     owed by the Serv
   d9acc:	54007265 4d206568 20545451 76726573     er.The MQTT serv
   d9adc:	20656369 75207369 6176616e 62616c69     ice is unavailab
   d9aec:	5400656c 64206568 20617461 74206e69     le.The data in t
   d9afc:	75206568 20726573 656d616e 20726f20     he user name or 
   d9b0c:	73736170 64726f77 20736920 666c616d     password is malf
   d9b1c:	656d726f 6f4e0064 75612074 726f6874     ormed.Not author
   d9b2c:	64657a69 206f7420 6e6e6f63 00746365     ized to connect.
   d9b3c:	65637845 64656465 63657220 656e6e6f     Exceeded reconne
   d9b4c:	72207463 20657461 696d696c 50202e74     ct rate limit. P
   d9b5c:	7361656c 72742065 67612079 206e6961     lease try again 
   d9b6c:	6574616c 59002e72 6820756f 20657661     later..You have 
   d9b7c:	6e656562 6e616220 2064656e 6d6f7266     been banned from
   d9b8c:	6e6f6320 7463656e 2e676e69 656c5020      connecting. Ple
   d9b9c:	20657361 746e6f63 20746361 20656874     ase contact the 
   d9bac:	5454514d 72657320 20726576 696d6461     MQTT server admi
   d9bbc:	7473696e 6f746172 6f662072 6f6d2072     nistrator for mo
   d9bcc:	64206572 69617465 002e736c 4d525047     re details..GPRM
   d9bdc:	50470043 00414747 4e4e004e 4e450045     C.GPGGA.N.NNE.EN
   d9bec:	53450045 53530045 00530045 00575353     E.ESE.SSE.S.SSW.
   d9bfc:	00575357 00574e57 00574e4e              WSW.WNW.NNW.

000d9c08 <_ZTVN5spark13EthernetClassE>:
	...
   d9c10:	000d747b 000d7471 000d7467 000d745d     {t..qt..gt..]t..
   d9c20:	000d7451 000d7445 000d7439 000d7431     Qt..Et..9t..1t..
   d9c30:	000d7427 000d741d 000d8519              't...t......

000d9c3c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9c3c:	18100800 38302820 64756162 72655300     .... (08baud.Ser
   d9c4c:	006c6169 69726553 00316c61 65707974     ial.Serial1.type
   d9c5c:	72617000 63006d61 6900646d 6e680064     .param.cmd.id.hn
   d9c6c:	74730064 66006d72 00746c69 006c766c     d.strm.filt.lvl.
   d9c7c:	48646461 6c646e61 72007265 766f6d65     addHandler.remov
   d9c8c:	6e614865 72656c64 756e6500 6e61486d     eHandler.enumHan
   d9c9c:	72656c64 534a0073 74534e4f 6d616572     dlers.JSONStream
   d9cac:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   d9cbc:	75303130 205d0020 3a292800 5b200020     010u .] .(): . [
   d9ccc:	646f6300 203d2065 00692500 61746564     .code = .%i.deta
   d9cdc:	20736c69 0d00203d 6e6c000a 006e6600     ils = ....ln.fn.
   d9cec:	65646f63 74656400 006c6961 656e6f6e     code.detail.none
   d9cfc:	61727400 69006563 006f666e 6e726177     .trace.info.warn
   d9d0c:	6e617000 61006369 5a006c6c 302b2500     .panic.all.Z.%+0
   d9d1c:	253a6433 00753230 252d5925 64252d6d     3d:%02u.%Y-%m-%d
   d9d2c:	3a482554 253a4d25 007a2553 74637361     T%H:%M:%S%z.asct
   d9d3c:	00656d69                                ime.

000d9d40 <_ZTV9IPAddress>:
	...
   d9d48:	000d795d 000d794d 000d794f              ]y..My..Oy..

000d9d54 <_ZTV9USBSerial>:
	...
   d9d5c:	000d7a61 000d7ab1 000d7abf 000d76b1     az...z...z...v..
   d9d6c:	000d7a9d 000d7a63 000d7a79 000d7aab     .z..cz..yz...z..
   d9d7c:	000d7a8f 000d7a5d                       .z..]z..

000d9d84 <_ZTV11USARTSerial>:
	...
   d9d8c:	000d7b6d 000d7bbd 000d7bcb 000d76b1     m{...{...{...v..
   d9d9c:	000d7b81 000d7ba3 000d7b8f 000d7bb7     .{...{...{...{..
   d9dac:	000d7b6f 000d7b73                       o{..s{..

000d9db4 <_ZTV7TwoWire>:
	...
   d9dbc:	000d7c7d 000d7cc7 000d7c9f 000d7c7f     }|...|...|...|..
   d9dcc:	000d7ca7 000d7caf 000d7cb7 000d7cbf     .|...|...|...|..

000d9ddc <_ZTVN5spark9MeshClassE>:
	...
   d9de4:	000d7d89 000d7d7f 000d7d75 000d7d6b     .}...}..u}..k}..
   d9df4:	000d7d5f 000d7d53 000d7d47 000d7d3f     _}..S}..G}..?}..
   d9e04:	000d7d35 000d7d2b 000d8519              5}..+}......

000d9e10 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9e18:	000d7f2d 000d7f33 000d841b 000d7f41     -...3.......A...
   d9e28:	000d7f2f                                /...

000d9e2c <_ZTV9TCPClient>:
	...
   d9e34:	000d4151 000d419d 000d7ea5 000d7ebf     QA...A...~...~..
   d9e44:	000d82c1 000d8013 000d7fe5 000d7ee9     .............~..
   d9e54:	000d819d 000d8099 000d8047 000d8291     ........G.......
   d9e64:	000d7eeb 000d7f23 000d7ed1 000d7f45     .~..#....~..E...
   d9e74:	000d7fc5 69726977 7200676e 20766365     ....wiring.recv 
   d9e84:	6f727265 203d2072 00006425              error = %d..

000d9e90 <_ZTVN5spark9WiFiClassE>:
	...
   d9e98:	000d8491 000d8487 000d847d 000d8433     ........}...3...
   d9ea8:	000d8471 000d8465 000d8459 000d8451     q...e...Y...Q...
   d9eb8:	000d8447 000d843d 000d8519              G...=.......

000d9ec4 <_ZTVN5spark12NetworkClassE>:
	...
   d9ecc:	000d84b1 000d84bb 000d84c5 000d84cf     ................
   d9edc:	000d84d9 000d84e5 000d84f1 000d84fd     ................
   d9eec:	000d8505 000d850f 000d8519              ............

000d9ef8 <_ZSt7nothrow>:
	...

000d9ef9 <_ctype_>:
   d9ef9:	20202000 20202020 28282020 20282828     .         ((((( 
   d9f09:	20202020 20202020 20202020 20202020                     
   d9f19:	10108820 10101010 10101010 10101010      ...............
   d9f29:	04040410 04040404 10040404 10101010     ................
   d9f39:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d9f49:	01010101 01010101 01010101 10101010     ................
   d9f59:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d9f69:	02020202 02020202 02020202 10101010     ................
   d9f79:	00000020 00000000 00000000 00000000      ...............
	...

000d9ffc <__sf_fake_stdin>:
	...

000da01c <__sf_fake_stdout>:
	...

000da03c <__sf_fake_stderr>:
	...

000da05c <link_const_variable_data_end>:
   da05c:	000d4ab5 	.word	0x000d4ab5
   da060:	000d4c09 	.word	0x000d4c09
   da064:	000d4c0d 	.word	0x000d4c0d
   da068:	000d4d4f 	.word	0x000d4d4f
   da06c:	000d5215 	.word	0x000d5215
   da070:	000d5219 	.word	0x000d5219
   da074:	000d521d 	.word	0x000d521d
   da078:	000d5845 	.word	0x000d5845
   da07c:	000d5849 	.word	0x000d5849
   da080:	000d584d 	.word	0x000d584d
   da084:	000d5851 	.word	0x000d5851
   da088:	000d5ef5 	.word	0x000d5ef5
   da08c:	000d5f19 	.word	0x000d5f19
   da090:	000d5f1d 	.word	0x000d5f1d
   da094:	000d6241 	.word	0x000d6241
   da098:	000d6245 	.word	0x000d6245
   da09c:	000d6249 	.word	0x000d6249
   da0a0:	000d6783 	.word	0x000d6783
   da0a4:	000d6787 	.word	0x000d6787
   da0a8:	000d678b 	.word	0x000d678b
   da0ac:	000d6831 	.word	0x000d6831
   da0b0:	000d6eb1 	.word	0x000d6eb1
   da0b4:	000d7485 	.word	0x000d7485
   da0b8:	000d7645 	.word	0x000d7645
   da0bc:	000d7689 	.word	0x000d7689
   da0c0:	000d77d9 	.word	0x000d77d9
   da0c4:	000d77e9 	.word	0x000d77e9
   da0c8:	000d7821 	.word	0x000d7821
   da0cc:	000d7e55 	.word	0x000d7e55
   da0d0:	000d849d 	.word	0x000d849d
   da0d4:	000d85e5 	.word	0x000d85e5
   da0d8:	000d87a5 	.word	0x000d87a5
   da0dc:	000d8829 	.word	0x000d8829
   da0e0:	000d88ed 	.word	0x000d88ed
   da0e4:	000d89b1 	.word	0x000d89b1

000da0e8 <link_constructors_end>:
	...
